; Listing generated by Microsoft (R) Optimizing Compiler Version 19.20.27525.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_06CJNJFBNP@1?42?411@			; `string'
CONST	ENDS
;	COMDAT ??_C@_06CJNJFBNP@1?42?411@
CONST	SEGMENT
??_C@_06CJNJFBNP@1?42?411@ DB '1.2.11', 00H		; `string'
__95347B96_ctype@h DB 01H
__149DB6BE_basetsd@h DB 01H
__9CFFAB73_corecrt_memcpy_s@h DB 01H
__55B7CB8D_corecrt_wstring@h DB 01H
__2F7506B6_string@h DB 01H
__5BA8817F_winnt@h DB 01H
__8421AFE7_processthreadsapi@h DB 01H
__F192E00B_memoryapi@h DB 01H
__0DF854E2_winerror@h DB 01H
__940BF1C4_winbase@h DB 01H
__78A3E64A_stralign@h DB 01H
__0603D84E_compress@c DB 01H
PUBLIC	compressBound
PUBLIC	compress
PUBLIC	compress2
;	COMDAT pdata
pdata	SEGMENT
$pdata$compressBound DD imagerel $LN4
	DD	imagerel $LN4+81
	DD	imagerel $unwind$compressBound
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$compress DD imagerel $LN4
	DD	imagerel $LN4+96
	DD	imagerel $unwind$compress
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$compress2 DD imagerel $LN18
	DD	imagerel $LN18+575
	DD	imagerel $unwind$compress2
;	COMDAT xdata
xdata	SEGMENT
$unwind$compress2 DD 033301H
	DD	016011cH
	DD	07015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
compress2$rtcName$0 DB 073H
	DB	074H
	DB	072H
	DB	065H
	DB	061H
	DB	06dH
	DB	00H
	ORG $+9
compress2$rtcVarDesc DD 030H
	DD	058H
	DQ	FLAT:compress2$rtcName$0
	ORG $+48
compress2$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:compress2$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$compress DD 022d01H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$compressBound DD 021c01H
	DD	070053209H
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\compress.c
;	COMDAT compress2
_TEXT	SEGMENT
stream$ = 48
err$ = 148
max$ = 152
left$ = 156
tv72 = 160
tv76 = 164
tv80 = 168
tv86 = 172
dest$ = 192
destLen$ = 200
source$ = 208
sourceLen$ = 216
level$ = 224
compress2 PROC						; COMDAT

; 28   : {

$LN18:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+192]
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0003a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 29   :     z_stream stream;
; 30   :     int err;
; 31   :     const uInt max = (uInt)-1;

  0003f	c7 84 24 98 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR max$[rsp], -1	; ffffffffH

; 32   :     uLong left;
; 33   : 
; 34   :     left = *destLen;

  0004a	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR destLen$[rsp]
  00052	8b 00		 mov	 eax, DWORD PTR [rax]
  00054	89 84 24 9c 00
	00 00		 mov	 DWORD PTR left$[rsp], eax

; 35   :     *destLen = 0;

  0005b	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR destLen$[rsp]
  00063	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 36   : 
; 37   :     stream.zalloc = (alloc_func)0;

  00069	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR stream$[rsp+48], 0

; 38   :     stream.zfree = (free_func)0;

  00072	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR stream$[rsp+56], 0

; 39   :     stream.opaque = (voidpf)0;

  0007b	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR stream$[rsp+64], 0

; 40   : 
; 41   :     err = deflateInit(&stream, level);

  00084	41 b9 58 00 00
	00		 mov	 r9d, 88			; 00000058H
  0008a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06CJNJFBNP@1?42?411@
  00091	8b 94 24 e0 00
	00 00		 mov	 edx, DWORD PTR level$[rsp]
  00098	48 8d 4c 24 30	 lea	 rcx, QWORD PTR stream$[rsp]
  0009d	e8 00 00 00 00	 call	 deflateInit_
  000a2	89 84 24 94 00
	00 00		 mov	 DWORD PTR err$[rsp], eax

; 42   :     if (err != Z_OK) return err;

  000a9	83 bc 24 94 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  000b1	74 0c		 je	 SHORT $LN5@compress2
  000b3	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR err$[rsp]
  000ba	e9 62 01 00 00	 jmp	 $LN1@compress2
$LN5@compress2:

; 43   : 
; 44   :     stream.next_out = dest;

  000bf	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR dest$[rsp]
  000c7	48 89 44 24 40	 mov	 QWORD PTR stream$[rsp+16], rax

; 45   :     stream.avail_out = 0;

  000cc	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR stream$[rsp+24], 0

; 46   :     stream.next_in = (z_const Bytef *)source;

  000d4	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR source$[rsp]
  000dc	48 89 44 24 30	 mov	 QWORD PTR stream$[rsp], rax

; 47   :     stream.avail_in = 0;

  000e1	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR stream$[rsp+8], 0
$LN4@compress2:

; 48   : 
; 49   :     do {
; 50   :         if (stream.avail_out == 0) {

  000e9	83 7c 24 48 00	 cmp	 DWORD PTR stream$[rsp+24], 0
  000ee	75 4f		 jne	 SHORT $LN6@compress2

; 51   :             stream.avail_out = left > (uLong)max ? max : (uInt)left;

  000f0	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR max$[rsp]
  000f7	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR left$[rsp], eax
  000fe	76 10		 jbe	 SHORT $LN9@compress2
  00100	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR max$[rsp]
  00107	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv72[rsp], eax
  0010e	eb 0e		 jmp	 SHORT $LN10@compress2
$LN9@compress2:
  00110	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR left$[rsp]
  00117	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv72[rsp], eax
$LN10@compress2:
  0011e	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR tv72[rsp]
  00125	89 44 24 48	 mov	 DWORD PTR stream$[rsp+24], eax

; 52   :             left -= stream.avail_out;

  00129	8b 44 24 48	 mov	 eax, DWORD PTR stream$[rsp+24]
  0012d	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR left$[rsp]
  00134	2b c8		 sub	 ecx, eax
  00136	8b c1		 mov	 eax, ecx
  00138	89 84 24 9c 00
	00 00		 mov	 DWORD PTR left$[rsp], eax
$LN6@compress2:

; 53   :         }
; 54   :         if (stream.avail_in == 0) {

  0013f	83 7c 24 38 00	 cmp	 DWORD PTR stream$[rsp+8], 0
  00144	75 4f		 jne	 SHORT $LN7@compress2

; 55   :             stream.avail_in = sourceLen > (uLong)max ? max : (uInt)sourceLen;

  00146	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR max$[rsp]
  0014d	39 84 24 d8 00
	00 00		 cmp	 DWORD PTR sourceLen$[rsp], eax
  00154	76 10		 jbe	 SHORT $LN11@compress2
  00156	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR max$[rsp]
  0015d	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv76[rsp], eax
  00164	eb 0e		 jmp	 SHORT $LN12@compress2
$LN11@compress2:
  00166	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR sourceLen$[rsp]
  0016d	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv76[rsp], eax
$LN12@compress2:
  00174	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR tv76[rsp]
  0017b	89 44 24 38	 mov	 DWORD PTR stream$[rsp+8], eax

; 56   :             sourceLen -= stream.avail_in;

  0017f	8b 44 24 38	 mov	 eax, DWORD PTR stream$[rsp+8]
  00183	8b 8c 24 d8 00
	00 00		 mov	 ecx, DWORD PTR sourceLen$[rsp]
  0018a	2b c8		 sub	 ecx, eax
  0018c	8b c1		 mov	 eax, ecx
  0018e	89 84 24 d8 00
	00 00		 mov	 DWORD PTR sourceLen$[rsp], eax
$LN7@compress2:

; 57   :         }
; 58   :         err = deflate(&stream, sourceLen ? Z_NO_FLUSH : Z_FINISH);

  00195	83 bc 24 d8 00
	00 00 00	 cmp	 DWORD PTR sourceLen$[rsp], 0
  0019d	74 0d		 je	 SHORT $LN13@compress2
  0019f	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv80[rsp], 0
  001aa	eb 0b		 jmp	 SHORT $LN14@compress2
$LN13@compress2:
  001ac	c7 84 24 a8 00
	00 00 04 00 00
	00		 mov	 DWORD PTR tv80[rsp], 4
$LN14@compress2:
  001b7	8b 94 24 a8 00
	00 00		 mov	 edx, DWORD PTR tv80[rsp]
  001be	48 8d 4c 24 30	 lea	 rcx, QWORD PTR stream$[rsp]
  001c3	e8 00 00 00 00	 call	 deflate
  001c8	89 84 24 94 00
	00 00		 mov	 DWORD PTR err$[rsp], eax

; 59   :     } while (err == Z_OK);

  001cf	83 bc 24 94 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  001d7	0f 84 0c ff ff
	ff		 je	 $LN4@compress2

; 60   : 
; 61   :     *destLen = stream.total_out;

  001dd	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR destLen$[rsp]
  001e5	8b 4c 24 4c	 mov	 ecx, DWORD PTR stream$[rsp+28]
  001e9	89 08		 mov	 DWORD PTR [rax], ecx

; 62   :     deflateEnd(&stream);

  001eb	48 8d 4c 24 30	 lea	 rcx, QWORD PTR stream$[rsp]
  001f0	e8 00 00 00 00	 call	 deflateEnd

; 63   :     return err == Z_STREAM_END ? Z_OK : err;

  001f5	83 bc 24 94 00
	00 00 01	 cmp	 DWORD PTR err$[rsp], 1
  001fd	75 0d		 jne	 SHORT $LN15@compress2
  001ff	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv86[rsp], 0
  0020a	eb 0e		 jmp	 SHORT $LN16@compress2
$LN15@compress2:
  0020c	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR err$[rsp]
  00213	89 84 24 ac 00
	00 00		 mov	 DWORD PTR tv86[rsp], eax
$LN16@compress2:
  0021a	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR tv86[rsp]
$LN1@compress2:

; 64   : }

  00221	48 8b f8	 mov	 rdi, rax
  00224	48 8b cc	 mov	 rcx, rsp
  00227	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:compress2$rtcFrameData
  0022e	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00233	48 8b c7	 mov	 rax, rdi
  00236	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  0023d	5f		 pop	 rdi
  0023e	c3		 ret	 0
compress2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\compress.c
;	COMDAT compress
_TEXT	SEGMENT
dest$ = 64
destLen$ = 72
source$ = 80
sourceLen$ = 88
compress PROC						; COMDAT

; 73   : {

$LN4:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 0c 00 00 00	 mov	 ecx, 12
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00034	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 74   :     return compress2(dest, destLen, source, sourceLen, Z_DEFAULT_COMPRESSION);

  00039	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR [rsp+32], -1
  00041	44 8b 4c 24 58	 mov	 r9d, DWORD PTR sourceLen$[rsp]
  00046	4c 8b 44 24 50	 mov	 r8, QWORD PTR source$[rsp]
  0004b	48 8b 54 24 48	 mov	 rdx, QWORD PTR destLen$[rsp]
  00050	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dest$[rsp]
  00055	e8 00 00 00 00	 call	 compress2

; 75   : }

  0005a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005e	5f		 pop	 rdi
  0005f	c3		 ret	 0
compress ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\compress.c
;	COMDAT compressBound
_TEXT	SEGMENT
sourceLen$ = 48
compressBound PROC					; COMDAT

; 83   : {

$LN4:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	57		 push	 rdi
  00005	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00009	48 8b fc	 mov	 rdi, rsp
  0000c	b9 08 00 00 00	 mov	 ecx, 8
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	8b 4c 24 30	 mov	 ecx, DWORD PTR [rsp+48]
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00023	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 84   :     return sourceLen + (sourceLen >> 12) + (sourceLen >> 14) +

  00028	8b 44 24 30	 mov	 eax, DWORD PTR sourceLen$[rsp]
  0002c	c1 e8 0c	 shr	 eax, 12
  0002f	8b 4c 24 30	 mov	 ecx, DWORD PTR sourceLen$[rsp]
  00033	03 c8		 add	 ecx, eax
  00035	8b c1		 mov	 eax, ecx
  00037	8b 4c 24 30	 mov	 ecx, DWORD PTR sourceLen$[rsp]
  0003b	c1 e9 0e	 shr	 ecx, 14
  0003e	03 c1		 add	 eax, ecx
  00040	8b 4c 24 30	 mov	 ecx, DWORD PTR sourceLen$[rsp]
  00044	c1 e9 19	 shr	 ecx, 25
  00047	8d 44 08 0d	 lea	 eax, DWORD PTR [rax+rcx+13]

; 85   :            (sourceLen >> 25) + 13;
; 86   : }

  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5f		 pop	 rdi
  00050	c3		 ret	 0
compressBound ENDP
_TEXT	ENDS
END

; Listing generated by Microsoft (R) Optimizing Compiler Version 19.20.27525.0 

include listing.inc

INCLUDELIB OLDNAMES

EXTRN	__imp_CloseHandle:PROC
EXTRN	__imp_CreateFileA:PROC
EXTRN	__imp_GetLastError:PROC
EXTRN	__imp_CreateFileW:PROC
EXTRN	__imp_SetFilePointer:PROC
EXTRN	__imp_WriteFile:PROC
EXTRN	__imp_ReadFile:PROC
__95347B96_ctype@h DB 01H
__149DB6BE_basetsd@h DB 01H
__9CFFAB73_corecrt_memcpy_s@h DB 01H
__55B7CB8D_corecrt_wstring@h DB 01H
__2F7506B6_string@h DB 01H
__5BA8817F_winnt@h DB 01H
__8421AFE7_processthreadsapi@h DB 01H
__F192E00B_memoryapi@h DB 01H
__0DF854E2_winerror@h DB 01H
__940BF1C4_winbase@h DB 01H
__78A3E64A_stralign@h DB 01H
__DB664BEB_corecrt_stdio_config@h DB 01H
__E28BBA23_corecrt_wstdio@h DB 01H
__4A1C29A8_stdio@h DB 01H
__A8B6D292_iowin32@c DB 01H
PUBLIC	fill_win32_filefunc64W
PUBLIC	fill_win32_filefunc64A
PUBLIC	fill_win32_filefunc64
PUBLIC	fill_win32_filefunc
PUBLIC	win32_error_file_func
PUBLIC	win32_close_file_func
PUBLIC	win32_seek64_file_func
PUBLIC	win32_seek_file_func
PUBLIC	win32_tell64_file_func
PUBLIC	win32_tell_file_func
PUBLIC	win32_write_file_func
PUBLIC	win32_read_file_func
PUBLIC	win32_open_file_func
PUBLIC	win32_open64_file_funcW
PUBLIC	win32_open64_file_funcA
PUBLIC	win32_open64_file_func
;	COMDAT pdata
pdata	SEGMENT
$pdata$fill_win32_filefunc64W DD imagerel $LN3
	DD	imagerel $LN3+172
	DD	imagerel $unwind$fill_win32_filefunc64W
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fill_win32_filefunc64A DD imagerel $LN3
	DD	imagerel $LN3+172
	DD	imagerel $unwind$fill_win32_filefunc64A
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fill_win32_filefunc64 DD imagerel $LN3
	DD	imagerel $LN3+172
	DD	imagerel $unwind$fill_win32_filefunc64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fill_win32_filefunc DD imagerel $LN3
	DD	imagerel $LN3+172
	DD	imagerel $unwind$fill_win32_filefunc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$win32_error_file_func DD imagerel $LN5
	DD	imagerel $LN5+85
	DD	imagerel $unwind$win32_error_file_func
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$win32_close_file_func DD imagerel $LN6
	DD	imagerel $LN6+124
	DD	imagerel $unwind$win32_close_file_func
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$win32_seek64_file_func DD imagerel $LN16
	DD	imagerel $LN16+293
	DD	imagerel $unwind$win32_seek64_file_func
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$win32_seek_file_func DD imagerel $LN16
	DD	imagerel $LN16+292
	DD	imagerel $unwind$win32_seek_file_func
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$win32_tell64_file_func DD imagerel $LN8
	DD	imagerel $LN8+208
	DD	imagerel $unwind$win32_tell64_file_func
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$win32_tell_file_func DD imagerel $LN8
	DD	imagerel $LN8+201
	DD	imagerel $unwind$win32_tell_file_func
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$MySetFilePointerEx DD imagerel MySetFilePointerEx
	DD	imagerel MySetFilePointerEx+194
	DD	imagerel $unwind$MySetFilePointerEx
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$win32_write_file_func DD imagerel $LN8
	DD	imagerel $LN8+214
	DD	imagerel $unwind$win32_write_file_func
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$win32_read_file_func DD imagerel $LN8
	DD	imagerel $LN8+214
	DD	imagerel $unwind$win32_read_file_func
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$win32_open_file_func DD imagerel $LN5
	DD	imagerel $LN5+248
	DD	imagerel $unwind$win32_open_file_func
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$win32_open64_file_funcW DD imagerel $LN5
	DD	imagerel $LN5+248
	DD	imagerel $unwind$win32_open64_file_funcW
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$win32_open64_file_funcA DD imagerel $LN5
	DD	imagerel $LN5+248
	DD	imagerel $unwind$win32_open64_file_funcA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$win32_open64_file_func DD imagerel $LN5
	DD	imagerel $LN5+248
	DD	imagerel $unwind$win32_open64_file_func
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$win32_build_iowin DD imagerel win32_build_iowin
	DD	imagerel win32_build_iowin+191
	DD	imagerel $unwind$win32_build_iowin
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$win32_translate_open_mode DD imagerel win32_translate_open_mode
	DD	imagerel win32_translate_open_mode+220
	DD	imagerel $unwind$win32_translate_open_mode
;	COMDAT xdata
xdata	SEGMENT
$unwind$win32_translate_open_mode DD 022b01H
	DD	070143218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$win32_build_iowin DD 032201H
	DD	07007c20bH
	DD	06006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
win32_build_iowin$rtcName$0 DB 077H
	DB	033H
	DB	032H
	DB	066H
	DB	069H
	DB	06fH
	DB	077H
	DB	00H
	ORG $+8
win32_build_iowin$rtcVarDesc DD 038H
	DD	010H
	DQ	FLAT:win32_build_iowin$rtcName$0
	ORG $+48
win32_build_iowin$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:win32_build_iowin$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$win32_open64_file_func DD 032e01H
	DD	01a0117H
	DD	07010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
win32_open64_file_func$rtcName$0 DB 064H
	DB	077H
	DB	044H
	DB	065H
	DB	073H
	DB	069H
	DB	072H
	DB	065H
	DB	064H
	DB	041H
	DB	063H
	DB	063H
	DB	065H
	DB	073H
	DB	073H
	DB	00H
win32_open64_file_func$rtcName$1 DB 064H
	DB	077H
	DB	043H
	DB	072H
	DB	065H
	DB	061H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	044H
	DB	069H
	DB	073H
	DB	070H
	DB	06fH
	DB	073H
	DB	069H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	00H
	ORG $+2
win32_open64_file_func$rtcName$2 DB 064H
	DB	077H
	DB	053H
	DB	068H
	DB	061H
	DB	072H
	DB	065H
	DB	04dH
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+4
win32_open64_file_func$rtcName$3 DB 064H
	DB	077H
	DB	046H
	DB	06cH
	DB	061H
	DB	067H
	DB	073H
	DB	041H
	DB	06eH
	DB	064H
	DB	041H
	DB	074H
	DB	074H
	DB	072H
	DB	069H
	DB	062H
	DB	075H
	DB	074H
	DB	065H
	DB	073H
	DB	00H
	ORG $+3
win32_open64_file_func$rtcVarDesc DD 0b4H
	DD	04H
	DQ	FLAT:win32_open64_file_func$rtcName$3
	DD	094H
	DD	04H
	DQ	FLAT:win32_open64_file_func$rtcName$2
	DD	074H
	DD	04H
	DQ	FLAT:win32_open64_file_func$rtcName$1
	DD	054H
	DD	04H
	DQ	FLAT:win32_open64_file_func$rtcName$0
	ORG $+192
win32_open64_file_func$rtcFrameData DD 04H
	DD	00H
	DQ	FLAT:win32_open64_file_func$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$win32_open64_file_funcA DD 032e01H
	DD	01a0117H
	DD	07010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
win32_open64_file_funcA$rtcName$0 DB 064H
	DB	077H
	DB	044H
	DB	065H
	DB	073H
	DB	069H
	DB	072H
	DB	065H
	DB	064H
	DB	041H
	DB	063H
	DB	063H
	DB	065H
	DB	073H
	DB	073H
	DB	00H
win32_open64_file_funcA$rtcName$1 DB 064H
	DB	077H
	DB	043H
	DB	072H
	DB	065H
	DB	061H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	044H
	DB	069H
	DB	073H
	DB	070H
	DB	06fH
	DB	073H
	DB	069H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	00H
	ORG $+2
win32_open64_file_funcA$rtcName$2 DB 064H
	DB	077H
	DB	053H
	DB	068H
	DB	061H
	DB	072H
	DB	065H
	DB	04dH
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+4
win32_open64_file_funcA$rtcName$3 DB 064H
	DB	077H
	DB	046H
	DB	06cH
	DB	061H
	DB	067H
	DB	073H
	DB	041H
	DB	06eH
	DB	064H
	DB	041H
	DB	074H
	DB	074H
	DB	072H
	DB	069H
	DB	062H
	DB	075H
	DB	074H
	DB	065H
	DB	073H
	DB	00H
	ORG $+3
win32_open64_file_funcA$rtcVarDesc DD 0b4H
	DD	04H
	DQ	FLAT:win32_open64_file_funcA$rtcName$3
	DD	094H
	DD	04H
	DQ	FLAT:win32_open64_file_funcA$rtcName$2
	DD	074H
	DD	04H
	DQ	FLAT:win32_open64_file_funcA$rtcName$1
	DD	054H
	DD	04H
	DQ	FLAT:win32_open64_file_funcA$rtcName$0
	ORG $+192
win32_open64_file_funcA$rtcFrameData DD 04H
	DD	00H
	DQ	FLAT:win32_open64_file_funcA$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$win32_open64_file_funcW DD 032e01H
	DD	01a0117H
	DD	07010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
win32_open64_file_funcW$rtcName$0 DB 064H
	DB	077H
	DB	044H
	DB	065H
	DB	073H
	DB	069H
	DB	072H
	DB	065H
	DB	064H
	DB	041H
	DB	063H
	DB	063H
	DB	065H
	DB	073H
	DB	073H
	DB	00H
win32_open64_file_funcW$rtcName$1 DB 064H
	DB	077H
	DB	043H
	DB	072H
	DB	065H
	DB	061H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	044H
	DB	069H
	DB	073H
	DB	070H
	DB	06fH
	DB	073H
	DB	069H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	00H
	ORG $+2
win32_open64_file_funcW$rtcName$2 DB 064H
	DB	077H
	DB	053H
	DB	068H
	DB	061H
	DB	072H
	DB	065H
	DB	04dH
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+4
win32_open64_file_funcW$rtcName$3 DB 064H
	DB	077H
	DB	046H
	DB	06cH
	DB	061H
	DB	067H
	DB	073H
	DB	041H
	DB	06eH
	DB	064H
	DB	041H
	DB	074H
	DB	074H
	DB	072H
	DB	069H
	DB	062H
	DB	075H
	DB	074H
	DB	065H
	DB	073H
	DB	00H
	ORG $+3
win32_open64_file_funcW$rtcVarDesc DD 0b4H
	DD	04H
	DQ	FLAT:win32_open64_file_funcW$rtcName$3
	DD	094H
	DD	04H
	DQ	FLAT:win32_open64_file_funcW$rtcName$2
	DD	074H
	DD	04H
	DQ	FLAT:win32_open64_file_funcW$rtcName$1
	DD	054H
	DD	04H
	DQ	FLAT:win32_open64_file_funcW$rtcName$0
	ORG $+192
win32_open64_file_funcW$rtcFrameData DD 04H
	DD	00H
	DQ	FLAT:win32_open64_file_funcW$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$win32_open_file_func DD 032e01H
	DD	01a0117H
	DD	07010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
win32_open_file_func$rtcName$0 DB 064H
	DB	077H
	DB	044H
	DB	065H
	DB	073H
	DB	069H
	DB	072H
	DB	065H
	DB	064H
	DB	041H
	DB	063H
	DB	063H
	DB	065H
	DB	073H
	DB	073H
	DB	00H
win32_open_file_func$rtcName$1 DB 064H
	DB	077H
	DB	043H
	DB	072H
	DB	065H
	DB	061H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	044H
	DB	069H
	DB	073H
	DB	070H
	DB	06fH
	DB	073H
	DB	069H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	00H
	ORG $+2
win32_open_file_func$rtcName$2 DB 064H
	DB	077H
	DB	053H
	DB	068H
	DB	061H
	DB	072H
	DB	065H
	DB	04dH
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+4
win32_open_file_func$rtcName$3 DB 064H
	DB	077H
	DB	046H
	DB	06cH
	DB	061H
	DB	067H
	DB	073H
	DB	041H
	DB	06eH
	DB	064H
	DB	041H
	DB	074H
	DB	074H
	DB	072H
	DB	069H
	DB	062H
	DB	075H
	DB	074H
	DB	065H
	DB	073H
	DB	00H
	ORG $+3
win32_open_file_func$rtcVarDesc DD 0b4H
	DD	04H
	DQ	FLAT:win32_open_file_func$rtcName$3
	DD	094H
	DD	04H
	DQ	FLAT:win32_open_file_func$rtcName$2
	DD	074H
	DD	04H
	DQ	FLAT:win32_open_file_func$rtcName$1
	DD	054H
	DD	04H
	DQ	FLAT:win32_open_file_func$rtcName$0
	ORG $+192
win32_open_file_func$rtcFrameData DD 04H
	DD	00H
	DQ	FLAT:win32_open_file_func$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$win32_read_file_func DD 022d01H
	DD	07015b219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
win32_read_file_func$rtcName$0 DB 072H
	DB	065H
	DB	074H
	DB	00H
	ORG $+12
win32_read_file_func$rtcVarDesc DD 034H
	DD	04H
	DQ	FLAT:win32_read_file_func$rtcName$0
	ORG $+48
win32_read_file_func$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:win32_read_file_func$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$win32_write_file_func DD 022d01H
	DD	07015b219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
win32_write_file_func$rtcName$0 DB 072H
	DB	065H
	DB	074H
	DB	00H
	ORG $+12
win32_write_file_func$rtcVarDesc DD 034H
	DD	04H
	DQ	FLAT:win32_write_file_func$rtcName$0
	ORG $+48
win32_write_file_func$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:win32_write_file_func$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$MySetFilePointerEx DD 022d01H
	DD	070157219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
MySetFilePointerEx$rtcName$0 DB 06cH
	DB	048H
	DB	069H
	DB	067H
	DB	068H
	DB	00H
	ORG $+10
MySetFilePointerEx$rtcVarDesc DD 024H
	DD	04H
	DQ	FLAT:MySetFilePointerEx$rtcName$0
	ORG $+48
MySetFilePointerEx$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:MySetFilePointerEx$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$win32_tell_file_func DD 022301H
	DD	0700b920fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
win32_tell_file_func$rtcName$0 DB 070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+12
win32_tell_file_func$rtcVarDesc DD 038H
	DD	08H
	DQ	FLAT:win32_tell_file_func$rtcName$0
	ORG $+48
win32_tell_file_func$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:win32_tell_file_func$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$win32_tell64_file_func DD 022301H
	DD	0700b920fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
win32_tell64_file_func$rtcName$0 DB 070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+12
win32_tell64_file_func$rtcVarDesc DD 038H
	DD	08H
	DQ	FLAT:win32_tell64_file_func$rtcName$0
	ORG $+48
win32_tell64_file_func$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:win32_tell64_file_func$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$win32_seek_file_func DD 022d01H
	DD	07015b219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
win32_seek_file_func$rtcName$0 DB 070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+12
win32_seek_file_func$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:win32_seek_file_func$rtcName$0
	ORG $+48
win32_seek_file_func$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:win32_seek_file_func$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$win32_seek64_file_func DD 022d01H
	DD	07015b219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
win32_seek64_file_func$rtcName$0 DB 070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+12
win32_seek64_file_func$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:win32_seek64_file_func$rtcName$0
	ORG $+48
win32_seek64_file_func$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:win32_seek64_file_func$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$win32_close_file_func DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$win32_error_file_func DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fill_win32_filefunc DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fill_win32_filefunc64 DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fill_win32_filefunc64A DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fill_win32_filefunc64W DD 021e01H
	DD	07006320aH
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT win32_translate_open_mode
_TEXT	SEGMENT
mode$ = 48
lpdwDesiredAccess$ = 56
lpdwCreationDisposition$ = 64
lpdwShareMode$ = 72
lpdwFlagsAndAttributes$ = 80
win32_translate_open_mode PROC				; COMDAT

; 56   : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	57		 push	 rdi
  00014	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 08 00 00 00	 mov	 ecx, 8
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	8b 4c 24 30	 mov	 ecx, DWORD PTR [rsp+48]
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00032	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 57   :     *lpdwDesiredAccess = *lpdwShareMode = *lpdwFlagsAndAttributes = *lpdwCreationDisposition = 0;

  00037	48 8b 44 24 40	 mov	 rax, QWORD PTR lpdwCreationDisposition$[rsp]
  0003c	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00042	48 8b 44 24 50	 mov	 rax, QWORD PTR lpdwFlagsAndAttributes$[rsp]
  00047	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  0004d	48 8b 44 24 48	 mov	 rax, QWORD PTR lpdwShareMode$[rsp]
  00052	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00058	48 8b 44 24 38	 mov	 rax, QWORD PTR lpdwDesiredAccess$[rsp]
  0005d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 58   : 
; 59   :     if ((mode & ZLIB_FILEFUNC_MODE_READWRITEFILTER)==ZLIB_FILEFUNC_MODE_READ)

  00063	8b 44 24 30	 mov	 eax, DWORD PTR mode$[rsp]
  00067	83 e0 03	 and	 eax, 3
  0006a	83 f8 01	 cmp	 eax, 1
  0006d	75 23		 jne	 SHORT $LN2@win32_tran

; 60   :     {
; 61   :         *lpdwDesiredAccess = GENERIC_READ;

  0006f	48 8b 44 24 38	 mov	 rax, QWORD PTR lpdwDesiredAccess$[rsp]
  00074	c7 00 00 00 00
	80		 mov	 DWORD PTR [rax], -2147483648 ; 80000000H

; 62   :         *lpdwCreationDisposition = OPEN_EXISTING;

  0007a	48 8b 44 24 40	 mov	 rax, QWORD PTR lpdwCreationDisposition$[rsp]
  0007f	c7 00 03 00 00
	00		 mov	 DWORD PTR [rax], 3

; 63   :         *lpdwShareMode = FILE_SHARE_READ;

  00085	48 8b 44 24 48	 mov	 rax, QWORD PTR lpdwShareMode$[rsp]
  0008a	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1

; 64   :     }

  00090	eb 44		 jmp	 SHORT $LN3@win32_tran
$LN2@win32_tran:

; 65   :     else if (mode & ZLIB_FILEFUNC_MODE_EXISTING)

  00092	8b 44 24 30	 mov	 eax, DWORD PTR mode$[rsp]
  00096	83 e0 04	 and	 eax, 4
  00099	85 c0		 test	 eax, eax
  0009b	74 18		 je	 SHORT $LN4@win32_tran

; 66   :     {
; 67   :         *lpdwDesiredAccess = GENERIC_WRITE | GENERIC_READ;

  0009d	48 8b 44 24 38	 mov	 rax, QWORD PTR lpdwDesiredAccess$[rsp]
  000a2	c7 00 00 00 00
	c0		 mov	 DWORD PTR [rax], -1073741824 ; c0000000H

; 68   :         *lpdwCreationDisposition = OPEN_EXISTING;

  000a8	48 8b 44 24 40	 mov	 rax, QWORD PTR lpdwCreationDisposition$[rsp]
  000ad	c7 00 03 00 00
	00		 mov	 DWORD PTR [rax], 3

; 69   :     }

  000b3	eb 21		 jmp	 SHORT $LN5@win32_tran
$LN4@win32_tran:

; 70   :     else if (mode & ZLIB_FILEFUNC_MODE_CREATE)

  000b5	8b 44 24 30	 mov	 eax, DWORD PTR mode$[rsp]
  000b9	83 e0 08	 and	 eax, 8
  000bc	85 c0		 test	 eax, eax
  000be	74 16		 je	 SHORT $LN6@win32_tran

; 71   :     {
; 72   :         *lpdwDesiredAccess = GENERIC_WRITE | GENERIC_READ;

  000c0	48 8b 44 24 38	 mov	 rax, QWORD PTR lpdwDesiredAccess$[rsp]
  000c5	c7 00 00 00 00
	c0		 mov	 DWORD PTR [rax], -1073741824 ; c0000000H

; 73   :         *lpdwCreationDisposition = CREATE_ALWAYS;

  000cb	48 8b 44 24 40	 mov	 rax, QWORD PTR lpdwCreationDisposition$[rsp]
  000d0	c7 00 02 00 00
	00		 mov	 DWORD PTR [rax], 2
$LN6@win32_tran:
$LN5@win32_tran:
$LN3@win32_tran:

; 74   :     }
; 75   : }

  000d6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000da	5f		 pop	 rdi
  000db	c3		 ret	 0
win32_translate_open_mode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT win32_build_iowin
_TEXT	SEGMENT
ret$ = 32
w32fiow$4 = 56
hFile$ = 128
win32_build_iowin PROC					; COMDAT

; 78   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	48 83 ec 68	 sub	 rsp, 104		; 00000068H
  0000b	48 8b fc	 mov	 rdi, rsp
  0000e	b9 1a 00 00 00	 mov	 ecx, 26
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR [rsp+128]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 79   :     voidpf ret=NULL;

  0002e	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR ret$[rsp], 0

; 80   : 
; 81   :     if ((hFile != NULL) && (hFile != INVALID_HANDLE_VALUE))

  00037	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR hFile$[rsp], 0
  00040	74 5c		 je	 SHORT $LN2@win32_buil
  00042	48 83 bc 24 80
	00 00 00 ff	 cmp	 QWORD PTR hFile$[rsp], -1
  0004b	74 51		 je	 SHORT $LN2@win32_buil

; 82   :     {
; 83   :         WIN32FILE_IOWIN w32fiow;
; 84   :         w32fiow.hf = hFile;

  0004d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR hFile$[rsp]
  00055	48 89 44 24 38	 mov	 QWORD PTR w32fiow$4[rsp], rax

; 85   :         w32fiow.error = 0;

  0005a	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR w32fiow$4[rsp+8], 0

; 86   :         ret = malloc(sizeof(WIN32FILE_IOWIN));

  00062	b9 10 00 00 00	 mov	 ecx, 16
  00067	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0006d	48 89 44 24 20	 mov	 QWORD PTR ret$[rsp], rax

; 87   : 
; 88   :         if (ret==NULL)

  00072	48 83 7c 24 20
	00		 cmp	 QWORD PTR ret$[rsp], 0
  00078	75 10		 jne	 SHORT $LN3@win32_buil

; 89   :             CloseHandle(hFile);

  0007a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR hFile$[rsp]
  00082	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle
  00088	eb 14		 jmp	 SHORT $LN4@win32_buil
$LN3@win32_buil:

; 90   :         else
; 91   :             *((WIN32FILE_IOWIN*)ret) = w32fiow;

  0008a	48 8d 44 24 38	 lea	 rax, QWORD PTR w32fiow$4[rsp]
  0008f	48 8b 7c 24 20	 mov	 rdi, QWORD PTR ret$[rsp]
  00094	48 8b f0	 mov	 rsi, rax
  00097	b9 10 00 00 00	 mov	 ecx, 16
  0009c	f3 a4		 rep movsb
$LN4@win32_buil:
$LN2@win32_buil:

; 92   :     }
; 93   :     return ret;

  0009e	48 8b 44 24 20	 mov	 rax, QWORD PTR ret$[rsp]

; 94   : }

  000a3	48 8b f8	 mov	 rdi, rax
  000a6	48 8b cc	 mov	 rcx, rsp
  000a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:win32_build_iowin$rtcFrameData
  000b0	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000b5	48 8b c7	 mov	 rax, rdi
  000b8	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000bc	5f		 pop	 rdi
  000bd	5e		 pop	 rsi
  000be	c3		 ret	 0
win32_build_iowin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT win32_open64_file_func
_TEXT	SEGMENT
mode_fopen$ = 64
dwDesiredAccess$ = 84
dwCreationDisposition$ = 116
dwShareMode$ = 148
dwFlagsAndAttributes$ = 180
hFile$ = 200
opaque$ = 224
filename$ = 232
mode$ = 240
win32_open64_file_func PROC				; COMDAT

; 97   : {

$LN5:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 81 ec d0 00
	00 00		 sub	 rsp, 208		; 000000d0H
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+224]
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00035	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 98   :     const char* mode_fopen = NULL;

  0003a	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR mode_fopen$[rsp], 0

; 99   :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 100  :     HANDLE hFile = NULL;

  00043	48 c7 84 24 c8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR hFile$[rsp], 0

; 101  : 
; 102  :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  0004f	48 8d 84 24 b4
	00 00 00	 lea	 rax, QWORD PTR dwFlagsAndAttributes$[rsp]
  00057	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0005c	4c 8d 8c 24 94
	00 00 00	 lea	 r9, QWORD PTR dwShareMode$[rsp]
  00064	4c 8d 44 24 74	 lea	 r8, QWORD PTR dwCreationDisposition$[rsp]
  00069	48 8d 54 24 54	 lea	 rdx, QWORD PTR dwDesiredAccess$[rsp]
  0006e	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR mode$[rsp]
  00075	e8 00 00 00 00	 call	 win32_translate_open_mode

; 103  : 
; 104  : #ifdef IOWIN32_USING_WINRT_API
; 105  : #ifdef UNICODE
; 106  :     if ((filename!=NULL) && (dwDesiredAccess != 0))
; 107  :         hFile = CreateFile2((LPCTSTR)filename, dwDesiredAccess, dwShareMode, dwCreationDisposition, NULL);
; 108  : #else
; 109  :     if ((filename!=NULL) && (dwDesiredAccess != 0))
; 110  :     {
; 111  :         WCHAR filenameW[FILENAME_MAX + 0x200 + 1];
; 112  :         MultiByteToWideChar(CP_ACP,0,(const char*)filename,-1,filenameW,FILENAME_MAX + 0x200);
; 113  :         hFile = CreateFile2(filenameW, dwDesiredAccess, dwShareMode, dwCreationDisposition, NULL);
; 114  :     }
; 115  : #endif
; 116  : #else
; 117  :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  0007a	48 83 bc 24 e8
	00 00 00 00	 cmp	 QWORD PTR filename$[rsp], 0
  00083	74 48		 je	 SHORT $LN2@win32_open
  00085	83 7c 24 54 00	 cmp	 DWORD PTR dwDesiredAccess$[rsp], 0
  0008a	74 41		 je	 SHORT $LN2@win32_open

; 118  :         hFile = CreateFile((LPCTSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  0008c	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00095	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR dwFlagsAndAttributes$[rsp]
  0009c	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000a0	8b 44 24 74	 mov	 eax, DWORD PTR dwCreationDisposition$[rsp]
  000a4	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000a8	45 33 c9	 xor	 r9d, r9d
  000ab	44 8b 84 24 94
	00 00 00	 mov	 r8d, DWORD PTR dwShareMode$[rsp]
  000b3	8b 54 24 54	 mov	 edx, DWORD PTR dwDesiredAccess$[rsp]
  000b7	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  000bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateFileA
  000c5	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR hFile$[rsp], rax
$LN2@win32_open:

; 119  : #endif
; 120  : 
; 121  :     return win32_build_iowin(hFile);

  000cd	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR hFile$[rsp]
  000d5	e8 00 00 00 00	 call	 win32_build_iowin

; 122  : }

  000da	48 8b f8	 mov	 rdi, rax
  000dd	48 8b cc	 mov	 rcx, rsp
  000e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:win32_open64_file_func$rtcFrameData
  000e7	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000ec	48 8b c7	 mov	 rax, rdi
  000ef	48 81 c4 d0 00
	00 00		 add	 rsp, 208		; 000000d0H
  000f6	5f		 pop	 rdi
  000f7	c3		 ret	 0
win32_open64_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT win32_open64_file_funcA
_TEXT	SEGMENT
mode_fopen$ = 64
dwDesiredAccess$ = 84
dwCreationDisposition$ = 116
dwShareMode$ = 148
dwFlagsAndAttributes$ = 180
hFile$ = 200
opaque$ = 224
filename$ = 232
mode$ = 240
win32_open64_file_funcA PROC				; COMDAT

; 126  : {

$LN5:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 81 ec d0 00
	00 00		 sub	 rsp, 208		; 000000d0H
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+224]
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00035	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 127  :     const char* mode_fopen = NULL;

  0003a	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR mode_fopen$[rsp], 0

; 128  :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 129  :     HANDLE hFile = NULL;

  00043	48 c7 84 24 c8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR hFile$[rsp], 0

; 130  : 
; 131  :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  0004f	48 8d 84 24 b4
	00 00 00	 lea	 rax, QWORD PTR dwFlagsAndAttributes$[rsp]
  00057	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0005c	4c 8d 8c 24 94
	00 00 00	 lea	 r9, QWORD PTR dwShareMode$[rsp]
  00064	4c 8d 44 24 74	 lea	 r8, QWORD PTR dwCreationDisposition$[rsp]
  00069	48 8d 54 24 54	 lea	 rdx, QWORD PTR dwDesiredAccess$[rsp]
  0006e	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR mode$[rsp]
  00075	e8 00 00 00 00	 call	 win32_translate_open_mode

; 132  : 
; 133  : #ifdef IOWIN32_USING_WINRT_API
; 134  :     if ((filename!=NULL) && (dwDesiredAccess != 0))
; 135  :     {
; 136  :         WCHAR filenameW[FILENAME_MAX + 0x200 + 1];
; 137  :         MultiByteToWideChar(CP_ACP,0,(const char*)filename,-1,filenameW,FILENAME_MAX + 0x200);
; 138  :         hFile = CreateFile2(filenameW, dwDesiredAccess, dwShareMode, dwCreationDisposition, NULL);
; 139  :     }
; 140  : #else
; 141  :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  0007a	48 83 bc 24 e8
	00 00 00 00	 cmp	 QWORD PTR filename$[rsp], 0
  00083	74 48		 je	 SHORT $LN2@win32_open
  00085	83 7c 24 54 00	 cmp	 DWORD PTR dwDesiredAccess$[rsp], 0
  0008a	74 41		 je	 SHORT $LN2@win32_open

; 142  :         hFile = CreateFileA((LPCSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  0008c	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00095	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR dwFlagsAndAttributes$[rsp]
  0009c	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000a0	8b 44 24 74	 mov	 eax, DWORD PTR dwCreationDisposition$[rsp]
  000a4	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000a8	45 33 c9	 xor	 r9d, r9d
  000ab	44 8b 84 24 94
	00 00 00	 mov	 r8d, DWORD PTR dwShareMode$[rsp]
  000b3	8b 54 24 54	 mov	 edx, DWORD PTR dwDesiredAccess$[rsp]
  000b7	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  000bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateFileA
  000c5	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR hFile$[rsp], rax
$LN2@win32_open:

; 143  : #endif
; 144  : 
; 145  :     return win32_build_iowin(hFile);

  000cd	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR hFile$[rsp]
  000d5	e8 00 00 00 00	 call	 win32_build_iowin

; 146  : }

  000da	48 8b f8	 mov	 rdi, rax
  000dd	48 8b cc	 mov	 rcx, rsp
  000e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:win32_open64_file_funcA$rtcFrameData
  000e7	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000ec	48 8b c7	 mov	 rax, rdi
  000ef	48 81 c4 d0 00
	00 00		 add	 rsp, 208		; 000000d0H
  000f6	5f		 pop	 rdi
  000f7	c3		 ret	 0
win32_open64_file_funcA ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT win32_open64_file_funcW
_TEXT	SEGMENT
mode_fopen$ = 64
dwDesiredAccess$ = 84
dwCreationDisposition$ = 116
dwShareMode$ = 148
dwFlagsAndAttributes$ = 180
hFile$ = 200
opaque$ = 224
filename$ = 232
mode$ = 240
win32_open64_file_funcW PROC				; COMDAT

; 150  : {

$LN5:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 81 ec d0 00
	00 00		 sub	 rsp, 208		; 000000d0H
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+224]
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00035	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 151  :     const char* mode_fopen = NULL;

  0003a	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR mode_fopen$[rsp], 0

; 152  :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 153  :     HANDLE hFile = NULL;

  00043	48 c7 84 24 c8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR hFile$[rsp], 0

; 154  : 
; 155  :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  0004f	48 8d 84 24 b4
	00 00 00	 lea	 rax, QWORD PTR dwFlagsAndAttributes$[rsp]
  00057	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0005c	4c 8d 8c 24 94
	00 00 00	 lea	 r9, QWORD PTR dwShareMode$[rsp]
  00064	4c 8d 44 24 74	 lea	 r8, QWORD PTR dwCreationDisposition$[rsp]
  00069	48 8d 54 24 54	 lea	 rdx, QWORD PTR dwDesiredAccess$[rsp]
  0006e	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR mode$[rsp]
  00075	e8 00 00 00 00	 call	 win32_translate_open_mode

; 156  : 
; 157  : #ifdef IOWIN32_USING_WINRT_API
; 158  :     if ((filename!=NULL) && (dwDesiredAccess != 0))
; 159  :         hFile = CreateFile2((LPCWSTR)filename, dwDesiredAccess, dwShareMode, dwCreationDisposition,NULL);
; 160  : #else
; 161  :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  0007a	48 83 bc 24 e8
	00 00 00 00	 cmp	 QWORD PTR filename$[rsp], 0
  00083	74 48		 je	 SHORT $LN2@win32_open
  00085	83 7c 24 54 00	 cmp	 DWORD PTR dwDesiredAccess$[rsp], 0
  0008a	74 41		 je	 SHORT $LN2@win32_open

; 162  :         hFile = CreateFileW((LPCWSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  0008c	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00095	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR dwFlagsAndAttributes$[rsp]
  0009c	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000a0	8b 44 24 74	 mov	 eax, DWORD PTR dwCreationDisposition$[rsp]
  000a4	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000a8	45 33 c9	 xor	 r9d, r9d
  000ab	44 8b 84 24 94
	00 00 00	 mov	 r8d, DWORD PTR dwShareMode$[rsp]
  000b3	8b 54 24 54	 mov	 edx, DWORD PTR dwDesiredAccess$[rsp]
  000b7	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  000bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateFileW
  000c5	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR hFile$[rsp], rax
$LN2@win32_open:

; 163  : #endif
; 164  : 
; 165  :     return win32_build_iowin(hFile);

  000cd	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR hFile$[rsp]
  000d5	e8 00 00 00 00	 call	 win32_build_iowin

; 166  : }

  000da	48 8b f8	 mov	 rdi, rax
  000dd	48 8b cc	 mov	 rcx, rsp
  000e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:win32_open64_file_funcW$rtcFrameData
  000e7	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000ec	48 8b c7	 mov	 rax, rdi
  000ef	48 81 c4 d0 00
	00 00		 add	 rsp, 208		; 000000d0H
  000f6	5f		 pop	 rdi
  000f7	c3		 ret	 0
win32_open64_file_funcW ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT win32_open_file_func
_TEXT	SEGMENT
mode_fopen$ = 64
dwDesiredAccess$ = 84
dwCreationDisposition$ = 116
dwShareMode$ = 148
dwFlagsAndAttributes$ = 180
hFile$ = 200
opaque$ = 224
filename$ = 232
mode$ = 240
win32_open_file_func PROC				; COMDAT

; 170  : {

$LN5:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 81 ec d0 00
	00 00		 sub	 rsp, 208		; 000000d0H
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+224]
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00035	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 171  :     const char* mode_fopen = NULL;

  0003a	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR mode_fopen$[rsp], 0

; 172  :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 173  :     HANDLE hFile = NULL;

  00043	48 c7 84 24 c8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR hFile$[rsp], 0

; 174  : 
; 175  :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  0004f	48 8d 84 24 b4
	00 00 00	 lea	 rax, QWORD PTR dwFlagsAndAttributes$[rsp]
  00057	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0005c	4c 8d 8c 24 94
	00 00 00	 lea	 r9, QWORD PTR dwShareMode$[rsp]
  00064	4c 8d 44 24 74	 lea	 r8, QWORD PTR dwCreationDisposition$[rsp]
  00069	48 8d 54 24 54	 lea	 rdx, QWORD PTR dwDesiredAccess$[rsp]
  0006e	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR mode$[rsp]
  00075	e8 00 00 00 00	 call	 win32_translate_open_mode

; 176  : 
; 177  : #ifdef IOWIN32_USING_WINRT_API
; 178  : #ifdef UNICODE
; 179  :     if ((filename!=NULL) && (dwDesiredAccess != 0))
; 180  :         hFile = CreateFile2((LPCTSTR)filename, dwDesiredAccess, dwShareMode, dwCreationDisposition, NULL);
; 181  : #else
; 182  :     if ((filename!=NULL) && (dwDesiredAccess != 0))
; 183  :     {
; 184  :         WCHAR filenameW[FILENAME_MAX + 0x200 + 1];
; 185  :         MultiByteToWideChar(CP_ACP,0,(const char*)filename,-1,filenameW,FILENAME_MAX + 0x200);
; 186  :         hFile = CreateFile2(filenameW, dwDesiredAccess, dwShareMode, dwCreationDisposition, NULL);
; 187  :     }
; 188  : #endif
; 189  : #else
; 190  :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  0007a	48 83 bc 24 e8
	00 00 00 00	 cmp	 QWORD PTR filename$[rsp], 0
  00083	74 48		 je	 SHORT $LN2@win32_open
  00085	83 7c 24 54 00	 cmp	 DWORD PTR dwDesiredAccess$[rsp], 0
  0008a	74 41		 je	 SHORT $LN2@win32_open

; 191  :         hFile = CreateFile((LPCTSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  0008c	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00095	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR dwFlagsAndAttributes$[rsp]
  0009c	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000a0	8b 44 24 74	 mov	 eax, DWORD PTR dwCreationDisposition$[rsp]
  000a4	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000a8	45 33 c9	 xor	 r9d, r9d
  000ab	44 8b 84 24 94
	00 00 00	 mov	 r8d, DWORD PTR dwShareMode$[rsp]
  000b3	8b 54 24 54	 mov	 edx, DWORD PTR dwDesiredAccess$[rsp]
  000b7	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  000bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateFileA
  000c5	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR hFile$[rsp], rax
$LN2@win32_open:

; 192  : #endif
; 193  : 
; 194  :     return win32_build_iowin(hFile);

  000cd	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR hFile$[rsp]
  000d5	e8 00 00 00 00	 call	 win32_build_iowin

; 195  : }

  000da	48 8b f8	 mov	 rdi, rax
  000dd	48 8b cc	 mov	 rcx, rsp
  000e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:win32_open_file_func$rtcFrameData
  000e7	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000ec	48 8b c7	 mov	 rax, rdi
  000ef	48 81 c4 d0 00
	00 00		 add	 rsp, 208		; 000000d0H
  000f6	5f		 pop	 rdi
  000f7	c3		 ret	 0
win32_open_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT win32_read_file_func
_TEXT	SEGMENT
ret$ = 52
hFile$ = 72
dwErr$4 = 80
opaque$ = 112
stream$ = 120
buf$ = 128
size$ = 136
win32_read_file_func PROC				; COMDAT

; 199  : {

$LN8:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00034	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 200  :     uLong ret=0;

  00039	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR ret$[rsp], 0

; 201  :     HANDLE hFile = NULL;

  00041	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR hFile$[rsp], 0

; 202  :     if (stream!=NULL)

  0004a	48 83 7c 24 78
	00		 cmp	 QWORD PTR stream$[rsp], 0
  00050	74 0d		 je	 SHORT $LN2@win32_read

; 203  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  00052	48 8b 44 24 78	 mov	 rax, QWORD PTR stream$[rsp]
  00057	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0005a	48 89 44 24 48	 mov	 QWORD PTR hFile$[rsp], rax
$LN2@win32_read:

; 204  : 
; 205  :     if (hFile != NULL)

  0005f	48 83 7c 24 48
	00		 cmp	 QWORD PTR hFile$[rsp], 0
  00065	74 52		 je	 SHORT $LN3@win32_read

; 206  :     {
; 207  :         if (!ReadFile(hFile, buf, size, &ret, NULL))

  00067	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00070	4c 8d 4c 24 34	 lea	 r9, QWORD PTR ret$[rsp]
  00075	44 8b 84 24 88
	00 00 00	 mov	 r8d, DWORD PTR size$[rsp]
  0007d	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR buf$[rsp]
  00085	48 8b 4c 24 48	 mov	 rcx, QWORD PTR hFile$[rsp]
  0008a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReadFile
  00090	85 c0		 test	 eax, eax
  00092	75 25		 jne	 SHORT $LN4@win32_read

; 208  :         {
; 209  :             DWORD dwErr = GetLastError();

  00094	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  0009a	89 44 24 50	 mov	 DWORD PTR dwErr$4[rsp], eax

; 210  :             if (dwErr == ERROR_HANDLE_EOF)

  0009e	83 7c 24 50 26	 cmp	 DWORD PTR dwErr$4[rsp], 38 ; 00000026H
  000a3	75 08		 jne	 SHORT $LN5@win32_read

; 211  :                 dwErr = 0;

  000a5	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR dwErr$4[rsp], 0
$LN5@win32_read:

; 212  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  000ad	48 8b 44 24 78	 mov	 rax, QWORD PTR stream$[rsp]
  000b2	8b 4c 24 50	 mov	 ecx, DWORD PTR dwErr$4[rsp]
  000b6	89 48 08	 mov	 DWORD PTR [rax+8], ecx
$LN4@win32_read:
$LN3@win32_read:

; 213  :         }
; 214  :     }
; 215  : 
; 216  :     return ret;

  000b9	8b 44 24 34	 mov	 eax, DWORD PTR ret$[rsp]

; 217  : }

  000bd	8b f8		 mov	 edi, eax
  000bf	48 8b cc	 mov	 rcx, rsp
  000c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:win32_read_file_func$rtcFrameData
  000c9	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000ce	8b c7		 mov	 eax, edi
  000d0	48 83 c4 60	 add	 rsp, 96			; 00000060H
  000d4	5f		 pop	 rdi
  000d5	c3		 ret	 0
win32_read_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT win32_write_file_func
_TEXT	SEGMENT
ret$ = 52
hFile$ = 72
dwErr$4 = 80
opaque$ = 112
stream$ = 120
buf$ = 128
size$ = 136
win32_write_file_func PROC				; COMDAT

; 221  : {

$LN8:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00034	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 222  :     uLong ret=0;

  00039	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR ret$[rsp], 0

; 223  :     HANDLE hFile = NULL;

  00041	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR hFile$[rsp], 0

; 224  :     if (stream!=NULL)

  0004a	48 83 7c 24 78
	00		 cmp	 QWORD PTR stream$[rsp], 0
  00050	74 0d		 je	 SHORT $LN2@win32_writ

; 225  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  00052	48 8b 44 24 78	 mov	 rax, QWORD PTR stream$[rsp]
  00057	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0005a	48 89 44 24 48	 mov	 QWORD PTR hFile$[rsp], rax
$LN2@win32_writ:

; 226  : 
; 227  :     if (hFile != NULL)

  0005f	48 83 7c 24 48
	00		 cmp	 QWORD PTR hFile$[rsp], 0
  00065	74 52		 je	 SHORT $LN3@win32_writ

; 228  :     {
; 229  :         if (!WriteFile(hFile, buf, size, &ret, NULL))

  00067	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00070	4c 8d 4c 24 34	 lea	 r9, QWORD PTR ret$[rsp]
  00075	44 8b 84 24 88
	00 00 00	 mov	 r8d, DWORD PTR size$[rsp]
  0007d	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR buf$[rsp]
  00085	48 8b 4c 24 48	 mov	 rcx, QWORD PTR hFile$[rsp]
  0008a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WriteFile
  00090	85 c0		 test	 eax, eax
  00092	75 25		 jne	 SHORT $LN4@win32_writ

; 230  :         {
; 231  :             DWORD dwErr = GetLastError();

  00094	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  0009a	89 44 24 50	 mov	 DWORD PTR dwErr$4[rsp], eax

; 232  :             if (dwErr == ERROR_HANDLE_EOF)

  0009e	83 7c 24 50 26	 cmp	 DWORD PTR dwErr$4[rsp], 38 ; 00000026H
  000a3	75 08		 jne	 SHORT $LN5@win32_writ

; 233  :                 dwErr = 0;

  000a5	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR dwErr$4[rsp], 0
$LN5@win32_writ:

; 234  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  000ad	48 8b 44 24 78	 mov	 rax, QWORD PTR stream$[rsp]
  000b2	8b 4c 24 50	 mov	 ecx, DWORD PTR dwErr$4[rsp]
  000b6	89 48 08	 mov	 DWORD PTR [rax+8], ecx
$LN4@win32_writ:
$LN3@win32_writ:

; 235  :         }
; 236  :     }
; 237  : 
; 238  :     return ret;

  000b9	8b 44 24 34	 mov	 eax, DWORD PTR ret$[rsp]

; 239  : }

  000bd	8b f8		 mov	 edi, eax
  000bf	48 8b cc	 mov	 rcx, rsp
  000c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:win32_write_file_func$rtcFrameData
  000c9	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000ce	8b c7		 mov	 eax, edi
  000d0	48 83 c4 60	 add	 rsp, 96			; 00000060H
  000d4	5f		 pop	 rdi
  000d5	c3		 ret	 0
win32_write_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT MySetFilePointerEx
_TEXT	SEGMENT
lHigh$ = 36
dwNewPos$ = 52
fOk$ = 56
hFile$ = 80
pos$ = 88
newPos$ = 96
dwMoveMethod$ = 104
MySetFilePointerEx PROC					; COMDAT

; 242  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 10 00 00 00	 mov	 ecx, 16
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00034	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 243  : #ifdef IOWIN32_USING_WINRT_API
; 244  :     return SetFilePointerEx(hFile, pos, newPos, dwMoveMethod);
; 245  : #else
; 246  :     LONG lHigh = pos.HighPart;

  00039	8b 44 24 5c	 mov	 eax, DWORD PTR pos$[rsp+4]
  0003d	89 44 24 24	 mov	 DWORD PTR lHigh$[rsp], eax

; 247  :     DWORD dwNewPos = SetFilePointer(hFile, pos.LowPart, &lHigh, dwMoveMethod);

  00041	44 8b 4c 24 68	 mov	 r9d, DWORD PTR dwMoveMethod$[rsp]
  00046	4c 8d 44 24 24	 lea	 r8, QWORD PTR lHigh$[rsp]
  0004b	8b 54 24 58	 mov	 edx, DWORD PTR pos$[rsp]
  0004f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hFile$[rsp]
  00054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetFilePointer
  0005a	89 44 24 34	 mov	 DWORD PTR dwNewPos$[rsp], eax

; 248  :     BOOL fOk = TRUE;

  0005e	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR fOk$[rsp], 1

; 249  :     if (dwNewPos == 0xFFFFFFFF)

  00066	83 7c 24 34 ff	 cmp	 DWORD PTR dwNewPos$[rsp], -1 ; ffffffffH
  0006b	75 12		 jne	 SHORT $LN2@MySetFileP

; 250  :         if (GetLastError() != NO_ERROR)

  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  00073	85 c0		 test	 eax, eax
  00075	74 08		 je	 SHORT $LN3@MySetFileP

; 251  :             fOk = FALSE;

  00077	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR fOk$[rsp], 0
$LN3@MySetFileP:
$LN2@MySetFileP:

; 252  :     if ((newPos != NULL) && (fOk))

  0007f	48 83 7c 24 60
	00		 cmp	 QWORD PTR newPos$[rsp], 0
  00085	74 1e		 je	 SHORT $LN4@MySetFileP
  00087	83 7c 24 38 00	 cmp	 DWORD PTR fOk$[rsp], 0
  0008c	74 17		 je	 SHORT $LN4@MySetFileP

; 253  :     {
; 254  :         newPos->LowPart = dwNewPos;

  0008e	48 8b 44 24 60	 mov	 rax, QWORD PTR newPos$[rsp]
  00093	8b 4c 24 34	 mov	 ecx, DWORD PTR dwNewPos$[rsp]
  00097	89 08		 mov	 DWORD PTR [rax], ecx

; 255  :         newPos->HighPart = lHigh;

  00099	48 8b 44 24 60	 mov	 rax, QWORD PTR newPos$[rsp]
  0009e	8b 4c 24 24	 mov	 ecx, DWORD PTR lHigh$[rsp]
  000a2	89 48 04	 mov	 DWORD PTR [rax+4], ecx
$LN4@MySetFileP:

; 256  :     }
; 257  :     return fOk;

  000a5	8b 44 24 38	 mov	 eax, DWORD PTR fOk$[rsp]

; 258  : #endif
; 259  : }

  000a9	8b f8		 mov	 edi, eax
  000ab	48 8b cc	 mov	 rcx, rsp
  000ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:MySetFilePointerEx$rtcFrameData
  000b5	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000ba	8b c7		 mov	 eax, edi
  000bc	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000c0	5f		 pop	 rdi
  000c1	c3		 ret	 0
MySetFilePointerEx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT win32_tell_file_func
_TEXT	SEGMENT
ret$ = 32
hFile$ = 40
pos$4 = 56
dwErr$5 = 68
opaque$ = 96
stream$ = 104
win32_tell_file_func PROC				; COMDAT

; 262  : {

$LN8:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 14 00 00 00	 mov	 ecx, 20
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 263  :     long ret=-1;

  0002f	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR ret$[rsp], -1

; 264  :     HANDLE hFile = NULL;

  00037	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR hFile$[rsp], 0

; 265  :     if (stream!=NULL)

  00040	48 83 7c 24 68
	00		 cmp	 QWORD PTR stream$[rsp], 0
  00046	74 0d		 je	 SHORT $LN2@win32_tell

; 266  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  00048	48 8b 44 24 68	 mov	 rax, QWORD PTR stream$[rsp]
  0004d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00050	48 89 44 24 28	 mov	 QWORD PTR hFile$[rsp], rax
$LN2@win32_tell:

; 267  :     if (hFile != NULL)

  00055	48 83 7c 24 28
	00		 cmp	 QWORD PTR hFile$[rsp], 0
  0005b	74 4f		 je	 SHORT $LN3@win32_tell

; 268  :     {
; 269  :         LARGE_INTEGER pos;
; 270  :         pos.QuadPart = 0;

  0005d	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR pos$4[rsp], 0

; 271  : 
; 272  :         if (!MySetFilePointerEx(hFile, pos, &pos, FILE_CURRENT))

  00066	41 b9 01 00 00
	00		 mov	 r9d, 1
  0006c	4c 8d 44 24 38	 lea	 r8, QWORD PTR pos$4[rsp]
  00071	48 8b 54 24 38	 mov	 rdx, QWORD PTR pos$4[rsp]
  00076	48 8b 4c 24 28	 mov	 rcx, QWORD PTR hFile$[rsp]
  0007b	e8 00 00 00 00	 call	 MySetFilePointerEx
  00080	85 c0		 test	 eax, eax
  00082	75 20		 jne	 SHORT $LN4@win32_tell

; 273  :         {
; 274  :             DWORD dwErr = GetLastError();

  00084	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  0008a	89 44 24 44	 mov	 DWORD PTR dwErr$5[rsp], eax

; 275  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0008e	48 8b 44 24 68	 mov	 rax, QWORD PTR stream$[rsp]
  00093	8b 4c 24 44	 mov	 ecx, DWORD PTR dwErr$5[rsp]
  00097	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 276  :             ret = -1;

  0009a	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR ret$[rsp], -1

; 277  :         }

  000a2	eb 08		 jmp	 SHORT $LN5@win32_tell
$LN4@win32_tell:

; 278  :         else
; 279  :             ret=(long)pos.LowPart;

  000a4	8b 44 24 38	 mov	 eax, DWORD PTR pos$4[rsp]
  000a8	89 44 24 20	 mov	 DWORD PTR ret$[rsp], eax
$LN5@win32_tell:
$LN3@win32_tell:

; 280  :     }
; 281  :     return ret;

  000ac	8b 44 24 20	 mov	 eax, DWORD PTR ret$[rsp]

; 282  : }

  000b0	8b f8		 mov	 edi, eax
  000b2	48 8b cc	 mov	 rcx, rsp
  000b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:win32_tell_file_func$rtcFrameData
  000bc	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000c1	8b c7		 mov	 eax, edi
  000c3	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000c7	5f		 pop	 rdi
  000c8	c3		 ret	 0
win32_tell_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT win32_tell64_file_func
_TEXT	SEGMENT
ret$ = 32
hFile$ = 40
pos$4 = 56
dwErr$5 = 68
opaque$ = 96
stream$ = 104
win32_tell64_file_func PROC				; COMDAT

; 285  : {

$LN8:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 14 00 00 00	 mov	 ecx, 20
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 286  :     ZPOS64_T ret= (ZPOS64_T)-1;

  0002f	48 c7 44 24 20
	ff ff ff ff	 mov	 QWORD PTR ret$[rsp], -1

; 287  :     HANDLE hFile = NULL;

  00038	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR hFile$[rsp], 0

; 288  :     if (stream!=NULL)

  00041	48 83 7c 24 68
	00		 cmp	 QWORD PTR stream$[rsp], 0
  00047	74 0d		 je	 SHORT $LN2@win32_tell

; 289  :         hFile = ((WIN32FILE_IOWIN*)stream)->hf;

  00049	48 8b 44 24 68	 mov	 rax, QWORD PTR stream$[rsp]
  0004e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00051	48 89 44 24 28	 mov	 QWORD PTR hFile$[rsp], rax
$LN2@win32_tell:

; 290  : 
; 291  :     if (hFile)

  00056	48 83 7c 24 28
	00		 cmp	 QWORD PTR hFile$[rsp], 0
  0005c	74 52		 je	 SHORT $LN3@win32_tell

; 292  :     {
; 293  :         LARGE_INTEGER pos;
; 294  :         pos.QuadPart = 0;

  0005e	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR pos$4[rsp], 0

; 295  : 
; 296  :         if (!MySetFilePointerEx(hFile, pos, &pos, FILE_CURRENT))

  00067	41 b9 01 00 00
	00		 mov	 r9d, 1
  0006d	4c 8d 44 24 38	 lea	 r8, QWORD PTR pos$4[rsp]
  00072	48 8b 54 24 38	 mov	 rdx, QWORD PTR pos$4[rsp]
  00077	48 8b 4c 24 28	 mov	 rcx, QWORD PTR hFile$[rsp]
  0007c	e8 00 00 00 00	 call	 MySetFilePointerEx
  00081	85 c0		 test	 eax, eax
  00083	75 21		 jne	 SHORT $LN4@win32_tell

; 297  :         {
; 298  :             DWORD dwErr = GetLastError();

  00085	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  0008b	89 44 24 44	 mov	 DWORD PTR dwErr$5[rsp], eax

; 299  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0008f	48 8b 44 24 68	 mov	 rax, QWORD PTR stream$[rsp]
  00094	8b 4c 24 44	 mov	 ecx, DWORD PTR dwErr$5[rsp]
  00098	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 300  :             ret = (ZPOS64_T)-1;

  0009b	48 c7 44 24 20
	ff ff ff ff	 mov	 QWORD PTR ret$[rsp], -1

; 301  :         }

  000a4	eb 0a		 jmp	 SHORT $LN5@win32_tell
$LN4@win32_tell:

; 302  :         else
; 303  :             ret=pos.QuadPart;

  000a6	48 8b 44 24 38	 mov	 rax, QWORD PTR pos$4[rsp]
  000ab	48 89 44 24 20	 mov	 QWORD PTR ret$[rsp], rax
$LN5@win32_tell:
$LN3@win32_tell:

; 304  :     }
; 305  :     return ret;

  000b0	48 8b 44 24 20	 mov	 rax, QWORD PTR ret$[rsp]

; 306  : }

  000b5	48 8b f8	 mov	 rdi, rax
  000b8	48 8b cc	 mov	 rcx, rsp
  000bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:win32_tell64_file_func$rtcFrameData
  000c2	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000c7	48 8b c7	 mov	 rax, rdi
  000ca	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000ce	5f		 pop	 rdi
  000cf	c3		 ret	 0
win32_tell64_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT win32_seek_file_func
_TEXT	SEGMENT
dwMoveMethod$ = 32
hFile$ = 40
ret$ = 48
pos$4 = 72
dwErr$5 = 84
tv66 = 88
opaque$ = 112
stream$ = 120
offset$ = 128
origin$ = 136
win32_seek_file_func PROC				; COMDAT

; 310  : {

$LN16:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00034	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 311  :     DWORD dwMoveMethod=0xFFFFFFFF;

  00039	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR dwMoveMethod$[rsp], -1 ; ffffffffH

; 312  :     HANDLE hFile = NULL;

  00041	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR hFile$[rsp], 0

; 313  : 
; 314  :     long ret=-1;

  0004a	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR ret$[rsp], -1

; 315  :     if (stream!=NULL)

  00052	48 83 7c 24 78
	00		 cmp	 QWORD PTR stream$[rsp], 0
  00058	74 0d		 je	 SHORT $LN4@win32_seek

; 316  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  0005a	48 8b 44 24 78	 mov	 rax, QWORD PTR stream$[rsp]
  0005f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00062	48 89 44 24 28	 mov	 QWORD PTR hFile$[rsp], rax
$LN4@win32_seek:

; 317  :     switch (origin)

  00067	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR origin$[rsp]
  0006e	89 44 24 58	 mov	 DWORD PTR tv66[rsp], eax
  00072	83 7c 24 58 00	 cmp	 DWORD PTR tv66[rsp], 0
  00077	74 24		 je	 SHORT $LN7@win32_seek
  00079	83 7c 24 58 01	 cmp	 DWORD PTR tv66[rsp], 1
  0007e	74 09		 je	 SHORT $LN5@win32_seek
  00080	83 7c 24 58 02	 cmp	 DWORD PTR tv66[rsp], 2
  00085	74 0c		 je	 SHORT $LN6@win32_seek
  00087	eb 1e		 jmp	 SHORT $LN8@win32_seek
$LN5@win32_seek:

; 318  :     {
; 319  :     case ZLIB_FILEFUNC_SEEK_CUR :
; 320  :         dwMoveMethod = FILE_CURRENT;

  00089	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR dwMoveMethod$[rsp], 1

; 321  :         break;

  00091	eb 1b		 jmp	 SHORT $LN2@win32_seek
$LN6@win32_seek:

; 322  :     case ZLIB_FILEFUNC_SEEK_END :
; 323  :         dwMoveMethod = FILE_END;

  00093	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR dwMoveMethod$[rsp], 2

; 324  :         break;

  0009b	eb 11		 jmp	 SHORT $LN2@win32_seek
$LN7@win32_seek:

; 325  :     case ZLIB_FILEFUNC_SEEK_SET :
; 326  :         dwMoveMethod = FILE_BEGIN;

  0009d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR dwMoveMethod$[rsp], 0

; 327  :         break;

  000a5	eb 07		 jmp	 SHORT $LN2@win32_seek
$LN8@win32_seek:

; 328  :     default: return -1;

  000a7	b8 ff ff ff ff	 mov	 eax, -1
  000ac	eb 5b		 jmp	 SHORT $LN1@win32_seek
$LN2@win32_seek:

; 329  :     }
; 330  : 
; 331  :     if (hFile != NULL)

  000ae	48 83 7c 24 28
	00		 cmp	 QWORD PTR hFile$[rsp], 0
  000b4	74 4f		 je	 SHORT $LN9@win32_seek

; 332  :     {
; 333  :         LARGE_INTEGER pos;
; 334  :         pos.QuadPart = offset;

  000b6	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR offset$[rsp]
  000bd	48 89 44 24 48	 mov	 QWORD PTR pos$4[rsp], rax

; 335  :         if (!MySetFilePointerEx(hFile, pos, NULL, dwMoveMethod))

  000c2	44 8b 4c 24 20	 mov	 r9d, DWORD PTR dwMoveMethod$[rsp]
  000c7	45 33 c0	 xor	 r8d, r8d
  000ca	48 8b 54 24 48	 mov	 rdx, QWORD PTR pos$4[rsp]
  000cf	48 8b 4c 24 28	 mov	 rcx, QWORD PTR hFile$[rsp]
  000d4	e8 00 00 00 00	 call	 MySetFilePointerEx
  000d9	85 c0		 test	 eax, eax
  000db	75 20		 jne	 SHORT $LN10@win32_seek

; 336  :         {
; 337  :             DWORD dwErr = GetLastError();

  000dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  000e3	89 44 24 54	 mov	 DWORD PTR dwErr$5[rsp], eax

; 338  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  000e7	48 8b 44 24 78	 mov	 rax, QWORD PTR stream$[rsp]
  000ec	8b 4c 24 54	 mov	 ecx, DWORD PTR dwErr$5[rsp]
  000f0	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 339  :             ret = -1;

  000f3	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR ret$[rsp], -1

; 340  :         }

  000fb	eb 08		 jmp	 SHORT $LN11@win32_seek
$LN10@win32_seek:

; 341  :         else
; 342  :             ret=0;

  000fd	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR ret$[rsp], 0
$LN11@win32_seek:
$LN9@win32_seek:

; 343  :     }
; 344  :     return ret;

  00105	8b 44 24 30	 mov	 eax, DWORD PTR ret$[rsp]
$LN1@win32_seek:

; 345  : }

  00109	48 8b f8	 mov	 rdi, rax
  0010c	48 8b cc	 mov	 rcx, rsp
  0010f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:win32_seek_file_func$rtcFrameData
  00116	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0011b	48 8b c7	 mov	 rax, rdi
  0011e	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00122	5f		 pop	 rdi
  00123	c3		 ret	 0
win32_seek_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT win32_seek64_file_func
_TEXT	SEGMENT
dwMoveMethod$ = 32
hFile$ = 40
ret$ = 48
pos$4 = 72
dwErr$5 = 84
tv66 = 88
opaque$ = 112
stream$ = 120
offset$ = 128
origin$ = 136
win32_seek64_file_func PROC				; COMDAT

; 348  : {

$LN16:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00034	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 349  :     DWORD dwMoveMethod=0xFFFFFFFF;

  00039	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR dwMoveMethod$[rsp], -1 ; ffffffffH

; 350  :     HANDLE hFile = NULL;

  00041	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR hFile$[rsp], 0

; 351  :     long ret=-1;

  0004a	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR ret$[rsp], -1

; 352  : 
; 353  :     if (stream!=NULL)

  00052	48 83 7c 24 78
	00		 cmp	 QWORD PTR stream$[rsp], 0
  00058	74 0d		 je	 SHORT $LN4@win32_seek

; 354  :         hFile = ((WIN32FILE_IOWIN*)stream)->hf;

  0005a	48 8b 44 24 78	 mov	 rax, QWORD PTR stream$[rsp]
  0005f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00062	48 89 44 24 28	 mov	 QWORD PTR hFile$[rsp], rax
$LN4@win32_seek:

; 355  : 
; 356  :     switch (origin)

  00067	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR origin$[rsp]
  0006e	89 44 24 58	 mov	 DWORD PTR tv66[rsp], eax
  00072	83 7c 24 58 00	 cmp	 DWORD PTR tv66[rsp], 0
  00077	74 24		 je	 SHORT $LN7@win32_seek
  00079	83 7c 24 58 01	 cmp	 DWORD PTR tv66[rsp], 1
  0007e	74 09		 je	 SHORT $LN5@win32_seek
  00080	83 7c 24 58 02	 cmp	 DWORD PTR tv66[rsp], 2
  00085	74 0c		 je	 SHORT $LN6@win32_seek
  00087	eb 1e		 jmp	 SHORT $LN8@win32_seek
$LN5@win32_seek:

; 357  :     {
; 358  :         case ZLIB_FILEFUNC_SEEK_CUR :
; 359  :             dwMoveMethod = FILE_CURRENT;

  00089	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR dwMoveMethod$[rsp], 1

; 360  :             break;

  00091	eb 1b		 jmp	 SHORT $LN2@win32_seek
$LN6@win32_seek:

; 361  :         case ZLIB_FILEFUNC_SEEK_END :
; 362  :             dwMoveMethod = FILE_END;

  00093	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR dwMoveMethod$[rsp], 2

; 363  :             break;

  0009b	eb 11		 jmp	 SHORT $LN2@win32_seek
$LN7@win32_seek:

; 364  :         case ZLIB_FILEFUNC_SEEK_SET :
; 365  :             dwMoveMethod = FILE_BEGIN;

  0009d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR dwMoveMethod$[rsp], 0

; 366  :             break;

  000a5	eb 07		 jmp	 SHORT $LN2@win32_seek
$LN8@win32_seek:

; 367  :         default: return -1;

  000a7	b8 ff ff ff ff	 mov	 eax, -1
  000ac	eb 5c		 jmp	 SHORT $LN1@win32_seek
$LN2@win32_seek:

; 368  :     }
; 369  : 
; 370  :     if (hFile)

  000ae	48 83 7c 24 28
	00		 cmp	 QWORD PTR hFile$[rsp], 0
  000b4	74 50		 je	 SHORT $LN9@win32_seek

; 371  :     {
; 372  :         LARGE_INTEGER pos;
; 373  :         pos.QuadPart = offset;

  000b6	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR offset$[rsp]
  000be	48 89 44 24 48	 mov	 QWORD PTR pos$4[rsp], rax

; 374  :         if (!MySetFilePointerEx(hFile, pos, NULL, dwMoveMethod))

  000c3	44 8b 4c 24 20	 mov	 r9d, DWORD PTR dwMoveMethod$[rsp]
  000c8	45 33 c0	 xor	 r8d, r8d
  000cb	48 8b 54 24 48	 mov	 rdx, QWORD PTR pos$4[rsp]
  000d0	48 8b 4c 24 28	 mov	 rcx, QWORD PTR hFile$[rsp]
  000d5	e8 00 00 00 00	 call	 MySetFilePointerEx
  000da	85 c0		 test	 eax, eax
  000dc	75 20		 jne	 SHORT $LN10@win32_seek

; 375  :         {
; 376  :             DWORD dwErr = GetLastError();

  000de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  000e4	89 44 24 54	 mov	 DWORD PTR dwErr$5[rsp], eax

; 377  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  000e8	48 8b 44 24 78	 mov	 rax, QWORD PTR stream$[rsp]
  000ed	8b 4c 24 54	 mov	 ecx, DWORD PTR dwErr$5[rsp]
  000f1	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 378  :             ret = -1;

  000f4	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR ret$[rsp], -1

; 379  :         }

  000fc	eb 08		 jmp	 SHORT $LN11@win32_seek
$LN10@win32_seek:

; 380  :         else
; 381  :             ret=0;

  000fe	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR ret$[rsp], 0
$LN11@win32_seek:
$LN9@win32_seek:

; 382  :     }
; 383  :     return ret;

  00106	8b 44 24 30	 mov	 eax, DWORD PTR ret$[rsp]
$LN1@win32_seek:

; 384  : }

  0010a	48 8b f8	 mov	 rdi, rax
  0010d	48 8b cc	 mov	 rcx, rsp
  00110	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:win32_seek64_file_func$rtcFrameData
  00117	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0011c	48 8b c7	 mov	 rax, rdi
  0011f	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00123	5f		 pop	 rdi
  00124	c3		 ret	 0
win32_seek64_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT win32_close_file_func
_TEXT	SEGMENT
ret$ = 32
hFile$1 = 40
opaque$ = 64
stream$ = 72
win32_close_file_func PROC				; COMDAT

; 387  : {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 388  :     int ret=-1;

  0002f	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR ret$[rsp], -1

; 389  : 
; 390  :     if (stream!=NULL)

  00037	48 83 7c 24 48
	00		 cmp	 QWORD PTR stream$[rsp], 0
  0003d	74 33		 je	 SHORT $LN2@win32_clos

; 391  :     {
; 392  :         HANDLE hFile;
; 393  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  0003f	48 8b 44 24 48	 mov	 rax, QWORD PTR stream$[rsp]
  00044	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00047	48 89 44 24 28	 mov	 QWORD PTR hFile$1[rsp], rax

; 394  :         if (hFile != NULL)

  0004c	48 83 7c 24 28
	00		 cmp	 QWORD PTR hFile$1[rsp], 0
  00052	74 13		 je	 SHORT $LN3@win32_clos

; 395  :         {
; 396  :             CloseHandle(hFile);

  00054	48 8b 4c 24 28	 mov	 rcx, QWORD PTR hFile$1[rsp]
  00059	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 397  :             ret=0;

  0005f	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR ret$[rsp], 0
$LN3@win32_clos:

; 398  :         }
; 399  :         free(stream);

  00067	48 8b 4c 24 48	 mov	 rcx, QWORD PTR stream$[rsp]
  0006c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN2@win32_clos:

; 400  :     }
; 401  :     return ret;

  00072	8b 44 24 20	 mov	 eax, DWORD PTR ret$[rsp]

; 402  : }

  00076	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0007a	5f		 pop	 rdi
  0007b	c3		 ret	 0
win32_close_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT win32_error_file_func
_TEXT	SEGMENT
ret$ = 32
opaque$ = 64
stream$ = 72
win32_error_file_func PROC				; COMDAT

; 405  : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 406  :     int ret=-1;

  0002f	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR ret$[rsp], -1

; 407  :     if (stream!=NULL)

  00037	48 83 7c 24 48
	00		 cmp	 QWORD PTR stream$[rsp], 0
  0003d	74 0c		 je	 SHORT $LN2@win32_erro

; 408  :     {
; 409  :         ret = ((WIN32FILE_IOWIN*)stream) -> error;

  0003f	48 8b 44 24 48	 mov	 rax, QWORD PTR stream$[rsp]
  00044	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00047	89 44 24 20	 mov	 DWORD PTR ret$[rsp], eax
$LN2@win32_erro:

; 410  :     }
; 411  :     return ret;

  0004b	8b 44 24 20	 mov	 eax, DWORD PTR ret$[rsp]

; 412  : }

  0004f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00053	5f		 pop	 rdi
  00054	c3		 ret	 0
win32_error_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT fill_win32_filefunc
_TEXT	SEGMENT
pzlib_filefunc_def$ = 48
fill_win32_filefunc PROC				; COMDAT

; 415  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 416  :     pzlib_filefunc_def->zopen_file = win32_open_file_func;

  0002a	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:win32_open_file_func
  00036	48 89 08	 mov	 QWORD PTR [rax], rcx

; 417  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  00039	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:win32_read_file_func
  00045	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 418  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00049	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:win32_write_file_func
  00055	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 419  :     pzlib_filefunc_def->ztell_file = win32_tell_file_func;

  00059	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0005e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:win32_tell_file_func
  00065	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 420  :     pzlib_filefunc_def->zseek_file = win32_seek_file_func;

  00069	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0006e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:win32_seek_file_func
  00075	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 421  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  00079	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0007e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:win32_close_file_func
  00085	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 422  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  00089	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0008e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:win32_error_file_func
  00095	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx

; 423  :     pzlib_filefunc_def->opaque = NULL;

  00099	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0009e	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0

; 424  : }

  000a6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000aa	5f		 pop	 rdi
  000ab	c3		 ret	 0
fill_win32_filefunc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT fill_win32_filefunc64
_TEXT	SEGMENT
pzlib_filefunc_def$ = 48
fill_win32_filefunc64 PROC				; COMDAT

; 427  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 428  :     pzlib_filefunc_def->zopen64_file = win32_open64_file_func;

  0002a	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:win32_open64_file_func
  00036	48 89 08	 mov	 QWORD PTR [rax], rcx

; 429  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  00039	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:win32_read_file_func
  00045	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 430  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00049	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:win32_write_file_func
  00055	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 431  :     pzlib_filefunc_def->ztell64_file = win32_tell64_file_func;

  00059	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0005e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:win32_tell64_file_func
  00065	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 432  :     pzlib_filefunc_def->zseek64_file = win32_seek64_file_func;

  00069	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0006e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:win32_seek64_file_func
  00075	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 433  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  00079	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0007e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:win32_close_file_func
  00085	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 434  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  00089	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0008e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:win32_error_file_func
  00095	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx

; 435  :     pzlib_filefunc_def->opaque = NULL;

  00099	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0009e	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0

; 436  : }

  000a6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000aa	5f		 pop	 rdi
  000ab	c3		 ret	 0
fill_win32_filefunc64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT fill_win32_filefunc64A
_TEXT	SEGMENT
pzlib_filefunc_def$ = 48
fill_win32_filefunc64A PROC				; COMDAT

; 440  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 441  :     pzlib_filefunc_def->zopen64_file = win32_open64_file_funcA;

  0002a	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:win32_open64_file_funcA
  00036	48 89 08	 mov	 QWORD PTR [rax], rcx

; 442  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  00039	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:win32_read_file_func
  00045	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 443  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00049	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:win32_write_file_func
  00055	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 444  :     pzlib_filefunc_def->ztell64_file = win32_tell64_file_func;

  00059	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0005e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:win32_tell64_file_func
  00065	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 445  :     pzlib_filefunc_def->zseek64_file = win32_seek64_file_func;

  00069	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0006e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:win32_seek64_file_func
  00075	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 446  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  00079	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0007e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:win32_close_file_func
  00085	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 447  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  00089	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0008e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:win32_error_file_func
  00095	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx

; 448  :     pzlib_filefunc_def->opaque = NULL;

  00099	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0009e	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0

; 449  : }

  000a6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000aa	5f		 pop	 rdi
  000ab	c3		 ret	 0
fill_win32_filefunc64A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT fill_win32_filefunc64W
_TEXT	SEGMENT
pzlib_filefunc_def$ = 48
fill_win32_filefunc64W PROC				; COMDAT

; 453  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 454  :     pzlib_filefunc_def->zopen64_file = win32_open64_file_funcW;

  0002a	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:win32_open64_file_funcW
  00036	48 89 08	 mov	 QWORD PTR [rax], rcx

; 455  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  00039	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:win32_read_file_func
  00045	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 456  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00049	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:win32_write_file_func
  00055	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 457  :     pzlib_filefunc_def->ztell64_file = win32_tell64_file_func;

  00059	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0005e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:win32_tell64_file_func
  00065	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 458  :     pzlib_filefunc_def->zseek64_file = win32_seek64_file_func;

  00069	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0006e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:win32_seek64_file_func
  00075	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 459  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  00079	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0007e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:win32_close_file_func
  00085	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 460  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  00089	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0008e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:win32_error_file_func
  00095	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx

; 461  :     pzlib_filefunc_def->opaque = NULL;

  00099	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0009e	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0

; 462  : }

  000a6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000aa	5f		 pop	 rdi
  000ab	c3		 ret	 0
fill_win32_filefunc64W ENDP
_TEXT	ENDS
END

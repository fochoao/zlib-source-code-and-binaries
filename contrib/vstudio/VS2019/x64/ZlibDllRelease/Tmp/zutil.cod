; Listing generated by Microsoft (R) Optimizing Compiler Version 19.20.27525.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	z_errmsg
PUBLIC	??_C@_0BA@MOKMMFOD@need?5dictionary@		; `string'
PUBLIC	??_C@_0L@FNAOCBOG@stream?5end@			; `string'
PUBLIC	??_C@_0L@KIJFAKBJ@file?5error@			; `string'
PUBLIC	??_C@_0N@MKKNPMJD@stream?5error@		; `string'
PUBLIC	??_C@_0L@HAHMBNLP@data?5error@			; `string'
PUBLIC	??_C@_0BE@OGGJBMCE@insufficient?5memory@	; `string'
PUBLIC	??_C@_0N@DFPGLBGC@buffer?5error@		; `string'
PUBLIC	??_C@_0BF@CJFPCCEG@incompatible?5version@	; `string'
;	COMDAT ??_C@_0BF@CJFPCCEG@incompatible?5version@
CONST	SEGMENT
??_C@_0BF@CJFPCCEG@incompatible?5version@ DB 'incompatible version', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DFPGLBGC@buffer?5error@
CONST	SEGMENT
??_C@_0N@DFPGLBGC@buffer?5error@ DB 'buffer error', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OGGJBMCE@insufficient?5memory@
CONST	SEGMENT
??_C@_0BE@OGGJBMCE@insufficient?5memory@ DB 'insufficient memory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HAHMBNLP@data?5error@
CONST	SEGMENT
??_C@_0L@HAHMBNLP@data?5error@ DB 'data error', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MKKNPMJD@stream?5error@
CONST	SEGMENT
??_C@_0N@MKKNPMJD@stream?5error@ DB 'stream error', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KIJFAKBJ@file?5error@
CONST	SEGMENT
??_C@_0L@KIJFAKBJ@file?5error@ DB 'file error', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FNAOCBOG@stream?5end@
CONST	SEGMENT
??_C@_0L@FNAOCBOG@stream?5end@ DB 'stream end', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MOKMMFOD@need?5dictionary@
CONST	SEGMENT
??_C@_0BA@MOKMMFOD@need?5dictionary@ DB 'need dictionary', 00H ; `string'
	ORG $+15
z_errmsg DQ	FLAT:??_C@_0BA@MOKMMFOD@need?5dictionary@
	DQ	FLAT:??_C@_0L@FNAOCBOG@stream?5end@
	DQ	FLAT:??_C@_00CNPNBAHC@@
	DQ	FLAT:??_C@_0L@KIJFAKBJ@file?5error@
	DQ	FLAT:??_C@_0N@MKKNPMJD@stream?5error@
	DQ	FLAT:??_C@_0L@HAHMBNLP@data?5error@
	DQ	FLAT:??_C@_0BE@OGGJBMCE@insufficient?5memory@
	DQ	FLAT:??_C@_0N@DFPGLBGC@buffer?5error@
	DQ	FLAT:??_C@_0BF@CJFPCCEG@incompatible?5version@
	DQ	FLAT:??_C@_00CNPNBAHC@@
__95347B96_ctype@h DB 01H
__149DB6BE_basetsd@h DB 01H
__9CFFAB73_corecrt_memcpy_s@h DB 01H
__55B7CB8D_corecrt_wstring@h DB 01H
__2F7506B6_string@h DB 01H
__5BA8817F_winnt@h DB 01H
__8421AFE7_processthreadsapi@h DB 01H
__F192E00B_memoryapi@h DB 01H
__0DF854E2_winerror@h DB 01H
__940BF1C4_winbase@h DB 01H
__78A3E64A_stralign@h DB 01H
__DB664BEB_corecrt_stdio_config@h DB 01H
__E28BBA23_corecrt_wstdio@h DB 01H
__4A1C29A8_stdio@h DB 01H
__2B8D9255_zutil@c DB 01H
msvcjmc	ENDS
PUBLIC	zError
PUBLIC	zlibCompileFlags
PUBLIC	zlibVersion
PUBLIC	zcfree
PUBLIC	zcalloc
;	COMDAT pdata
pdata	SEGMENT
$pdata$zError DD imagerel $LN4
	DD	imagerel $LN4+68
	DD	imagerel $unwind$zError
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zlibCompileFlags DD imagerel $LN32
	DD	imagerel $LN32+360
	DD	imagerel $unwind$zlibCompileFlags
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zlibVersion DD imagerel $LN4
	DD	imagerel $LN4+46
	DD	imagerel $unwind$zlibVersion
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zcfree DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$zcfree
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zcalloc DD imagerel $LN4
	DD	imagerel $LN4+76
	DD	imagerel $unwind$zcalloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zcalloc DD 022701H
	DD	0700f3213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zcfree DD 022301H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zlibVersion DD 021501H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zlibCompileFlags DD 021501H
	DD	070027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zError DD 021c01H
	DD	070053209H
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\zutil.c
;	COMDAT zcalloc
_TEXT	SEGMENT
opaque$ = 48
items$ = 56
size$ = 64
zcalloc	PROC						; COMDAT

; 309  : {

$LN4:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	57		 push	 rdi
  0000f	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 08 00 00 00	 mov	 ecx, 8
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 310  :     (void)opaque;
; 311  :     return sizeof(uInt) > 2 ? (voidpf)malloc(items * size) :

  00033	8b 44 24 38	 mov	 eax, DWORD PTR items$[rsp]
  00037	0f af 44 24 40	 imul	 eax, DWORD PTR size$[rsp]
  0003c	8b c0		 mov	 eax, eax
  0003e	8b c8		 mov	 ecx, eax
  00040	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc

; 312  :                               (voidpf)calloc(items, size);
; 313  : }

  00046	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004a	5f		 pop	 rdi
  0004b	c3		 ret	 0
zcalloc	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\zutil.c
;	COMDAT zcfree
_TEXT	SEGMENT
opaque$ = 48
ptr$ = 56
zcfree	PROC						; COMDAT

; 318  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 319  :     (void)opaque;
; 320  :     free(ptr);

  0002f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ptr$[rsp]
  00034	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 321  : }

  0003a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003e	5f		 pop	 rdi
  0003f	c3		 ret	 0
zcfree	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\zutil.c
;	COMDAT zlibVersion
_TEXT	SEGMENT
zlibVersion PROC					; COMDAT

; 28   : {

$LN4:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b fc	 mov	 rdi, rsp
  00009	b9 08 00 00 00	 mov	 ecx, 8
  0000e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00013	f3 ab		 rep stosd
  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0001c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 29   :     return ZLIB_VERSION;

  00021	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06CJNJFBNP@1?42?411@

; 30   : }

  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5f		 pop	 rdi
  0002d	c3		 ret	 0
zlibVersion ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\zutil.c
;	COMDAT zlibCompileFlags
_TEXT	SEGMENT
flags$ = 32
tv64 = 36
tv71 = 40
tv78 = 44
tv85 = 48
zlibCompileFlags PROC					; COMDAT

; 33   : {

$LN32:
  00000	40 57		 push	 rdi
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00006	48 8b fc	 mov	 rdi, rsp
  00009	b9 10 00 00 00	 mov	 ecx, 16
  0000e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00013	f3 ab		 rep stosd
  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0001c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 34   :     uLong flags;
; 35   : 
; 36   :     flags = 0;

  00021	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR flags$[rsp], 0

; 37   :     switch ((int)(sizeof(uInt))) {

  00029	c7 44 24 24 04
	00 00 00	 mov	 DWORD PTR tv64[rsp], 4
  00031	83 7c 24 24 02	 cmp	 DWORD PTR tv64[rsp], 2
  00036	74 10		 je	 SHORT $LN10@zlibCompil
  00038	83 7c 24 24 04	 cmp	 DWORD PTR tv64[rsp], 4
  0003d	74 0b		 je	 SHORT $LN11@zlibCompil
  0003f	83 7c 24 24 08	 cmp	 DWORD PTR tv64[rsp], 8
  00044	74 10		 je	 SHORT $LN12@zlibCompil
  00046	eb 1b		 jmp	 SHORT $LN13@zlibCompil
$LN10@zlibCompil:

; 38   :     case 2:     break;

  00048	eb 24		 jmp	 SHORT $LN2@zlibCompil
$LN11@zlibCompil:

; 39   :     case 4:     flags += 1;     break;

  0004a	8b 44 24 20	 mov	 eax, DWORD PTR flags$[rsp]
  0004e	ff c0		 inc	 eax
  00050	89 44 24 20	 mov	 DWORD PTR flags$[rsp], eax
  00054	eb 18		 jmp	 SHORT $LN2@zlibCompil
$LN12@zlibCompil:

; 40   :     case 8:     flags += 2;     break;

  00056	8b 44 24 20	 mov	 eax, DWORD PTR flags$[rsp]
  0005a	83 c0 02	 add	 eax, 2
  0005d	89 44 24 20	 mov	 DWORD PTR flags$[rsp], eax
  00061	eb 0b		 jmp	 SHORT $LN2@zlibCompil
$LN13@zlibCompil:

; 41   :     default:    flags += 3;

  00063	8b 44 24 20	 mov	 eax, DWORD PTR flags$[rsp]
  00067	83 c0 03	 add	 eax, 3
  0006a	89 44 24 20	 mov	 DWORD PTR flags$[rsp], eax
$LN2@zlibCompil:

; 42   :     }
; 43   :     switch ((int)(sizeof(uLong))) {

  0006e	c7 44 24 28 04
	00 00 00	 mov	 DWORD PTR tv71[rsp], 4
  00076	83 7c 24 28 02	 cmp	 DWORD PTR tv71[rsp], 2
  0007b	74 10		 je	 SHORT $LN14@zlibCompil
  0007d	83 7c 24 28 04	 cmp	 DWORD PTR tv71[rsp], 4
  00082	74 0b		 je	 SHORT $LN15@zlibCompil
  00084	83 7c 24 28 08	 cmp	 DWORD PTR tv71[rsp], 8
  00089	74 11		 je	 SHORT $LN16@zlibCompil
  0008b	eb 1c		 jmp	 SHORT $LN17@zlibCompil
$LN14@zlibCompil:

; 44   :     case 2:     break;

  0008d	eb 25		 jmp	 SHORT $LN4@zlibCompil
$LN15@zlibCompil:

; 45   :     case 4:     flags += 1 << 2;        break;

  0008f	8b 44 24 20	 mov	 eax, DWORD PTR flags$[rsp]
  00093	83 c0 04	 add	 eax, 4
  00096	89 44 24 20	 mov	 DWORD PTR flags$[rsp], eax
  0009a	eb 18		 jmp	 SHORT $LN4@zlibCompil
$LN16@zlibCompil:

; 46   :     case 8:     flags += 2 << 2;        break;

  0009c	8b 44 24 20	 mov	 eax, DWORD PTR flags$[rsp]
  000a0	83 c0 08	 add	 eax, 8
  000a3	89 44 24 20	 mov	 DWORD PTR flags$[rsp], eax
  000a7	eb 0b		 jmp	 SHORT $LN4@zlibCompil
$LN17@zlibCompil:

; 47   :     default:    flags += 3 << 2;

  000a9	8b 44 24 20	 mov	 eax, DWORD PTR flags$[rsp]
  000ad	83 c0 0c	 add	 eax, 12
  000b0	89 44 24 20	 mov	 DWORD PTR flags$[rsp], eax
$LN4@zlibCompil:

; 48   :     }
; 49   :     switch ((int)(sizeof(voidpf))) {

  000b4	c7 44 24 2c 08
	00 00 00	 mov	 DWORD PTR tv78[rsp], 8
  000bc	83 7c 24 2c 02	 cmp	 DWORD PTR tv78[rsp], 2
  000c1	74 10		 je	 SHORT $LN18@zlibCompil
  000c3	83 7c 24 2c 04	 cmp	 DWORD PTR tv78[rsp], 4
  000c8	74 0b		 je	 SHORT $LN19@zlibCompil
  000ca	83 7c 24 2c 08	 cmp	 DWORD PTR tv78[rsp], 8
  000cf	74 11		 je	 SHORT $LN20@zlibCompil
  000d1	eb 1c		 jmp	 SHORT $LN21@zlibCompil
$LN18@zlibCompil:

; 50   :     case 2:     break;

  000d3	eb 25		 jmp	 SHORT $LN6@zlibCompil
$LN19@zlibCompil:

; 51   :     case 4:     flags += 1 << 4;        break;

  000d5	8b 44 24 20	 mov	 eax, DWORD PTR flags$[rsp]
  000d9	83 c0 10	 add	 eax, 16
  000dc	89 44 24 20	 mov	 DWORD PTR flags$[rsp], eax
  000e0	eb 18		 jmp	 SHORT $LN6@zlibCompil
$LN20@zlibCompil:

; 52   :     case 8:     flags += 2 << 4;        break;

  000e2	8b 44 24 20	 mov	 eax, DWORD PTR flags$[rsp]
  000e6	83 c0 20	 add	 eax, 32			; 00000020H
  000e9	89 44 24 20	 mov	 DWORD PTR flags$[rsp], eax
  000ed	eb 0b		 jmp	 SHORT $LN6@zlibCompil
$LN21@zlibCompil:

; 53   :     default:    flags += 3 << 4;

  000ef	8b 44 24 20	 mov	 eax, DWORD PTR flags$[rsp]
  000f3	83 c0 30	 add	 eax, 48			; 00000030H
  000f6	89 44 24 20	 mov	 DWORD PTR flags$[rsp], eax
$LN6@zlibCompil:

; 54   :     }
; 55   :     switch ((int)(sizeof(z_off_t))) {

  000fa	c7 44 24 30 04
	00 00 00	 mov	 DWORD PTR tv85[rsp], 4
  00102	83 7c 24 30 02	 cmp	 DWORD PTR tv85[rsp], 2
  00107	74 10		 je	 SHORT $LN22@zlibCompil
  00109	83 7c 24 30 04	 cmp	 DWORD PTR tv85[rsp], 4
  0010e	74 0b		 je	 SHORT $LN23@zlibCompil
  00110	83 7c 24 30 08	 cmp	 DWORD PTR tv85[rsp], 8
  00115	74 11		 je	 SHORT $LN24@zlibCompil
  00117	eb 1e		 jmp	 SHORT $LN25@zlibCompil
$LN22@zlibCompil:

; 56   :     case 2:     break;

  00119	eb 29		 jmp	 SHORT $LN8@zlibCompil
$LN23@zlibCompil:

; 57   :     case 4:     flags += 1 << 6;        break;

  0011b	8b 44 24 20	 mov	 eax, DWORD PTR flags$[rsp]
  0011f	83 c0 40	 add	 eax, 64			; 00000040H
  00122	89 44 24 20	 mov	 DWORD PTR flags$[rsp], eax
  00126	eb 1c		 jmp	 SHORT $LN8@zlibCompil
$LN24@zlibCompil:

; 58   :     case 8:     flags += 2 << 6;        break;

  00128	8b 44 24 20	 mov	 eax, DWORD PTR flags$[rsp]
  0012c	05 80 00 00 00	 add	 eax, 128		; 00000080H
  00131	89 44 24 20	 mov	 DWORD PTR flags$[rsp], eax
  00135	eb 0d		 jmp	 SHORT $LN8@zlibCompil
$LN25@zlibCompil:

; 59   :     default:    flags += 3 << 6;

  00137	8b 44 24 20	 mov	 eax, DWORD PTR flags$[rsp]
  0013b	05 c0 00 00 00	 add	 eax, 192		; 000000c0H
  00140	89 44 24 20	 mov	 DWORD PTR flags$[rsp], eax
$LN8@zlibCompil:

; 60   :     }
; 61   : #ifdef ZLIB_DEBUG
; 62   :     flags += 1 << 8;
; 63   : #endif
; 64   : #if defined(ASMV) || defined(ASMINF)
; 65   :     flags += 1 << 9;

  00144	8b 44 24 20	 mov	 eax, DWORD PTR flags$[rsp]
  00148	05 00 02 00 00	 add	 eax, 512		; 00000200H
  0014d	89 44 24 20	 mov	 DWORD PTR flags$[rsp], eax

; 66   : #endif
; 67   : #ifdef ZLIB_WINAPI
; 68   :     flags += 1 << 10;

  00151	8b 44 24 20	 mov	 eax, DWORD PTR flags$[rsp]
  00155	05 00 04 00 00	 add	 eax, 1024		; 00000400H
  0015a	89 44 24 20	 mov	 DWORD PTR flags$[rsp], eax

; 69   : #endif
; 70   : #ifdef BUILDFIXED
; 71   :     flags += 1 << 12;
; 72   : #endif
; 73   : #ifdef DYNAMIC_CRC_TABLE
; 74   :     flags += 1 << 13;
; 75   : #endif
; 76   : #ifdef NO_GZCOMPRESS
; 77   :     flags += 1L << 16;
; 78   : #endif
; 79   : #ifdef NO_GZIP
; 80   :     flags += 1L << 17;
; 81   : #endif
; 82   : #ifdef PKZIP_BUG_WORKAROUND
; 83   :     flags += 1L << 20;
; 84   : #endif
; 85   : #ifdef FASTEST
; 86   :     flags += 1L << 21;
; 87   : #endif
; 88   : #if defined(STDC) || defined(Z_HAVE_STDARG_H)
; 89   : #  ifdef NO_vsnprintf
; 90   :     flags += 1L << 25;
; 91   : #    ifdef HAS_vsprintf_void
; 92   :     flags += 1L << 26;
; 93   : #    endif
; 94   : #  else
; 95   : #    ifdef HAS_vsnprintf_void
; 96   :     flags += 1L << 26;
; 97   : #    endif
; 98   : #  endif
; 99   : #else
; 100  :     flags += 1L << 24;
; 101  : #  ifdef NO_snprintf
; 102  :     flags += 1L << 25;
; 103  : #    ifdef HAS_sprintf_void
; 104  :     flags += 1L << 26;
; 105  : #    endif
; 106  : #  else
; 107  : #    ifdef HAS_snprintf_void
; 108  :     flags += 1L << 26;
; 109  : #    endif
; 110  : #  endif
; 111  : #endif
; 112  :     return flags;

  0015e	8b 44 24 20	 mov	 eax, DWORD PTR flags$[rsp]

; 113  : }

  00162	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00166	5f		 pop	 rdi
  00167	c3		 ret	 0
zlibCompileFlags ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\zutil.c
;	COMDAT zError
_TEXT	SEGMENT
err$ = 48
zError	PROC						; COMDAT

; 135  : {

$LN4:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	57		 push	 rdi
  00005	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00009	48 8b fc	 mov	 rdi, rsp
  0000c	b9 08 00 00 00	 mov	 ecx, 8
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	8b 4c 24 30	 mov	 ecx, DWORD PTR [rsp+48]
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00023	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 136  :     return ERR_MSG(err);

  00028	b8 02 00 00 00	 mov	 eax, 2
  0002d	2b 44 24 30	 sub	 eax, DWORD PTR err$[rsp]
  00031	48 98		 cdqe
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z_errmsg
  0003a	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]

; 137  : }

  0003e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00042	5f		 pop	 rdi
  00043	c3		 ret	 0
zError	ENDP
_TEXT	ENDS
END

; Listing generated by Microsoft (R) Optimizing Compiler Version 19.20.27525.0 

	TITLE	e:\cpython\externals\zlib-1.2.11\zutil.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	_z_errmsg
PUBLIC	??_C@_0BA@MOKMMFOD@need?5dictionary@		; `string'
PUBLIC	??_C@_0L@FNAOCBOG@stream?5end@			; `string'
PUBLIC	??_C@_0L@KIJFAKBJ@file?5error@			; `string'
PUBLIC	??_C@_0N@MKKNPMJD@stream?5error@		; `string'
PUBLIC	??_C@_0L@HAHMBNLP@data?5error@			; `string'
PUBLIC	??_C@_0BE@OGGJBMCE@insufficient?5memory@	; `string'
PUBLIC	??_C@_0N@DFPGLBGC@buffer?5error@		; `string'
PUBLIC	??_C@_0BF@CJFPCCEG@incompatible?5version@	; `string'
;	COMDAT ??_C@_0BF@CJFPCCEG@incompatible?5version@
CONST	SEGMENT
??_C@_0BF@CJFPCCEG@incompatible?5version@ DB 'incompatible version', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DFPGLBGC@buffer?5error@
CONST	SEGMENT
??_C@_0N@DFPGLBGC@buffer?5error@ DB 'buffer error', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OGGJBMCE@insufficient?5memory@
CONST	SEGMENT
??_C@_0BE@OGGJBMCE@insufficient?5memory@ DB 'insufficient memory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HAHMBNLP@data?5error@
CONST	SEGMENT
??_C@_0L@HAHMBNLP@data?5error@ DB 'data error', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MKKNPMJD@stream?5error@
CONST	SEGMENT
??_C@_0N@MKKNPMJD@stream?5error@ DB 'stream error', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KIJFAKBJ@file?5error@
CONST	SEGMENT
??_C@_0L@KIJFAKBJ@file?5error@ DB 'file error', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FNAOCBOG@stream?5end@
CONST	SEGMENT
??_C@_0L@FNAOCBOG@stream?5end@ DB 'stream end', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MOKMMFOD@need?5dictionary@
CONST	SEGMENT
??_C@_0BA@MOKMMFOD@need?5dictionary@ DB 'need dictionary', 00H ; `string'
	ORG $+3
_z_errmsg DD	FLAT:??_C@_0BA@MOKMMFOD@need?5dictionary@
	DD	FLAT:??_C@_0L@FNAOCBOG@stream?5end@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:??_C@_0L@KIJFAKBJ@file?5error@
	DD	FLAT:??_C@_0N@MKKNPMJD@stream?5error@
	DD	FLAT:??_C@_0L@HAHMBNLP@data?5error@
	DD	FLAT:??_C@_0BE@OGGJBMCE@insufficient?5memory@
	DD	FLAT:??_C@_0N@DFPGLBGC@buffer?5error@
	DD	FLAT:??_C@_0BF@CJFPCCEG@incompatible?5version@
	DD	FLAT:??_C@_00CNPNBAHC@@
__95347B96_ctype@h DB 01H
__149DB6BE_basetsd@h DB 01H
__9CFFAB73_corecrt_memcpy_s@h DB 01H
__55B7CB8D_corecrt_wstring@h DB 01H
__2F7506B6_string@h DB 01H
__5BA8817F_winnt@h DB 01H
__8421AFE7_processthreadsapi@h DB 01H
__F192E00B_memoryapi@h DB 01H
__0DF854E2_winerror@h DB 01H
__940BF1C4_winbase@h DB 01H
__78A3E64A_stralign@h DB 01H
__DB664BEB_corecrt_stdio_config@h DB 01H
__E28BBA23_corecrt_wstdio@h DB 01H
__4A1C29A8_stdio@h DB 01H
__2B8D9255_zutil@c DB 01H
msvcjmc	ENDS
PUBLIC	_zError@4
PUBLIC	_zlibCompileFlags@0
PUBLIC	_zlibVersion@0
PUBLIC	_zcfree
PUBLIC	_zcalloc
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\zutil.c
;	COMDAT _zcalloc
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_items$ = 12						; size = 4
_size$ = 16						; size = 4
_zcalloc PROC						; COMDAT

; 309  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 310  :     (void)opaque;
; 311  :     return sizeof(uInt) > 2 ? (voidpf)malloc(items * size) :

  0000d	8b 45 0c	 mov	 eax, DWORD PTR _items$[ebp]
  00010	0f af 45 10	 imul	 eax, DWORD PTR _size$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _malloc
  0001a	83 c4 04	 add	 esp, 4

; 312  :                               (voidpf)calloc(items, size);
; 313  : }

  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
_zcalloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\zutil.c
;	COMDAT _zcfree
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_ptr$ = 12						; size = 4
_zcfree	PROC						; COMDAT

; 318  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 319  :     (void)opaque;
; 320  :     free(ptr);

  0000d	8b 45 0c	 mov	 eax, DWORD PTR _ptr$[ebp]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 _free
  00016	83 c4 04	 add	 esp, 4

; 321  : }

  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
_zcfree	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\zutil.c
;	COMDAT _zlibVersion@0
_TEXT	SEGMENT
_zlibVersion@0 PROC					; COMDAT

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 29   :     return ZLIB_VERSION;

  0000d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_06CJNJFBNP@1?42?411@

; 30   : }

  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
_zlibVersion@0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\zutil.c
;	COMDAT _zlibCompileFlags@0
_TEXT	SEGMENT
tv85 = -20						; size = 4
tv78 = -16						; size = 4
tv71 = -12						; size = 4
tv64 = -8						; size = 4
_flags$ = -4						; size = 4
_zlibCompileFlags@0 PROC				; COMDAT

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001a	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 34   :     uLong flags;
; 35   : 
; 36   :     flags = 0;

  00024	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _flags$[ebp], 0

; 37   :     switch ((int)(sizeof(uInt))) {

  0002b	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR tv64[ebp], 4
  00032	83 7d f8 02	 cmp	 DWORD PTR tv64[ebp], 2
  00036	74 0e		 je	 SHORT $LN10@zlibCompil
  00038	83 7d f8 04	 cmp	 DWORD PTR tv64[ebp], 4
  0003c	74 0a		 je	 SHORT $LN11@zlibCompil
  0003e	83 7d f8 08	 cmp	 DWORD PTR tv64[ebp], 8
  00042	74 0f		 je	 SHORT $LN12@zlibCompil
  00044	eb 18		 jmp	 SHORT $LN13@zlibCompil
$LN10@zlibCompil:

; 38   :     case 2:     break;

  00046	eb 1f		 jmp	 SHORT $LN2@zlibCompil
$LN11@zlibCompil:

; 39   :     case 4:     flags += 1;     break;

  00048	8b 45 fc	 mov	 eax, DWORD PTR _flags$[ebp]
  0004b	83 c0 01	 add	 eax, 1
  0004e	89 45 fc	 mov	 DWORD PTR _flags$[ebp], eax
  00051	eb 14		 jmp	 SHORT $LN2@zlibCompil
$LN12@zlibCompil:

; 40   :     case 8:     flags += 2;     break;

  00053	8b 4d fc	 mov	 ecx, DWORD PTR _flags$[ebp]
  00056	83 c1 02	 add	 ecx, 2
  00059	89 4d fc	 mov	 DWORD PTR _flags$[ebp], ecx
  0005c	eb 09		 jmp	 SHORT $LN2@zlibCompil
$LN13@zlibCompil:

; 41   :     default:    flags += 3;

  0005e	8b 55 fc	 mov	 edx, DWORD PTR _flags$[ebp]
  00061	83 c2 03	 add	 edx, 3
  00064	89 55 fc	 mov	 DWORD PTR _flags$[ebp], edx
$LN2@zlibCompil:

; 42   :     }
; 43   :     switch ((int)(sizeof(uLong))) {

  00067	c7 45 f4 04 00
	00 00		 mov	 DWORD PTR tv71[ebp], 4
  0006e	83 7d f4 02	 cmp	 DWORD PTR tv71[ebp], 2
  00072	74 0e		 je	 SHORT $LN14@zlibCompil
  00074	83 7d f4 04	 cmp	 DWORD PTR tv71[ebp], 4
  00078	74 0a		 je	 SHORT $LN15@zlibCompil
  0007a	83 7d f4 08	 cmp	 DWORD PTR tv71[ebp], 8
  0007e	74 0f		 je	 SHORT $LN16@zlibCompil
  00080	eb 18		 jmp	 SHORT $LN17@zlibCompil
$LN14@zlibCompil:

; 44   :     case 2:     break;

  00082	eb 1f		 jmp	 SHORT $LN4@zlibCompil
$LN15@zlibCompil:

; 45   :     case 4:     flags += 1 << 2;        break;

  00084	8b 45 fc	 mov	 eax, DWORD PTR _flags$[ebp]
  00087	83 c0 04	 add	 eax, 4
  0008a	89 45 fc	 mov	 DWORD PTR _flags$[ebp], eax
  0008d	eb 14		 jmp	 SHORT $LN4@zlibCompil
$LN16@zlibCompil:

; 46   :     case 8:     flags += 2 << 2;        break;

  0008f	8b 4d fc	 mov	 ecx, DWORD PTR _flags$[ebp]
  00092	83 c1 08	 add	 ecx, 8
  00095	89 4d fc	 mov	 DWORD PTR _flags$[ebp], ecx
  00098	eb 09		 jmp	 SHORT $LN4@zlibCompil
$LN17@zlibCompil:

; 47   :     default:    flags += 3 << 2;

  0009a	8b 55 fc	 mov	 edx, DWORD PTR _flags$[ebp]
  0009d	83 c2 0c	 add	 edx, 12			; 0000000cH
  000a0	89 55 fc	 mov	 DWORD PTR _flags$[ebp], edx
$LN4@zlibCompil:

; 48   :     }
; 49   :     switch ((int)(sizeof(voidpf))) {

  000a3	c7 45 f0 04 00
	00 00		 mov	 DWORD PTR tv78[ebp], 4
  000aa	83 7d f0 02	 cmp	 DWORD PTR tv78[ebp], 2
  000ae	74 0e		 je	 SHORT $LN18@zlibCompil
  000b0	83 7d f0 04	 cmp	 DWORD PTR tv78[ebp], 4
  000b4	74 0a		 je	 SHORT $LN19@zlibCompil
  000b6	83 7d f0 08	 cmp	 DWORD PTR tv78[ebp], 8
  000ba	74 0f		 je	 SHORT $LN20@zlibCompil
  000bc	eb 18		 jmp	 SHORT $LN21@zlibCompil
$LN18@zlibCompil:

; 50   :     case 2:     break;

  000be	eb 1f		 jmp	 SHORT $LN6@zlibCompil
$LN19@zlibCompil:

; 51   :     case 4:     flags += 1 << 4;        break;

  000c0	8b 45 fc	 mov	 eax, DWORD PTR _flags$[ebp]
  000c3	83 c0 10	 add	 eax, 16			; 00000010H
  000c6	89 45 fc	 mov	 DWORD PTR _flags$[ebp], eax
  000c9	eb 14		 jmp	 SHORT $LN6@zlibCompil
$LN20@zlibCompil:

; 52   :     case 8:     flags += 2 << 4;        break;

  000cb	8b 4d fc	 mov	 ecx, DWORD PTR _flags$[ebp]
  000ce	83 c1 20	 add	 ecx, 32			; 00000020H
  000d1	89 4d fc	 mov	 DWORD PTR _flags$[ebp], ecx
  000d4	eb 09		 jmp	 SHORT $LN6@zlibCompil
$LN21@zlibCompil:

; 53   :     default:    flags += 3 << 4;

  000d6	8b 55 fc	 mov	 edx, DWORD PTR _flags$[ebp]
  000d9	83 c2 30	 add	 edx, 48			; 00000030H
  000dc	89 55 fc	 mov	 DWORD PTR _flags$[ebp], edx
$LN6@zlibCompil:

; 54   :     }
; 55   :     switch ((int)(sizeof(z_off_t))) {

  000df	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR tv85[ebp], 4
  000e6	83 7d ec 02	 cmp	 DWORD PTR tv85[ebp], 2
  000ea	74 0e		 je	 SHORT $LN22@zlibCompil
  000ec	83 7d ec 04	 cmp	 DWORD PTR tv85[ebp], 4
  000f0	74 0a		 je	 SHORT $LN23@zlibCompil
  000f2	83 7d ec 08	 cmp	 DWORD PTR tv85[ebp], 8
  000f6	74 0f		 je	 SHORT $LN24@zlibCompil
  000f8	eb 1b		 jmp	 SHORT $LN25@zlibCompil
$LN22@zlibCompil:

; 56   :     case 2:     break;

  000fa	eb 25		 jmp	 SHORT $LN8@zlibCompil
$LN23@zlibCompil:

; 57   :     case 4:     flags += 1 << 6;        break;

  000fc	8b 45 fc	 mov	 eax, DWORD PTR _flags$[ebp]
  000ff	83 c0 40	 add	 eax, 64			; 00000040H
  00102	89 45 fc	 mov	 DWORD PTR _flags$[ebp], eax
  00105	eb 1a		 jmp	 SHORT $LN8@zlibCompil
$LN24@zlibCompil:

; 58   :     case 8:     flags += 2 << 6;        break;

  00107	8b 4d fc	 mov	 ecx, DWORD PTR _flags$[ebp]
  0010a	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  00110	89 4d fc	 mov	 DWORD PTR _flags$[ebp], ecx
  00113	eb 0c		 jmp	 SHORT $LN8@zlibCompil
$LN25@zlibCompil:

; 59   :     default:    flags += 3 << 6;

  00115	8b 55 fc	 mov	 edx, DWORD PTR _flags$[ebp]
  00118	81 c2 c0 00 00
	00		 add	 edx, 192		; 000000c0H
  0011e	89 55 fc	 mov	 DWORD PTR _flags$[ebp], edx
$LN8@zlibCompil:

; 60   :     }
; 61   : #ifdef ZLIB_DEBUG
; 62   :     flags += 1 << 8;
; 63   : #endif
; 64   : #if defined(ASMV) || defined(ASMINF)
; 65   :     flags += 1 << 9;

  00121	8b 45 fc	 mov	 eax, DWORD PTR _flags$[ebp]
  00124	05 00 02 00 00	 add	 eax, 512		; 00000200H
  00129	89 45 fc	 mov	 DWORD PTR _flags$[ebp], eax

; 66   : #endif
; 67   : #ifdef ZLIB_WINAPI
; 68   :     flags += 1 << 10;

  0012c	8b 4d fc	 mov	 ecx, DWORD PTR _flags$[ebp]
  0012f	81 c1 00 04 00
	00		 add	 ecx, 1024		; 00000400H
  00135	89 4d fc	 mov	 DWORD PTR _flags$[ebp], ecx

; 69   : #endif
; 70   : #ifdef BUILDFIXED
; 71   :     flags += 1 << 12;
; 72   : #endif
; 73   : #ifdef DYNAMIC_CRC_TABLE
; 74   :     flags += 1 << 13;
; 75   : #endif
; 76   : #ifdef NO_GZCOMPRESS
; 77   :     flags += 1L << 16;
; 78   : #endif
; 79   : #ifdef NO_GZIP
; 80   :     flags += 1L << 17;
; 81   : #endif
; 82   : #ifdef PKZIP_BUG_WORKAROUND
; 83   :     flags += 1L << 20;
; 84   : #endif
; 85   : #ifdef FASTEST
; 86   :     flags += 1L << 21;
; 87   : #endif
; 88   : #if defined(STDC) || defined(Z_HAVE_STDARG_H)
; 89   : #  ifdef NO_vsnprintf
; 90   :     flags += 1L << 25;
; 91   : #    ifdef HAS_vsprintf_void
; 92   :     flags += 1L << 26;
; 93   : #    endif
; 94   : #  else
; 95   : #    ifdef HAS_vsnprintf_void
; 96   :     flags += 1L << 26;
; 97   : #    endif
; 98   : #  endif
; 99   : #else
; 100  :     flags += 1L << 24;
; 101  : #  ifdef NO_snprintf
; 102  :     flags += 1L << 25;
; 103  : #    ifdef HAS_sprintf_void
; 104  :     flags += 1L << 26;
; 105  : #    endif
; 106  : #  else
; 107  : #    ifdef HAS_snprintf_void
; 108  :     flags += 1L << 26;
; 109  : #    endif
; 110  : #  endif
; 111  : #endif
; 112  :     return flags;

  00138	8b 45 fc	 mov	 eax, DWORD PTR _flags$[ebp]

; 113  : }

  0013b	83 c4 14	 add	 esp, 20			; 00000014H
  0013e	3b ec		 cmp	 ebp, esp
  00140	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00145	8b e5		 mov	 esp, ebp
  00147	5d		 pop	 ebp
  00148	c3		 ret	 0
_zlibCompileFlags@0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\zutil.c
;	COMDAT _zError@4
_TEXT	SEGMENT
_err$ = 8						; size = 4
_zError@4 PROC						; COMDAT

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 136  :     return ERR_MSG(err);

  0000d	b8 02 00 00 00	 mov	 eax, 2
  00012	2b 45 08	 sub	 eax, DWORD PTR _err$[ebp]
  00015	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR _z_errmsg[eax*4]

; 137  : }

  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
_zError@4 ENDP
_TEXT	ENDS
END

; Listing generated by Microsoft (R) Optimizing Compiler Version 19.20.27525.0 

	TITLE	e:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_01JOAMLHOP@?9@				; `string'
EXTRN	__time64:PROC
EXTRN	_rand:PROC
EXTRN	_srand:PROC
;	COMDAT ??_C@_01JOAMLHOP@?9@
CONST	SEGMENT
??_C@_01JOAMLHOP@?9@ DB '-', 00H			; `string'
__DB664BEB_corecrt_stdio_config@h DB 01H
__E28BBA23_corecrt_wstdio@h DB 01H
__4A1C29A8_stdio@h DB 01H
__9CFFAB73_corecrt_memcpy_s@h DB 01H
__55B7CB8D_corecrt_wstring@h DB 01H
__2F7506B6_string@h DB 01H
__B47A7825_corecrt_wtime@h DB 01H
__4436A688_time@h DB 01H
__95347B96_ctype@h DB 01H
__149DB6BE_basetsd@h DB 01H
__5BA8817F_winnt@h DB 01H
__8421AFE7_processthreadsapi@h DB 01H
__F192E00B_memoryapi@h DB 01H
__0DF854E2_winerror@h DB 01H
__940BF1C4_winbase@h DB 01H
__78A3E64A_stralign@h DB 01H
__5ADA25A5_crypt@h DB 01H
__D883BE7D_zip@c DB 01H
PUBLIC	_zipClose@8
PUBLIC	_Write_GlobalComment
PUBLIC	_Write_EndOfCentralDirectoryRecord
PUBLIC	_Write_Zip64EndOfCentralDirectoryRecord
PUBLIC	_Write_Zip64EndOfCentralDirectoryLocator
PUBLIC	_zipCloseFileInZip@4
PUBLIC	_zipCloseFileInZipRaw64@16
PUBLIC	_zipCloseFileInZipRaw@12
PUBLIC	_zipWriteInFileInZip@12
PUBLIC	_zipOpenNewFileInZip@40
PUBLIC	_zipOpenNewFileInZip64@44
PUBLIC	_zipOpenNewFileInZip2_64@48
PUBLIC	_zipOpenNewFileInZip2@44
PUBLIC	_zipOpenNewFileInZip3_64@68
PUBLIC	_zipOpenNewFileInZip3@64
PUBLIC	_zipOpenNewFileInZip4_64@76
PUBLIC	_Write_LocalFileHeader
PUBLIC	_zipOpen64@8
PUBLIC	_zipOpen@8
PUBLIC	_zipOpen2_64@16
PUBLIC	_zipOpen2@16
PUBLIC	_zipOpen3@16
PUBLIC	_LoadCentralDirectoryRecord
?calls@?1??crypthead@@9@9 DD 01H DUP (?)		; `crypthead'::`2'::calls
_BSS	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\time.h
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 534  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __4436A688_time@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 535  :             return _time64(_Time);

  0000d	8b 45 08	 mov	 eax, DWORD PTR __Time$[ebp]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 __time64
  00016	83 c4 04	 add	 esp, 4

; 536  :         }

  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\crypt.h
;	COMDAT _decrypt_byte
_TEXT	SEGMENT
_temp$ = -4						; size = 4
_pkeys$ = 8						; size = 4
_pcrc_32_tab$ = 12					; size = 4
_decrypt_byte PROC					; COMDAT

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET __5ADA25A5_crypt@h
  00010	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 37   :     unsigned temp;  /* POTENTIAL BUG:  temp*(temp^1) may overflow in an
; 38   :                      * unpredictable manner on 16-bit systems; not a problem
; 39   :                      * with any known compiler so far, though */
; 40   : 
; 41   :     temp = ((unsigned)(*(pkeys+2)) & 0xffff) | 2;

  00015	8b 45 08	 mov	 eax, DWORD PTR _pkeys$[ebp]
  00018	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001b	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00021	83 c9 02	 or	 ecx, 2
  00024	89 4d fc	 mov	 DWORD PTR _temp$[ebp], ecx

; 42   :     return (int)(((temp * (temp ^ 1)) >> 8) & 0xff);

  00027	8b 55 fc	 mov	 edx, DWORD PTR _temp$[ebp]
  0002a	83 f2 01	 xor	 edx, 1
  0002d	8b c2		 mov	 eax, edx
  0002f	0f af 45 fc	 imul	 eax, DWORD PTR _temp$[ebp]
  00033	c1 e8 08	 shr	 eax, 8
  00036	25 ff 00 00 00	 and	 eax, 255		; 000000ffH

; 43   : }

  0003b	83 c4 04	 add	 esp, 4
  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
_decrypt_byte ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\crypt.h
;	COMDAT _update_keys
_TEXT	SEGMENT
_keyshift$1 = -4					; size = 4
_pkeys$ = 8						; size = 4
_pcrc_32_tab$ = 12					; size = 4
_c$ = 16						; size = 4
_update_keys PROC					; COMDAT

; 49   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET __5ADA25A5_crypt@h
  00010	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 50   :     (*(pkeys+0)) = CRC32((*(pkeys+0)), c);

  00015	8b 45 08	 mov	 eax, DWORD PTR _pkeys$[ebp]
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	33 4d 10	 xor	 ecx, DWORD PTR _c$[ebp]
  0001d	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00023	8b 55 08	 mov	 edx, DWORD PTR _pkeys$[ebp]
  00026	8b 02		 mov	 eax, DWORD PTR [edx]
  00028	c1 e8 08	 shr	 eax, 8
  0002b	8b 55 0c	 mov	 edx, DWORD PTR _pcrc_32_tab$[ebp]
  0002e	33 04 8a	 xor	 eax, DWORD PTR [edx+ecx*4]
  00031	8b 4d 08	 mov	 ecx, DWORD PTR _pkeys$[ebp]
  00034	89 01		 mov	 DWORD PTR [ecx], eax

; 51   :     (*(pkeys+1)) += (*(pkeys+0)) & 0xff;

  00036	8b 55 08	 mov	 edx, DWORD PTR _pkeys$[ebp]
  00039	8b 02		 mov	 eax, DWORD PTR [edx]
  0003b	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _pkeys$[ebp]
  00043	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  00046	8b 55 08	 mov	 edx, DWORD PTR _pkeys$[ebp]
  00049	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 52   :     (*(pkeys+1)) = (*(pkeys+1)) * 134775813L + 1;

  0004c	8b 45 08	 mov	 eax, DWORD PTR _pkeys$[ebp]
  0004f	69 48 04 05 84
	08 08		 imul	 ecx, DWORD PTR [eax+4], 134775813
  00056	83 c1 01	 add	 ecx, 1
  00059	8b 55 08	 mov	 edx, DWORD PTR _pkeys$[ebp]
  0005c	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 53   :     {
; 54   :       register int keyshift = (int)((*(pkeys+1)) >> 24);

  0005f	8b 45 08	 mov	 eax, DWORD PTR _pkeys$[ebp]
  00062	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00065	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00068	89 4d fc	 mov	 DWORD PTR _keyshift$1[ebp], ecx

; 55   :       (*(pkeys+2)) = CRC32((*(pkeys+2)), keyshift);

  0006b	8b 55 08	 mov	 edx, DWORD PTR _pkeys$[ebp]
  0006e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00071	33 45 fc	 xor	 eax, DWORD PTR _keyshift$1[ebp]
  00074	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00079	8b 4d 08	 mov	 ecx, DWORD PTR _pkeys$[ebp]
  0007c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0007f	c1 ea 08	 shr	 edx, 8
  00082	8b 4d 0c	 mov	 ecx, DWORD PTR _pcrc_32_tab$[ebp]
  00085	33 14 81	 xor	 edx, DWORD PTR [ecx+eax*4]
  00088	8b 45 08	 mov	 eax, DWORD PTR _pkeys$[ebp]
  0008b	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 56   :     }
; 57   :     return c;

  0008e	8b 45 10	 mov	 eax, DWORD PTR _c$[ebp]

; 58   : }

  00091	83 c4 04	 add	 esp, 4
  00094	3b ec		 cmp	 ebp, esp
  00096	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c3		 ret	 0
_update_keys ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\crypt.h
;	COMDAT _init_keys
_TEXT	SEGMENT
_passwd$ = 8						; size = 4
_pkeys$ = 12						; size = 4
_pcrc_32_tab$ = 16					; size = 4
_init_keys PROC						; COMDAT

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __5ADA25A5_crypt@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 67   :     *(pkeys+0) = 305419896L;

  0000d	8b 45 0c	 mov	 eax, DWORD PTR _pkeys$[ebp]
  00010	c7 00 78 56 34
	12		 mov	 DWORD PTR [eax], 305419896 ; 12345678H

; 68   :     *(pkeys+1) = 591751049L;

  00016	8b 4d 0c	 mov	 ecx, DWORD PTR _pkeys$[ebp]
  00019	c7 41 04 89 67
	45 23		 mov	 DWORD PTR [ecx+4], 591751049 ; 23456789H

; 69   :     *(pkeys+2) = 878082192L;

  00020	8b 55 0c	 mov	 edx, DWORD PTR _pkeys$[ebp]
  00023	c7 42 08 90 78
	56 34		 mov	 DWORD PTR [edx+8], 878082192 ; 34567890H
$LN2@init_keys:

; 70   :     while (*passwd != '\0') {

  0002a	8b 45 08	 mov	 eax, DWORD PTR _passwd$[ebp]
  0002d	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00030	85 c9		 test	 ecx, ecx
  00032	74 22		 je	 SHORT $LN1@init_keys

; 71   :         update_keys(pkeys,pcrc_32_tab,(int)*passwd);

  00034	8b 55 08	 mov	 edx, DWORD PTR _passwd$[ebp]
  00037	0f be 02	 movsx	 eax, BYTE PTR [edx]
  0003a	50		 push	 eax
  0003b	8b 4d 10	 mov	 ecx, DWORD PTR _pcrc_32_tab$[ebp]
  0003e	51		 push	 ecx
  0003f	8b 55 0c	 mov	 edx, DWORD PTR _pkeys$[ebp]
  00042	52		 push	 edx
  00043	e8 00 00 00 00	 call	 _update_keys
  00048	83 c4 0c	 add	 esp, 12			; 0000000cH

; 72   :         passwd++;

  0004b	8b 45 08	 mov	 eax, DWORD PTR _passwd$[ebp]
  0004e	83 c0 01	 add	 eax, 1
  00051	89 45 08	 mov	 DWORD PTR _passwd$[ebp], eax

; 73   :     }

  00054	eb d4		 jmp	 SHORT $LN2@init_keys
$LN1@init_keys:

; 74   : }

  00056	3b ec		 cmp	 ebp, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
_init_keys ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\crypt.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\time.h
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\crypt.h
;	COMDAT _crypthead
_TEXT	SEGMENT
_header$ = -28						; size = 10
_c$ = -12						; size = 4
_t$ = -8						; size = 4
_n$ = -4						; size = 4
_passwd$ = 8						; size = 4
_buf$ = 12						; size = 4
_bufSize$ = 16						; size = 4
_pkeys$ = 20						; size = 4
_pcrc_32_tab$ = 24					; size = 4
_crcForCrypting$ = 28					; size = 4
_crypthead PROC						; COMDAT

; 96   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0000e	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00011	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00014	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00017	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001a	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001d	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00020	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __5ADA25A5_crypt@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 97   :     int n;                       /* index in random header */
; 98   :     int t;                       /* temporary */
; 99   :     int c;                       /* random byte */
; 100  :     unsigned char header[RAND_HEAD_LEN-2]; /* random header */
; 101  :     static unsigned calls = 0;   /* ensure different random header each time */
; 102  : 
; 103  :     if (bufSize<RAND_HEAD_LEN)

  0002d	83 7d 10 0c	 cmp	 DWORD PTR _bufSize$[ebp], 12 ; 0000000cH
  00031	7d 07		 jge	 SHORT $LN8@crypthead

; 104  :       return 0;

  00033	33 c0		 xor	 eax, eax
  00035	e9 b1 01 00 00	 jmp	 $LN1@crypthead
$LN8@crypthead:

; 105  : 
; 106  :     /* First generate RAND_HEAD_LEN-2 random bytes. We encrypt the
; 107  :      * output of rand() to get less predictability, since rand() is
; 108  :      * often poorly implemented.
; 109  :      */
; 110  :     if (++calls == 1)

  0003a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?calls@?1??crypthead@@9@9
  0003f	83 c0 01	 add	 eax, 1
  00042	a3 00 00 00 00	 mov	 DWORD PTR ?calls@?1??crypthead@@9@9, eax
  00047	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?calls@?1??crypthead@@9@9, 1
  0004e	75 18		 jne	 SHORT $LN9@crypthead
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\time.h

; 535  :             return _time64(_Time);

  00050	6a 00		 push	 0
  00052	e8 00 00 00 00	 call	 __time64
  00057	83 c4 04	 add	 esp, 4
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\crypt.h

; 112  :         srand((unsigned)(time(NULL) ^ ZCR_SEED2));

  0005a	35 4e e6 40 bb	 xor	 eax, -1153374642	; bb40e64eH
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 _srand
  00065	83 c4 04	 add	 esp, 4
$LN9@crypthead:

; 113  :     }
; 114  :     init_keys(passwd, pkeys, pcrc_32_tab);

  00068	8b 4d 18	 mov	 ecx, DWORD PTR _pcrc_32_tab$[ebp]
  0006b	51		 push	 ecx
  0006c	8b 55 14	 mov	 edx, DWORD PTR _pkeys$[ebp]
  0006f	52		 push	 edx
  00070	8b 45 08	 mov	 eax, DWORD PTR _passwd$[ebp]
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 _init_keys
  00079	83 c4 0c	 add	 esp, 12			; 0000000cH

; 115  :     for (n = 0; n < RAND_HEAD_LEN-2; n++)

  0007c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  00083	eb 09		 jmp	 SHORT $LN4@crypthead
$LN2@crypthead:
  00085	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  00088	83 c1 01	 add	 ecx, 1
  0008b	89 4d fc	 mov	 DWORD PTR _n$[ebp], ecx
$LN4@crypthead:
  0008e	83 7d fc 0a	 cmp	 DWORD PTR _n$[ebp], 10	; 0000000aH
  00092	7d 46		 jge	 SHORT $LN3@crypthead

; 116  :     {
; 117  :         c = (rand() >> 7) & 0xff;

  00094	e8 00 00 00 00	 call	 _rand
  00099	c1 f8 07	 sar	 eax, 7
  0009c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000a1	89 45 f4	 mov	 DWORD PTR _c$[ebp], eax

; 118  :         header[n] = (unsigned char)zencode(pkeys, pcrc_32_tab, c, t);

  000a4	8b 55 18	 mov	 edx, DWORD PTR _pcrc_32_tab$[ebp]
  000a7	52		 push	 edx
  000a8	8b 45 14	 mov	 eax, DWORD PTR _pkeys$[ebp]
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 _decrypt_byte
  000b1	83 c4 08	 add	 esp, 8
  000b4	89 45 f8	 mov	 DWORD PTR _t$[ebp], eax
  000b7	8b 4d f4	 mov	 ecx, DWORD PTR _c$[ebp]
  000ba	51		 push	 ecx
  000bb	8b 55 18	 mov	 edx, DWORD PTR _pcrc_32_tab$[ebp]
  000be	52		 push	 edx
  000bf	8b 45 14	 mov	 eax, DWORD PTR _pkeys$[ebp]
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 _update_keys
  000c8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000cb	8b 4d f8	 mov	 ecx, DWORD PTR _t$[ebp]
  000ce	33 4d f4	 xor	 ecx, DWORD PTR _c$[ebp]
  000d1	8b 55 fc	 mov	 edx, DWORD PTR _n$[ebp]
  000d4	88 4c 15 e4	 mov	 BYTE PTR _header$[ebp+edx], cl

; 119  :     }

  000d8	eb ab		 jmp	 SHORT $LN2@crypthead
$LN3@crypthead:

; 120  :     /* Encrypt random header (last two bytes is high word of crc) */
; 121  :     init_keys(passwd, pkeys, pcrc_32_tab);

  000da	8b 45 18	 mov	 eax, DWORD PTR _pcrc_32_tab$[ebp]
  000dd	50		 push	 eax
  000de	8b 4d 14	 mov	 ecx, DWORD PTR _pkeys$[ebp]
  000e1	51		 push	 ecx
  000e2	8b 55 08	 mov	 edx, DWORD PTR _passwd$[ebp]
  000e5	52		 push	 edx
  000e6	e8 00 00 00 00	 call	 _init_keys
  000eb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 122  :     for (n = 0; n < RAND_HEAD_LEN-2; n++)

  000ee	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  000f5	eb 09		 jmp	 SHORT $LN7@crypthead
$LN5@crypthead:
  000f7	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  000fa	83 c0 01	 add	 eax, 1
  000fd	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax
$LN7@crypthead:
  00100	83 7d fc 0a	 cmp	 DWORD PTR _n$[ebp], 10	; 0000000aH
  00104	7d 44		 jge	 SHORT $LN6@crypthead

; 123  :     {
; 124  :         buf[n] = (unsigned char)zencode(pkeys, pcrc_32_tab, header[n], t);

  00106	0f ae e8	 lfence
  00109	8b 4d 18	 mov	 ecx, DWORD PTR _pcrc_32_tab$[ebp]
  0010c	51		 push	 ecx
  0010d	8b 55 14	 mov	 edx, DWORD PTR _pkeys$[ebp]
  00110	52		 push	 edx
  00111	e8 00 00 00 00	 call	 _decrypt_byte
  00116	83 c4 08	 add	 esp, 8
  00119	89 45 f8	 mov	 DWORD PTR _t$[ebp], eax
  0011c	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  0011f	0f b6 4c 05 e4	 movzx	 ecx, BYTE PTR _header$[ebp+eax]
  00124	51		 push	 ecx
  00125	8b 55 18	 mov	 edx, DWORD PTR _pcrc_32_tab$[ebp]
  00128	52		 push	 edx
  00129	8b 45 14	 mov	 eax, DWORD PTR _pkeys$[ebp]
  0012c	50		 push	 eax
  0012d	e8 00 00 00 00	 call	 _update_keys
  00132	83 c4 0c	 add	 esp, 12			; 0000000cH
  00135	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  00138	0f b6 54 0d e4	 movzx	 edx, BYTE PTR _header$[ebp+ecx]
  0013d	33 55 f8	 xor	 edx, DWORD PTR _t$[ebp]
  00140	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  00143	03 45 fc	 add	 eax, DWORD PTR _n$[ebp]
  00146	88 10		 mov	 BYTE PTR [eax], dl

; 125  :     }

  00148	eb ad		 jmp	 SHORT $LN5@crypthead
$LN6@crypthead:

; 126  :     buf[n++] = (unsigned char)zencode(pkeys, pcrc_32_tab, (int)(crcForCrypting >> 16) & 0xff, t);

  0014a	8b 4d 18	 mov	 ecx, DWORD PTR _pcrc_32_tab$[ebp]
  0014d	51		 push	 ecx
  0014e	8b 55 14	 mov	 edx, DWORD PTR _pkeys$[ebp]
  00151	52		 push	 edx
  00152	e8 00 00 00 00	 call	 _decrypt_byte
  00157	83 c4 08	 add	 esp, 8
  0015a	89 45 f8	 mov	 DWORD PTR _t$[ebp], eax
  0015d	8b 45 1c	 mov	 eax, DWORD PTR _crcForCrypting$[ebp]
  00160	c1 e8 10	 shr	 eax, 16			; 00000010H
  00163	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00168	50		 push	 eax
  00169	8b 4d 18	 mov	 ecx, DWORD PTR _pcrc_32_tab$[ebp]
  0016c	51		 push	 ecx
  0016d	8b 55 14	 mov	 edx, DWORD PTR _pkeys$[ebp]
  00170	52		 push	 edx
  00171	e8 00 00 00 00	 call	 _update_keys
  00176	83 c4 0c	 add	 esp, 12			; 0000000cH
  00179	8b 45 1c	 mov	 eax, DWORD PTR _crcForCrypting$[ebp]
  0017c	c1 e8 10	 shr	 eax, 16			; 00000010H
  0017f	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00184	33 45 f8	 xor	 eax, DWORD PTR _t$[ebp]
  00187	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  0018a	03 4d fc	 add	 ecx, DWORD PTR _n$[ebp]
  0018d	88 01		 mov	 BYTE PTR [ecx], al
  0018f	8b 55 fc	 mov	 edx, DWORD PTR _n$[ebp]
  00192	83 c2 01	 add	 edx, 1
  00195	89 55 fc	 mov	 DWORD PTR _n$[ebp], edx

; 127  :     buf[n++] = (unsigned char)zencode(pkeys, pcrc_32_tab, (int)(crcForCrypting >> 24) & 0xff, t);

  00198	8b 45 18	 mov	 eax, DWORD PTR _pcrc_32_tab$[ebp]
  0019b	50		 push	 eax
  0019c	8b 4d 14	 mov	 ecx, DWORD PTR _pkeys$[ebp]
  0019f	51		 push	 ecx
  001a0	e8 00 00 00 00	 call	 _decrypt_byte
  001a5	83 c4 08	 add	 esp, 8
  001a8	89 45 f8	 mov	 DWORD PTR _t$[ebp], eax
  001ab	8b 55 1c	 mov	 edx, DWORD PTR _crcForCrypting$[ebp]
  001ae	c1 ea 18	 shr	 edx, 24			; 00000018H
  001b1	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  001b7	52		 push	 edx
  001b8	8b 45 18	 mov	 eax, DWORD PTR _pcrc_32_tab$[ebp]
  001bb	50		 push	 eax
  001bc	8b 4d 14	 mov	 ecx, DWORD PTR _pkeys$[ebp]
  001bf	51		 push	 ecx
  001c0	e8 00 00 00 00	 call	 _update_keys
  001c5	83 c4 0c	 add	 esp, 12			; 0000000cH
  001c8	8b 55 1c	 mov	 edx, DWORD PTR _crcForCrypting$[ebp]
  001cb	c1 ea 18	 shr	 edx, 24			; 00000018H
  001ce	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  001d4	33 55 f8	 xor	 edx, DWORD PTR _t$[ebp]
  001d7	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  001da	03 45 fc	 add	 eax, DWORD PTR _n$[ebp]
  001dd	88 10		 mov	 BYTE PTR [eax], dl
  001df	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  001e2	83 c1 01	 add	 ecx, 1
  001e5	89 4d fc	 mov	 DWORD PTR _n$[ebp], ecx

; 128  :     return n;

  001e8	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
$LN1@crypthead:

; 129  : }

  001eb	52		 push	 edx
  001ec	8b cd		 mov	 ecx, ebp
  001ee	50		 push	 eax
  001ef	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN16@crypthead
  001f5	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001fa	58		 pop	 eax
  001fb	5a		 pop	 edx
  001fc	83 c4 20	 add	 esp, 32			; 00000020H
  001ff	3b ec		 cmp	 ebp, esp
  00201	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00206	8b e5		 mov	 esp, ebp
  00208	5d		 pop	 ebp
  00209	c3		 ret	 0
  0020a	66 90		 npad	 2
$LN16@crypthead:
  0020c	01 00 00 00	 DD	 1
  00210	00 00 00 00	 DD	 $LN15@crypthead
$LN15@crypthead:
  00214	e4 ff ff ff	 DD	 -28			; ffffffe4H
  00218	0a 00 00 00	 DD	 10			; 0000000aH
  0021c	00 00 00 00	 DD	 $LN14@crypthead
$LN14@crypthead:
  00220	68		 DB	 104			; 00000068H
  00221	65		 DB	 101			; 00000065H
  00222	61		 DB	 97			; 00000061H
  00223	64		 DB	 100			; 00000064H
  00224	65		 DB	 101			; 00000065H
  00225	72		 DB	 114			; 00000072H
  00226	00		 DB	 0
_crypthead ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _allocate_new_datablock
_TEXT	SEGMENT
_ldi$ = -4						; size = 4
_allocate_new_datablock PROC				; COMDAT

; 190  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00010	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 191  :     linkedlist_datablock_internal* ldi;
; 192  :     ldi = (linkedlist_datablock_internal*)

  00015	68 00 10 00 00	 push	 4096			; 00001000H
  0001a	e8 00 00 00 00	 call	 _malloc
  0001f	83 c4 04	 add	 esp, 4
  00022	89 45 fc	 mov	 DWORD PTR _ldi$[ebp], eax

; 193  :                  ALLOC(sizeof(linkedlist_datablock_internal));
; 194  :     if (ldi!=NULL)

  00025	83 7d fc 00	 cmp	 DWORD PTR _ldi$[ebp], 0
  00029	74 1d		 je	 SHORT $LN2@allocate_n

; 195  :     {
; 196  :         ldi->next_datablock = NULL ;

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _ldi$[ebp]
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 197  :         ldi->filled_in_this_block = 0 ;

  00034	8b 4d fc	 mov	 ecx, DWORD PTR _ldi$[ebp]
  00037	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 198  :         ldi->avail_in_this_block = SIZEDATA_INDATABLOCK ;

  0003e	8b 55 fc	 mov	 edx, DWORD PTR _ldi$[ebp]
  00041	c7 42 04 f0 0f
	00 00		 mov	 DWORD PTR [edx+4], 4080	; 00000ff0H
$LN2@allocate_n:

; 199  :     }
; 200  :     return ldi;

  00048	8b 45 fc	 mov	 eax, DWORD PTR _ldi$[ebp]

; 201  : }

  0004b	83 c4 04	 add	 esp, 4
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
_allocate_new_datablock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _free_datablock
_TEXT	SEGMENT
_ldinext$1 = -4						; size = 4
_ldi$ = 8						; size = 4
_free_datablock PROC					; COMDAT

; 204  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00010	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
$LN2@free_datab:

; 205  :     while (ldi!=NULL)

  00015	83 7d 08 00	 cmp	 DWORD PTR _ldi$[ebp], 0
  00019	74 22		 je	 SHORT $LN1@free_datab

; 206  :     {
; 207  :         linkedlist_datablock_internal* ldinext = ldi->next_datablock;

  0001b	8b 45 08	 mov	 eax, DWORD PTR _ldi$[ebp]
  0001e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00020	89 4d fc	 mov	 DWORD PTR _ldinext$1[ebp], ecx

; 208  :         TRYFREE(ldi);

  00023	83 7d 08 00	 cmp	 DWORD PTR _ldi$[ebp], 0
  00027	74 0c		 je	 SHORT $LN4@free_datab
  00029	8b 55 08	 mov	 edx, DWORD PTR _ldi$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 _free
  00032	83 c4 04	 add	 esp, 4
$LN4@free_datab:

; 209  :         ldi = ldinext;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _ldinext$1[ebp]
  00038	89 45 08	 mov	 DWORD PTR _ldi$[ebp], eax

; 210  :     }

  0003b	eb d8		 jmp	 SHORT $LN2@free_datab
$LN1@free_datab:

; 211  : }

  0003d	83 c4 04	 add	 esp, 4
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
_free_datablock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _init_linkedlist
_TEXT	SEGMENT
_ll$ = 8						; size = 4
_init_linkedlist PROC					; COMDAT

; 214  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 215  :     ll->first_block = ll->last_block = NULL;

  0000d	8b 45 08	 mov	 eax, DWORD PTR _ll$[ebp]
  00010	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _ll$[ebp]
  0001a	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 216  : }

  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
_init_linkedlist ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _free_linkedlist
_TEXT	SEGMENT
_ll$ = 8						; size = 4
_free_linkedlist PROC					; COMDAT

; 219  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 220  :     free_datablock(ll->first_block);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _ll$[ebp]
  00010	8b 08		 mov	 ecx, DWORD PTR [eax]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 _free_datablock
  00018	83 c4 04	 add	 esp, 4

; 221  :     ll->first_block = ll->last_block = NULL;

  0001b	8b 55 08	 mov	 edx, DWORD PTR _ll$[ebp]
  0001e	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00025	8b 45 08	 mov	 eax, DWORD PTR _ll$[ebp]
  00028	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 222  : }

  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
_free_linkedlist ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _add_data_in_datablock
_TEXT	SEGMENT
tv69 = -24						; size = 4
_to_copy$1 = -20					; size = 4
_i$2 = -16						; size = 4
_copy_this$3 = -12					; size = 4
_from_copy$ = -8					; size = 4
_ldi$ = -4						; size = 4
_ll$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_add_data_in_datablock PROC				; COMDAT

; 226  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000e	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00011	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00014	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00017	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001a	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001d	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00022	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 227  :     linkedlist_datablock_internal* ldi;
; 228  :     const unsigned char* from_copy;
; 229  : 
; 230  :     if (ll==NULL)

  00027	83 7d 08 00	 cmp	 DWORD PTR _ll$[ebp], 0
  0002b	75 0a		 jne	 SHORT $LN7@add_data_i

; 231  :         return ZIP_INTERNALERROR;

  0002d	b8 98 ff ff ff	 mov	 eax, -104		; ffffff98H
  00032	e9 12 01 00 00	 jmp	 $LN1@add_data_i
$LN7@add_data_i:

; 232  : 
; 233  :     if (ll->last_block == NULL)

  00037	8b 45 08	 mov	 eax, DWORD PTR _ll$[ebp]
  0003a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0003e	75 2b		 jne	 SHORT $LN8@add_data_i

; 234  :     {
; 235  :         ll->first_block = ll->last_block = allocate_new_datablock();

  00040	e8 00 00 00 00	 call	 _allocate_new_datablock
  00045	89 45 e8	 mov	 DWORD PTR tv69[ebp], eax
  00048	8b 4d 08	 mov	 ecx, DWORD PTR _ll$[ebp]
  0004b	8b 55 e8	 mov	 edx, DWORD PTR tv69[ebp]
  0004e	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00051	8b 45 08	 mov	 eax, DWORD PTR _ll$[ebp]
  00054	8b 4d e8	 mov	 ecx, DWORD PTR tv69[ebp]
  00057	89 08		 mov	 DWORD PTR [eax], ecx

; 236  :         if (ll->first_block == NULL)

  00059	8b 55 08	 mov	 edx, DWORD PTR _ll$[ebp]
  0005c	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0005f	75 0a		 jne	 SHORT $LN8@add_data_i

; 237  :             return ZIP_INTERNALERROR;

  00061	b8 98 ff ff ff	 mov	 eax, -104		; ffffff98H
  00066	e9 de 00 00 00	 jmp	 $LN1@add_data_i
$LN8@add_data_i:

; 238  :     }
; 239  : 
; 240  :     ldi = ll->last_block;

  0006b	8b 45 08	 mov	 eax, DWORD PTR _ll$[ebp]
  0006e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00071	89 4d fc	 mov	 DWORD PTR _ldi$[ebp], ecx

; 241  :     from_copy = (unsigned char*)buf;

  00074	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  00077	89 55 f8	 mov	 DWORD PTR _from_copy$[ebp], edx
$LN2@add_data_i:

; 242  : 
; 243  :     while (len>0)

  0007a	83 7d 10 00	 cmp	 DWORD PTR _len$[ebp], 0
  0007e	0f 86 c3 00 00
	00		 jbe	 $LN3@add_data_i

; 244  :     {
; 245  :         uInt copy_this;
; 246  :         uInt i;
; 247  :         unsigned char* to_copy;
; 248  : 
; 249  :         if (ldi->avail_in_this_block==0)

  00084	8b 45 fc	 mov	 eax, DWORD PTR _ldi$[ebp]
  00087	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0008b	75 2d		 jne	 SHORT $LN10@add_data_i

; 250  :         {
; 251  :             ldi->next_datablock = allocate_new_datablock();

  0008d	e8 00 00 00 00	 call	 _allocate_new_datablock
  00092	8b 4d fc	 mov	 ecx, DWORD PTR _ldi$[ebp]
  00095	89 01		 mov	 DWORD PTR [ecx], eax

; 252  :             if (ldi->next_datablock == NULL)

  00097	8b 55 fc	 mov	 edx, DWORD PTR _ldi$[ebp]
  0009a	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0009d	75 0a		 jne	 SHORT $LN11@add_data_i

; 253  :                 return ZIP_INTERNALERROR;

  0009f	b8 98 ff ff ff	 mov	 eax, -104		; ffffff98H
  000a4	e9 a0 00 00 00	 jmp	 $LN1@add_data_i
$LN11@add_data_i:

; 254  :             ldi = ldi->next_datablock ;

  000a9	8b 45 fc	 mov	 eax, DWORD PTR _ldi$[ebp]
  000ac	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ae	89 4d fc	 mov	 DWORD PTR _ldi$[ebp], ecx

; 255  :             ll->last_block = ldi;

  000b1	8b 55 08	 mov	 edx, DWORD PTR _ll$[ebp]
  000b4	8b 45 fc	 mov	 eax, DWORD PTR _ldi$[ebp]
  000b7	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN10@add_data_i:

; 256  :         }
; 257  : 
; 258  :         if (ldi->avail_in_this_block < len)

  000ba	8b 4d fc	 mov	 ecx, DWORD PTR _ldi$[ebp]
  000bd	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000c0	3b 55 10	 cmp	 edx, DWORD PTR _len$[ebp]
  000c3	73 0b		 jae	 SHORT $LN12@add_data_i

; 259  :             copy_this = (uInt)ldi->avail_in_this_block;

  000c5	8b 45 fc	 mov	 eax, DWORD PTR _ldi$[ebp]
  000c8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cb	89 4d f4	 mov	 DWORD PTR _copy_this$3[ebp], ecx
  000ce	eb 06		 jmp	 SHORT $LN13@add_data_i
$LN12@add_data_i:

; 260  :         else
; 261  :             copy_this = (uInt)len;

  000d0	8b 55 10	 mov	 edx, DWORD PTR _len$[ebp]
  000d3	89 55 f4	 mov	 DWORD PTR _copy_this$3[ebp], edx
$LN13@add_data_i:

; 262  : 
; 263  :         to_copy = &(ldi->data[ldi->filled_in_this_block]);

  000d6	8b 45 fc	 mov	 eax, DWORD PTR _ldi$[ebp]
  000d9	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000dc	8b 55 fc	 mov	 edx, DWORD PTR _ldi$[ebp]
  000df	8d 44 0a 10	 lea	 eax, DWORD PTR [edx+ecx+16]
  000e3	89 45 ec	 mov	 DWORD PTR _to_copy$1[ebp], eax

; 264  : 
; 265  :         for (i=0;i<copy_this;i++)

  000e6	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  000ed	eb 09		 jmp	 SHORT $LN6@add_data_i
$LN4@add_data_i:
  000ef	8b 4d f0	 mov	 ecx, DWORD PTR _i$2[ebp]
  000f2	83 c1 01	 add	 ecx, 1
  000f5	89 4d f0	 mov	 DWORD PTR _i$2[ebp], ecx
$LN6@add_data_i:
  000f8	8b 55 f0	 mov	 edx, DWORD PTR _i$2[ebp]
  000fb	3b 55 f4	 cmp	 edx, DWORD PTR _copy_this$3[ebp]
  000fe	73 12		 jae	 SHORT $LN5@add_data_i

; 266  :             *(to_copy+i)=*(from_copy+i);

  00100	8b 45 ec	 mov	 eax, DWORD PTR _to_copy$1[ebp]
  00103	03 45 f0	 add	 eax, DWORD PTR _i$2[ebp]
  00106	8b 4d f8	 mov	 ecx, DWORD PTR _from_copy$[ebp]
  00109	03 4d f0	 add	 ecx, DWORD PTR _i$2[ebp]
  0010c	8a 11		 mov	 dl, BYTE PTR [ecx]
  0010e	88 10		 mov	 BYTE PTR [eax], dl
  00110	eb dd		 jmp	 SHORT $LN4@add_data_i
$LN5@add_data_i:

; 267  : 
; 268  :         ldi->filled_in_this_block += copy_this;

  00112	8b 45 fc	 mov	 eax, DWORD PTR _ldi$[ebp]
  00115	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00118	03 4d f4	 add	 ecx, DWORD PTR _copy_this$3[ebp]
  0011b	8b 55 fc	 mov	 edx, DWORD PTR _ldi$[ebp]
  0011e	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 269  :         ldi->avail_in_this_block -= copy_this;

  00121	8b 45 fc	 mov	 eax, DWORD PTR _ldi$[ebp]
  00124	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00127	2b 4d f4	 sub	 ecx, DWORD PTR _copy_this$3[ebp]
  0012a	8b 55 fc	 mov	 edx, DWORD PTR _ldi$[ebp]
  0012d	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 270  :         from_copy += copy_this ;

  00130	8b 45 f8	 mov	 eax, DWORD PTR _from_copy$[ebp]
  00133	03 45 f4	 add	 eax, DWORD PTR _copy_this$3[ebp]
  00136	89 45 f8	 mov	 DWORD PTR _from_copy$[ebp], eax

; 271  :         len -= copy_this;

  00139	8b 4d 10	 mov	 ecx, DWORD PTR _len$[ebp]
  0013c	2b 4d f4	 sub	 ecx, DWORD PTR _copy_this$3[ebp]
  0013f	89 4d 10	 mov	 DWORD PTR _len$[ebp], ecx

; 272  :     }

  00142	e9 33 ff ff ff	 jmp	 $LN2@add_data_i
$LN3@add_data_i:

; 273  :     return ZIP_OK;

  00147	33 c0		 xor	 eax, eax
$LN1@add_data_i:

; 274  : }

  00149	83 c4 18	 add	 esp, 24			; 00000018H
  0014c	3b ec		 cmp	 ebp, esp
  0014e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00153	8b e5		 mov	 esp, ebp
  00155	5d		 pop	 ebp
  00156	c3		 ret	 0
_add_data_in_datablock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _zip64local_putValue
_TEXT	SEGMENT
_n$ = -20						; size = 4
_buf$ = -12						; size = 8
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_x$ = 16						; size = 8
_nbByte$ = 24						; size = 4
_zip64local_putValue PROC				; COMDAT

; 288  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00012	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00015	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00018	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 289  :     unsigned char buf[8];
; 290  :     int n;
; 291  :     for (n = 0; n < nbByte; n++)

  00025	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  0002c	eb 09		 jmp	 SHORT $LN4@zip64local
$LN2@zip64local:
  0002e	8b 45 ec	 mov	 eax, DWORD PTR _n$[ebp]
  00031	83 c0 01	 add	 eax, 1
  00034	89 45 ec	 mov	 DWORD PTR _n$[ebp], eax
$LN4@zip64local:
  00037	8b 4d ec	 mov	 ecx, DWORD PTR _n$[ebp]
  0003a	3b 4d 18	 cmp	 ecx, DWORD PTR _nbByte$[ebp]
  0003d	7d 25		 jge	 SHORT $LN3@zip64local

; 292  :     {
; 293  :         buf[n] = (unsigned char)(x & 0xff);

  0003f	8b 55 10	 mov	 edx, DWORD PTR _x$[ebp]
  00042	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00048	8b 45 ec	 mov	 eax, DWORD PTR _n$[ebp]
  0004b	88 54 05 f4	 mov	 BYTE PTR _buf$[ebp+eax], dl

; 294  :         x >>= 8;

  0004f	8b 45 10	 mov	 eax, DWORD PTR _x$[ebp]
  00052	8b 55 14	 mov	 edx, DWORD PTR _x$[ebp+4]
  00055	b1 08		 mov	 cl, 8
  00057	e8 00 00 00 00	 call	 __aullshr
  0005c	89 45 10	 mov	 DWORD PTR _x$[ebp], eax
  0005f	89 55 14	 mov	 DWORD PTR _x$[ebp+4], edx

; 295  :     }

  00062	eb ca		 jmp	 SHORT $LN2@zip64local
$LN3@zip64local:

; 296  :     if (x != 0)

  00064	8b 4d 10	 mov	 ecx, DWORD PTR _x$[ebp]
  00067	0b 4d 14	 or	 ecx, DWORD PTR _x$[ebp+4]
  0006a	74 24		 je	 SHORT $LN8@zip64local

; 297  :       {     /* data overflow - hack for ZIP64 (X Roche) */
; 298  :       for (n = 0; n < nbByte; n++)

  0006c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  00073	eb 09		 jmp	 SHORT $LN7@zip64local
$LN5@zip64local:
  00075	8b 55 ec	 mov	 edx, DWORD PTR _n$[ebp]
  00078	83 c2 01	 add	 edx, 1
  0007b	89 55 ec	 mov	 DWORD PTR _n$[ebp], edx
$LN7@zip64local:
  0007e	8b 45 ec	 mov	 eax, DWORD PTR _n$[ebp]
  00081	3b 45 18	 cmp	 eax, DWORD PTR _nbByte$[ebp]
  00084	7d 0a		 jge	 SHORT $LN8@zip64local

; 299  :         {
; 300  :           buf[n] = 0xff;

  00086	8b 4d ec	 mov	 ecx, DWORD PTR _n$[ebp]
  00089	c6 44 0d f4 ff	 mov	 BYTE PTR _buf$[ebp+ecx], 255 ; 000000ffH

; 301  :         }

  0008e	eb e5		 jmp	 SHORT $LN5@zip64local
$LN8@zip64local:

; 302  :       }
; 303  : 
; 304  :     if (ZWRITE64(*pzlib_filefunc_def,filestream,buf,nbByte)!=(uLong)nbByte)

  00090	8b f4		 mov	 esi, esp
  00092	8b 55 18	 mov	 edx, DWORD PTR _nbByte$[ebp]
  00095	52		 push	 edx
  00096	8d 45 f4	 lea	 eax, DWORD PTR _buf$[ebp]
  00099	50		 push	 eax
  0009a	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  0009d	51		 push	 ecx
  0009e	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  000a1	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  000a4	50		 push	 eax
  000a5	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  000a8	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000ab	ff d2		 call	 edx
  000ad	83 c4 10	 add	 esp, 16			; 00000010H
  000b0	3b f4		 cmp	 esi, esp
  000b2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b7	3b 45 18	 cmp	 eax, DWORD PTR _nbByte$[ebp]
  000ba	74 07		 je	 SHORT $LN9@zip64local

; 305  :         return ZIP_ERRNO;

  000bc	83 c8 ff	 or	 eax, -1
  000bf	eb 04		 jmp	 SHORT $LN1@zip64local
  000c1	eb 02		 jmp	 SHORT $LN1@zip64local
$LN9@zip64local:

; 306  :     else
; 307  :         return ZIP_OK;

  000c3	33 c0		 xor	 eax, eax
$LN1@zip64local:

; 308  : }

  000c5	52		 push	 edx
  000c6	8b cd		 mov	 ecx, ebp
  000c8	50		 push	 eax
  000c9	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN15@zip64local
  000cf	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000d4	58		 pop	 eax
  000d5	5a		 pop	 edx
  000d6	5e		 pop	 esi
  000d7	83 c4 14	 add	 esp, 20			; 00000014H
  000da	3b ec		 cmp	 ebp, esp
  000dc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e1	8b e5		 mov	 esp, ebp
  000e3	5d		 pop	 ebp
  000e4	c3		 ret	 0
  000e5	0f 1f 00	 npad	 3
$LN15@zip64local:
  000e8	01 00 00 00	 DD	 1
  000ec	00 00 00 00	 DD	 $LN14@zip64local
$LN14@zip64local:
  000f0	f4 ff ff ff	 DD	 -12			; fffffff4H
  000f4	08 00 00 00	 DD	 8
  000f8	00 00 00 00	 DD	 $LN13@zip64local
$LN13@zip64local:
  000fc	62		 DB	 98			; 00000062H
  000fd	75		 DB	 117			; 00000075H
  000fe	66		 DB	 102			; 00000066H
  000ff	00		 DB	 0
_zip64local_putValue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _zip64local_putValue_inmemory
_TEXT	SEGMENT
_n$ = -8						; size = 4
_buf$ = -4						; size = 4
_dest$ = 8						; size = 4
_x$ = 12						; size = 8
_nbByte$ = 20						; size = 4
_zip64local_putValue_inmemory PROC			; COMDAT

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00019	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 313  :     unsigned char* buf=(unsigned char*)dest;

  0001e	8b 45 08	 mov	 eax, DWORD PTR _dest$[ebp]
  00021	89 45 fc	 mov	 DWORD PTR _buf$[ebp], eax

; 314  :     int n;
; 315  :     for (n = 0; n < nbByte; n++) {

  00024	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  0002b	eb 09		 jmp	 SHORT $LN4@zip64local
$LN2@zip64local:
  0002d	8b 4d f8	 mov	 ecx, DWORD PTR _n$[ebp]
  00030	83 c1 01	 add	 ecx, 1
  00033	89 4d f8	 mov	 DWORD PTR _n$[ebp], ecx
$LN4@zip64local:
  00036	8b 55 f8	 mov	 edx, DWORD PTR _n$[ebp]
  00039	3b 55 14	 cmp	 edx, DWORD PTR _nbByte$[ebp]
  0003c	7d 25		 jge	 SHORT $LN3@zip64local

; 316  :         buf[n] = (unsigned char)(x & 0xff);

  0003e	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00041	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _buf$[ebp]
  00049	03 4d f8	 add	 ecx, DWORD PTR _n$[ebp]
  0004c	88 01		 mov	 BYTE PTR [ecx], al

; 317  :         x >>= 8;

  0004e	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00051	8b 55 10	 mov	 edx, DWORD PTR _x$[ebp+4]
  00054	b1 08		 mov	 cl, 8
  00056	e8 00 00 00 00	 call	 __aullshr
  0005b	89 45 0c	 mov	 DWORD PTR _x$[ebp], eax
  0005e	89 55 10	 mov	 DWORD PTR _x$[ebp+4], edx

; 318  :     }

  00061	eb ca		 jmp	 SHORT $LN2@zip64local
$LN3@zip64local:

; 319  : 
; 320  :     if (x != 0)

  00063	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  00066	0b 55 10	 or	 edx, DWORD PTR _x$[ebp+4]
  00069	74 25		 je	 SHORT $LN1@zip64local

; 321  :     {     /* data overflow - hack for ZIP64 */
; 322  :        for (n = 0; n < nbByte; n++)

  0006b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  00072	eb 09		 jmp	 SHORT $LN7@zip64local
$LN5@zip64local:
  00074	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00077	83 c0 01	 add	 eax, 1
  0007a	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax
$LN7@zip64local:
  0007d	8b 4d f8	 mov	 ecx, DWORD PTR _n$[ebp]
  00080	3b 4d 14	 cmp	 ecx, DWORD PTR _nbByte$[ebp]
  00083	7d 0b		 jge	 SHORT $LN1@zip64local

; 323  :        {
; 324  :           buf[n] = 0xff;

  00085	8b 55 fc	 mov	 edx, DWORD PTR _buf$[ebp]
  00088	03 55 f8	 add	 edx, DWORD PTR _n$[ebp]
  0008b	c6 02 ff	 mov	 BYTE PTR [edx], 255	; 000000ffH

; 325  :        }

  0008e	eb e4		 jmp	 SHORT $LN5@zip64local
$LN1@zip64local:

; 326  :     }
; 327  : }

  00090	83 c4 08	 add	 esp, 8
  00093	3b ec		 cmp	 ebp, esp
  00095	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
_zip64local_putValue_inmemory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _zip64local_TmzDateToDosDate
_TEXT	SEGMENT
_year$ = -4						; size = 4
_ptm$ = 8						; size = 4
_zip64local_TmzDateToDosDate PROC			; COMDAT

; 333  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00010	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 334  :     uLong year = (uLong)ptm->tm_year;

  00015	8b 45 08	 mov	 eax, DWORD PTR _ptm$[ebp]
  00018	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0001b	89 4d fc	 mov	 DWORD PTR _year$[ebp], ecx

; 335  :     if (year>=1980)

  0001e	81 7d fc bc 07
	00 00		 cmp	 DWORD PTR _year$[ebp], 1980 ; 000007bcH
  00025	72 0e		 jb	 SHORT $LN2@zip64local

; 336  :         year-=1980;

  00027	8b 55 fc	 mov	 edx, DWORD PTR _year$[ebp]
  0002a	81 ea bc 07 00
	00		 sub	 edx, 1980		; 000007bcH
  00030	89 55 fc	 mov	 DWORD PTR _year$[ebp], edx
  00033	eb 0f		 jmp	 SHORT $LN3@zip64local
$LN2@zip64local:

; 337  :     else if (year>=80)

  00035	83 7d fc 50	 cmp	 DWORD PTR _year$[ebp], 80 ; 00000050H
  00039	72 09		 jb	 SHORT $LN3@zip64local

; 338  :         year-=80;

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _year$[ebp]
  0003e	83 e8 50	 sub	 eax, 80			; 00000050H
  00041	89 45 fc	 mov	 DWORD PTR _year$[ebp], eax
$LN3@zip64local:

; 339  :     return

  00044	8b 4d 08	 mov	 ecx, DWORD PTR _ptm$[ebp]
  00047	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0004a	83 c2 01	 add	 edx, 1
  0004d	c1 e2 05	 shl	 edx, 5
  00050	8b 45 08	 mov	 eax, DWORD PTR _ptm$[ebp]
  00053	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00056	03 c2		 add	 eax, edx
  00058	8b 4d fc	 mov	 ecx, DWORD PTR _year$[ebp]
  0005b	c1 e1 09	 shl	 ecx, 9
  0005e	03 c1		 add	 eax, ecx
  00060	c1 e0 10	 shl	 eax, 16			; 00000010H
  00063	8b 55 08	 mov	 edx, DWORD PTR _ptm$[ebp]
  00066	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00068	d1 e9		 shr	 ecx, 1
  0006a	8b 55 08	 mov	 edx, DWORD PTR _ptm$[ebp]
  0006d	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00070	c1 e2 05	 shl	 edx, 5
  00073	03 ca		 add	 ecx, edx
  00075	8b 55 08	 mov	 edx, DWORD PTR _ptm$[ebp]
  00078	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  0007b	c1 e2 0b	 shl	 edx, 11			; 0000000bH
  0007e	03 ca		 add	 ecx, edx
  00080	0b c1		 or	 eax, ecx

; 340  :       (uLong) (((ptm->tm_mday) + (32 * (ptm->tm_mon+1)) + (512 * year)) << 16) |
; 341  :         ((ptm->tm_sec/2) + (32* ptm->tm_min) + (2048 * (uLong)ptm->tm_hour));
; 342  : }

  00082	83 c4 04	 add	 esp, 4
  00085	3b ec		 cmp	 ebp, esp
  00087	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
_zip64local_TmzDateToDosDate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _zip64local_getByte
_TEXT	SEGMENT
_err$ = -16						; size = 4
_c$ = -5						; size = 1
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_pi$ = 16						; size = 4
_zip64local_getByte PROC				; COMDAT

; 350  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000f	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00012	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00015	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00018	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 351  :     unsigned char c;
; 352  :     int err = (int)ZREAD64(*pzlib_filefunc_def,filestream,&c,1);

  00022	8b f4		 mov	 esi, esp
  00024	6a 01		 push	 1
  00026	8d 45 fb	 lea	 eax, DWORD PTR _c$[ebp]
  00029	50		 push	 eax
  0002a	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  0002d	51		 push	 ecx
  0002e	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00031	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00034	50		 push	 eax
  00035	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00038	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0003b	ff d2		 call	 edx
  0003d	83 c4 10	 add	 esp, 16			; 00000010H
  00040	3b f4		 cmp	 esi, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	89 45 f0	 mov	 DWORD PTR _err$[ebp], eax

; 353  :     if (err==1)

  0004a	83 7d f0 01	 cmp	 DWORD PTR _err$[ebp], 1
  0004e	75 0f		 jne	 SHORT $LN2@zip64local

; 354  :     {
; 355  :         *pi = (int)c;

  00050	0f b6 45 fb	 movzx	 eax, BYTE PTR _c$[ebp]
  00054	8b 4d 10	 mov	 ecx, DWORD PTR _pi$[ebp]
  00057	89 01		 mov	 DWORD PTR [ecx], eax

; 356  :         return ZIP_OK;

  00059	33 c0		 xor	 eax, eax
  0005b	eb 2e		 jmp	 SHORT $LN1@zip64local

; 357  :     }

  0005d	eb 2c		 jmp	 SHORT $LN1@zip64local
$LN2@zip64local:

; 358  :     else
; 359  :     {
; 360  :         if (ZERROR64(*pzlib_filefunc_def,filestream))

  0005f	8b f4		 mov	 esi, esp
  00061	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  00064	52		 push	 edx
  00065	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00068	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0006b	51		 push	 ecx
  0006c	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0006f	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00072	ff d0		 call	 eax
  00074	83 c4 08	 add	 esp, 8
  00077	3b f4		 cmp	 esi, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	85 c0		 test	 eax, eax
  00080	74 07		 je	 SHORT $LN4@zip64local

; 361  :             return ZIP_ERRNO;

  00082	83 c8 ff	 or	 eax, -1
  00085	eb 04		 jmp	 SHORT $LN1@zip64local
  00087	eb 02		 jmp	 SHORT $LN1@zip64local
$LN4@zip64local:

; 362  :         else
; 363  :             return ZIP_EOF;

  00089	33 c0		 xor	 eax, eax
$LN1@zip64local:

; 364  :     }
; 365  : }

  0008b	52		 push	 edx
  0008c	8b cd		 mov	 ecx, ebp
  0008e	50		 push	 eax
  0008f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@zip64local
  00095	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009a	58		 pop	 eax
  0009b	5a		 pop	 edx
  0009c	5e		 pop	 esi
  0009d	83 c4 10	 add	 esp, 16			; 00000010H
  000a0	3b ec		 cmp	 ebp, esp
  000a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c3		 ret	 0
  000ab	90		 npad	 1
$LN11@zip64local:
  000ac	01 00 00 00	 DD	 1
  000b0	00 00 00 00	 DD	 $LN10@zip64local
$LN10@zip64local:
  000b4	fb ff ff ff	 DD	 -5			; fffffffbH
  000b8	01 00 00 00	 DD	 1
  000bc	00 00 00 00	 DD	 $LN9@zip64local
$LN9@zip64local:
  000c0	63		 DB	 99			; 00000063H
  000c1	00		 DB	 0
_zip64local_getByte ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _zip64local_getShort
_TEXT	SEGMENT
_err$ = -20						; size = 4
_i$ = -12						; size = 4
_x$ = -4						; size = 4
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_pX$ = 16						; size = 4
_zip64local_getShort PROC				; COMDAT

; 374  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001a	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 375  :     uLong x ;
; 376  :     int i = 0;

  00024	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 377  :     int err;
; 378  : 
; 379  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0002b	8d 45 f4	 lea	 eax, DWORD PTR _i$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00032	51		 push	 ecx
  00033	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00036	52		 push	 edx
  00037	e8 00 00 00 00	 call	 _zip64local_getByte
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003f	89 45 ec	 mov	 DWORD PTR _err$[ebp], eax

; 380  :     x = (uLong)i;

  00042	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00045	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 381  : 
; 382  :     if (err==ZIP_OK)

  00048	83 7d ec 00	 cmp	 DWORD PTR _err$[ebp], 0
  0004c	75 17		 jne	 SHORT $LN2@zip64local

; 383  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0004e	8d 4d f4	 lea	 ecx, DWORD PTR _i$[ebp]
  00051	51		 push	 ecx
  00052	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  00055	52		 push	 edx
  00056	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 _zip64local_getByte
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00062	89 45 ec	 mov	 DWORD PTR _err$[ebp], eax
$LN2@zip64local:

; 384  :     x += ((uLong)i)<<8;

  00065	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00068	c1 e1 08	 shl	 ecx, 8
  0006b	03 4d fc	 add	 ecx, DWORD PTR _x$[ebp]
  0006e	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 385  : 
; 386  :     if (err==ZIP_OK)

  00071	83 7d ec 00	 cmp	 DWORD PTR _err$[ebp], 0
  00075	75 0a		 jne	 SHORT $LN3@zip64local

; 387  :         *pX = x;

  00077	8b 55 10	 mov	 edx, DWORD PTR _pX$[ebp]
  0007a	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  0007d	89 02		 mov	 DWORD PTR [edx], eax
  0007f	eb 09		 jmp	 SHORT $LN4@zip64local
$LN3@zip64local:

; 388  :     else
; 389  :         *pX = 0;

  00081	8b 4d 10	 mov	 ecx, DWORD PTR _pX$[ebp]
  00084	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN4@zip64local:

; 390  :     return err;

  0008a	8b 45 ec	 mov	 eax, DWORD PTR _err$[ebp]

; 391  : }

  0008d	52		 push	 edx
  0008e	8b cd		 mov	 ecx, ebp
  00090	50		 push	 eax
  00091	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@zip64local
  00097	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009c	58		 pop	 eax
  0009d	5a		 pop	 edx
  0009e	83 c4 14	 add	 esp, 20			; 00000014H
  000a1	3b ec		 cmp	 ebp, esp
  000a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
$LN9@zip64local:
  000ac	01 00 00 00	 DD	 1
  000b0	00 00 00 00	 DD	 $LN8@zip64local
$LN8@zip64local:
  000b4	f4 ff ff ff	 DD	 -12			; fffffff4H
  000b8	04 00 00 00	 DD	 4
  000bc	00 00 00 00	 DD	 $LN7@zip64local
$LN7@zip64local:
  000c0	69		 DB	 105			; 00000069H
  000c1	00		 DB	 0
_zip64local_getShort ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _zip64local_getLong
_TEXT	SEGMENT
_err$ = -20						; size = 4
_i$ = -12						; size = 4
_x$ = -4						; size = 4
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_pX$ = 16						; size = 4
_zip64local_getLong PROC				; COMDAT

; 396  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001a	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 397  :     uLong x ;
; 398  :     int i = 0;

  00024	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 399  :     int err;
; 400  : 
; 401  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0002b	8d 45 f4	 lea	 eax, DWORD PTR _i$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00032	51		 push	 ecx
  00033	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00036	52		 push	 edx
  00037	e8 00 00 00 00	 call	 _zip64local_getByte
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003f	89 45 ec	 mov	 DWORD PTR _err$[ebp], eax

; 402  :     x = (uLong)i;

  00042	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00045	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 403  : 
; 404  :     if (err==ZIP_OK)

  00048	83 7d ec 00	 cmp	 DWORD PTR _err$[ebp], 0
  0004c	75 17		 jne	 SHORT $LN2@zip64local

; 405  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0004e	8d 4d f4	 lea	 ecx, DWORD PTR _i$[ebp]
  00051	51		 push	 ecx
  00052	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  00055	52		 push	 edx
  00056	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 _zip64local_getByte
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00062	89 45 ec	 mov	 DWORD PTR _err$[ebp], eax
$LN2@zip64local:

; 406  :     x += ((uLong)i)<<8;

  00065	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00068	c1 e1 08	 shl	 ecx, 8
  0006b	03 4d fc	 add	 ecx, DWORD PTR _x$[ebp]
  0006e	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 407  : 
; 408  :     if (err==ZIP_OK)

  00071	83 7d ec 00	 cmp	 DWORD PTR _err$[ebp], 0
  00075	75 17		 jne	 SHORT $LN3@zip64local

; 409  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00077	8d 55 f4	 lea	 edx, DWORD PTR _i$[ebp]
  0007a	52		 push	 edx
  0007b	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00082	51		 push	 ecx
  00083	e8 00 00 00 00	 call	 _zip64local_getByte
  00088	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008b	89 45 ec	 mov	 DWORD PTR _err$[ebp], eax
$LN3@zip64local:

; 410  :     x += ((uLong)i)<<16;

  0008e	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00091	c1 e2 10	 shl	 edx, 16			; 00000010H
  00094	03 55 fc	 add	 edx, DWORD PTR _x$[ebp]
  00097	89 55 fc	 mov	 DWORD PTR _x$[ebp], edx

; 411  : 
; 412  :     if (err==ZIP_OK)

  0009a	83 7d ec 00	 cmp	 DWORD PTR _err$[ebp], 0
  0009e	75 17		 jne	 SHORT $LN4@zip64local

; 413  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  000a0	8d 45 f4	 lea	 eax, DWORD PTR _i$[ebp]
  000a3	50		 push	 eax
  000a4	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  000a7	51		 push	 ecx
  000a8	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  000ab	52		 push	 edx
  000ac	e8 00 00 00 00	 call	 _zip64local_getByte
  000b1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b4	89 45 ec	 mov	 DWORD PTR _err$[ebp], eax
$LN4@zip64local:

; 414  :     x += ((uLong)i)<<24;

  000b7	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  000ba	c1 e0 18	 shl	 eax, 24			; 00000018H
  000bd	03 45 fc	 add	 eax, DWORD PTR _x$[ebp]
  000c0	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 415  : 
; 416  :     if (err==ZIP_OK)

  000c3	83 7d ec 00	 cmp	 DWORD PTR _err$[ebp], 0
  000c7	75 0a		 jne	 SHORT $LN5@zip64local

; 417  :         *pX = x;

  000c9	8b 4d 10	 mov	 ecx, DWORD PTR _pX$[ebp]
  000cc	8b 55 fc	 mov	 edx, DWORD PTR _x$[ebp]
  000cf	89 11		 mov	 DWORD PTR [ecx], edx
  000d1	eb 09		 jmp	 SHORT $LN6@zip64local
$LN5@zip64local:

; 418  :     else
; 419  :         *pX = 0;

  000d3	8b 45 10	 mov	 eax, DWORD PTR _pX$[ebp]
  000d6	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN6@zip64local:

; 420  :     return err;

  000dc	8b 45 ec	 mov	 eax, DWORD PTR _err$[ebp]

; 421  : }

  000df	52		 push	 edx
  000e0	8b cd		 mov	 ecx, ebp
  000e2	50		 push	 eax
  000e3	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@zip64local
  000e9	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ee	58		 pop	 eax
  000ef	5a		 pop	 edx
  000f0	83 c4 14	 add	 esp, 20			; 00000014H
  000f3	3b ec		 cmp	 ebp, esp
  000f5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fa	8b e5		 mov	 esp, ebp
  000fc	5d		 pop	 ebp
  000fd	c3		 ret	 0
  000fe	66 90		 npad	 2
$LN11@zip64local:
  00100	01 00 00 00	 DD	 1
  00104	00 00 00 00	 DD	 $LN10@zip64local
$LN10@zip64local:
  00108	f4 ff ff ff	 DD	 -12			; fffffff4H
  0010c	04 00 00 00	 DD	 4
  00110	00 00 00 00	 DD	 $LN9@zip64local
$LN9@zip64local:
  00114	69		 DB	 105			; 00000069H
  00115	00		 DB	 0
_zip64local_getLong ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _zip64local_getLong64
_TEXT	SEGMENT
_err$ = -24						; size = 4
_i$ = -16						; size = 4
_x$ = -8						; size = 8
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_pX$ = 16						; size = 4
_zip64local_getLong64 PROC				; COMDAT

; 427  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000e	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00011	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00014	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00017	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001a	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001d	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00022	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 428  :   ZPOS64_T x;
; 429  :   int i = 0;

  00027	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 430  :   int err;
; 431  : 
; 432  :   err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0002e	8d 45 f0	 lea	 eax, DWORD PTR _i$[ebp]
  00031	50		 push	 eax
  00032	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00035	51		 push	 ecx
  00036	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 _zip64local_getByte
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00042	89 45 e8	 mov	 DWORD PTR _err$[ebp], eax

; 433  :   x = (ZPOS64_T)i;

  00045	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00048	99		 cdq
  00049	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  0004c	89 55 fc	 mov	 DWORD PTR _x$[ebp+4], edx

; 434  : 
; 435  :   if (err==ZIP_OK)

  0004f	83 7d e8 00	 cmp	 DWORD PTR _err$[ebp], 0
  00053	75 17		 jne	 SHORT $LN2@zip64local

; 436  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00055	8d 45 f0	 lea	 eax, DWORD PTR _i$[ebp]
  00058	50		 push	 eax
  00059	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  0005c	51		 push	 ecx
  0005d	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 _zip64local_getByte
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	89 45 e8	 mov	 DWORD PTR _err$[ebp], eax
$LN2@zip64local:

; 437  :   x += ((ZPOS64_T)i)<<8;

  0006c	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0006f	99		 cdq
  00070	b1 08		 mov	 cl, 8
  00072	e8 00 00 00 00	 call	 __allshl
  00077	03 45 f8	 add	 eax, DWORD PTR _x$[ebp]
  0007a	13 55 fc	 adc	 edx, DWORD PTR _x$[ebp+4]
  0007d	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  00080	89 55 fc	 mov	 DWORD PTR _x$[ebp+4], edx

; 438  : 
; 439  :   if (err==ZIP_OK)

  00083	83 7d e8 00	 cmp	 DWORD PTR _err$[ebp], 0
  00087	75 17		 jne	 SHORT $LN3@zip64local

; 440  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00089	8d 45 f0	 lea	 eax, DWORD PTR _i$[ebp]
  0008c	50		 push	 eax
  0008d	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00090	51		 push	 ecx
  00091	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00094	52		 push	 edx
  00095	e8 00 00 00 00	 call	 _zip64local_getByte
  0009a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009d	89 45 e8	 mov	 DWORD PTR _err$[ebp], eax
$LN3@zip64local:

; 441  :   x += ((ZPOS64_T)i)<<16;

  000a0	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  000a3	99		 cdq
  000a4	b1 10		 mov	 cl, 16			; 00000010H
  000a6	e8 00 00 00 00	 call	 __allshl
  000ab	03 45 f8	 add	 eax, DWORD PTR _x$[ebp]
  000ae	13 55 fc	 adc	 edx, DWORD PTR _x$[ebp+4]
  000b1	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  000b4	89 55 fc	 mov	 DWORD PTR _x$[ebp+4], edx

; 442  : 
; 443  :   if (err==ZIP_OK)

  000b7	83 7d e8 00	 cmp	 DWORD PTR _err$[ebp], 0
  000bb	75 17		 jne	 SHORT $LN4@zip64local

; 444  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  000bd	8d 45 f0	 lea	 eax, DWORD PTR _i$[ebp]
  000c0	50		 push	 eax
  000c1	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  000c4	51		 push	 ecx
  000c5	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  000c8	52		 push	 edx
  000c9	e8 00 00 00 00	 call	 _zip64local_getByte
  000ce	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d1	89 45 e8	 mov	 DWORD PTR _err$[ebp], eax
$LN4@zip64local:

; 445  :   x += ((ZPOS64_T)i)<<24;

  000d4	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  000d7	99		 cdq
  000d8	b1 18		 mov	 cl, 24			; 00000018H
  000da	e8 00 00 00 00	 call	 __allshl
  000df	03 45 f8	 add	 eax, DWORD PTR _x$[ebp]
  000e2	13 55 fc	 adc	 edx, DWORD PTR _x$[ebp+4]
  000e5	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  000e8	89 55 fc	 mov	 DWORD PTR _x$[ebp+4], edx

; 446  : 
; 447  :   if (err==ZIP_OK)

  000eb	83 7d e8 00	 cmp	 DWORD PTR _err$[ebp], 0
  000ef	75 17		 jne	 SHORT $LN5@zip64local

; 448  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  000f1	8d 45 f0	 lea	 eax, DWORD PTR _i$[ebp]
  000f4	50		 push	 eax
  000f5	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  000f8	51		 push	 ecx
  000f9	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  000fc	52		 push	 edx
  000fd	e8 00 00 00 00	 call	 _zip64local_getByte
  00102	83 c4 0c	 add	 esp, 12			; 0000000cH
  00105	89 45 e8	 mov	 DWORD PTR _err$[ebp], eax
$LN5@zip64local:

; 449  :   x += ((ZPOS64_T)i)<<32;

  00108	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0010b	99		 cdq
  0010c	b1 20		 mov	 cl, 32			; 00000020H
  0010e	e8 00 00 00 00	 call	 __allshl
  00113	03 45 f8	 add	 eax, DWORD PTR _x$[ebp]
  00116	13 55 fc	 adc	 edx, DWORD PTR _x$[ebp+4]
  00119	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  0011c	89 55 fc	 mov	 DWORD PTR _x$[ebp+4], edx

; 450  : 
; 451  :   if (err==ZIP_OK)

  0011f	83 7d e8 00	 cmp	 DWORD PTR _err$[ebp], 0
  00123	75 17		 jne	 SHORT $LN6@zip64local

; 452  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00125	8d 45 f0	 lea	 eax, DWORD PTR _i$[ebp]
  00128	50		 push	 eax
  00129	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  0012c	51		 push	 ecx
  0012d	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00130	52		 push	 edx
  00131	e8 00 00 00 00	 call	 _zip64local_getByte
  00136	83 c4 0c	 add	 esp, 12			; 0000000cH
  00139	89 45 e8	 mov	 DWORD PTR _err$[ebp], eax
$LN6@zip64local:

; 453  :   x += ((ZPOS64_T)i)<<40;

  0013c	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0013f	99		 cdq
  00140	b1 28		 mov	 cl, 40			; 00000028H
  00142	e8 00 00 00 00	 call	 __allshl
  00147	03 45 f8	 add	 eax, DWORD PTR _x$[ebp]
  0014a	13 55 fc	 adc	 edx, DWORD PTR _x$[ebp+4]
  0014d	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  00150	89 55 fc	 mov	 DWORD PTR _x$[ebp+4], edx

; 454  : 
; 455  :   if (err==ZIP_OK)

  00153	83 7d e8 00	 cmp	 DWORD PTR _err$[ebp], 0
  00157	75 17		 jne	 SHORT $LN7@zip64local

; 456  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00159	8d 45 f0	 lea	 eax, DWORD PTR _i$[ebp]
  0015c	50		 push	 eax
  0015d	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00160	51		 push	 ecx
  00161	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00164	52		 push	 edx
  00165	e8 00 00 00 00	 call	 _zip64local_getByte
  0016a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0016d	89 45 e8	 mov	 DWORD PTR _err$[ebp], eax
$LN7@zip64local:

; 457  :   x += ((ZPOS64_T)i)<<48;

  00170	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00173	99		 cdq
  00174	b1 30		 mov	 cl, 48			; 00000030H
  00176	e8 00 00 00 00	 call	 __allshl
  0017b	03 45 f8	 add	 eax, DWORD PTR _x$[ebp]
  0017e	13 55 fc	 adc	 edx, DWORD PTR _x$[ebp+4]
  00181	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  00184	89 55 fc	 mov	 DWORD PTR _x$[ebp+4], edx

; 458  : 
; 459  :   if (err==ZIP_OK)

  00187	83 7d e8 00	 cmp	 DWORD PTR _err$[ebp], 0
  0018b	75 17		 jne	 SHORT $LN8@zip64local

; 460  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0018d	8d 45 f0	 lea	 eax, DWORD PTR _i$[ebp]
  00190	50		 push	 eax
  00191	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00194	51		 push	 ecx
  00195	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00198	52		 push	 edx
  00199	e8 00 00 00 00	 call	 _zip64local_getByte
  0019e	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a1	89 45 e8	 mov	 DWORD PTR _err$[ebp], eax
$LN8@zip64local:

; 461  :   x += ((ZPOS64_T)i)<<56;

  001a4	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  001a7	99		 cdq
  001a8	b1 38		 mov	 cl, 56			; 00000038H
  001aa	e8 00 00 00 00	 call	 __allshl
  001af	03 45 f8	 add	 eax, DWORD PTR _x$[ebp]
  001b2	13 55 fc	 adc	 edx, DWORD PTR _x$[ebp+4]
  001b5	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  001b8	89 55 fc	 mov	 DWORD PTR _x$[ebp+4], edx

; 462  : 
; 463  :   if (err==ZIP_OK)

  001bb	83 7d e8 00	 cmp	 DWORD PTR _err$[ebp], 0
  001bf	75 10		 jne	 SHORT $LN9@zip64local

; 464  :     *pX = x;

  001c1	8b 45 10	 mov	 eax, DWORD PTR _pX$[ebp]
  001c4	8b 4d f8	 mov	 ecx, DWORD PTR _x$[ebp]
  001c7	89 08		 mov	 DWORD PTR [eax], ecx
  001c9	8b 55 fc	 mov	 edx, DWORD PTR _x$[ebp+4]
  001cc	89 50 04	 mov	 DWORD PTR [eax+4], edx
  001cf	eb 10		 jmp	 SHORT $LN10@zip64local
$LN9@zip64local:

; 465  :   else
; 466  :     *pX = 0;

  001d1	8b 45 10	 mov	 eax, DWORD PTR _pX$[ebp]
  001d4	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  001da	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN10@zip64local:

; 467  : 
; 468  :   return err;

  001e1	8b 45 e8	 mov	 eax, DWORD PTR _err$[ebp]

; 469  : }

  001e4	52		 push	 edx
  001e5	8b cd		 mov	 ecx, ebp
  001e7	50		 push	 eax
  001e8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN15@zip64local
  001ee	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001f3	58		 pop	 eax
  001f4	5a		 pop	 edx
  001f5	83 c4 18	 add	 esp, 24			; 00000018H
  001f8	3b ec		 cmp	 ebp, esp
  001fa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001ff	8b e5		 mov	 esp, ebp
  00201	5d		 pop	 ebp
  00202	c3		 ret	 0
  00203	90		 npad	 1
$LN15@zip64local:
  00204	01 00 00 00	 DD	 1
  00208	00 00 00 00	 DD	 $LN14@zip64local
$LN14@zip64local:
  0020c	f0 ff ff ff	 DD	 -16			; fffffff0H
  00210	04 00 00 00	 DD	 4
  00214	00 00 00 00	 DD	 $LN13@zip64local
$LN13@zip64local:
  00218	69		 DB	 105			; 00000069H
  00219	00		 DB	 0
_zip64local_getLong64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _zip64local_SearchCentralDir
_TEXT	SEGMENT
tv140 = -80						; size = 4
tv139 = -76						; size = 4
tv89 = -72						; size = 4
tv222 = -68						; size = 8
tv198 = -60						; size = 8
_i$1 = -52						; size = 4
_uReadPos$2 = -48					; size = 8
_uReadSize$3 = -40					; size = 4
_uPosFound$ = -36					; size = 8
_uMaxBack$ = -28					; size = 8
_uBackRead$ = -20					; size = 8
_uSizeFile$ = -12					; size = 8
_buf$ = -4						; size = 4
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_zip64local_SearchCentralDir PROC			; COMDAT

; 481  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d b0	 lea	 edi, DWORD PTR [ebp-80]
  0000b	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 482  :   unsigned char* buf;
; 483  :   ZPOS64_T uSizeFile;
; 484  :   ZPOS64_T uBackRead;
; 485  :   ZPOS64_T uMaxBack=0xffff; /* maximum size of global comment */

  00021	c7 45 e4 ff ff
	00 00		 mov	 DWORD PTR _uMaxBack$[ebp], 65535 ; 0000ffffH
  00028	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _uMaxBack$[ebp+4], 0

; 486  :   ZPOS64_T uPosFound=0;

  0002f	0f 57 c0	 xorps	 xmm0, xmm0
  00032	66 0f 13 45 dc	 movlpd	 QWORD PTR _uPosFound$[ebp], xmm0

; 487  : 
; 488  :   if (ZSEEK64(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  00037	6a 02		 push	 2
  00039	6a 00		 push	 0
  0003b	6a 00		 push	 0
  0003d	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  00040	50		 push	 eax
  00041	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 _call_zseek64
  0004a	83 c4 14	 add	 esp, 20			; 00000014H
  0004d	85 c0		 test	 eax, eax
  0004f	74 09		 je	 SHORT $LN7@zip64local

; 489  :     return 0;

  00051	33 c0		 xor	 eax, eax
  00053	33 d2		 xor	 edx, edx
  00055	e9 16 02 00 00	 jmp	 $LN1@zip64local
$LN7@zip64local:

; 490  : 
; 491  : 
; 492  :   uSizeFile = ZTELL64(*pzlib_filefunc_def,filestream);

  0005a	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  0005d	52		 push	 edx
  0005e	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 _call_ztell64
  00067	83 c4 08	 add	 esp, 8
  0006a	89 45 f4	 mov	 DWORD PTR _uSizeFile$[ebp], eax
  0006d	89 55 f8	 mov	 DWORD PTR _uSizeFile$[ebp+4], edx

; 493  : 
; 494  :   if (uMaxBack>uSizeFile)

  00070	8b 4d e8	 mov	 ecx, DWORD PTR _uMaxBack$[ebp+4]
  00073	3b 4d f8	 cmp	 ecx, DWORD PTR _uSizeFile$[ebp+4]
  00076	72 16		 jb	 SHORT $LN8@zip64local
  00078	77 08		 ja	 SHORT $LN24@zip64local
  0007a	8b 55 e4	 mov	 edx, DWORD PTR _uMaxBack$[ebp]
  0007d	3b 55 f4	 cmp	 edx, DWORD PTR _uSizeFile$[ebp]
  00080	76 0c		 jbe	 SHORT $LN8@zip64local
$LN24@zip64local:

; 495  :     uMaxBack = uSizeFile;

  00082	8b 45 f4	 mov	 eax, DWORD PTR _uSizeFile$[ebp]
  00085	89 45 e4	 mov	 DWORD PTR _uMaxBack$[ebp], eax
  00088	8b 4d f8	 mov	 ecx, DWORD PTR _uSizeFile$[ebp+4]
  0008b	89 4d e8	 mov	 DWORD PTR _uMaxBack$[ebp+4], ecx
$LN8@zip64local:

; 496  : 
; 497  :   buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  0008e	68 04 04 00 00	 push	 1028			; 00000404H
  00093	e8 00 00 00 00	 call	 _malloc
  00098	83 c4 04	 add	 esp, 4
  0009b	89 45 fc	 mov	 DWORD PTR _buf$[ebp], eax

; 498  :   if (buf==NULL)

  0009e	83 7d fc 00	 cmp	 DWORD PTR _buf$[ebp], 0
  000a2	75 09		 jne	 SHORT $LN9@zip64local

; 499  :     return 0;

  000a4	33 c0		 xor	 eax, eax
  000a6	33 d2		 xor	 edx, edx
  000a8	e9 c3 01 00 00	 jmp	 $LN1@zip64local
$LN9@zip64local:

; 500  : 
; 501  :   uBackRead = 4;

  000ad	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR _uBackRead$[ebp], 4
  000b4	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _uBackRead$[ebp+4], 0
$LN2@zip64local:

; 502  :   while (uBackRead<uMaxBack)

  000bb	8b 55 f0	 mov	 edx, DWORD PTR _uBackRead$[ebp+4]
  000be	3b 55 e8	 cmp	 edx, DWORD PTR _uMaxBack$[ebp+4]
  000c1	0f 87 91 01 00
	00		 ja	 $LN3@zip64local
  000c7	72 0c		 jb	 SHORT $LN25@zip64local
  000c9	8b 45 ec	 mov	 eax, DWORD PTR _uBackRead$[ebp]
  000cc	3b 45 e4	 cmp	 eax, DWORD PTR _uMaxBack$[ebp]
  000cf	0f 83 83 01 00
	00		 jae	 $LN3@zip64local
$LN25@zip64local:

; 503  :   {
; 504  :     uLong uReadSize;
; 505  :     ZPOS64_T uReadPos ;
; 506  :     int i;
; 507  :     if (uBackRead+BUFREADCOMMENT>uMaxBack)

  000d5	0f ae e8	 lfence
  000d8	8b 4d ec	 mov	 ecx, DWORD PTR _uBackRead$[ebp]
  000db	81 c1 00 04 00
	00		 add	 ecx, 1024		; 00000400H
  000e1	8b 55 f0	 mov	 edx, DWORD PTR _uBackRead$[ebp+4]
  000e4	83 d2 00	 adc	 edx, 0
  000e7	89 4d c4	 mov	 DWORD PTR tv198[ebp], ecx
  000ea	89 55 c8	 mov	 DWORD PTR tv198[ebp+4], edx
  000ed	8b 45 c8	 mov	 eax, DWORD PTR tv198[ebp+4]
  000f0	3b 45 e8	 cmp	 eax, DWORD PTR _uMaxBack$[ebp+4]
  000f3	72 18		 jb	 SHORT $LN10@zip64local
  000f5	77 08		 ja	 SHORT $LN26@zip64local
  000f7	8b 4d c4	 mov	 ecx, DWORD PTR tv198[ebp]
  000fa	3b 4d e4	 cmp	 ecx, DWORD PTR _uMaxBack$[ebp]
  000fd	76 0e		 jbe	 SHORT $LN10@zip64local
$LN26@zip64local:

; 508  :       uBackRead = uMaxBack;

  000ff	8b 55 e4	 mov	 edx, DWORD PTR _uMaxBack$[ebp]
  00102	89 55 ec	 mov	 DWORD PTR _uBackRead$[ebp], edx
  00105	8b 45 e8	 mov	 eax, DWORD PTR _uMaxBack$[ebp+4]
  00108	89 45 f0	 mov	 DWORD PTR _uBackRead$[ebp+4], eax
  0010b	eb 15		 jmp	 SHORT $LN11@zip64local
$LN10@zip64local:

; 509  :     else
; 510  :       uBackRead+=BUFREADCOMMENT;

  0010d	8b 4d ec	 mov	 ecx, DWORD PTR _uBackRead$[ebp]
  00110	81 c1 00 04 00
	00		 add	 ecx, 1024		; 00000400H
  00116	8b 55 f0	 mov	 edx, DWORD PTR _uBackRead$[ebp+4]
  00119	83 d2 00	 adc	 edx, 0
  0011c	89 4d ec	 mov	 DWORD PTR _uBackRead$[ebp], ecx
  0011f	89 55 f0	 mov	 DWORD PTR _uBackRead$[ebp+4], edx
$LN11@zip64local:

; 511  :     uReadPos = uSizeFile-uBackRead ;

  00122	8b 45 f4	 mov	 eax, DWORD PTR _uSizeFile$[ebp]
  00125	2b 45 ec	 sub	 eax, DWORD PTR _uBackRead$[ebp]
  00128	8b 4d f8	 mov	 ecx, DWORD PTR _uSizeFile$[ebp+4]
  0012b	1b 4d f0	 sbb	 ecx, DWORD PTR _uBackRead$[ebp+4]
  0012e	89 45 d0	 mov	 DWORD PTR _uReadPos$2[ebp], eax
  00131	89 4d d4	 mov	 DWORD PTR _uReadPos$2[ebp+4], ecx

; 512  : 
; 513  :     uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?

  00134	8b 55 f4	 mov	 edx, DWORD PTR _uSizeFile$[ebp]
  00137	2b 55 d0	 sub	 edx, DWORD PTR _uReadPos$2[ebp]
  0013a	8b 45 f8	 mov	 eax, DWORD PTR _uSizeFile$[ebp+4]
  0013d	1b 45 d4	 sbb	 eax, DWORD PTR _uReadPos$2[ebp+4]
  00140	89 55 bc	 mov	 DWORD PTR tv222[ebp], edx
  00143	89 45 c0	 mov	 DWORD PTR tv222[ebp+4], eax
  00146	83 7d c0 00	 cmp	 DWORD PTR tv222[ebp+4], 0
  0014a	72 14		 jb	 SHORT $LN18@zip64local
  0014c	77 09		 ja	 SHORT $LN27@zip64local
  0014e	81 7d bc 04 04
	00 00		 cmp	 DWORD PTR tv222[ebp], 1028 ; 00000404H
  00155	76 09		 jbe	 SHORT $LN18@zip64local
$LN27@zip64local:
  00157	c7 45 b8 04 04
	00 00		 mov	 DWORD PTR tv89[ebp], 1028 ; 00000404H
  0015e	eb 09		 jmp	 SHORT $LN19@zip64local
$LN18@zip64local:
  00160	8b 4d f4	 mov	 ecx, DWORD PTR _uSizeFile$[ebp]
  00163	2b 4d d0	 sub	 ecx, DWORD PTR _uReadPos$2[ebp]
  00166	89 4d b8	 mov	 DWORD PTR tv89[ebp], ecx
$LN19@zip64local:
  00169	8b 55 b8	 mov	 edx, DWORD PTR tv89[ebp]
  0016c	89 55 d8	 mov	 DWORD PTR _uReadSize$3[ebp], edx

; 514  :       (BUFREADCOMMENT+4) : (uLong)(uSizeFile-uReadPos);
; 515  :     if (ZSEEK64(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0016f	6a 00		 push	 0
  00171	8b 45 d4	 mov	 eax, DWORD PTR _uReadPos$2[ebp+4]
  00174	50		 push	 eax
  00175	8b 4d d0	 mov	 ecx, DWORD PTR _uReadPos$2[ebp]
  00178	51		 push	 ecx
  00179	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  0017c	52		 push	 edx
  0017d	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00180	50		 push	 eax
  00181	e8 00 00 00 00	 call	 _call_zseek64
  00186	83 c4 14	 add	 esp, 20			; 00000014H
  00189	85 c0		 test	 eax, eax
  0018b	74 05		 je	 SHORT $LN12@zip64local

; 516  :       break;

  0018d	e9 c6 00 00 00	 jmp	 $LN3@zip64local
$LN12@zip64local:

; 517  : 
; 518  :     if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  00192	0f ae e8	 lfence
  00195	8b f4		 mov	 esi, esp
  00197	8b 4d d8	 mov	 ecx, DWORD PTR _uReadSize$3[ebp]
  0019a	51		 push	 ecx
  0019b	8b 55 fc	 mov	 edx, DWORD PTR _buf$[ebp]
  0019e	52		 push	 edx
  0019f	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  001a2	50		 push	 eax
  001a3	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  001a6	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  001a9	52		 push	 edx
  001aa	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  001ad	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001b0	ff d1		 call	 ecx
  001b2	83 c4 10	 add	 esp, 16			; 00000010H
  001b5	3b f4		 cmp	 esi, esp
  001b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001bc	3b 45 d8	 cmp	 eax, DWORD PTR _uReadSize$3[ebp]
  001bf	74 05		 je	 SHORT $LN13@zip64local

; 519  :       break;

  001c1	e9 92 00 00 00	 jmp	 $LN3@zip64local
$LN13@zip64local:

; 520  : 
; 521  :     for (i=(int)uReadSize-3; (i--)>0;)

  001c6	8b 55 d8	 mov	 edx, DWORD PTR _uReadSize$3[ebp]
  001c9	83 ea 03	 sub	 edx, 3
  001cc	89 55 cc	 mov	 DWORD PTR _i$1[ebp], edx
$LN6@zip64local:
  001cf	8b 45 cc	 mov	 eax, DWORD PTR _i$1[ebp]
  001d2	89 45 b4	 mov	 DWORD PTR tv139[ebp], eax
  001d5	8b 4d cc	 mov	 ecx, DWORD PTR _i$1[ebp]
  001d8	83 e9 01	 sub	 ecx, 1
  001db	89 4d cc	 mov	 DWORD PTR _i$1[ebp], ecx
  001de	83 7d b4 00	 cmp	 DWORD PTR tv139[ebp], 0
  001e2	7e 09		 jle	 SHORT $LN20@zip64local
  001e4	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv140[ebp], 1
  001eb	eb 07		 jmp	 SHORT $LN21@zip64local
$LN20@zip64local:
  001ed	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv140[ebp], 0
$LN21@zip64local:
  001f4	83 7d b0 00	 cmp	 DWORD PTR tv140[ebp], 0
  001f8	74 4f		 je	 SHORT $LN5@zip64local

; 522  :       if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) &&
; 523  :         ((*(buf+i+2))==0x05) && ((*(buf+i+3))==0x06))

  001fa	8b 55 fc	 mov	 edx, DWORD PTR _buf$[ebp]
  001fd	03 55 cc	 add	 edx, DWORD PTR _i$1[ebp]
  00200	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00203	83 f8 50	 cmp	 eax, 80			; 00000050H
  00206	75 3f		 jne	 SHORT $LN14@zip64local
  00208	8b 4d fc	 mov	 ecx, DWORD PTR _buf$[ebp]
  0020b	03 4d cc	 add	 ecx, DWORD PTR _i$1[ebp]
  0020e	0f b6 51 01	 movzx	 edx, BYTE PTR [ecx+1]
  00212	83 fa 4b	 cmp	 edx, 75			; 0000004bH
  00215	75 30		 jne	 SHORT $LN14@zip64local
  00217	8b 45 fc	 mov	 eax, DWORD PTR _buf$[ebp]
  0021a	03 45 cc	 add	 eax, DWORD PTR _i$1[ebp]
  0021d	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00221	83 f9 05	 cmp	 ecx, 5
  00224	75 21		 jne	 SHORT $LN14@zip64local
  00226	8b 55 fc	 mov	 edx, DWORD PTR _buf$[ebp]
  00229	03 55 cc	 add	 edx, DWORD PTR _i$1[ebp]
  0022c	0f b6 42 03	 movzx	 eax, BYTE PTR [edx+3]
  00230	83 f8 06	 cmp	 eax, 6
  00233	75 12		 jne	 SHORT $LN14@zip64local

; 524  :       {
; 525  :         uPosFound = uReadPos+i;

  00235	8b 45 cc	 mov	 eax, DWORD PTR _i$1[ebp]
  00238	99		 cdq
  00239	03 45 d0	 add	 eax, DWORD PTR _uReadPos$2[ebp]
  0023c	13 55 d4	 adc	 edx, DWORD PTR _uReadPos$2[ebp+4]
  0023f	89 45 dc	 mov	 DWORD PTR _uPosFound$[ebp], eax
  00242	89 55 e0	 mov	 DWORD PTR _uPosFound$[ebp+4], edx

; 526  :         break;

  00245	eb 02		 jmp	 SHORT $LN5@zip64local
$LN14@zip64local:

; 527  :       }

  00247	eb 86		 jmp	 SHORT $LN6@zip64local
$LN5@zip64local:

; 528  : 
; 529  :       if (uPosFound!=0)

  00249	8b 4d dc	 mov	 ecx, DWORD PTR _uPosFound$[ebp]
  0024c	0b 4d e0	 or	 ecx, DWORD PTR _uPosFound$[ebp+4]
  0024f	74 02		 je	 SHORT $LN15@zip64local

; 530  :         break;

  00251	eb 05		 jmp	 SHORT $LN3@zip64local
$LN15@zip64local:

; 531  :   }

  00253	e9 63 fe ff ff	 jmp	 $LN2@zip64local
$LN3@zip64local:

; 532  :   TRYFREE(buf);

  00258	83 7d fc 00	 cmp	 DWORD PTR _buf$[ebp], 0
  0025c	74 0c		 je	 SHORT $LN16@zip64local
  0025e	8b 55 fc	 mov	 edx, DWORD PTR _buf$[ebp]
  00261	52		 push	 edx
  00262	e8 00 00 00 00	 call	 _free
  00267	83 c4 04	 add	 esp, 4
$LN16@zip64local:

; 533  :   return uPosFound;

  0026a	8b 45 dc	 mov	 eax, DWORD PTR _uPosFound$[ebp]
  0026d	8b 55 e0	 mov	 edx, DWORD PTR _uPosFound$[ebp+4]
$LN1@zip64local:

; 534  : }

  00270	5f		 pop	 edi
  00271	5e		 pop	 esi
  00272	83 c4 50	 add	 esp, 80			; 00000050H
  00275	3b ec		 cmp	 ebp, esp
  00277	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0027c	8b e5		 mov	 esp, ebp
  0027e	5d		 pop	 ebp
  0027f	c3		 ret	 0
_zip64local_SearchCentralDir ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _zip64local_SearchCentralDir64
_TEXT	SEGMENT
tv140 = -108						; size = 4
tv139 = -104						; size = 4
tv89 = -100						; size = 4
tv263 = -96						; size = 8
tv239 = -88						; size = 8
_i$1 = -80						; size = 4
_uReadPos$2 = -76					; size = 8
_uReadSize$3 = -68					; size = 4
_relativeOffset$ = -60					; size = 8
_uL$ = -44						; size = 4
_uPosFound$ = -36					; size = 8
_uMaxBack$ = -28					; size = 8
_uBackRead$ = -20					; size = 8
_uSizeFile$ = -12					; size = 8
_buf$ = -4						; size = 4
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_zip64local_SearchCentralDir64 PROC			; COMDAT

; 543  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d 94	 lea	 edi, DWORD PTR [ebp-108]
  0000b	b9 1b 00 00 00	 mov	 ecx, 27			; 0000001bH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 544  :   unsigned char* buf;
; 545  :   ZPOS64_T uSizeFile;
; 546  :   ZPOS64_T uBackRead;
; 547  :   ZPOS64_T uMaxBack=0xffff; /* maximum size of global comment */

  00021	c7 45 e4 ff ff
	00 00		 mov	 DWORD PTR _uMaxBack$[ebp], 65535 ; 0000ffffH
  00028	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _uMaxBack$[ebp+4], 0

; 548  :   ZPOS64_T uPosFound=0;

  0002f	0f 57 c0	 xorps	 xmm0, xmm0
  00032	66 0f 13 45 dc	 movlpd	 QWORD PTR _uPosFound$[ebp], xmm0

; 549  :   uLong uL;
; 550  :   ZPOS64_T relativeOffset;
; 551  : 
; 552  :   if (ZSEEK64(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  00037	6a 02		 push	 2
  00039	6a 00		 push	 0
  0003b	6a 00		 push	 0
  0003d	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  00040	50		 push	 eax
  00041	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 _call_zseek64
  0004a	83 c4 14	 add	 esp, 20			; 00000014H
  0004d	85 c0		 test	 eax, eax
  0004f	74 09		 je	 SHORT $LN7@zip64local

; 553  :     return 0;

  00051	33 c0		 xor	 eax, eax
  00053	33 d2		 xor	 edx, edx
  00055	e9 3b 03 00 00	 jmp	 $LN1@zip64local
$LN7@zip64local:

; 554  : 
; 555  :   uSizeFile = ZTELL64(*pzlib_filefunc_def,filestream);

  0005a	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  0005d	52		 push	 edx
  0005e	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 _call_ztell64
  00067	83 c4 08	 add	 esp, 8
  0006a	89 45 f4	 mov	 DWORD PTR _uSizeFile$[ebp], eax
  0006d	89 55 f8	 mov	 DWORD PTR _uSizeFile$[ebp+4], edx

; 556  : 
; 557  :   if (uMaxBack>uSizeFile)

  00070	8b 4d e8	 mov	 ecx, DWORD PTR _uMaxBack$[ebp+4]
  00073	3b 4d f8	 cmp	 ecx, DWORD PTR _uSizeFile$[ebp+4]
  00076	72 16		 jb	 SHORT $LN8@zip64local
  00078	77 08		 ja	 SHORT $LN35@zip64local
  0007a	8b 55 e4	 mov	 edx, DWORD PTR _uMaxBack$[ebp]
  0007d	3b 55 f4	 cmp	 edx, DWORD PTR _uSizeFile$[ebp]
  00080	76 0c		 jbe	 SHORT $LN8@zip64local
$LN35@zip64local:

; 558  :     uMaxBack = uSizeFile;

  00082	8b 45 f4	 mov	 eax, DWORD PTR _uSizeFile$[ebp]
  00085	89 45 e4	 mov	 DWORD PTR _uMaxBack$[ebp], eax
  00088	8b 4d f8	 mov	 ecx, DWORD PTR _uSizeFile$[ebp+4]
  0008b	89 4d e8	 mov	 DWORD PTR _uMaxBack$[ebp+4], ecx
$LN8@zip64local:

; 559  : 
; 560  :   buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  0008e	68 04 04 00 00	 push	 1028			; 00000404H
  00093	e8 00 00 00 00	 call	 _malloc
  00098	83 c4 04	 add	 esp, 4
  0009b	89 45 fc	 mov	 DWORD PTR _buf$[ebp], eax

; 561  :   if (buf==NULL)

  0009e	83 7d fc 00	 cmp	 DWORD PTR _buf$[ebp], 0
  000a2	75 09		 jne	 SHORT $LN9@zip64local

; 562  :     return 0;

  000a4	33 c0		 xor	 eax, eax
  000a6	33 d2		 xor	 edx, edx
  000a8	e9 e8 02 00 00	 jmp	 $LN1@zip64local
$LN9@zip64local:

; 563  : 
; 564  :   uBackRead = 4;

  000ad	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR _uBackRead$[ebp], 4
  000b4	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _uBackRead$[ebp+4], 0
$LN2@zip64local:

; 565  :   while (uBackRead<uMaxBack)

  000bb	8b 55 f0	 mov	 edx, DWORD PTR _uBackRead$[ebp+4]
  000be	3b 55 e8	 cmp	 edx, DWORD PTR _uMaxBack$[ebp+4]
  000c1	0f 87 91 01 00
	00		 ja	 $LN3@zip64local
  000c7	72 0c		 jb	 SHORT $LN36@zip64local
  000c9	8b 45 ec	 mov	 eax, DWORD PTR _uBackRead$[ebp]
  000cc	3b 45 e4	 cmp	 eax, DWORD PTR _uMaxBack$[ebp]
  000cf	0f 83 83 01 00
	00		 jae	 $LN3@zip64local
$LN36@zip64local:

; 566  :   {
; 567  :     uLong uReadSize;
; 568  :     ZPOS64_T uReadPos;
; 569  :     int i;
; 570  :     if (uBackRead+BUFREADCOMMENT>uMaxBack)

  000d5	0f ae e8	 lfence
  000d8	8b 4d ec	 mov	 ecx, DWORD PTR _uBackRead$[ebp]
  000db	81 c1 00 04 00
	00		 add	 ecx, 1024		; 00000400H
  000e1	8b 55 f0	 mov	 edx, DWORD PTR _uBackRead$[ebp+4]
  000e4	83 d2 00	 adc	 edx, 0
  000e7	89 4d a8	 mov	 DWORD PTR tv239[ebp], ecx
  000ea	89 55 ac	 mov	 DWORD PTR tv239[ebp+4], edx
  000ed	8b 45 ac	 mov	 eax, DWORD PTR tv239[ebp+4]
  000f0	3b 45 e8	 cmp	 eax, DWORD PTR _uMaxBack$[ebp+4]
  000f3	72 18		 jb	 SHORT $LN10@zip64local
  000f5	77 08		 ja	 SHORT $LN37@zip64local
  000f7	8b 4d a8	 mov	 ecx, DWORD PTR tv239[ebp]
  000fa	3b 4d e4	 cmp	 ecx, DWORD PTR _uMaxBack$[ebp]
  000fd	76 0e		 jbe	 SHORT $LN10@zip64local
$LN37@zip64local:

; 571  :       uBackRead = uMaxBack;

  000ff	8b 55 e4	 mov	 edx, DWORD PTR _uMaxBack$[ebp]
  00102	89 55 ec	 mov	 DWORD PTR _uBackRead$[ebp], edx
  00105	8b 45 e8	 mov	 eax, DWORD PTR _uMaxBack$[ebp+4]
  00108	89 45 f0	 mov	 DWORD PTR _uBackRead$[ebp+4], eax
  0010b	eb 15		 jmp	 SHORT $LN11@zip64local
$LN10@zip64local:

; 572  :     else
; 573  :       uBackRead+=BUFREADCOMMENT;

  0010d	8b 4d ec	 mov	 ecx, DWORD PTR _uBackRead$[ebp]
  00110	81 c1 00 04 00
	00		 add	 ecx, 1024		; 00000400H
  00116	8b 55 f0	 mov	 edx, DWORD PTR _uBackRead$[ebp+4]
  00119	83 d2 00	 adc	 edx, 0
  0011c	89 4d ec	 mov	 DWORD PTR _uBackRead$[ebp], ecx
  0011f	89 55 f0	 mov	 DWORD PTR _uBackRead$[ebp+4], edx
$LN11@zip64local:

; 574  :     uReadPos = uSizeFile-uBackRead ;

  00122	8b 45 f4	 mov	 eax, DWORD PTR _uSizeFile$[ebp]
  00125	2b 45 ec	 sub	 eax, DWORD PTR _uBackRead$[ebp]
  00128	8b 4d f8	 mov	 ecx, DWORD PTR _uSizeFile$[ebp+4]
  0012b	1b 4d f0	 sbb	 ecx, DWORD PTR _uBackRead$[ebp+4]
  0012e	89 45 b4	 mov	 DWORD PTR _uReadPos$2[ebp], eax
  00131	89 4d b8	 mov	 DWORD PTR _uReadPos$2[ebp+4], ecx

; 575  : 
; 576  :     uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?

  00134	8b 55 f4	 mov	 edx, DWORD PTR _uSizeFile$[ebp]
  00137	2b 55 b4	 sub	 edx, DWORD PTR _uReadPos$2[ebp]
  0013a	8b 45 f8	 mov	 eax, DWORD PTR _uSizeFile$[ebp+4]
  0013d	1b 45 b8	 sbb	 eax, DWORD PTR _uReadPos$2[ebp+4]
  00140	89 55 a0	 mov	 DWORD PTR tv263[ebp], edx
  00143	89 45 a4	 mov	 DWORD PTR tv263[ebp+4], eax
  00146	83 7d a4 00	 cmp	 DWORD PTR tv263[ebp+4], 0
  0014a	72 14		 jb	 SHORT $LN29@zip64local
  0014c	77 09		 ja	 SHORT $LN38@zip64local
  0014e	81 7d a0 04 04
	00 00		 cmp	 DWORD PTR tv263[ebp], 1028 ; 00000404H
  00155	76 09		 jbe	 SHORT $LN29@zip64local
$LN38@zip64local:
  00157	c7 45 9c 04 04
	00 00		 mov	 DWORD PTR tv89[ebp], 1028 ; 00000404H
  0015e	eb 09		 jmp	 SHORT $LN30@zip64local
$LN29@zip64local:
  00160	8b 4d f4	 mov	 ecx, DWORD PTR _uSizeFile$[ebp]
  00163	2b 4d b4	 sub	 ecx, DWORD PTR _uReadPos$2[ebp]
  00166	89 4d 9c	 mov	 DWORD PTR tv89[ebp], ecx
$LN30@zip64local:
  00169	8b 55 9c	 mov	 edx, DWORD PTR tv89[ebp]
  0016c	89 55 bc	 mov	 DWORD PTR _uReadSize$3[ebp], edx

; 577  :       (BUFREADCOMMENT+4) : (uLong)(uSizeFile-uReadPos);
; 578  :     if (ZSEEK64(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0016f	6a 00		 push	 0
  00171	8b 45 b8	 mov	 eax, DWORD PTR _uReadPos$2[ebp+4]
  00174	50		 push	 eax
  00175	8b 4d b4	 mov	 ecx, DWORD PTR _uReadPos$2[ebp]
  00178	51		 push	 ecx
  00179	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  0017c	52		 push	 edx
  0017d	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00180	50		 push	 eax
  00181	e8 00 00 00 00	 call	 _call_zseek64
  00186	83 c4 14	 add	 esp, 20			; 00000014H
  00189	85 c0		 test	 eax, eax
  0018b	74 05		 je	 SHORT $LN12@zip64local

; 579  :       break;

  0018d	e9 c6 00 00 00	 jmp	 $LN3@zip64local
$LN12@zip64local:

; 580  : 
; 581  :     if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  00192	0f ae e8	 lfence
  00195	8b f4		 mov	 esi, esp
  00197	8b 4d bc	 mov	 ecx, DWORD PTR _uReadSize$3[ebp]
  0019a	51		 push	 ecx
  0019b	8b 55 fc	 mov	 edx, DWORD PTR _buf$[ebp]
  0019e	52		 push	 edx
  0019f	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  001a2	50		 push	 eax
  001a3	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  001a6	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  001a9	52		 push	 edx
  001aa	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  001ad	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001b0	ff d1		 call	 ecx
  001b2	83 c4 10	 add	 esp, 16			; 00000010H
  001b5	3b f4		 cmp	 esi, esp
  001b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001bc	3b 45 bc	 cmp	 eax, DWORD PTR _uReadSize$3[ebp]
  001bf	74 05		 je	 SHORT $LN13@zip64local

; 582  :       break;

  001c1	e9 92 00 00 00	 jmp	 $LN3@zip64local
$LN13@zip64local:

; 583  : 
; 584  :     for (i=(int)uReadSize-3; (i--)>0;)

  001c6	8b 55 bc	 mov	 edx, DWORD PTR _uReadSize$3[ebp]
  001c9	83 ea 03	 sub	 edx, 3
  001cc	89 55 b0	 mov	 DWORD PTR _i$1[ebp], edx
$LN6@zip64local:
  001cf	8b 45 b0	 mov	 eax, DWORD PTR _i$1[ebp]
  001d2	89 45 98	 mov	 DWORD PTR tv139[ebp], eax
  001d5	8b 4d b0	 mov	 ecx, DWORD PTR _i$1[ebp]
  001d8	83 e9 01	 sub	 ecx, 1
  001db	89 4d b0	 mov	 DWORD PTR _i$1[ebp], ecx
  001de	83 7d 98 00	 cmp	 DWORD PTR tv139[ebp], 0
  001e2	7e 09		 jle	 SHORT $LN31@zip64local
  001e4	c7 45 94 01 00
	00 00		 mov	 DWORD PTR tv140[ebp], 1
  001eb	eb 07		 jmp	 SHORT $LN32@zip64local
$LN31@zip64local:
  001ed	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv140[ebp], 0
$LN32@zip64local:
  001f4	83 7d 94 00	 cmp	 DWORD PTR tv140[ebp], 0
  001f8	74 4f		 je	 SHORT $LN5@zip64local

; 585  :     {
; 586  :       // Signature "0x07064b50" Zip64 end of central directory locater
; 587  :       if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) && ((*(buf+i+2))==0x06) && ((*(buf+i+3))==0x07))

  001fa	8b 55 fc	 mov	 edx, DWORD PTR _buf$[ebp]
  001fd	03 55 b0	 add	 edx, DWORD PTR _i$1[ebp]
  00200	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00203	83 f8 50	 cmp	 eax, 80			; 00000050H
  00206	75 3f		 jne	 SHORT $LN14@zip64local
  00208	8b 4d fc	 mov	 ecx, DWORD PTR _buf$[ebp]
  0020b	03 4d b0	 add	 ecx, DWORD PTR _i$1[ebp]
  0020e	0f b6 51 01	 movzx	 edx, BYTE PTR [ecx+1]
  00212	83 fa 4b	 cmp	 edx, 75			; 0000004bH
  00215	75 30		 jne	 SHORT $LN14@zip64local
  00217	8b 45 fc	 mov	 eax, DWORD PTR _buf$[ebp]
  0021a	03 45 b0	 add	 eax, DWORD PTR _i$1[ebp]
  0021d	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00221	83 f9 06	 cmp	 ecx, 6
  00224	75 21		 jne	 SHORT $LN14@zip64local
  00226	8b 55 fc	 mov	 edx, DWORD PTR _buf$[ebp]
  00229	03 55 b0	 add	 edx, DWORD PTR _i$1[ebp]
  0022c	0f b6 42 03	 movzx	 eax, BYTE PTR [edx+3]
  00230	83 f8 07	 cmp	 eax, 7
  00233	75 12		 jne	 SHORT $LN14@zip64local

; 588  :       {
; 589  :         uPosFound = uReadPos+i;

  00235	8b 45 b0	 mov	 eax, DWORD PTR _i$1[ebp]
  00238	99		 cdq
  00239	03 45 b4	 add	 eax, DWORD PTR _uReadPos$2[ebp]
  0023c	13 55 b8	 adc	 edx, DWORD PTR _uReadPos$2[ebp+4]
  0023f	89 45 dc	 mov	 DWORD PTR _uPosFound$[ebp], eax
  00242	89 55 e0	 mov	 DWORD PTR _uPosFound$[ebp+4], edx

; 590  :         break;

  00245	eb 02		 jmp	 SHORT $LN5@zip64local
$LN14@zip64local:

; 591  :       }
; 592  :     }

  00247	eb 86		 jmp	 SHORT $LN6@zip64local
$LN5@zip64local:

; 593  : 
; 594  :       if (uPosFound!=0)

  00249	8b 4d dc	 mov	 ecx, DWORD PTR _uPosFound$[ebp]
  0024c	0b 4d e0	 or	 ecx, DWORD PTR _uPosFound$[ebp+4]
  0024f	74 02		 je	 SHORT $LN15@zip64local

; 595  :         break;

  00251	eb 05		 jmp	 SHORT $LN3@zip64local
$LN15@zip64local:

; 596  :   }

  00253	e9 63 fe ff ff	 jmp	 $LN2@zip64local
$LN3@zip64local:

; 597  : 
; 598  :   TRYFREE(buf);

  00258	83 7d fc 00	 cmp	 DWORD PTR _buf$[ebp], 0
  0025c	74 0c		 je	 SHORT $LN16@zip64local
  0025e	8b 55 fc	 mov	 edx, DWORD PTR _buf$[ebp]
  00261	52		 push	 edx
  00262	e8 00 00 00 00	 call	 _free
  00267	83 c4 04	 add	 esp, 4
$LN16@zip64local:

; 599  :   if (uPosFound == 0)

  0026a	8b 45 dc	 mov	 eax, DWORD PTR _uPosFound$[ebp]
  0026d	0b 45 e0	 or	 eax, DWORD PTR _uPosFound$[ebp+4]
  00270	75 09		 jne	 SHORT $LN17@zip64local

; 600  :     return 0;

  00272	33 c0		 xor	 eax, eax
  00274	33 d2		 xor	 edx, edx
  00276	e9 1a 01 00 00	 jmp	 $LN1@zip64local
$LN17@zip64local:

; 601  : 
; 602  :   /* Zip64 end of central directory locator */
; 603  :   if (ZSEEK64(*pzlib_filefunc_def,filestream, uPosFound,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0027b	6a 00		 push	 0
  0027d	8b 4d e0	 mov	 ecx, DWORD PTR _uPosFound$[ebp+4]
  00280	51		 push	 ecx
  00281	8b 55 dc	 mov	 edx, DWORD PTR _uPosFound$[ebp]
  00284	52		 push	 edx
  00285	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  00288	50		 push	 eax
  00289	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0028c	51		 push	 ecx
  0028d	e8 00 00 00 00	 call	 _call_zseek64
  00292	83 c4 14	 add	 esp, 20			; 00000014H
  00295	85 c0		 test	 eax, eax
  00297	74 09		 je	 SHORT $LN18@zip64local

; 604  :     return 0;

  00299	33 c0		 xor	 eax, eax
  0029b	33 d2		 xor	 edx, edx
  0029d	e9 f3 00 00 00	 jmp	 $LN1@zip64local
$LN18@zip64local:

; 605  : 
; 606  :   /* the signature, already checked */
; 607  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  002a2	8d 55 d4	 lea	 edx, DWORD PTR _uL$[ebp]
  002a5	52		 push	 edx
  002a6	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  002a9	50		 push	 eax
  002aa	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  002ad	51		 push	 ecx
  002ae	e8 00 00 00 00	 call	 _zip64local_getLong
  002b3	83 c4 0c	 add	 esp, 12			; 0000000cH
  002b6	85 c0		 test	 eax, eax
  002b8	74 09		 je	 SHORT $LN19@zip64local

; 608  :     return 0;

  002ba	33 c0		 xor	 eax, eax
  002bc	33 d2		 xor	 edx, edx
  002be	e9 d2 00 00 00	 jmp	 $LN1@zip64local
$LN19@zip64local:

; 609  : 
; 610  :   /* number of the disk with the start of the zip64 end of  central directory */
; 611  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  002c3	8d 55 d4	 lea	 edx, DWORD PTR _uL$[ebp]
  002c6	52		 push	 edx
  002c7	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  002ca	50		 push	 eax
  002cb	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  002ce	51		 push	 ecx
  002cf	e8 00 00 00 00	 call	 _zip64local_getLong
  002d4	83 c4 0c	 add	 esp, 12			; 0000000cH
  002d7	85 c0		 test	 eax, eax
  002d9	74 09		 je	 SHORT $LN20@zip64local

; 612  :     return 0;

  002db	33 c0		 xor	 eax, eax
  002dd	33 d2		 xor	 edx, edx
  002df	e9 b1 00 00 00	 jmp	 $LN1@zip64local
$LN20@zip64local:

; 613  :   if (uL != 0)

  002e4	83 7d d4 00	 cmp	 DWORD PTR _uL$[ebp], 0
  002e8	74 09		 je	 SHORT $LN21@zip64local

; 614  :     return 0;

  002ea	33 c0		 xor	 eax, eax
  002ec	33 d2		 xor	 edx, edx
  002ee	e9 a2 00 00 00	 jmp	 $LN1@zip64local
$LN21@zip64local:

; 615  : 
; 616  :   /* relative offset of the zip64 end of central directory record */
; 617  :   if (zip64local_getLong64(pzlib_filefunc_def,filestream,&relativeOffset)!=ZIP_OK)

  002f3	8d 55 c4	 lea	 edx, DWORD PTR _relativeOffset$[ebp]
  002f6	52		 push	 edx
  002f7	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  002fa	50		 push	 eax
  002fb	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  002fe	51		 push	 ecx
  002ff	e8 00 00 00 00	 call	 _zip64local_getLong64
  00304	83 c4 0c	 add	 esp, 12			; 0000000cH
  00307	85 c0		 test	 eax, eax
  00309	74 09		 je	 SHORT $LN22@zip64local

; 618  :     return 0;

  0030b	33 c0		 xor	 eax, eax
  0030d	33 d2		 xor	 edx, edx
  0030f	e9 81 00 00 00	 jmp	 $LN1@zip64local
$LN22@zip64local:

; 619  : 
; 620  :   /* total number of disks */
; 621  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  00314	8d 55 d4	 lea	 edx, DWORD PTR _uL$[ebp]
  00317	52		 push	 edx
  00318	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  0031b	50		 push	 eax
  0031c	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0031f	51		 push	 ecx
  00320	e8 00 00 00 00	 call	 _zip64local_getLong
  00325	83 c4 0c	 add	 esp, 12			; 0000000cH
  00328	85 c0		 test	 eax, eax
  0032a	74 06		 je	 SHORT $LN23@zip64local

; 622  :     return 0;

  0032c	33 c0		 xor	 eax, eax
  0032e	33 d2		 xor	 edx, edx
  00330	eb 63		 jmp	 SHORT $LN1@zip64local
$LN23@zip64local:

; 623  :   if (uL != 1)

  00332	83 7d d4 01	 cmp	 DWORD PTR _uL$[ebp], 1
  00336	74 06		 je	 SHORT $LN24@zip64local

; 624  :     return 0;

  00338	33 c0		 xor	 eax, eax
  0033a	33 d2		 xor	 edx, edx
  0033c	eb 57		 jmp	 SHORT $LN1@zip64local
$LN24@zip64local:

; 625  : 
; 626  :   /* Goto Zip64 end of central directory record */
; 627  :   if (ZSEEK64(*pzlib_filefunc_def,filestream, relativeOffset,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0033e	6a 00		 push	 0
  00340	8b 55 c8	 mov	 edx, DWORD PTR _relativeOffset$[ebp+4]
  00343	52		 push	 edx
  00344	8b 45 c4	 mov	 eax, DWORD PTR _relativeOffset$[ebp]
  00347	50		 push	 eax
  00348	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  0034b	51		 push	 ecx
  0034c	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0034f	52		 push	 edx
  00350	e8 00 00 00 00	 call	 _call_zseek64
  00355	83 c4 14	 add	 esp, 20			; 00000014H
  00358	85 c0		 test	 eax, eax
  0035a	74 06		 je	 SHORT $LN25@zip64local

; 628  :     return 0;

  0035c	33 c0		 xor	 eax, eax
  0035e	33 d2		 xor	 edx, edx
  00360	eb 33		 jmp	 SHORT $LN1@zip64local
$LN25@zip64local:

; 629  : 
; 630  :   /* the signature */
; 631  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  00362	8d 45 d4	 lea	 eax, DWORD PTR _uL$[ebp]
  00365	50		 push	 eax
  00366	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00369	51		 push	 ecx
  0036a	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0036d	52		 push	 edx
  0036e	e8 00 00 00 00	 call	 _zip64local_getLong
  00373	83 c4 0c	 add	 esp, 12			; 0000000cH
  00376	85 c0		 test	 eax, eax
  00378	74 06		 je	 SHORT $LN26@zip64local

; 632  :     return 0;

  0037a	33 c0		 xor	 eax, eax
  0037c	33 d2		 xor	 edx, edx
  0037e	eb 15		 jmp	 SHORT $LN1@zip64local
$LN26@zip64local:

; 633  : 
; 634  :   if (uL != 0x06064b50) // signature of 'Zip64 end of central directory'

  00380	81 7d d4 50 4b
	06 06		 cmp	 DWORD PTR _uL$[ebp], 101075792 ; 06064b50H
  00387	74 06		 je	 SHORT $LN27@zip64local

; 635  :     return 0;

  00389	33 c0		 xor	 eax, eax
  0038b	33 d2		 xor	 edx, edx
  0038d	eb 06		 jmp	 SHORT $LN1@zip64local
$LN27@zip64local:

; 636  : 
; 637  :   return relativeOffset;

  0038f	8b 45 c4	 mov	 eax, DWORD PTR _relativeOffset$[ebp]
  00392	8b 55 c8	 mov	 edx, DWORD PTR _relativeOffset$[ebp+4]
$LN1@zip64local:

; 638  : }

  00395	52		 push	 edx
  00396	8b cd		 mov	 ecx, ebp
  00398	50		 push	 eax
  00399	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN42@zip64local
  0039f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  003a4	58		 pop	 eax
  003a5	5a		 pop	 edx
  003a6	5f		 pop	 edi
  003a7	5e		 pop	 esi
  003a8	83 c4 6c	 add	 esp, 108		; 0000006cH
  003ab	3b ec		 cmp	 ebp, esp
  003ad	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003b2	8b e5		 mov	 esp, ebp
  003b4	5d		 pop	 ebp
  003b5	c3		 ret	 0
  003b6	66 90		 npad	 2
$LN42@zip64local:
  003b8	02 00 00 00	 DD	 2
  003bc	00 00 00 00	 DD	 $LN41@zip64local
$LN41@zip64local:
  003c0	d4 ff ff ff	 DD	 -44			; ffffffd4H
  003c4	04 00 00 00	 DD	 4
  003c8	00 00 00 00	 DD	 $LN39@zip64local
  003cc	c4 ff ff ff	 DD	 -60			; ffffffc4H
  003d0	08 00 00 00	 DD	 8
  003d4	00 00 00 00	 DD	 $LN40@zip64local
$LN40@zip64local:
  003d8	72		 DB	 114			; 00000072H
  003d9	65		 DB	 101			; 00000065H
  003da	6c		 DB	 108			; 0000006cH
  003db	61		 DB	 97			; 00000061H
  003dc	74		 DB	 116			; 00000074H
  003dd	69		 DB	 105			; 00000069H
  003de	76		 DB	 118			; 00000076H
  003df	65		 DB	 101			; 00000065H
  003e0	4f		 DB	 79			; 0000004fH
  003e1	66		 DB	 102			; 00000066H
  003e2	66		 DB	 102			; 00000066H
  003e3	73		 DB	 115			; 00000073H
  003e4	65		 DB	 101			; 00000065H
  003e5	74		 DB	 116			; 00000074H
  003e6	00		 DB	 0
$LN39@zip64local:
  003e7	75		 DB	 117			; 00000075H
  003e8	4c		 DB	 76			; 0000004cH
  003e9	00		 DB	 0
_zip64local_SearchCentralDir64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _LoadCentralDirectoryRecord
_TEXT	SEGMENT
tv588 = -216						; size = 8
tv475 = -208						; size = 8
_read_this$1 = -200					; size = 8
_buf_read$2 = -192					; size = 4
_buf_size$3 = -188					; size = 4
_size_central_dir_to_read$4 = -184			; size = 8
_sizeEndOfCentralDirectory$5 = -172			; size = 8
_hasZIP64Record$ = -160					; size = 4
_size_comment$ = -152					; size = 4
_VersionNeeded$ = -140					; size = 4
_VersionMadeBy$ = -128					; size = 4
_number_entry_CD$ = -116				; size = 8
_number_entry$ = -100					; size = 8
_number_disk_with_CD$ = -84				; size = 4
_number_disk$ = -72					; size = 4
_uL$ = -60						; size = 4
_central_pos$ = -52					; size = 8
_offset_central_dir$ = -40				; size = 8
_size_central_dir$ = -24				; size = 8
_byte_before_the_zipfile$ = -12				; size = 8
_err$ = -4						; size = 4
_pziinit$ = 8						; size = 4
_LoadCentralDirectoryRecord PROC			; COMDAT

; 641  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00011	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00022	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 642  :   int err=ZIP_OK;

  00027	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 643  :   ZPOS64_T byte_before_the_zipfile;/* byte before the zipfile, (>0 for sfx)*/
; 644  : 
; 645  :   ZPOS64_T size_central_dir;     /* size of the central directory  */
; 646  :   ZPOS64_T offset_central_dir;   /* offset of start of central directory */
; 647  :   ZPOS64_T central_pos;
; 648  :   uLong uL;
; 649  : 
; 650  :   uLong number_disk;          /* number of the current dist, used for
; 651  :                               spaning ZIP, unsupported, always 0*/
; 652  :   uLong number_disk_with_CD;  /* number the the disk with central dir, used
; 653  :                               for spaning ZIP, unsupported, always 0*/
; 654  :   ZPOS64_T number_entry;
; 655  :   ZPOS64_T number_entry_CD;      /* total number of entries in
; 656  :                                 the central dir
; 657  :                                 (same than number_entry on nospan) */
; 658  :   uLong VersionMadeBy;
; 659  :   uLong VersionNeeded;
; 660  :   uLong size_comment;
; 661  : 
; 662  :   int hasZIP64Record = 0;

  0002e	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _hasZIP64Record$[ebp], 0

; 663  : 
; 664  :   // check first if we find a ZIP64 record
; 665  :   central_pos = zip64local_SearchCentralDir64(&pziinit->z_filefunc,pziinit->filestream);

  00038	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  0003b	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0003e	51		 push	 ecx
  0003f	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  00042	52		 push	 edx
  00043	e8 00 00 00 00	 call	 _zip64local_SearchCentralDir64
  00048	83 c4 08	 add	 esp, 8
  0004b	89 45 cc	 mov	 DWORD PTR _central_pos$[ebp], eax
  0004e	89 55 d0	 mov	 DWORD PTR _central_pos$[ebp+4], edx

; 666  :   if(central_pos > 0)

  00051	83 7d d0 00	 cmp	 DWORD PTR _central_pos$[ebp+4], 0
  00055	77 06		 ja	 SHORT $LN50@LoadCentra
  00057	83 7d cc 00	 cmp	 DWORD PTR _central_pos$[ebp], 0
  0005b	76 0c		 jbe	 SHORT $LN4@LoadCentra
$LN50@LoadCentra:

; 667  :   {
; 668  :     hasZIP64Record = 1;

  0005d	c7 85 60 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _hasZIP64Record$[ebp], 1

; 669  :   }

  00067	eb 24		 jmp	 SHORT $LN5@LoadCentra
$LN4@LoadCentra:

; 670  :   else if(central_pos == 0)

  00069	8b 45 cc	 mov	 eax, DWORD PTR _central_pos$[ebp]
  0006c	0b 45 d0	 or	 eax, DWORD PTR _central_pos$[ebp+4]
  0006f	75 1c		 jne	 SHORT $LN5@LoadCentra

; 671  :   {
; 672  :     central_pos = zip64local_SearchCentralDir(&pziinit->z_filefunc,pziinit->filestream);

  00071	0f ae e8	 lfence
  00074	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  00077	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0007a	52		 push	 edx
  0007b	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 _zip64local_SearchCentralDir
  00084	83 c4 08	 add	 esp, 8
  00087	89 45 cc	 mov	 DWORD PTR _central_pos$[ebp], eax
  0008a	89 55 d0	 mov	 DWORD PTR _central_pos$[ebp+4], edx
$LN5@LoadCentra:

; 673  :   }
; 674  : 
; 675  : /* disable to allow appending to empty ZIP archive
; 676  :         if (central_pos==0)
; 677  :             err=ZIP_ERRNO;
; 678  : */
; 679  : 
; 680  :   if(hasZIP64Record)

  0008d	83 bd 60 ff ff
	ff 00		 cmp	 DWORD PTR _hasZIP64Record$[ebp], 0
  00094	0f 84 b4 01 00
	00		 je	 $LN7@LoadCentra

; 681  :   {
; 682  :     ZPOS64_T sizeEndOfCentralDirectory;
; 683  :     if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, central_pos, ZLIB_FILEFUNC_SEEK_SET) != 0)

  0009a	6a 00		 push	 0
  0009c	8b 4d d0	 mov	 ecx, DWORD PTR _central_pos$[ebp+4]
  0009f	51		 push	 ecx
  000a0	8b 55 cc	 mov	 edx, DWORD PTR _central_pos$[ebp]
  000a3	52		 push	 edx
  000a4	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  000a7	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  000aa	51		 push	 ecx
  000ab	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  000ae	52		 push	 edx
  000af	e8 00 00 00 00	 call	 _call_zseek64
  000b4	83 c4 14	 add	 esp, 20			; 00000014H
  000b7	85 c0		 test	 eax, eax
  000b9	74 07		 je	 SHORT $LN9@LoadCentra

; 684  :       err=ZIP_ERRNO;

  000bb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN9@LoadCentra:

; 685  : 
; 686  :     /* the signature, already checked */
; 687  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&uL)!=ZIP_OK)

  000c2	8d 45 c4	 lea	 eax, DWORD PTR _uL$[ebp]
  000c5	50		 push	 eax
  000c6	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  000c9	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  000cc	52		 push	 edx
  000cd	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 _zip64local_getLong
  000d6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d9	85 c0		 test	 eax, eax
  000db	74 07		 je	 SHORT $LN10@LoadCentra

; 688  :       err=ZIP_ERRNO;

  000dd	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN10@LoadCentra:

; 689  : 
; 690  :     /* size of zip64 end of central directory record */
; 691  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream, &sizeEndOfCentralDirectory)!=ZIP_OK)

  000e4	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _sizeEndOfCentralDirectory$5[ebp]
  000ea	51		 push	 ecx
  000eb	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  000ee	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  000f1	50		 push	 eax
  000f2	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  000f5	51		 push	 ecx
  000f6	e8 00 00 00 00	 call	 _zip64local_getLong64
  000fb	83 c4 0c	 add	 esp, 12			; 0000000cH
  000fe	85 c0		 test	 eax, eax
  00100	74 07		 je	 SHORT $LN11@LoadCentra

; 692  :       err=ZIP_ERRNO;

  00102	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN11@LoadCentra:

; 693  : 
; 694  :     /* version made by */
; 695  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &VersionMadeBy)!=ZIP_OK)

  00109	8d 55 80	 lea	 edx, DWORD PTR _VersionMadeBy$[ebp]
  0010c	52		 push	 edx
  0010d	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  00110	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00113	51		 push	 ecx
  00114	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  00117	52		 push	 edx
  00118	e8 00 00 00 00	 call	 _zip64local_getShort
  0011d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00120	85 c0		 test	 eax, eax
  00122	74 07		 je	 SHORT $LN12@LoadCentra

; 696  :       err=ZIP_ERRNO;

  00124	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN12@LoadCentra:

; 697  : 
; 698  :     /* version needed to extract */
; 699  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &VersionNeeded)!=ZIP_OK)

  0012b	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _VersionNeeded$[ebp]
  00131	50		 push	 eax
  00132	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  00135	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00138	52		 push	 edx
  00139	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  0013c	50		 push	 eax
  0013d	e8 00 00 00 00	 call	 _zip64local_getShort
  00142	83 c4 0c	 add	 esp, 12			; 0000000cH
  00145	85 c0		 test	 eax, eax
  00147	74 07		 je	 SHORT $LN13@LoadCentra

; 700  :       err=ZIP_ERRNO;

  00149	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN13@LoadCentra:

; 701  : 
; 702  :     /* number of this disk */
; 703  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&number_disk)!=ZIP_OK)

  00150	8d 4d b8	 lea	 ecx, DWORD PTR _number_disk$[ebp]
  00153	51		 push	 ecx
  00154	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  00157	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0015a	50		 push	 eax
  0015b	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  0015e	51		 push	 ecx
  0015f	e8 00 00 00 00	 call	 _zip64local_getLong
  00164	83 c4 0c	 add	 esp, 12			; 0000000cH
  00167	85 c0		 test	 eax, eax
  00169	74 07		 je	 SHORT $LN14@LoadCentra

; 704  :       err=ZIP_ERRNO;

  0016b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN14@LoadCentra:

; 705  : 
; 706  :     /* number of the disk with the start of the central directory */
; 707  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&number_disk_with_CD)!=ZIP_OK)

  00172	8d 55 ac	 lea	 edx, DWORD PTR _number_disk_with_CD$[ebp]
  00175	52		 push	 edx
  00176	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  00179	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0017c	51		 push	 ecx
  0017d	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  00180	52		 push	 edx
  00181	e8 00 00 00 00	 call	 _zip64local_getLong
  00186	83 c4 0c	 add	 esp, 12			; 0000000cH
  00189	85 c0		 test	 eax, eax
  0018b	74 07		 je	 SHORT $LN15@LoadCentra

; 708  :       err=ZIP_ERRNO;

  0018d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN15@LoadCentra:

; 709  : 
; 710  :     /* total number of entries in the central directory on this disk */
; 711  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream, &number_entry)!=ZIP_OK)

  00194	8d 45 9c	 lea	 eax, DWORD PTR _number_entry$[ebp]
  00197	50		 push	 eax
  00198	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  0019b	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0019e	52		 push	 edx
  0019f	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  001a2	50		 push	 eax
  001a3	e8 00 00 00 00	 call	 _zip64local_getLong64
  001a8	83 c4 0c	 add	 esp, 12			; 0000000cH
  001ab	85 c0		 test	 eax, eax
  001ad	74 07		 je	 SHORT $LN16@LoadCentra

; 712  :       err=ZIP_ERRNO;

  001af	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN16@LoadCentra:

; 713  : 
; 714  :     /* total number of entries in the central directory */
; 715  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream,&number_entry_CD)!=ZIP_OK)

  001b6	8d 4d 8c	 lea	 ecx, DWORD PTR _number_entry_CD$[ebp]
  001b9	51		 push	 ecx
  001ba	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  001bd	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  001c0	50		 push	 eax
  001c1	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  001c4	51		 push	 ecx
  001c5	e8 00 00 00 00	 call	 _zip64local_getLong64
  001ca	83 c4 0c	 add	 esp, 12			; 0000000cH
  001cd	85 c0		 test	 eax, eax
  001cf	74 07		 je	 SHORT $LN17@LoadCentra

; 716  :       err=ZIP_ERRNO;

  001d1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN17@LoadCentra:

; 717  : 
; 718  :     if ((number_entry_CD!=number_entry) || (number_disk_with_CD!=0) || (number_disk!=0))

  001d8	8b 55 8c	 mov	 edx, DWORD PTR _number_entry_CD$[ebp]
  001db	3b 55 9c	 cmp	 edx, DWORD PTR _number_entry$[ebp]
  001de	75 14		 jne	 SHORT $LN19@LoadCentra
  001e0	8b 45 90	 mov	 eax, DWORD PTR _number_entry_CD$[ebp+4]
  001e3	3b 45 a0	 cmp	 eax, DWORD PTR _number_entry$[ebp+4]
  001e6	75 0c		 jne	 SHORT $LN19@LoadCentra
  001e8	83 7d ac 00	 cmp	 DWORD PTR _number_disk_with_CD$[ebp], 0
  001ec	75 06		 jne	 SHORT $LN19@LoadCentra
  001ee	83 7d b8 00	 cmp	 DWORD PTR _number_disk$[ebp], 0
  001f2	74 07		 je	 SHORT $LN18@LoadCentra
$LN19@LoadCentra:

; 719  :       err=ZIP_BADZIPFILE;

  001f4	c7 45 fc 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN18@LoadCentra:

; 720  : 
; 721  :     /* size of the central directory */
; 722  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream,&size_central_dir)!=ZIP_OK)

  001fb	8d 4d e8	 lea	 ecx, DWORD PTR _size_central_dir$[ebp]
  001fe	51		 push	 ecx
  001ff	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  00202	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00205	50		 push	 eax
  00206	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  00209	51		 push	 ecx
  0020a	e8 00 00 00 00	 call	 _zip64local_getLong64
  0020f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00212	85 c0		 test	 eax, eax
  00214	74 07		 je	 SHORT $LN20@LoadCentra

; 723  :       err=ZIP_ERRNO;

  00216	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN20@LoadCentra:

; 724  : 
; 725  :     /* offset of start of central directory with respect to the
; 726  :     starting disk number */
; 727  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream,&offset_central_dir)!=ZIP_OK)

  0021d	8d 55 d8	 lea	 edx, DWORD PTR _offset_central_dir$[ebp]
  00220	52		 push	 edx
  00221	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  00224	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00227	51		 push	 ecx
  00228	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  0022b	52		 push	 edx
  0022c	e8 00 00 00 00	 call	 _zip64local_getLong64
  00231	83 c4 0c	 add	 esp, 12			; 0000000cH
  00234	85 c0		 test	 eax, eax
  00236	74 07		 je	 SHORT $LN21@LoadCentra

; 728  :       err=ZIP_ERRNO;

  00238	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN21@LoadCentra:

; 729  : 
; 730  :     // TODO..
; 731  :     // read the comment from the standard central header.
; 732  :     size_comment = 0;

  0023f	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _size_comment$[ebp], 0

; 733  :   }

  00249	e9 b2 01 00 00	 jmp	 $LN8@LoadCentra
$LN7@LoadCentra:

; 734  :   else
; 735  :   {
; 736  :     // Read End of central Directory info
; 737  :     if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, central_pos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0024e	6a 00		 push	 0
  00250	8b 45 d0	 mov	 eax, DWORD PTR _central_pos$[ebp+4]
  00253	50		 push	 eax
  00254	8b 4d cc	 mov	 ecx, DWORD PTR _central_pos$[ebp]
  00257	51		 push	 ecx
  00258	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  0025b	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0025e	50		 push	 eax
  0025f	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  00262	51		 push	 ecx
  00263	e8 00 00 00 00	 call	 _call_zseek64
  00268	83 c4 14	 add	 esp, 20			; 00000014H
  0026b	85 c0		 test	 eax, eax
  0026d	74 07		 je	 SHORT $LN22@LoadCentra

; 738  :       err=ZIP_ERRNO;

  0026f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN22@LoadCentra:

; 739  : 
; 740  :     /* the signature, already checked */
; 741  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&uL)!=ZIP_OK)

  00276	8d 55 c4	 lea	 edx, DWORD PTR _uL$[ebp]
  00279	52		 push	 edx
  0027a	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  0027d	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00280	51		 push	 ecx
  00281	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  00284	52		 push	 edx
  00285	e8 00 00 00 00	 call	 _zip64local_getLong
  0028a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0028d	85 c0		 test	 eax, eax
  0028f	74 07		 je	 SHORT $LN23@LoadCentra

; 742  :       err=ZIP_ERRNO;

  00291	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN23@LoadCentra:

; 743  : 
; 744  :     /* number of this disk */
; 745  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream,&number_disk)!=ZIP_OK)

  00298	8d 45 b8	 lea	 eax, DWORD PTR _number_disk$[ebp]
  0029b	50		 push	 eax
  0029c	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  0029f	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  002a2	52		 push	 edx
  002a3	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  002a6	50		 push	 eax
  002a7	e8 00 00 00 00	 call	 _zip64local_getShort
  002ac	83 c4 0c	 add	 esp, 12			; 0000000cH
  002af	85 c0		 test	 eax, eax
  002b1	74 07		 je	 SHORT $LN24@LoadCentra

; 746  :       err=ZIP_ERRNO;

  002b3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN24@LoadCentra:

; 747  : 
; 748  :     /* number of the disk with the start of the central directory */
; 749  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream,&number_disk_with_CD)!=ZIP_OK)

  002ba	8d 4d ac	 lea	 ecx, DWORD PTR _number_disk_with_CD$[ebp]
  002bd	51		 push	 ecx
  002be	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  002c1	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  002c4	50		 push	 eax
  002c5	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  002c8	51		 push	 ecx
  002c9	e8 00 00 00 00	 call	 _zip64local_getShort
  002ce	83 c4 0c	 add	 esp, 12			; 0000000cH
  002d1	85 c0		 test	 eax, eax
  002d3	74 07		 je	 SHORT $LN25@LoadCentra

; 750  :       err=ZIP_ERRNO;

  002d5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN25@LoadCentra:

; 751  : 
; 752  :     /* total number of entries in the central dir on this disk */
; 753  :     number_entry = 0;

  002dc	0f 57 c0	 xorps	 xmm0, xmm0
  002df	66 0f 13 45 9c	 movlpd	 QWORD PTR _number_entry$[ebp], xmm0

; 754  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  002e4	8d 55 c4	 lea	 edx, DWORD PTR _uL$[ebp]
  002e7	52		 push	 edx
  002e8	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  002eb	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  002ee	51		 push	 ecx
  002ef	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  002f2	52		 push	 edx
  002f3	e8 00 00 00 00	 call	 _zip64local_getShort
  002f8	83 c4 0c	 add	 esp, 12			; 0000000cH
  002fb	85 c0		 test	 eax, eax
  002fd	74 09		 je	 SHORT $LN26@LoadCentra

; 755  :       err=ZIP_ERRNO;

  002ff	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
  00306	eb 0b		 jmp	 SHORT $LN27@LoadCentra
$LN26@LoadCentra:

; 756  :     else
; 757  :       number_entry = uL;

  00308	8b 45 c4	 mov	 eax, DWORD PTR _uL$[ebp]
  0030b	33 c9		 xor	 ecx, ecx
  0030d	89 45 9c	 mov	 DWORD PTR _number_entry$[ebp], eax
  00310	89 4d a0	 mov	 DWORD PTR _number_entry$[ebp+4], ecx
$LN27@LoadCentra:

; 758  : 
; 759  :     /* total number of entries in the central dir */
; 760  :     number_entry_CD = 0;

  00313	0f 57 c0	 xorps	 xmm0, xmm0
  00316	66 0f 13 45 8c	 movlpd	 QWORD PTR _number_entry_CD$[ebp], xmm0

; 761  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  0031b	8d 55 c4	 lea	 edx, DWORD PTR _uL$[ebp]
  0031e	52		 push	 edx
  0031f	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  00322	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00325	51		 push	 ecx
  00326	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  00329	52		 push	 edx
  0032a	e8 00 00 00 00	 call	 _zip64local_getShort
  0032f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00332	85 c0		 test	 eax, eax
  00334	74 09		 je	 SHORT $LN28@LoadCentra

; 762  :       err=ZIP_ERRNO;

  00336	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
  0033d	eb 0b		 jmp	 SHORT $LN29@LoadCentra
$LN28@LoadCentra:

; 763  :     else
; 764  :       number_entry_CD = uL;

  0033f	8b 45 c4	 mov	 eax, DWORD PTR _uL$[ebp]
  00342	33 c9		 xor	 ecx, ecx
  00344	89 45 8c	 mov	 DWORD PTR _number_entry_CD$[ebp], eax
  00347	89 4d 90	 mov	 DWORD PTR _number_entry_CD$[ebp+4], ecx
$LN29@LoadCentra:

; 765  : 
; 766  :     if ((number_entry_CD!=number_entry) || (number_disk_with_CD!=0) || (number_disk!=0))

  0034a	8b 55 8c	 mov	 edx, DWORD PTR _number_entry_CD$[ebp]
  0034d	3b 55 9c	 cmp	 edx, DWORD PTR _number_entry$[ebp]
  00350	75 14		 jne	 SHORT $LN31@LoadCentra
  00352	8b 45 90	 mov	 eax, DWORD PTR _number_entry_CD$[ebp+4]
  00355	3b 45 a0	 cmp	 eax, DWORD PTR _number_entry$[ebp+4]
  00358	75 0c		 jne	 SHORT $LN31@LoadCentra
  0035a	83 7d ac 00	 cmp	 DWORD PTR _number_disk_with_CD$[ebp], 0
  0035e	75 06		 jne	 SHORT $LN31@LoadCentra
  00360	83 7d b8 00	 cmp	 DWORD PTR _number_disk$[ebp], 0
  00364	74 07		 je	 SHORT $LN30@LoadCentra
$LN31@LoadCentra:

; 767  :       err=ZIP_BADZIPFILE;

  00366	c7 45 fc 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN30@LoadCentra:

; 768  : 
; 769  :     /* size of the central directory */
; 770  :     size_central_dir = 0;

  0036d	0f 57 c0	 xorps	 xmm0, xmm0
  00370	66 0f 13 45 e8	 movlpd	 QWORD PTR _size_central_dir$[ebp], xmm0

; 771  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  00375	8d 4d c4	 lea	 ecx, DWORD PTR _uL$[ebp]
  00378	51		 push	 ecx
  00379	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  0037c	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0037f	50		 push	 eax
  00380	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  00383	51		 push	 ecx
  00384	e8 00 00 00 00	 call	 _zip64local_getLong
  00389	83 c4 0c	 add	 esp, 12			; 0000000cH
  0038c	85 c0		 test	 eax, eax
  0038e	74 09		 je	 SHORT $LN32@LoadCentra

; 772  :       err=ZIP_ERRNO;

  00390	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
  00397	eb 0b		 jmp	 SHORT $LN33@LoadCentra
$LN32@LoadCentra:

; 773  :     else
; 774  :       size_central_dir = uL;

  00399	8b 55 c4	 mov	 edx, DWORD PTR _uL$[ebp]
  0039c	33 c0		 xor	 eax, eax
  0039e	89 55 e8	 mov	 DWORD PTR _size_central_dir$[ebp], edx
  003a1	89 45 ec	 mov	 DWORD PTR _size_central_dir$[ebp+4], eax
$LN33@LoadCentra:

; 775  : 
; 776  :     /* offset of start of central directory with respect to the starting disk number */
; 777  :     offset_central_dir = 0;

  003a4	0f 57 c0	 xorps	 xmm0, xmm0
  003a7	66 0f 13 45 d8	 movlpd	 QWORD PTR _offset_central_dir$[ebp], xmm0

; 778  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  003ac	8d 4d c4	 lea	 ecx, DWORD PTR _uL$[ebp]
  003af	51		 push	 ecx
  003b0	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  003b3	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  003b6	50		 push	 eax
  003b7	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  003ba	51		 push	 ecx
  003bb	e8 00 00 00 00	 call	 _zip64local_getLong
  003c0	83 c4 0c	 add	 esp, 12			; 0000000cH
  003c3	85 c0		 test	 eax, eax
  003c5	74 09		 je	 SHORT $LN34@LoadCentra

; 779  :       err=ZIP_ERRNO;

  003c7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
  003ce	eb 0b		 jmp	 SHORT $LN35@LoadCentra
$LN34@LoadCentra:

; 780  :     else
; 781  :       offset_central_dir = uL;

  003d0	8b 55 c4	 mov	 edx, DWORD PTR _uL$[ebp]
  003d3	33 c0		 xor	 eax, eax
  003d5	89 55 d8	 mov	 DWORD PTR _offset_central_dir$[ebp], edx
  003d8	89 45 dc	 mov	 DWORD PTR _offset_central_dir$[ebp+4], eax
$LN35@LoadCentra:

; 782  : 
; 783  : 
; 784  :     /* zipfile global comment length */
; 785  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &size_comment)!=ZIP_OK)

  003db	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _size_comment$[ebp]
  003e1	51		 push	 ecx
  003e2	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  003e5	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  003e8	50		 push	 eax
  003e9	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  003ec	51		 push	 ecx
  003ed	e8 00 00 00 00	 call	 _zip64local_getShort
  003f2	83 c4 0c	 add	 esp, 12			; 0000000cH
  003f5	85 c0		 test	 eax, eax
  003f7	74 07		 je	 SHORT $LN8@LoadCentra

; 786  :       err=ZIP_ERRNO;

  003f9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN8@LoadCentra:

; 787  :   }
; 788  : 
; 789  :   if ((central_pos<offset_central_dir+size_central_dir) &&

  00400	8b 55 d8	 mov	 edx, DWORD PTR _offset_central_dir$[ebp]
  00403	03 55 e8	 add	 edx, DWORD PTR _size_central_dir$[ebp]
  00406	8b 45 dc	 mov	 eax, DWORD PTR _offset_central_dir$[ebp+4]
  00409	13 45 ec	 adc	 eax, DWORD PTR _size_central_dir$[ebp+4]
  0040c	89 95 30 ff ff
	ff		 mov	 DWORD PTR tv475[ebp], edx
  00412	89 85 34 ff ff
	ff		 mov	 DWORD PTR tv475[ebp+4], eax
  00418	8b 4d d0	 mov	 ecx, DWORD PTR _central_pos$[ebp+4]
  0041b	3b 8d 34 ff ff
	ff		 cmp	 ecx, DWORD PTR tv475[ebp+4]
  00421	77 1a		 ja	 SHORT $LN37@LoadCentra
  00423	72 0b		 jb	 SHORT $LN51@LoadCentra
  00425	8b 55 cc	 mov	 edx, DWORD PTR _central_pos$[ebp]
  00428	3b 95 30 ff ff
	ff		 cmp	 edx, DWORD PTR tv475[ebp]
  0042e	73 0d		 jae	 SHORT $LN37@LoadCentra
$LN51@LoadCentra:
  00430	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  00434	75 07		 jne	 SHORT $LN37@LoadCentra

; 790  :     (err==ZIP_OK))
; 791  :     err=ZIP_BADZIPFILE;

  00436	c7 45 fc 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN37@LoadCentra:

; 792  : 
; 793  :   if (err!=ZIP_OK)

  0043d	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  00441	74 2a		 je	 SHORT $LN38@LoadCentra

; 794  :   {
; 795  :     ZCLOSE64(pziinit->z_filefunc, pziinit->filestream);

  00443	8b f4		 mov	 esi, esp
  00445	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  00448	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0044b	51		 push	 ecx
  0044c	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  0044f	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00452	50		 push	 eax
  00453	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  00456	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00459	ff d2		 call	 edx
  0045b	83 c4 08	 add	 esp, 8
  0045e	3b f4		 cmp	 esi, esp
  00460	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 796  :     return ZIP_ERRNO;

  00465	83 c8 ff	 or	 eax, -1
  00468	e9 9f 02 00 00	 jmp	 $LN1@LoadCentra
$LN38@LoadCentra:

; 797  :   }
; 798  : 
; 799  :   if (size_comment>0)

  0046d	83 bd 68 ff ff
	ff 00		 cmp	 DWORD PTR _size_comment$[ebp], 0
  00474	76 73		 jbe	 SHORT $LN39@LoadCentra

; 800  :   {
; 801  :     pziinit->globalcomment = (char*)ALLOC(size_comment+1);

  00476	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _size_comment$[ebp]
  0047c	83 c0 01	 add	 eax, 1
  0047f	50		 push	 eax
  00480	e8 00 00 00 00	 call	 _malloc
  00485	83 c4 04	 add	 esp, 4
  00488	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  0048b	89 81 00 01 01
	00		 mov	 DWORD PTR [ecx+65792], eax

; 802  :     if (pziinit->globalcomment)

  00491	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  00494	83 ba 00 01 01
	00 00		 cmp	 DWORD PTR [edx+65792], 0
  0049b	74 4c		 je	 SHORT $LN39@LoadCentra

; 803  :     {
; 804  :       size_comment = ZREAD64(pziinit->z_filefunc, pziinit->filestream, pziinit->globalcomment,size_comment);

  0049d	8b f4		 mov	 esi, esp
  0049f	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _size_comment$[ebp]
  004a5	50		 push	 eax
  004a6	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  004a9	8b 91 00 01 01
	00		 mov	 edx, DWORD PTR [ecx+65792]
  004af	52		 push	 edx
  004b0	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  004b3	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  004b6	51		 push	 ecx
  004b7	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  004ba	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  004bd	50		 push	 eax
  004be	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  004c1	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  004c4	ff d2		 call	 edx
  004c6	83 c4 10	 add	 esp, 16			; 00000010H
  004c9	3b f4		 cmp	 esi, esp
  004cb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004d0	89 85 68 ff ff
	ff		 mov	 DWORD PTR _size_comment$[ebp], eax

; 805  :       pziinit->globalcomment[size_comment]=0;

  004d6	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  004d9	8b 88 00 01 01
	00		 mov	 ecx, DWORD PTR [eax+65792]
  004df	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _size_comment$[ebp]
  004e5	c6 04 11 00	 mov	 BYTE PTR [ecx+edx], 0
$LN39@LoadCentra:

; 806  :     }
; 807  :   }
; 808  : 
; 809  :   byte_before_the_zipfile = central_pos - (offset_central_dir+size_central_dir);

  004e9	8b 45 d8	 mov	 eax, DWORD PTR _offset_central_dir$[ebp]
  004ec	03 45 e8	 add	 eax, DWORD PTR _size_central_dir$[ebp]
  004ef	8b 4d dc	 mov	 ecx, DWORD PTR _offset_central_dir$[ebp+4]
  004f2	13 4d ec	 adc	 ecx, DWORD PTR _size_central_dir$[ebp+4]
  004f5	8b 55 cc	 mov	 edx, DWORD PTR _central_pos$[ebp]
  004f8	2b d0		 sub	 edx, eax
  004fa	8b 45 d0	 mov	 eax, DWORD PTR _central_pos$[ebp+4]
  004fd	1b c1		 sbb	 eax, ecx
  004ff	89 55 f4	 mov	 DWORD PTR _byte_before_the_zipfile$[ebp], edx
  00502	89 45 f8	 mov	 DWORD PTR _byte_before_the_zipfile$[ebp+4], eax

; 810  :   pziinit->add_position_when_writing_offset = byte_before_the_zipfile;

  00505	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  00508	8b 55 f4	 mov	 edx, DWORD PTR _byte_before_the_zipfile$[ebp]
  0050b	89 91 f0 00 01
	00		 mov	 DWORD PTR [ecx+65776], edx
  00511	8b 45 f8	 mov	 eax, DWORD PTR _byte_before_the_zipfile$[ebp+4]
  00514	89 81 f4 00 01
	00		 mov	 DWORD PTR [ecx+65780], eax

; 811  : 
; 812  :   {
; 813  :     ZPOS64_T size_central_dir_to_read = size_central_dir;

  0051a	8b 4d e8	 mov	 ecx, DWORD PTR _size_central_dir$[ebp]
  0051d	89 8d 48 ff ff
	ff		 mov	 DWORD PTR _size_central_dir_to_read$4[ebp], ecx
  00523	8b 55 ec	 mov	 edx, DWORD PTR _size_central_dir$[ebp+4]
  00526	89 95 4c ff ff
	ff		 mov	 DWORD PTR _size_central_dir_to_read$4[ebp+4], edx

; 814  :     size_t buf_size = SIZEDATA_INDATABLOCK;

  0052c	c7 85 44 ff ff
	ff f0 0f 00 00	 mov	 DWORD PTR _buf_size$3[ebp], 4080 ; 00000ff0H

; 815  :     void* buf_read = (void*)ALLOC(buf_size);

  00536	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _buf_size$3[ebp]
  0053c	50		 push	 eax
  0053d	e8 00 00 00 00	 call	 _malloc
  00542	83 c4 04	 add	 esp, 4
  00545	89 85 40 ff ff
	ff		 mov	 DWORD PTR _buf_read$2[ebp], eax

; 816  :     if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, offset_central_dir + byte_before_the_zipfile, ZLIB_FILEFUNC_SEEK_SET) != 0)

  0054b	6a 00		 push	 0
  0054d	8b 4d d8	 mov	 ecx, DWORD PTR _offset_central_dir$[ebp]
  00550	03 4d f4	 add	 ecx, DWORD PTR _byte_before_the_zipfile$[ebp]
  00553	8b 55 dc	 mov	 edx, DWORD PTR _offset_central_dir$[ebp+4]
  00556	13 55 f8	 adc	 edx, DWORD PTR _byte_before_the_zipfile$[ebp+4]
  00559	52		 push	 edx
  0055a	51		 push	 ecx
  0055b	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  0055e	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00561	51		 push	 ecx
  00562	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  00565	52		 push	 edx
  00566	e8 00 00 00 00	 call	 _call_zseek64
  0056b	83 c4 14	 add	 esp, 20			; 00000014H
  0056e	85 c0		 test	 eax, eax
  00570	74 07		 je	 SHORT $LN2@LoadCentra

; 817  :       err=ZIP_ERRNO;

  00572	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN2@LoadCentra:

; 818  : 
; 819  :     while ((size_central_dir_to_read>0) && (err==ZIP_OK))

  00579	83 bd 4c ff ff
	ff 00		 cmp	 DWORD PTR _size_central_dir_to_read$4[ebp+4], 0
  00580	77 0d		 ja	 SHORT $LN52@LoadCentra
  00582	83 bd 48 ff ff
	ff 00		 cmp	 DWORD PTR _size_central_dir_to_read$4[ebp], 0
  00589	0f 86 0a 01 00
	00		 jbe	 $LN3@LoadCentra
$LN52@LoadCentra:
  0058f	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  00593	0f 85 00 01 00
	00		 jne	 $LN3@LoadCentra

; 820  :     {
; 821  :       ZPOS64_T read_this = SIZEDATA_INDATABLOCK;

  00599	0f ae e8	 lfence
  0059c	c7 85 38 ff ff
	ff f0 0f 00 00	 mov	 DWORD PTR _read_this$1[ebp], 4080 ; 00000ff0H
  005a6	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _read_this$1[ebp+4], 0

; 822  :       if (read_this > size_central_dir_to_read)

  005b0	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _read_this$1[ebp+4]
  005b6	3b 85 4c ff ff
	ff		 cmp	 eax, DWORD PTR _size_central_dir_to_read$4[ebp+4]
  005bc	72 28		 jb	 SHORT $LN42@LoadCentra
  005be	77 0e		 ja	 SHORT $LN53@LoadCentra
  005c0	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR _read_this$1[ebp]
  005c6	3b 8d 48 ff ff
	ff		 cmp	 ecx, DWORD PTR _size_central_dir_to_read$4[ebp]
  005cc	76 18		 jbe	 SHORT $LN42@LoadCentra
$LN53@LoadCentra:

; 823  :         read_this = size_central_dir_to_read;

  005ce	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR _size_central_dir_to_read$4[ebp]
  005d4	89 95 38 ff ff
	ff		 mov	 DWORD PTR _read_this$1[ebp], edx
  005da	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _size_central_dir_to_read$4[ebp+4]
  005e0	89 85 3c ff ff
	ff		 mov	 DWORD PTR _read_this$1[ebp+4], eax
$LN42@LoadCentra:

; 824  : 
; 825  :       if (ZREAD64(pziinit->z_filefunc, pziinit->filestream,buf_read,(uLong)read_this) != read_this)

  005e6	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR _read_this$1[ebp]
  005ec	8b f4		 mov	 esi, esp
  005ee	51		 push	 ecx
  005ef	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR _buf_read$2[ebp]
  005f5	52		 push	 edx
  005f6	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  005f9	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  005fc	51		 push	 ecx
  005fd	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  00600	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00603	50		 push	 eax
  00604	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  00607	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0060a	ff d2		 call	 edx
  0060c	83 c4 10	 add	 esp, 16			; 00000010H
  0060f	3b f4		 cmp	 esi, esp
  00611	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00616	33 c9		 xor	 ecx, ecx
  00618	89 85 28 ff ff
	ff		 mov	 DWORD PTR tv588[ebp], eax
  0061e	89 8d 2c ff ff
	ff		 mov	 DWORD PTR tv588[ebp+4], ecx
  00624	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR tv588[ebp]
  0062a	3b 95 38 ff ff
	ff		 cmp	 edx, DWORD PTR _read_this$1[ebp]
  00630	75 0e		 jne	 SHORT $LN54@LoadCentra
  00632	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv588[ebp+4]
  00638	3b 85 3c ff ff
	ff		 cmp	 eax, DWORD PTR _read_this$1[ebp+4]
  0063e	74 07		 je	 SHORT $LN43@LoadCentra
$LN54@LoadCentra:

; 826  :         err=ZIP_ERRNO;

  00640	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN43@LoadCentra:

; 827  : 
; 828  :       if (err==ZIP_OK)

  00647	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  0064b	75 23		 jne	 SHORT $LN44@LoadCentra

; 829  :         err = add_data_in_datablock(&pziinit->central_dir,buf_read, (uLong)read_this);

  0064d	0f ae e8	 lfence
  00650	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR _read_this$1[ebp]
  00656	51		 push	 ecx
  00657	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR _buf_read$2[ebp]
  0065d	52		 push	 edx
  0065e	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  00661	83 c0 30	 add	 eax, 48			; 00000030H
  00664	50		 push	 eax
  00665	e8 00 00 00 00	 call	 _add_data_in_datablock
  0066a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0066d	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN44@LoadCentra:

; 830  : 
; 831  :       size_central_dir_to_read-=read_this;

  00670	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _size_central_dir_to_read$4[ebp]
  00676	2b 8d 38 ff ff
	ff		 sub	 ecx, DWORD PTR _read_this$1[ebp]
  0067c	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _size_central_dir_to_read$4[ebp+4]
  00682	1b 95 3c ff ff
	ff		 sbb	 edx, DWORD PTR _read_this$1[ebp+4]
  00688	89 8d 48 ff ff
	ff		 mov	 DWORD PTR _size_central_dir_to_read$4[ebp], ecx
  0068e	89 95 4c ff ff
	ff		 mov	 DWORD PTR _size_central_dir_to_read$4[ebp+4], edx

; 832  :     }

  00694	e9 e0 fe ff ff	 jmp	 $LN2@LoadCentra
$LN3@LoadCentra:

; 833  :     TRYFREE(buf_read);

  00699	83 bd 40 ff ff
	ff 00		 cmp	 DWORD PTR _buf_read$2[ebp], 0
  006a0	74 0f		 je	 SHORT $LN45@LoadCentra
  006a2	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _buf_read$2[ebp]
  006a8	50		 push	 eax
  006a9	e8 00 00 00 00	 call	 _free
  006ae	83 c4 04	 add	 esp, 4
$LN45@LoadCentra:

; 834  :   }
; 835  :   pziinit->begin_pos = byte_before_the_zipfile;

  006b1	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  006b4	8b 55 f4	 mov	 edx, DWORD PTR _byte_before_the_zipfile$[ebp]
  006b7	89 91 e8 00 01
	00		 mov	 DWORD PTR [ecx+65768], edx
  006bd	8b 45 f8	 mov	 eax, DWORD PTR _byte_before_the_zipfile$[ebp+4]
  006c0	89 81 ec 00 01
	00		 mov	 DWORD PTR [ecx+65772], eax

; 836  :   pziinit->number_entry = number_entry_CD;

  006c6	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  006c9	8b 55 8c	 mov	 edx, DWORD PTR _number_entry_CD$[ebp]
  006cc	89 91 f8 00 01
	00		 mov	 DWORD PTR [ecx+65784], edx
  006d2	8b 45 90	 mov	 eax, DWORD PTR _number_entry_CD$[ebp+4]
  006d5	89 81 fc 00 01
	00		 mov	 DWORD PTR [ecx+65788], eax

; 837  : 
; 838  :   if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, offset_central_dir+byte_before_the_zipfile,ZLIB_FILEFUNC_SEEK_SET) != 0)

  006db	6a 00		 push	 0
  006dd	8b 4d d8	 mov	 ecx, DWORD PTR _offset_central_dir$[ebp]
  006e0	03 4d f4	 add	 ecx, DWORD PTR _byte_before_the_zipfile$[ebp]
  006e3	8b 55 dc	 mov	 edx, DWORD PTR _offset_central_dir$[ebp+4]
  006e6	13 55 f8	 adc	 edx, DWORD PTR _byte_before_the_zipfile$[ebp+4]
  006e9	52		 push	 edx
  006ea	51		 push	 ecx
  006eb	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  006ee	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  006f1	51		 push	 ecx
  006f2	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  006f5	52		 push	 edx
  006f6	e8 00 00 00 00	 call	 _call_zseek64
  006fb	83 c4 14	 add	 esp, 20			; 00000014H
  006fe	85 c0		 test	 eax, eax
  00700	74 07		 je	 SHORT $LN46@LoadCentra

; 839  :     err=ZIP_ERRNO;

  00702	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN46@LoadCentra:

; 840  : 
; 841  :   return err;

  00709	8b 45 fc	 mov	 eax, DWORD PTR _err$[ebp]
$LN1@LoadCentra:

; 842  : }

  0070c	52		 push	 edx
  0070d	8b cd		 mov	 ecx, ebp
  0070f	50		 push	 eax
  00710	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN67@LoadCentra
  00716	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0071b	58		 pop	 eax
  0071c	5a		 pop	 edx
  0071d	5f		 pop	 edi
  0071e	5e		 pop	 esi
  0071f	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00725	3b ec		 cmp	 ebp, esp
  00727	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0072c	8b e5		 mov	 esp, ebp
  0072e	5d		 pop	 ebp
  0072f	c3		 ret	 0
$LN67@LoadCentra:
  00730	0b 00 00 00	 DD	 11			; 0000000bH
  00734	00 00 00 00	 DD	 $LN66@LoadCentra
$LN66@LoadCentra:
  00738	e8 ff ff ff	 DD	 -24			; ffffffe8H
  0073c	08 00 00 00	 DD	 8
  00740	00 00 00 00	 DD	 $LN55@LoadCentra
  00744	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00748	08 00 00 00	 DD	 8
  0074c	00 00 00 00	 DD	 $LN56@LoadCentra
  00750	c4 ff ff ff	 DD	 -60			; ffffffc4H
  00754	04 00 00 00	 DD	 4
  00758	00 00 00 00	 DD	 $LN57@LoadCentra
  0075c	b8 ff ff ff	 DD	 -72			; ffffffb8H
  00760	04 00 00 00	 DD	 4
  00764	00 00 00 00	 DD	 $LN58@LoadCentra
  00768	ac ff ff ff	 DD	 -84			; ffffffacH
  0076c	04 00 00 00	 DD	 4
  00770	00 00 00 00	 DD	 $LN59@LoadCentra
  00774	9c ff ff ff	 DD	 -100			; ffffff9cH
  00778	08 00 00 00	 DD	 8
  0077c	00 00 00 00	 DD	 $LN60@LoadCentra
  00780	8c ff ff ff	 DD	 -116			; ffffff8cH
  00784	08 00 00 00	 DD	 8
  00788	00 00 00 00	 DD	 $LN61@LoadCentra
  0078c	80 ff ff ff	 DD	 -128			; ffffff80H
  00790	04 00 00 00	 DD	 4
  00794	00 00 00 00	 DD	 $LN62@LoadCentra
  00798	74 ff ff ff	 DD	 -140			; ffffff74H
  0079c	04 00 00 00	 DD	 4
  007a0	00 00 00 00	 DD	 $LN63@LoadCentra
  007a4	68 ff ff ff	 DD	 -152			; ffffff68H
  007a8	04 00 00 00	 DD	 4
  007ac	00 00 00 00	 DD	 $LN64@LoadCentra
  007b0	54 ff ff ff	 DD	 -172			; ffffff54H
  007b4	08 00 00 00	 DD	 8
  007b8	00 00 00 00	 DD	 $LN65@LoadCentra
$LN65@LoadCentra:
  007bc	73		 DB	 115			; 00000073H
  007bd	69		 DB	 105			; 00000069H
  007be	7a		 DB	 122			; 0000007aH
  007bf	65		 DB	 101			; 00000065H
  007c0	45		 DB	 69			; 00000045H
  007c1	6e		 DB	 110			; 0000006eH
  007c2	64		 DB	 100			; 00000064H
  007c3	4f		 DB	 79			; 0000004fH
  007c4	66		 DB	 102			; 00000066H
  007c5	43		 DB	 67			; 00000043H
  007c6	65		 DB	 101			; 00000065H
  007c7	6e		 DB	 110			; 0000006eH
  007c8	74		 DB	 116			; 00000074H
  007c9	72		 DB	 114			; 00000072H
  007ca	61		 DB	 97			; 00000061H
  007cb	6c		 DB	 108			; 0000006cH
  007cc	44		 DB	 68			; 00000044H
  007cd	69		 DB	 105			; 00000069H
  007ce	72		 DB	 114			; 00000072H
  007cf	65		 DB	 101			; 00000065H
  007d0	63		 DB	 99			; 00000063H
  007d1	74		 DB	 116			; 00000074H
  007d2	6f		 DB	 111			; 0000006fH
  007d3	72		 DB	 114			; 00000072H
  007d4	79		 DB	 121			; 00000079H
  007d5	00		 DB	 0
$LN64@LoadCentra:
  007d6	73		 DB	 115			; 00000073H
  007d7	69		 DB	 105			; 00000069H
  007d8	7a		 DB	 122			; 0000007aH
  007d9	65		 DB	 101			; 00000065H
  007da	5f		 DB	 95			; 0000005fH
  007db	63		 DB	 99			; 00000063H
  007dc	6f		 DB	 111			; 0000006fH
  007dd	6d		 DB	 109			; 0000006dH
  007de	6d		 DB	 109			; 0000006dH
  007df	65		 DB	 101			; 00000065H
  007e0	6e		 DB	 110			; 0000006eH
  007e1	74		 DB	 116			; 00000074H
  007e2	00		 DB	 0
$LN63@LoadCentra:
  007e3	56		 DB	 86			; 00000056H
  007e4	65		 DB	 101			; 00000065H
  007e5	72		 DB	 114			; 00000072H
  007e6	73		 DB	 115			; 00000073H
  007e7	69		 DB	 105			; 00000069H
  007e8	6f		 DB	 111			; 0000006fH
  007e9	6e		 DB	 110			; 0000006eH
  007ea	4e		 DB	 78			; 0000004eH
  007eb	65		 DB	 101			; 00000065H
  007ec	65		 DB	 101			; 00000065H
  007ed	64		 DB	 100			; 00000064H
  007ee	65		 DB	 101			; 00000065H
  007ef	64		 DB	 100			; 00000064H
  007f0	00		 DB	 0
$LN62@LoadCentra:
  007f1	56		 DB	 86			; 00000056H
  007f2	65		 DB	 101			; 00000065H
  007f3	72		 DB	 114			; 00000072H
  007f4	73		 DB	 115			; 00000073H
  007f5	69		 DB	 105			; 00000069H
  007f6	6f		 DB	 111			; 0000006fH
  007f7	6e		 DB	 110			; 0000006eH
  007f8	4d		 DB	 77			; 0000004dH
  007f9	61		 DB	 97			; 00000061H
  007fa	64		 DB	 100			; 00000064H
  007fb	65		 DB	 101			; 00000065H
  007fc	42		 DB	 66			; 00000042H
  007fd	79		 DB	 121			; 00000079H
  007fe	00		 DB	 0
$LN61@LoadCentra:
  007ff	6e		 DB	 110			; 0000006eH
  00800	75		 DB	 117			; 00000075H
  00801	6d		 DB	 109			; 0000006dH
  00802	62		 DB	 98			; 00000062H
  00803	65		 DB	 101			; 00000065H
  00804	72		 DB	 114			; 00000072H
  00805	5f		 DB	 95			; 0000005fH
  00806	65		 DB	 101			; 00000065H
  00807	6e		 DB	 110			; 0000006eH
  00808	74		 DB	 116			; 00000074H
  00809	72		 DB	 114			; 00000072H
  0080a	79		 DB	 121			; 00000079H
  0080b	5f		 DB	 95			; 0000005fH
  0080c	43		 DB	 67			; 00000043H
  0080d	44		 DB	 68			; 00000044H
  0080e	00		 DB	 0
$LN60@LoadCentra:
  0080f	6e		 DB	 110			; 0000006eH
  00810	75		 DB	 117			; 00000075H
  00811	6d		 DB	 109			; 0000006dH
  00812	62		 DB	 98			; 00000062H
  00813	65		 DB	 101			; 00000065H
  00814	72		 DB	 114			; 00000072H
  00815	5f		 DB	 95			; 0000005fH
  00816	65		 DB	 101			; 00000065H
  00817	6e		 DB	 110			; 0000006eH
  00818	74		 DB	 116			; 00000074H
  00819	72		 DB	 114			; 00000072H
  0081a	79		 DB	 121			; 00000079H
  0081b	00		 DB	 0
$LN59@LoadCentra:
  0081c	6e		 DB	 110			; 0000006eH
  0081d	75		 DB	 117			; 00000075H
  0081e	6d		 DB	 109			; 0000006dH
  0081f	62		 DB	 98			; 00000062H
  00820	65		 DB	 101			; 00000065H
  00821	72		 DB	 114			; 00000072H
  00822	5f		 DB	 95			; 0000005fH
  00823	64		 DB	 100			; 00000064H
  00824	69		 DB	 105			; 00000069H
  00825	73		 DB	 115			; 00000073H
  00826	6b		 DB	 107			; 0000006bH
  00827	5f		 DB	 95			; 0000005fH
  00828	77		 DB	 119			; 00000077H
  00829	69		 DB	 105			; 00000069H
  0082a	74		 DB	 116			; 00000074H
  0082b	68		 DB	 104			; 00000068H
  0082c	5f		 DB	 95			; 0000005fH
  0082d	43		 DB	 67			; 00000043H
  0082e	44		 DB	 68			; 00000044H
  0082f	00		 DB	 0
$LN58@LoadCentra:
  00830	6e		 DB	 110			; 0000006eH
  00831	75		 DB	 117			; 00000075H
  00832	6d		 DB	 109			; 0000006dH
  00833	62		 DB	 98			; 00000062H
  00834	65		 DB	 101			; 00000065H
  00835	72		 DB	 114			; 00000072H
  00836	5f		 DB	 95			; 0000005fH
  00837	64		 DB	 100			; 00000064H
  00838	69		 DB	 105			; 00000069H
  00839	73		 DB	 115			; 00000073H
  0083a	6b		 DB	 107			; 0000006bH
  0083b	00		 DB	 0
$LN57@LoadCentra:
  0083c	75		 DB	 117			; 00000075H
  0083d	4c		 DB	 76			; 0000004cH
  0083e	00		 DB	 0
$LN56@LoadCentra:
  0083f	6f		 DB	 111			; 0000006fH
  00840	66		 DB	 102			; 00000066H
  00841	66		 DB	 102			; 00000066H
  00842	73		 DB	 115			; 00000073H
  00843	65		 DB	 101			; 00000065H
  00844	74		 DB	 116			; 00000074H
  00845	5f		 DB	 95			; 0000005fH
  00846	63		 DB	 99			; 00000063H
  00847	65		 DB	 101			; 00000065H
  00848	6e		 DB	 110			; 0000006eH
  00849	74		 DB	 116			; 00000074H
  0084a	72		 DB	 114			; 00000072H
  0084b	61		 DB	 97			; 00000061H
  0084c	6c		 DB	 108			; 0000006cH
  0084d	5f		 DB	 95			; 0000005fH
  0084e	64		 DB	 100			; 00000064H
  0084f	69		 DB	 105			; 00000069H
  00850	72		 DB	 114			; 00000072H
  00851	00		 DB	 0
$LN55@LoadCentra:
  00852	73		 DB	 115			; 00000073H
  00853	69		 DB	 105			; 00000069H
  00854	7a		 DB	 122			; 0000007aH
  00855	65		 DB	 101			; 00000065H
  00856	5f		 DB	 95			; 0000005fH
  00857	63		 DB	 99			; 00000063H
  00858	65		 DB	 101			; 00000065H
  00859	6e		 DB	 110			; 0000006eH
  0085a	74		 DB	 116			; 00000074H
  0085b	72		 DB	 114			; 00000072H
  0085c	61		 DB	 97			; 00000061H
  0085d	6c		 DB	 108			; 0000006cH
  0085e	5f		 DB	 95			; 0000005fH
  0085f	64		 DB	 100			; 00000064H
  00860	69		 DB	 105			; 00000069H
  00861	72		 DB	 114			; 00000072H
  00862	00		 DB	 0
_LoadCentralDirectoryRecord ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _zipOpen3@16
_TEXT	SEGMENT
tv69 = -65820						; size = 4
_err$ = -65816						; size = 4
_zi$ = -65812						; size = 4
_ziinit$ = -65804					; size = 65800
_pathname$ = 8						; size = 4
_append$ = 12						; size = 4
_globalcomment$ = 16					; size = 4
_pzlib_filefunc64_32_def$ = 20				; size = 4
_zipOpen3@16 PROC					; COMDAT

; 850  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 1c 01 01 00	 mov	 eax, 65820		; 0001011cH
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8d bd e4 fe fe
	ff		 lea	 edi, DWORD PTR [ebp-65820]
  00015	b9 47 40 00 00	 mov	 ecx, 16455		; 00004047H
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00026	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 851  :     zip64_internal ziinit;
; 852  :     zip64_internal* zi;
; 853  :     int err=ZIP_OK;

  0002b	c7 85 e8 fe fe
	ff 00 00 00 00	 mov	 DWORD PTR _err$[ebp], 0

; 854  : 
; 855  :     ziinit.z_filefunc.zseek32_file = NULL;

  00035	c7 85 1c ff fe
	ff 00 00 00 00	 mov	 DWORD PTR _ziinit$[ebp+40], 0

; 856  :     ziinit.z_filefunc.ztell32_file = NULL;

  0003f	c7 85 18 ff fe
	ff 00 00 00 00	 mov	 DWORD PTR _ziinit$[ebp+36], 0

; 857  :     if (pzlib_filefunc64_32_def==NULL)

  00049	83 7d 14 00	 cmp	 DWORD PTR _pzlib_filefunc64_32_def$[ebp], 0
  0004d	75 11		 jne	 SHORT $LN2@zipOpen3

; 858  :         fill_fopen64_filefunc(&ziinit.z_filefunc.zfile_func64);

  0004f	8d 85 f4 fe fe
	ff		 lea	 eax, DWORD PTR _ziinit$[ebp]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 _fill_fopen64_filefunc
  0005b	83 c4 04	 add	 esp, 4
  0005e	eb 10		 jmp	 SHORT $LN3@zipOpen3
$LN2@zipOpen3:

; 859  :     else
; 860  :         ziinit.z_filefunc = *pzlib_filefunc64_32_def;

  00060	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  00065	8b 75 14	 mov	 esi, DWORD PTR _pzlib_filefunc64_32_def$[ebp]
  00068	8d bd f4 fe fe
	ff		 lea	 edi, DWORD PTR _ziinit$[ebp]
  0006e	f3 a5		 rep movsd
$LN3@zipOpen3:

; 861  : 
; 862  :     ziinit.filestream = ZOPEN64(ziinit.z_filefunc,

  00070	83 7d 0c 00	 cmp	 DWORD PTR _append$[ebp], 0
  00074	75 0c		 jne	 SHORT $LN14@zipOpen3
  00076	c7 85 e4 fe fe
	ff 0b 00 00 00	 mov	 DWORD PTR tv69[ebp], 11	; 0000000bH
  00080	eb 0a		 jmp	 SHORT $LN15@zipOpen3
$LN14@zipOpen3:
  00082	c7 85 e4 fe fe
	ff 07 00 00 00	 mov	 DWORD PTR tv69[ebp], 7
$LN15@zipOpen3:
  0008c	8b 8d e4 fe fe
	ff		 mov	 ecx, DWORD PTR tv69[ebp]
  00092	51		 push	 ecx
  00093	8b 55 08	 mov	 edx, DWORD PTR _pathname$[ebp]
  00096	52		 push	 edx
  00097	8d 85 f4 fe fe
	ff		 lea	 eax, DWORD PTR _ziinit$[ebp]
  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 _call_zopen64
  000a3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a6	89 85 20 ff fe
	ff		 mov	 DWORD PTR _ziinit$[ebp+44], eax

; 863  :                   pathname,
; 864  :                   (append == APPEND_STATUS_CREATE) ?
; 865  :                   (ZLIB_FILEFUNC_MODE_READ | ZLIB_FILEFUNC_MODE_WRITE | ZLIB_FILEFUNC_MODE_CREATE) :
; 866  :                     (ZLIB_FILEFUNC_MODE_READ | ZLIB_FILEFUNC_MODE_WRITE | ZLIB_FILEFUNC_MODE_EXISTING));
; 867  : 
; 868  :     if (ziinit.filestream == NULL)

  000ac	83 bd 20 ff fe
	ff 00		 cmp	 DWORD PTR _ziinit$[ebp+44], 0
  000b3	75 07		 jne	 SHORT $LN4@zipOpen3

; 869  :         return NULL;

  000b5	33 c0		 xor	 eax, eax
  000b7	e9 3e 01 00 00	 jmp	 $LN1@zipOpen3
$LN4@zipOpen3:

; 870  : 
; 871  :     if (append == APPEND_STATUS_CREATEAFTER)

  000bc	83 7d 0c 01	 cmp	 DWORD PTR _append$[ebp], 1
  000c0	75 1c		 jne	 SHORT $LN5@zipOpen3

; 872  :         ZSEEK64(ziinit.z_filefunc,ziinit.filestream,0,SEEK_END);

  000c2	6a 02		 push	 2
  000c4	6a 00		 push	 0
  000c6	6a 00		 push	 0
  000c8	8b 8d 20 ff fe
	ff		 mov	 ecx, DWORD PTR _ziinit$[ebp+44]
  000ce	51		 push	 ecx
  000cf	8d 95 f4 fe fe
	ff		 lea	 edx, DWORD PTR _ziinit$[ebp]
  000d5	52		 push	 edx
  000d6	e8 00 00 00 00	 call	 _call_zseek64
  000db	83 c4 14	 add	 esp, 20			; 00000014H
$LN5@zipOpen3:

; 873  : 
; 874  :     ziinit.begin_pos = ZTELL64(ziinit.z_filefunc,ziinit.filestream);

  000de	8b 85 20 ff fe
	ff		 mov	 eax, DWORD PTR _ziinit$[ebp+44]
  000e4	50		 push	 eax
  000e5	8d 8d f4 fe fe
	ff		 lea	 ecx, DWORD PTR _ziinit$[ebp]
  000eb	51		 push	 ecx
  000ec	e8 00 00 00 00	 call	 _call_ztell64
  000f1	83 c4 08	 add	 esp, 8
  000f4	89 45 dc	 mov	 DWORD PTR _ziinit$[ebp+65768], eax
  000f7	89 55 e0	 mov	 DWORD PTR _ziinit$[ebp+65772], edx

; 875  :     ziinit.in_opened_file_inzip = 0;

  000fa	c7 85 2c ff fe
	ff 00 00 00 00	 mov	 DWORD PTR _ziinit$[ebp+56], 0

; 876  :     ziinit.ci.stream_initialised = 0;

  00104	c7 85 6c ff fe
	ff 00 00 00 00	 mov	 DWORD PTR _ziinit$[ebp+120], 0

; 877  :     ziinit.number_entry = 0;

  0010e	0f 57 c0	 xorps	 xmm0, xmm0
  00111	66 0f 13 45 ec	 movlpd	 QWORD PTR _ziinit$[ebp+65784], xmm0

; 878  :     ziinit.add_position_when_writing_offset = 0;

  00116	0f 57 c0	 xorps	 xmm0, xmm0
  00119	66 0f 13 45 e4	 movlpd	 QWORD PTR _ziinit$[ebp+65776], xmm0

; 879  :     init_linkedlist(&(ziinit.central_dir));

  0011e	8d 95 24 ff fe
	ff		 lea	 edx, DWORD PTR _ziinit$[ebp+48]
  00124	52		 push	 edx
  00125	e8 00 00 00 00	 call	 _init_linkedlist
  0012a	83 c4 04	 add	 esp, 4

; 880  : 
; 881  : 
; 882  : 
; 883  :     zi = (zip64_internal*)ALLOC(sizeof(zip64_internal));

  0012d	68 08 01 01 00	 push	 65800			; 00010108H
  00132	e8 00 00 00 00	 call	 _malloc
  00137	83 c4 04	 add	 esp, 4
  0013a	89 85 ec fe fe
	ff		 mov	 DWORD PTR _zi$[ebp], eax

; 884  :     if (zi==NULL)

  00140	83 bd ec fe fe
	ff 00		 cmp	 DWORD PTR _zi$[ebp], 0
  00147	75 27		 jne	 SHORT $LN6@zipOpen3

; 885  :     {
; 886  :         ZCLOSE64(ziinit.z_filefunc,ziinit.filestream);

  00149	8b f4		 mov	 esi, esp
  0014b	8b 85 20 ff fe
	ff		 mov	 eax, DWORD PTR _ziinit$[ebp+44]
  00151	50		 push	 eax
  00152	8b 8d 10 ff fe
	ff		 mov	 ecx, DWORD PTR _ziinit$[ebp+28]
  00158	51		 push	 ecx
  00159	ff 95 08 ff fe
	ff		 call	 DWORD PTR _ziinit$[ebp+20]
  0015f	83 c4 08	 add	 esp, 8
  00162	3b f4		 cmp	 esi, esp
  00164	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 887  :         return NULL;

  00169	33 c0		 xor	 eax, eax
  0016b	e9 8a 00 00 00	 jmp	 $LN1@zipOpen3
$LN6@zipOpen3:

; 888  :     }
; 889  : 
; 890  :     /* now we add file in a zipfile */
; 891  : #    ifndef NO_ADDFILEINEXISTINGZIP
; 892  :     ziinit.globalcomment = NULL;

  00170	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _ziinit$[ebp+65792], 0

; 893  :     if (append == APPEND_STATUS_ADDINZIP)

  00177	83 7d 0c 02	 cmp	 DWORD PTR _append$[ebp], 2
  0017b	75 15		 jne	 SHORT $LN7@zipOpen3

; 894  :     {
; 895  :       // Read and Cache Central Directory Records
; 896  :       err = LoadCentralDirectoryRecord(&ziinit);

  0017d	8d 95 f4 fe fe
	ff		 lea	 edx, DWORD PTR _ziinit$[ebp]
  00183	52		 push	 edx
  00184	e8 00 00 00 00	 call	 _LoadCentralDirectoryRecord
  00189	83 c4 04	 add	 esp, 4
  0018c	89 85 e8 fe fe
	ff		 mov	 DWORD PTR _err$[ebp], eax
$LN7@zipOpen3:

; 897  :     }
; 898  : 
; 899  :     if (globalcomment)

  00192	83 7d 10 00	 cmp	 DWORD PTR _globalcomment$[ebp], 0
  00196	74 08		 je	 SHORT $LN8@zipOpen3

; 900  :     {
; 901  :       *globalcomment = ziinit.globalcomment;

  00198	8b 45 10	 mov	 eax, DWORD PTR _globalcomment$[ebp]
  0019b	8b 4d f4	 mov	 ecx, DWORD PTR _ziinit$[ebp+65792]
  0019e	89 08		 mov	 DWORD PTR [eax], ecx
$LN8@zipOpen3:

; 902  :     }
; 903  : #    endif /* !NO_ADDFILEINEXISTINGZIP*/
; 904  : 
; 905  :     if (err != ZIP_OK)

  001a0	83 bd e8 fe fe
	ff 00		 cmp	 DWORD PTR _err$[ebp], 0
  001a7	74 30		 je	 SHORT $LN9@zipOpen3

; 906  :     {
; 907  : #    ifndef NO_ADDFILEINEXISTINGZIP
; 908  :         TRYFREE(ziinit.globalcomment);

  001a9	83 7d f4 00	 cmp	 DWORD PTR _ziinit$[ebp+65792], 0
  001ad	74 0c		 je	 SHORT $LN11@zipOpen3
  001af	8b 55 f4	 mov	 edx, DWORD PTR _ziinit$[ebp+65792]
  001b2	52		 push	 edx
  001b3	e8 00 00 00 00	 call	 _free
  001b8	83 c4 04	 add	 esp, 4
$LN11@zipOpen3:

; 909  : #    endif /* !NO_ADDFILEINEXISTINGZIP*/
; 910  :         TRYFREE(zi);

  001bb	83 bd ec fe fe
	ff 00		 cmp	 DWORD PTR _zi$[ebp], 0
  001c2	74 0f		 je	 SHORT $LN12@zipOpen3
  001c4	8b 85 ec fe fe
	ff		 mov	 eax, DWORD PTR _zi$[ebp]
  001ca	50		 push	 eax
  001cb	e8 00 00 00 00	 call	 _free
  001d0	83 c4 04	 add	 esp, 4
$LN12@zipOpen3:

; 911  :         return NULL;

  001d3	33 c0		 xor	 eax, eax
  001d5	eb 23		 jmp	 SHORT $LN1@zipOpen3

; 912  :     }

  001d7	eb 21		 jmp	 SHORT $LN1@zipOpen3
$LN9@zipOpen3:

; 913  :     else
; 914  :     {
; 915  :         *zi = ziinit;

  001d9	68 08 01 01 00	 push	 65800			; 00010108H
  001de	8d 8d f4 fe fe
	ff		 lea	 ecx, DWORD PTR _ziinit$[ebp]
  001e4	51		 push	 ecx
  001e5	8b 95 ec fe fe
	ff		 mov	 edx, DWORD PTR _zi$[ebp]
  001eb	52		 push	 edx
  001ec	e8 00 00 00 00	 call	 _memcpy
  001f1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 916  :         return (zipFile)zi;

  001f4	8b 85 ec fe fe
	ff		 mov	 eax, DWORD PTR _zi$[ebp]
$LN1@zipOpen3:

; 917  :     }
; 918  : }

  001fa	52		 push	 edx
  001fb	8b cd		 mov	 ecx, ebp
  001fd	50		 push	 eax
  001fe	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN21@zipOpen3
  00204	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00209	58		 pop	 eax
  0020a	5a		 pop	 edx
  0020b	5f		 pop	 edi
  0020c	5e		 pop	 esi
  0020d	81 c4 1c 01 01
	00		 add	 esp, 65820		; 0001011cH
  00213	3b ec		 cmp	 ebp, esp
  00215	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0021a	8b e5		 mov	 esp, ebp
  0021c	5d		 pop	 ebp
  0021d	c2 10 00	 ret	 16			; 00000010H
$LN21@zipOpen3:
  00220	01 00 00 00	 DD	 1
  00224	00 00 00 00	 DD	 $LN20@zipOpen3
$LN20@zipOpen3:
  00228	f4 fe fe ff	 DD	 -65804			; fffefef4H
  0022c	08 01 01 00	 DD	 65800			; 00010108H
  00230	00 00 00 00	 DD	 $LN19@zipOpen3
$LN19@zipOpen3:
  00234	7a		 DB	 122			; 0000007aH
  00235	69		 DB	 105			; 00000069H
  00236	69		 DB	 105			; 00000069H
  00237	6e		 DB	 110			; 0000006eH
  00238	69		 DB	 105			; 00000069H
  00239	74		 DB	 116			; 00000074H
  0023a	00		 DB	 0
_zipOpen3@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _zipOpen2@16
_TEXT	SEGMENT
_zlib_filefunc64_32_def_fill$1 = -48			; size = 44
_pathname$ = 8						; size = 4
_append$ = 12						; size = 4
_globalcomment$ = 16					; size = 4
_pzlib_filefunc32_def$ = 20				; size = 4
_zipOpen2@16 PROC					; COMDAT

; 921  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	57		 push	 edi
  00007	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  0000a	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 922  :     if (pzlib_filefunc32_def != NULL)

  00020	83 7d 14 00	 cmp	 DWORD PTR _pzlib_filefunc32_def$[ebp], 0
  00024	74 29		 je	 SHORT $LN2@zipOpen2

; 923  :     {
; 924  :         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
; 925  :         fill_zlib_filefunc64_32_def_from_filefunc32(&zlib_filefunc64_32_def_fill,pzlib_filefunc32_def);

  00026	8b 45 14	 mov	 eax, DWORD PTR _pzlib_filefunc32_def$[ebp]
  00029	50		 push	 eax
  0002a	8d 4d d0	 lea	 ecx, DWORD PTR _zlib_filefunc64_32_def_fill$1[ebp]
  0002d	51		 push	 ecx
  0002e	e8 00 00 00 00	 call	 _fill_zlib_filefunc64_32_def_from_filefunc32
  00033	83 c4 08	 add	 esp, 8

; 926  :         return zipOpen3(pathname, append, globalcomment, &zlib_filefunc64_32_def_fill);

  00036	8d 55 d0	 lea	 edx, DWORD PTR _zlib_filefunc64_32_def_fill$1[ebp]
  00039	52		 push	 edx
  0003a	8b 45 10	 mov	 eax, DWORD PTR _globalcomment$[ebp]
  0003d	50		 push	 eax
  0003e	8b 4d 0c	 mov	 ecx, DWORD PTR _append$[ebp]
  00041	51		 push	 ecx
  00042	8b 55 08	 mov	 edx, DWORD PTR _pathname$[ebp]
  00045	52		 push	 edx
  00046	e8 00 00 00 00	 call	 _zipOpen3@16
  0004b	eb 15		 jmp	 SHORT $LN1@zipOpen2

; 927  :     }

  0004d	eb 13		 jmp	 SHORT $LN1@zipOpen2
$LN2@zipOpen2:

; 928  :     else
; 929  :         return zipOpen3(pathname, append, globalcomment, NULL);

  0004f	6a 00		 push	 0
  00051	8b 45 10	 mov	 eax, DWORD PTR _globalcomment$[ebp]
  00054	50		 push	 eax
  00055	8b 4d 0c	 mov	 ecx, DWORD PTR _append$[ebp]
  00058	51		 push	 ecx
  00059	8b 55 08	 mov	 edx, DWORD PTR _pathname$[ebp]
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 _zipOpen3@16
$LN1@zipOpen2:

; 930  : }

  00062	52		 push	 edx
  00063	8b cd		 mov	 ecx, ebp
  00065	50		 push	 eax
  00066	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@zipOpen2
  0006c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00071	58		 pop	 eax
  00072	5a		 pop	 edx
  00073	5f		 pop	 edi
  00074	83 c4 34	 add	 esp, 52			; 00000034H
  00077	3b ec		 cmp	 ebp, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 10 00	 ret	 16			; 00000010H
$LN8@zipOpen2:
  00084	01 00 00 00	 DD	 1
  00088	00 00 00 00	 DD	 $LN7@zipOpen2
$LN7@zipOpen2:
  0008c	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00090	2c 00 00 00	 DD	 44			; 0000002cH
  00094	00 00 00 00	 DD	 $LN6@zipOpen2
$LN6@zipOpen2:
  00098	7a		 DB	 122			; 0000007aH
  00099	6c		 DB	 108			; 0000006cH
  0009a	69		 DB	 105			; 00000069H
  0009b	62		 DB	 98			; 00000062H
  0009c	5f		 DB	 95			; 0000005fH
  0009d	66		 DB	 102			; 00000066H
  0009e	69		 DB	 105			; 00000069H
  0009f	6c		 DB	 108			; 0000006cH
  000a0	65		 DB	 101			; 00000065H
  000a1	66		 DB	 102			; 00000066H
  000a2	75		 DB	 117			; 00000075H
  000a3	6e		 DB	 110			; 0000006eH
  000a4	63		 DB	 99			; 00000063H
  000a5	36		 DB	 54			; 00000036H
  000a6	34		 DB	 52			; 00000034H
  000a7	5f		 DB	 95			; 0000005fH
  000a8	33		 DB	 51			; 00000033H
  000a9	32		 DB	 50			; 00000032H
  000aa	5f		 DB	 95			; 0000005fH
  000ab	64		 DB	 100			; 00000064H
  000ac	65		 DB	 101			; 00000065H
  000ad	66		 DB	 102			; 00000066H
  000ae	5f		 DB	 95			; 0000005fH
  000af	66		 DB	 102			; 00000066H
  000b0	69		 DB	 105			; 00000069H
  000b1	6c		 DB	 108			; 0000006cH
  000b2	6c		 DB	 108			; 0000006cH
  000b3	00		 DB	 0
_zipOpen2@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _zipOpen2_64@16
_TEXT	SEGMENT
_zlib_filefunc64_32_def_fill$1 = -48			; size = 44
_pathname$ = 8						; size = 4
_append$ = 12						; size = 4
_globalcomment$ = 16					; size = 4
_pzlib_filefunc_def$ = 20				; size = 4
_zipOpen2_64@16 PROC					; COMDAT

; 933  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  0000b	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 934  :     if (pzlib_filefunc_def != NULL)

  00021	83 7d 14 00	 cmp	 DWORD PTR _pzlib_filefunc_def$[ebp], 0
  00025	74 34		 je	 SHORT $LN2@zipOpen2_6

; 935  :     {
; 936  :         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
; 937  :         zlib_filefunc64_32_def_fill.zfile_func64 = *pzlib_filefunc_def;

  00027	b9 08 00 00 00	 mov	 ecx, 8
  0002c	8b 75 14	 mov	 esi, DWORD PTR _pzlib_filefunc_def$[ebp]
  0002f	8d 7d d0	 lea	 edi, DWORD PTR _zlib_filefunc64_32_def_fill$1[ebp]
  00032	f3 a5		 rep movsd

; 938  :         zlib_filefunc64_32_def_fill.ztell32_file = NULL;

  00034	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _zlib_filefunc64_32_def_fill$1[ebp+36], 0

; 939  :         zlib_filefunc64_32_def_fill.zseek32_file = NULL;

  0003b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _zlib_filefunc64_32_def_fill$1[ebp+40], 0

; 940  :         return zipOpen3(pathname, append, globalcomment, &zlib_filefunc64_32_def_fill);

  00042	8d 45 d0	 lea	 eax, DWORD PTR _zlib_filefunc64_32_def_fill$1[ebp]
  00045	50		 push	 eax
  00046	8b 4d 10	 mov	 ecx, DWORD PTR _globalcomment$[ebp]
  00049	51		 push	 ecx
  0004a	8b 55 0c	 mov	 edx, DWORD PTR _append$[ebp]
  0004d	52		 push	 edx
  0004e	8b 45 08	 mov	 eax, DWORD PTR _pathname$[ebp]
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 _zipOpen3@16
  00057	eb 15		 jmp	 SHORT $LN1@zipOpen2_6

; 941  :     }

  00059	eb 13		 jmp	 SHORT $LN1@zipOpen2_6
$LN2@zipOpen2_6:

; 942  :     else
; 943  :         return zipOpen3(pathname, append, globalcomment, NULL);

  0005b	6a 00		 push	 0
  0005d	8b 4d 10	 mov	 ecx, DWORD PTR _globalcomment$[ebp]
  00060	51		 push	 ecx
  00061	8b 55 0c	 mov	 edx, DWORD PTR _append$[ebp]
  00064	52		 push	 edx
  00065	8b 45 08	 mov	 eax, DWORD PTR _pathname$[ebp]
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 _zipOpen3@16
$LN1@zipOpen2_6:

; 944  : }

  0006e	52		 push	 edx
  0006f	8b cd		 mov	 ecx, ebp
  00071	50		 push	 eax
  00072	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@zipOpen2_6
  00078	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0007d	58		 pop	 eax
  0007e	5a		 pop	 edx
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	83 c4 34	 add	 esp, 52			; 00000034H
  00084	3b ec		 cmp	 ebp, esp
  00086	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c2 10 00	 ret	 16			; 00000010H
  00091	0f 1f 00	 npad	 3
$LN8@zipOpen2_6:
  00094	01 00 00 00	 DD	 1
  00098	00 00 00 00	 DD	 $LN7@zipOpen2_6
$LN7@zipOpen2_6:
  0009c	d0 ff ff ff	 DD	 -48			; ffffffd0H
  000a0	2c 00 00 00	 DD	 44			; 0000002cH
  000a4	00 00 00 00	 DD	 $LN6@zipOpen2_6
$LN6@zipOpen2_6:
  000a8	7a		 DB	 122			; 0000007aH
  000a9	6c		 DB	 108			; 0000006cH
  000aa	69		 DB	 105			; 00000069H
  000ab	62		 DB	 98			; 00000062H
  000ac	5f		 DB	 95			; 0000005fH
  000ad	66		 DB	 102			; 00000066H
  000ae	69		 DB	 105			; 00000069H
  000af	6c		 DB	 108			; 0000006cH
  000b0	65		 DB	 101			; 00000065H
  000b1	66		 DB	 102			; 00000066H
  000b2	75		 DB	 117			; 00000075H
  000b3	6e		 DB	 110			; 0000006eH
  000b4	63		 DB	 99			; 00000063H
  000b5	36		 DB	 54			; 00000036H
  000b6	34		 DB	 52			; 00000034H
  000b7	5f		 DB	 95			; 0000005fH
  000b8	33		 DB	 51			; 00000033H
  000b9	32		 DB	 50			; 00000032H
  000ba	5f		 DB	 95			; 0000005fH
  000bb	64		 DB	 100			; 00000064H
  000bc	65		 DB	 101			; 00000065H
  000bd	66		 DB	 102			; 00000066H
  000be	5f		 DB	 95			; 0000005fH
  000bf	66		 DB	 102			; 00000066H
  000c0	69		 DB	 105			; 00000069H
  000c1	6c		 DB	 108			; 0000006cH
  000c2	6c		 DB	 108			; 0000006cH
  000c3	00		 DB	 0
_zipOpen2_64@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _zipOpen@8
_TEXT	SEGMENT
_pathname$ = 8						; size = 4
_append$ = 12						; size = 4
_zipOpen@8 PROC						; COMDAT

; 949  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 950  :     return zipOpen3((const void*)pathname,append,NULL,NULL);

  0000d	6a 00		 push	 0
  0000f	6a 00		 push	 0
  00011	8b 45 0c	 mov	 eax, DWORD PTR _append$[ebp]
  00014	50		 push	 eax
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _pathname$[ebp]
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 _zipOpen3@16

; 951  : }

  0001e	3b ec		 cmp	 ebp, esp
  00020	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
_zipOpen@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _zipOpen64@8
_TEXT	SEGMENT
_pathname$ = 8						; size = 4
_append$ = 12						; size = 4
_zipOpen64@8 PROC					; COMDAT

; 954  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 955  :     return zipOpen3(pathname,append,NULL,NULL);

  0000d	6a 00		 push	 0
  0000f	6a 00		 push	 0
  00011	8b 45 0c	 mov	 eax, DWORD PTR _append$[ebp]
  00014	50		 push	 eax
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _pathname$[ebp]
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 _zipOpen3@16

; 956  : }

  0001e	3b ec		 cmp	 ebp, esp
  00020	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
_zipOpen64@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _Write_LocalFileHeader
_TEXT	SEGMENT
_UncompressedSize$1 = -36				; size = 8
_CompressedSize$2 = -28					; size = 8
_DataSize$3 = -20					; size = 2
_HeaderID$4 = -16					; size = 2
_size_extrafield$ = -12					; size = 4
_size_filename$ = -8					; size = 4
_err$ = -4						; size = 4
_zi$ = 8						; size = 4
_filename$ = 12						; size = 4
_size_extrafield_local$ = 16				; size = 4
_extrafield_local$ = 20					; size = 4
_Write_LocalFileHeader PROC				; COMDAT

; 959  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0000f	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00012	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00015	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00018	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0001b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00021	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00024	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00027	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0002c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 960  :   /* write the local header */
; 961  :   int err;
; 962  :   uInt size_filename = (uInt)strlen(filename);

  00031	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 _strlen
  0003a	83 c4 04	 add	 esp, 4
  0003d	89 45 f8	 mov	 DWORD PTR _size_filename$[ebp], eax

; 963  :   uInt size_extrafield = size_extrafield_local;

  00040	8b 4d 10	 mov	 ecx, DWORD PTR _size_extrafield_local$[ebp]
  00043	89 4d f4	 mov	 DWORD PTR _size_extrafield$[ebp], ecx

; 964  : 
; 965  :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)LOCALHEADERMAGIC, 4);

  00046	6a 04		 push	 4
  00048	6a 00		 push	 0
  0004a	68 50 4b 03 04	 push	 67324752		; 04034b50H
  0004f	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00052	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00055	50		 push	 eax
  00056	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 _zip64local_putValue
  0005f	83 c4 14	 add	 esp, 20			; 00000014H
  00062	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax

; 966  : 
; 967  :   if (err==ZIP_OK)

  00065	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  00069	75 46		 jne	 SHORT $LN2@Write_Loca

; 968  :   {
; 969  :     if(zi->ci.zip64)

  0006b	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  0006e	83 ba b0 00 01
	00 00		 cmp	 DWORD PTR [edx+65712], 0
  00075	74 1e		 je	 SHORT $LN3@Write_Loca

; 970  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)45,2);/* version needed to extract */

  00077	6a 02		 push	 2
  00079	6a 00		 push	 0
  0007b	6a 2d		 push	 45			; 0000002dH
  0007d	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00080	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00083	51		 push	 ecx
  00084	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00087	52		 push	 edx
  00088	e8 00 00 00 00	 call	 _zip64local_putValue
  0008d	83 c4 14	 add	 esp, 20			; 00000014H
  00090	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
  00093	eb 1c		 jmp	 SHORT $LN2@Write_Loca
$LN3@Write_Loca:

; 971  :     else
; 972  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)20,2);/* version needed to extract */

  00095	6a 02		 push	 2
  00097	6a 00		 push	 0
  00099	6a 14		 push	 20			; 00000014H
  0009b	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  0009e	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  000a1	51		 push	 ecx
  000a2	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  000a5	52		 push	 edx
  000a6	e8 00 00 00 00	 call	 _zip64local_putValue
  000ab	83 c4 14	 add	 esp, 20			; 00000014H
  000ae	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN2@Write_Loca:

; 973  :   }
; 974  : 
; 975  :   if (err==ZIP_OK)

  000b1	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  000b5	75 25		 jne	 SHORT $LN5@Write_Loca

; 976  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.flag,2);

  000b7	6a 02		 push	 2
  000b9	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  000bc	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  000c2	33 d2		 xor	 edx, edx
  000c4	52		 push	 edx
  000c5	51		 push	 ecx
  000c6	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  000c9	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  000cc	51		 push	 ecx
  000cd	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  000d0	52		 push	 edx
  000d1	e8 00 00 00 00	 call	 _zip64local_putValue
  000d6	83 c4 14	 add	 esp, 20			; 00000014H
  000d9	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN5@Write_Loca:

; 977  : 
; 978  :   if (err==ZIP_OK)

  000dc	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  000e0	75 25		 jne	 SHORT $LN6@Write_Loca

; 979  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.method,2);

  000e2	6a 02		 push	 2
  000e4	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  000e7	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  000ed	33 d2		 xor	 edx, edx
  000ef	52		 push	 edx
  000f0	51		 push	 ecx
  000f1	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  000f4	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  000f7	51		 push	 ecx
  000f8	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  000fb	52		 push	 edx
  000fc	e8 00 00 00 00	 call	 _zip64local_putValue
  00101	83 c4 14	 add	 esp, 20			; 00000014H
  00104	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN6@Write_Loca:

; 980  : 
; 981  :   if (err==ZIP_OK)

  00107	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  0010b	75 25		 jne	 SHORT $LN7@Write_Loca

; 982  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.dosDate,4);

  0010d	6a 04		 push	 4
  0010f	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00112	8b 88 a4 00 01
	00		 mov	 ecx, DWORD PTR [eax+65700]
  00118	33 d2		 xor	 edx, edx
  0011a	52		 push	 edx
  0011b	51		 push	 ecx
  0011c	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  0011f	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00122	51		 push	 ecx
  00123	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00126	52		 push	 edx
  00127	e8 00 00 00 00	 call	 _zip64local_putValue
  0012c	83 c4 14	 add	 esp, 20			; 00000014H
  0012f	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN7@Write_Loca:

; 983  : 
; 984  :   // CRC / Compressed size / Uncompressed size will be filled in later and rewritten later
; 985  :   if (err==ZIP_OK)

  00132	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  00136	75 1c		 jne	 SHORT $LN8@Write_Loca

; 986  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* crc 32, unknown */

  00138	6a 04		 push	 4
  0013a	6a 00		 push	 0
  0013c	6a 00		 push	 0
  0013e	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00141	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00144	51		 push	 ecx
  00145	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00148	52		 push	 edx
  00149	e8 00 00 00 00	 call	 _zip64local_putValue
  0014e	83 c4 14	 add	 esp, 20			; 00000014H
  00151	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN8@Write_Loca:

; 987  :   if (err==ZIP_OK)

  00154	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  00158	75 46		 jne	 SHORT $LN9@Write_Loca

; 988  :   {
; 989  :     if(zi->ci.zip64)

  0015a	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  0015d	83 b8 b0 00 01
	00 00		 cmp	 DWORD PTR [eax+65712], 0
  00164	74 1e		 je	 SHORT $LN10@Write_Loca

; 990  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xFFFFFFFF,4); /* compressed size, unknown */

  00166	6a 04		 push	 4
  00168	6a 00		 push	 0
  0016a	6a ff		 push	 -1
  0016c	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  0016f	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00172	52		 push	 edx
  00173	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00176	50		 push	 eax
  00177	e8 00 00 00 00	 call	 _zip64local_putValue
  0017c	83 c4 14	 add	 esp, 20			; 00000014H
  0017f	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
  00182	eb 1c		 jmp	 SHORT $LN9@Write_Loca
$LN10@Write_Loca:

; 991  :     else
; 992  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* compressed size, unknown */

  00184	6a 04		 push	 4
  00186	6a 00		 push	 0
  00188	6a 00		 push	 0
  0018a	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  0018d	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00190	52		 push	 edx
  00191	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00194	50		 push	 eax
  00195	e8 00 00 00 00	 call	 _zip64local_putValue
  0019a	83 c4 14	 add	 esp, 20			; 00000014H
  0019d	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN9@Write_Loca:

; 993  :   }
; 994  :   if (err==ZIP_OK)

  001a0	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  001a4	75 46		 jne	 SHORT $LN12@Write_Loca

; 995  :   {
; 996  :     if(zi->ci.zip64)

  001a6	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  001a9	83 b9 b0 00 01
	00 00		 cmp	 DWORD PTR [ecx+65712], 0
  001b0	74 1e		 je	 SHORT $LN13@Write_Loca

; 997  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xFFFFFFFF,4); /* uncompressed size, unknown */

  001b2	6a 04		 push	 4
  001b4	6a 00		 push	 0
  001b6	6a ff		 push	 -1
  001b8	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  001bb	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  001be	50		 push	 eax
  001bf	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  001c2	51		 push	 ecx
  001c3	e8 00 00 00 00	 call	 _zip64local_putValue
  001c8	83 c4 14	 add	 esp, 20			; 00000014H
  001cb	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
  001ce	eb 1c		 jmp	 SHORT $LN12@Write_Loca
$LN13@Write_Loca:

; 998  :     else
; 999  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* uncompressed size, unknown */

  001d0	6a 04		 push	 4
  001d2	6a 00		 push	 0
  001d4	6a 00		 push	 0
  001d6	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  001d9	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  001dc	50		 push	 eax
  001dd	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  001e0	51		 push	 ecx
  001e1	e8 00 00 00 00	 call	 _zip64local_putValue
  001e6	83 c4 14	 add	 esp, 20			; 00000014H
  001e9	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN12@Write_Loca:

; 1000 :   }
; 1001 : 
; 1002 :   if (err==ZIP_OK)

  001ec	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  001f0	75 1f		 jne	 SHORT $LN15@Write_Loca

; 1003 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_filename,2);

  001f2	6a 02		 push	 2
  001f4	8b 55 f8	 mov	 edx, DWORD PTR _size_filename$[ebp]
  001f7	33 c0		 xor	 eax, eax
  001f9	50		 push	 eax
  001fa	52		 push	 edx
  001fb	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  001fe	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00201	52		 push	 edx
  00202	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00205	50		 push	 eax
  00206	e8 00 00 00 00	 call	 _zip64local_putValue
  0020b	83 c4 14	 add	 esp, 20			; 00000014H
  0020e	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN15@Write_Loca:

; 1004 : 
; 1005 :   if(zi->ci.zip64)

  00211	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  00214	83 b9 b0 00 01
	00 00		 cmp	 DWORD PTR [ecx+65712], 0
  0021b	74 09		 je	 SHORT $LN16@Write_Loca

; 1006 :   {
; 1007 :     size_extrafield += 20;

  0021d	8b 55 f4	 mov	 edx, DWORD PTR _size_extrafield$[ebp]
  00220	83 c2 14	 add	 edx, 20			; 00000014H
  00223	89 55 f4	 mov	 DWORD PTR _size_extrafield$[ebp], edx
$LN16@Write_Loca:

; 1008 :   }
; 1009 : 
; 1010 :   if (err==ZIP_OK)

  00226	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  0022a	75 1f		 jne	 SHORT $LN17@Write_Loca

; 1011 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_extrafield,2);

  0022c	6a 02		 push	 2
  0022e	8b 45 f4	 mov	 eax, DWORD PTR _size_extrafield$[ebp]
  00231	33 c9		 xor	 ecx, ecx
  00233	51		 push	 ecx
  00234	50		 push	 eax
  00235	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00238	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0023b	50		 push	 eax
  0023c	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  0023f	51		 push	 ecx
  00240	e8 00 00 00 00	 call	 _zip64local_putValue
  00245	83 c4 14	 add	 esp, 20			; 00000014H
  00248	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN17@Write_Loca:

; 1012 : 
; 1013 :   if ((err==ZIP_OK) && (size_filename > 0))

  0024b	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  0024f	75 3f		 jne	 SHORT $LN18@Write_Loca
  00251	83 7d f8 00	 cmp	 DWORD PTR _size_filename$[ebp], 0
  00255	76 39		 jbe	 SHORT $LN18@Write_Loca

; 1014 :   {
; 1015 :     if (ZWRITE64(zi->z_filefunc,zi->filestream,filename,size_filename)!=size_filename)

  00257	0f ae e8	 lfence
  0025a	8b f4		 mov	 esi, esp
  0025c	8b 55 f8	 mov	 edx, DWORD PTR _size_filename$[ebp]
  0025f	52		 push	 edx
  00260	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  00263	50		 push	 eax
  00264	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  00267	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0026a	52		 push	 edx
  0026b	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  0026e	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00271	51		 push	 ecx
  00272	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00275	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00278	ff d0		 call	 eax
  0027a	83 c4 10	 add	 esp, 16			; 00000010H
  0027d	3b f4		 cmp	 esi, esp
  0027f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00284	3b 45 f8	 cmp	 eax, DWORD PTR _size_filename$[ebp]
  00287	74 07		 je	 SHORT $LN18@Write_Loca

; 1016 :       err = ZIP_ERRNO;

  00289	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN18@Write_Loca:

; 1017 :   }
; 1018 : 
; 1019 :   if ((err==ZIP_OK) && (size_extrafield_local > 0))

  00290	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  00294	75 3f		 jne	 SHORT $LN20@Write_Loca
  00296	83 7d 10 00	 cmp	 DWORD PTR _size_extrafield_local$[ebp], 0
  0029a	76 39		 jbe	 SHORT $LN20@Write_Loca

; 1020 :   {
; 1021 :     if (ZWRITE64(zi->z_filefunc, zi->filestream, extrafield_local, size_extrafield_local) != size_extrafield_local)

  0029c	0f ae e8	 lfence
  0029f	8b f4		 mov	 esi, esp
  002a1	8b 4d 10	 mov	 ecx, DWORD PTR _size_extrafield_local$[ebp]
  002a4	51		 push	 ecx
  002a5	8b 55 14	 mov	 edx, DWORD PTR _extrafield_local$[ebp]
  002a8	52		 push	 edx
  002a9	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  002ac	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  002af	51		 push	 ecx
  002b0	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  002b3	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  002b6	50		 push	 eax
  002b7	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  002ba	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  002bd	ff d2		 call	 edx
  002bf	83 c4 10	 add	 esp, 16			; 00000010H
  002c2	3b f4		 cmp	 esi, esp
  002c4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002c9	3b 45 10	 cmp	 eax, DWORD PTR _size_extrafield_local$[ebp]
  002cc	74 07		 je	 SHORT $LN20@Write_Loca

; 1022 :       err = ZIP_ERRNO;

  002ce	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN20@Write_Loca:

; 1023 :   }
; 1024 : 
; 1025 : 
; 1026 :   if ((err==ZIP_OK) && (zi->ci.zip64))

  002d5	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  002d9	0f 85 d2 00 00
	00		 jne	 $LN22@Write_Loca
  002df	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  002e2	83 b8 b0 00 01
	00 00		 cmp	 DWORD PTR [eax+65712], 0
  002e9	0f 84 c2 00 00
	00		 je	 $LN22@Write_Loca

; 1027 :   {
; 1028 :       // write the Zip64 extended info
; 1029 :       short HeaderID = 1;

  002ef	b9 01 00 00 00	 mov	 ecx, 1
  002f4	66 89 4d f0	 mov	 WORD PTR _HeaderID$4[ebp], cx

; 1030 :       short DataSize = 16;

  002f8	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  002fd	66 89 55 ec	 mov	 WORD PTR _DataSize$3[ebp], dx

; 1031 :       ZPOS64_T CompressedSize = 0;

  00301	0f 57 c0	 xorps	 xmm0, xmm0
  00304	66 0f 13 45 e4	 movlpd	 QWORD PTR _CompressedSize$2[ebp], xmm0

; 1032 :       ZPOS64_T UncompressedSize = 0;

  00309	0f 57 c0	 xorps	 xmm0, xmm0
  0030c	66 0f 13 45 dc	 movlpd	 QWORD PTR _UncompressedSize$1[ebp], xmm0

; 1033 : 
; 1034 :       // Remember position of Zip64 extended info for the local file header. (needed when we update size after done with file)
; 1035 :       zi->ci.pos_zip64extrainfo = ZTELL64(zi->z_filefunc,zi->filestream);

  00311	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00314	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00317	51		 push	 ecx
  00318	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  0031b	52		 push	 edx
  0031c	e8 00 00 00 00	 call	 _call_ztell64
  00321	83 c4 08	 add	 esp, 8
  00324	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  00327	89 81 b8 00 01
	00		 mov	 DWORD PTR [ecx+65720], eax
  0032d	89 91 bc 00 01
	00		 mov	 DWORD PTR [ecx+65724], edx

; 1036 : 
; 1037 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (short)HeaderID,2);

  00333	6a 02		 push	 2
  00335	0f bf 45 f0	 movsx	 eax, WORD PTR _HeaderID$4[ebp]
  00339	99		 cdq
  0033a	52		 push	 edx
  0033b	50		 push	 eax
  0033c	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  0033f	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00342	50		 push	 eax
  00343	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  00346	51		 push	 ecx
  00347	e8 00 00 00 00	 call	 _zip64local_putValue
  0034c	83 c4 14	 add	 esp, 20			; 00000014H
  0034f	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax

; 1038 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (short)DataSize,2);

  00352	6a 02		 push	 2
  00354	0f bf 45 ec	 movsx	 eax, WORD PTR _DataSize$3[ebp]
  00358	99		 cdq
  00359	52		 push	 edx
  0035a	50		 push	 eax
  0035b	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  0035e	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00361	50		 push	 eax
  00362	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  00365	51		 push	 ecx
  00366	e8 00 00 00 00	 call	 _zip64local_putValue
  0036b	83 c4 14	 add	 esp, 20			; 00000014H
  0036e	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax

; 1039 : 
; 1040 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (ZPOS64_T)UncompressedSize,8);

  00371	6a 08		 push	 8
  00373	8b 55 e0	 mov	 edx, DWORD PTR _UncompressedSize$1[ebp+4]
  00376	52		 push	 edx
  00377	8b 45 dc	 mov	 eax, DWORD PTR _UncompressedSize$1[ebp]
  0037a	50		 push	 eax
  0037b	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  0037e	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00381	52		 push	 edx
  00382	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00385	50		 push	 eax
  00386	e8 00 00 00 00	 call	 _zip64local_putValue
  0038b	83 c4 14	 add	 esp, 20			; 00000014H
  0038e	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax

; 1041 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (ZPOS64_T)CompressedSize,8);

  00391	6a 08		 push	 8
  00393	8b 4d e8	 mov	 ecx, DWORD PTR _CompressedSize$2[ebp+4]
  00396	51		 push	 ecx
  00397	8b 55 e4	 mov	 edx, DWORD PTR _CompressedSize$2[ebp]
  0039a	52		 push	 edx
  0039b	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  0039e	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  003a1	51		 push	 ecx
  003a2	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  003a5	52		 push	 edx
  003a6	e8 00 00 00 00	 call	 _zip64local_putValue
  003ab	83 c4 14	 add	 esp, 20			; 00000014H
  003ae	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN22@Write_Loca:

; 1042 :   }
; 1043 : 
; 1044 :   return err;

  003b1	8b 45 fc	 mov	 eax, DWORD PTR _err$[ebp]

; 1045 : }

  003b4	5e		 pop	 esi
  003b5	83 c4 24	 add	 esp, 36			; 00000024H
  003b8	3b ec		 cmp	 ebp, esp
  003ba	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003bf	8b e5		 mov	 esp, ebp
  003c1	5d		 pop	 ebp
  003c2	c3		 ret	 0
_Write_LocalFileHeader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _zipOpenNewFileInZip4_64@76
_TEXT	SEGMENT
tv534 = -48						; size = 4
_sizeHead$1 = -44					; size = 4
_bufHead$2 = -36					; size = 12
_err$ = -20						; size = 4
_i$ = -16						; size = 4
_size_comment$ = -12					; size = 4
_size_filename$ = -8					; size = 4
_zi$ = -4						; size = 4
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_raw$ = 48						; size = 4
_windowBits$ = 52					; size = 4
_memLevel$ = 56						; size = 4
_strategy$ = 60						; size = 4
_password$ = 64						; size = 4
_crcForCrypting$ = 68					; size = 4
_versionMadeBy$ = 72					; size = 4
_flagBase$ = 76						; size = 4
_zip64$ = 80						; size = 4
_zipOpenNewFileInZip4_64@76 PROC			; COMDAT

; 1062 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0000b	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1063 :     zip64_internal* zi;
; 1064 :     uInt size_filename;
; 1065 :     uInt size_comment;
; 1066 :     uInt i;
; 1067 :     int err = ZIP_OK;

  00021	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 1068 : 
; 1069 : #    ifdef NOCRYPT
; 1070 :     (crcForCrypting);
; 1071 :     if (password != NULL)
; 1072 :         return ZIP_PARAMERROR;
; 1073 : #    endif
; 1074 : 
; 1075 :     if (file == NULL)

  00028	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  0002c	75 0a		 jne	 SHORT $LN11@zipOpenNew

; 1076 :         return ZIP_PARAMERROR;

  0002e	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00033	e9 33 07 00 00	 jmp	 $LN1@zipOpenNew
$LN11@zipOpenNew:

; 1077 : 
; 1078 : #ifdef HAVE_BZIP2
; 1079 :     if ((method!=0) && (method!=Z_DEFLATED) && (method!=Z_BZIP2ED))
; 1080 :       return ZIP_PARAMERROR;
; 1081 : #else
; 1082 :     if ((method!=0) && (method!=Z_DEFLATED))

  00038	83 7d 28 00	 cmp	 DWORD PTR _method$[ebp], 0
  0003c	74 10		 je	 SHORT $LN12@zipOpenNew
  0003e	83 7d 28 08	 cmp	 DWORD PTR _method$[ebp], 8
  00042	74 0a		 je	 SHORT $LN12@zipOpenNew

; 1083 :       return ZIP_PARAMERROR;

  00044	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00049	e9 1d 07 00 00	 jmp	 $LN1@zipOpenNew
$LN12@zipOpenNew:

; 1084 : #endif
; 1085 : 
; 1086 :     zi = (zip64_internal*)file;

  0004e	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00051	89 45 fc	 mov	 DWORD PTR _zi$[ebp], eax

; 1087 : 
; 1088 :     if (zi->in_opened_file_inzip == 1)

  00054	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  00057	83 79 38 01	 cmp	 DWORD PTR [ecx+56], 1
  0005b	75 1a		 jne	 SHORT $LN13@zipOpenNew

; 1089 :     {
; 1090 :         err = zipCloseFileInZip (file);

  0005d	8b 55 08	 mov	 edx, DWORD PTR _file$[ebp]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 _zipCloseFileInZip@4
  00066	89 45 ec	 mov	 DWORD PTR _err$[ebp], eax

; 1091 :         if (err != ZIP_OK)

  00069	83 7d ec 00	 cmp	 DWORD PTR _err$[ebp], 0
  0006d	74 08		 je	 SHORT $LN13@zipOpenNew

; 1092 :             return err;

  0006f	8b 45 ec	 mov	 eax, DWORD PTR _err$[ebp]
  00072	e9 f4 06 00 00	 jmp	 $LN1@zipOpenNew
$LN13@zipOpenNew:

; 1093 :     }
; 1094 : 
; 1095 :     if (filename==NULL)

  00077	83 7d 0c 00	 cmp	 DWORD PTR _filename$[ebp], 0
  0007b	75 07		 jne	 SHORT $LN15@zipOpenNew

; 1096 :         filename="-";

  0007d	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR _filename$[ebp], OFFSET ??_C@_01JOAMLHOP@?9@
$LN15@zipOpenNew:

; 1097 : 
; 1098 :     if (comment==NULL)

  00084	83 7d 24 00	 cmp	 DWORD PTR _comment$[ebp], 0
  00088	75 09		 jne	 SHORT $LN16@zipOpenNew

; 1099 :         size_comment = 0;

  0008a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _size_comment$[ebp], 0
  00091	eb 0f		 jmp	 SHORT $LN17@zipOpenNew
$LN16@zipOpenNew:

; 1100 :     else
; 1101 :         size_comment = (uInt)strlen(comment);

  00093	8b 45 24	 mov	 eax, DWORD PTR _comment$[ebp]
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 _strlen
  0009c	83 c4 04	 add	 esp, 4
  0009f	89 45 f4	 mov	 DWORD PTR _size_comment$[ebp], eax
$LN17@zipOpenNew:

; 1102 : 
; 1103 :     size_filename = (uInt)strlen(filename);

  000a2	8b 4d 0c	 mov	 ecx, DWORD PTR _filename$[ebp]
  000a5	51		 push	 ecx
  000a6	e8 00 00 00 00	 call	 _strlen
  000ab	83 c4 04	 add	 esp, 4
  000ae	89 45 f8	 mov	 DWORD PTR _size_filename$[ebp], eax

; 1104 : 
; 1105 :     if (zipfi == NULL)

  000b1	83 7d 10 00	 cmp	 DWORD PTR _zipfi$[ebp], 0
  000b5	75 0f		 jne	 SHORT $LN18@zipOpenNew

; 1106 :         zi->ci.dosDate = 0;

  000b7	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  000ba	c7 82 a4 00 01
	00 00 00 00 00	 mov	 DWORD PTR [edx+65700], 0
  000c4	eb 2f		 jmp	 SHORT $LN19@zipOpenNew
$LN18@zipOpenNew:

; 1107 :     else
; 1108 :     {
; 1109 :         if (zipfi->dosDate != 0)

  000c6	8b 45 10	 mov	 eax, DWORD PTR _zipfi$[ebp]
  000c9	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  000cd	74 11		 je	 SHORT $LN20@zipOpenNew

; 1110 :             zi->ci.dosDate = zipfi->dosDate;

  000cf	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  000d2	8b 55 10	 mov	 edx, DWORD PTR _zipfi$[ebp]
  000d5	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  000d8	89 81 a4 00 01
	00		 mov	 DWORD PTR [ecx+65700], eax
  000de	eb 15		 jmp	 SHORT $LN19@zipOpenNew
$LN20@zipOpenNew:

; 1111 :         else
; 1112 :           zi->ci.dosDate = zip64local_TmzDateToDosDate(&zipfi->tmz_date);

  000e0	8b 4d 10	 mov	 ecx, DWORD PTR _zipfi$[ebp]
  000e3	51		 push	 ecx
  000e4	e8 00 00 00 00	 call	 _zip64local_TmzDateToDosDate
  000e9	83 c4 04	 add	 esp, 4
  000ec	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  000ef	89 82 a4 00 01
	00		 mov	 DWORD PTR [edx+65700], eax
$LN19@zipOpenNew:

; 1113 :     }
; 1114 : 
; 1115 :     zi->ci.flag = flagBase;

  000f5	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  000f8	8b 4d 4c	 mov	 ecx, DWORD PTR _flagBase$[ebp]
  000fb	89 88 98 00 00
	00		 mov	 DWORD PTR [eax+152], ecx

; 1116 :     if ((level==8) || (level==9))

  00101	83 7d 2c 08	 cmp	 DWORD PTR _level$[ebp], 8
  00105	74 06		 je	 SHORT $LN23@zipOpenNew
  00107	83 7d 2c 09	 cmp	 DWORD PTR _level$[ebp], 9
  0010b	75 15		 jne	 SHORT $LN22@zipOpenNew
$LN23@zipOpenNew:

; 1117 :       zi->ci.flag |= 2;

  0010d	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  00110	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  00116	83 c8 02	 or	 eax, 2
  00119	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  0011c	89 81 98 00 00
	00		 mov	 DWORD PTR [ecx+152], eax
$LN22@zipOpenNew:

; 1118 :     if (level==2)

  00122	83 7d 2c 02	 cmp	 DWORD PTR _level$[ebp], 2
  00126	75 15		 jne	 SHORT $LN24@zipOpenNew

; 1119 :       zi->ci.flag |= 4;

  00128	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  0012b	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  00131	83 c8 04	 or	 eax, 4
  00134	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  00137	89 81 98 00 00
	00		 mov	 DWORD PTR [ecx+152], eax
$LN24@zipOpenNew:

; 1120 :     if (level==1)

  0013d	83 7d 2c 01	 cmp	 DWORD PTR _level$[ebp], 1
  00141	75 15		 jne	 SHORT $LN25@zipOpenNew

; 1121 :       zi->ci.flag |= 6;

  00143	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  00146	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  0014c	83 c8 06	 or	 eax, 6
  0014f	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  00152	89 81 98 00 00
	00		 mov	 DWORD PTR [ecx+152], eax
$LN25@zipOpenNew:

; 1122 :     if (password != NULL)

  00158	83 7d 40 00	 cmp	 DWORD PTR _password$[ebp], 0
  0015c	74 15		 je	 SHORT $LN26@zipOpenNew

; 1123 :       zi->ci.flag |= 1;

  0015e	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  00161	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  00167	83 c8 01	 or	 eax, 1
  0016a	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  0016d	89 81 98 00 00
	00		 mov	 DWORD PTR [ecx+152], eax
$LN26@zipOpenNew:

; 1124 : 
; 1125 :     zi->ci.crc32 = 0;

  00173	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  00176	c7 82 a8 00 01
	00 00 00 00 00	 mov	 DWORD PTR [edx+65704], 0

; 1126 :     zi->ci.method = method;

  00180	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  00183	8b 4d 28	 mov	 ecx, DWORD PTR _method$[ebp]
  00186	89 88 9c 00 00
	00		 mov	 DWORD PTR [eax+156], ecx

; 1127 :     zi->ci.encrypt = 0;

  0018c	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  0018f	c7 82 ac 00 01
	00 00 00 00 00	 mov	 DWORD PTR [edx+65708], 0

; 1128 :     zi->ci.stream_initialised = 0;

  00199	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  0019c	c7 40 78 00 00
	00 00		 mov	 DWORD PTR [eax+120], 0

; 1129 :     zi->ci.pos_in_buffered_data = 0;

  001a3	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  001a6	c7 41 7c 00 00
	00 00		 mov	 DWORD PTR [ecx+124], 0

; 1130 :     zi->ci.raw = raw;

  001ad	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  001b0	8b 45 30	 mov	 eax, DWORD PTR _raw$[ebp]
  001b3	89 82 a0 00 00
	00		 mov	 DWORD PTR [edx+160], eax

; 1131 :     zi->ci.pos_local_header = ZTELL64(zi->z_filefunc,zi->filestream);

  001b9	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  001bc	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  001bf	52		 push	 edx
  001c0	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  001c3	50		 push	 eax
  001c4	e8 00 00 00 00	 call	 _call_ztell64
  001c9	83 c4 08	 add	 esp, 8
  001cc	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  001cf	89 81 80 00 00
	00		 mov	 DWORD PTR [ecx+128], eax
  001d5	89 91 84 00 00
	00		 mov	 DWORD PTR [ecx+132], edx

; 1132 : 
; 1133 :     zi->ci.size_centralheader = SIZECENTRALHEADER + size_filename + size_extrafield_global + size_comment;

  001db	8b 55 20	 mov	 edx, DWORD PTR _size_extrafield_global$[ebp]
  001de	8b 45 f8	 mov	 eax, DWORD PTR _size_filename$[ebp]
  001e1	8d 4c 10 2e	 lea	 ecx, DWORD PTR [eax+edx+46]
  001e5	03 4d f4	 add	 ecx, DWORD PTR _size_comment$[ebp]
  001e8	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  001eb	89 8a 90 00 00
	00		 mov	 DWORD PTR [edx+144], ecx

; 1134 :     zi->ci.size_centralExtraFree = 32; // Extra space we have reserved in case we need to add ZIP64 extra info data

  001f1	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  001f4	c7 80 94 00 00
	00 20 00 00 00	 mov	 DWORD PTR [eax+148], 32	; 00000020H

; 1135 : 
; 1136 :     zi->ci.central_header = (char*)ALLOC((uInt)zi->ci.size_centralheader + zi->ci.size_centralExtraFree);

  001fe	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  00201	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  00207	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  0020a	03 90 94 00 00
	00		 add	 edx, DWORD PTR [eax+148]
  00210	52		 push	 edx
  00211	e8 00 00 00 00	 call	 _malloc
  00216	83 c4 04	 add	 esp, 4
  00219	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  0021c	89 81 88 00 00
	00		 mov	 DWORD PTR [ecx+136], eax

; 1137 : 
; 1138 :     zi->ci.size_centralExtra = size_extrafield_global;

  00222	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  00225	8b 45 20	 mov	 eax, DWORD PTR _size_extrafield_global$[ebp]
  00228	89 82 8c 00 00
	00		 mov	 DWORD PTR [edx+140], eax

; 1139 :     zip64local_putValue_inmemory(zi->ci.central_header,(uLong)CENTRALHEADERMAGIC,4);

  0022e	6a 04		 push	 4
  00230	6a 00		 push	 0
  00232	68 50 4b 01 02	 push	 33639248		; 02014b50H
  00237	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  0023a	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  00240	52		 push	 edx
  00241	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00246	83 c4 10	 add	 esp, 16			; 00000010H

; 1140 :     /* version info */
; 1141 :     zip64local_putValue_inmemory(zi->ci.central_header+4,(uLong)versionMadeBy,2);

  00249	6a 02		 push	 2
  0024b	8b 45 48	 mov	 eax, DWORD PTR _versionMadeBy$[ebp]
  0024e	33 c9		 xor	 ecx, ecx
  00250	51		 push	 ecx
  00251	50		 push	 eax
  00252	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  00255	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  0025b	83 c0 04	 add	 eax, 4
  0025e	50		 push	 eax
  0025f	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00264	83 c4 10	 add	 esp, 16			; 00000010H

; 1142 :     zip64local_putValue_inmemory(zi->ci.central_header+6,(uLong)20,2);

  00267	6a 02		 push	 2
  00269	6a 00		 push	 0
  0026b	6a 14		 push	 20			; 00000014H
  0026d	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  00270	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  00276	83 c2 06	 add	 edx, 6
  00279	52		 push	 edx
  0027a	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  0027f	83 c4 10	 add	 esp, 16			; 00000010H

; 1143 :     zip64local_putValue_inmemory(zi->ci.central_header+8,(uLong)zi->ci.flag,2);

  00282	6a 02		 push	 2
  00284	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  00287	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0028d	33 d2		 xor	 edx, edx
  0028f	52		 push	 edx
  00290	51		 push	 ecx
  00291	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  00294	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0029a	83 c1 08	 add	 ecx, 8
  0029d	51		 push	 ecx
  0029e	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  002a3	83 c4 10	 add	 esp, 16			; 00000010H

; 1144 :     zip64local_putValue_inmemory(zi->ci.central_header+10,(uLong)zi->ci.method,2);

  002a6	6a 02		 push	 2
  002a8	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  002ab	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  002b1	33 c9		 xor	 ecx, ecx
  002b3	51		 push	 ecx
  002b4	50		 push	 eax
  002b5	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  002b8	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  002be	83 c0 0a	 add	 eax, 10			; 0000000aH
  002c1	50		 push	 eax
  002c2	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  002c7	83 c4 10	 add	 esp, 16			; 00000010H

; 1145 :     zip64local_putValue_inmemory(zi->ci.central_header+12,(uLong)zi->ci.dosDate,4);

  002ca	6a 04		 push	 4
  002cc	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  002cf	8b 91 a4 00 01
	00		 mov	 edx, DWORD PTR [ecx+65700]
  002d5	33 c0		 xor	 eax, eax
  002d7	50		 push	 eax
  002d8	52		 push	 edx
  002d9	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  002dc	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  002e2	83 c2 0c	 add	 edx, 12			; 0000000cH
  002e5	52		 push	 edx
  002e6	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  002eb	83 c4 10	 add	 esp, 16			; 00000010H

; 1146 :     zip64local_putValue_inmemory(zi->ci.central_header+16,(uLong)0,4); /*crc*/

  002ee	6a 04		 push	 4
  002f0	6a 00		 push	 0
  002f2	6a 00		 push	 0
  002f4	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  002f7	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  002fd	83 c1 10	 add	 ecx, 16			; 00000010H
  00300	51		 push	 ecx
  00301	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00306	83 c4 10	 add	 esp, 16			; 00000010H

; 1147 :     zip64local_putValue_inmemory(zi->ci.central_header+20,(uLong)0,4); /*compr size*/

  00309	6a 04		 push	 4
  0030b	6a 00		 push	 0
  0030d	6a 00		 push	 0
  0030f	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  00312	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  00318	83 c0 14	 add	 eax, 20			; 00000014H
  0031b	50		 push	 eax
  0031c	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00321	83 c4 10	 add	 esp, 16			; 00000010H

; 1148 :     zip64local_putValue_inmemory(zi->ci.central_header+24,(uLong)0,4); /*uncompr size*/

  00324	6a 04		 push	 4
  00326	6a 00		 push	 0
  00328	6a 00		 push	 0
  0032a	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  0032d	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  00333	83 c2 18	 add	 edx, 24			; 00000018H
  00336	52		 push	 edx
  00337	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  0033c	83 c4 10	 add	 esp, 16			; 00000010H

; 1149 :     zip64local_putValue_inmemory(zi->ci.central_header+28,(uLong)size_filename,2);

  0033f	6a 02		 push	 2
  00341	8b 45 f8	 mov	 eax, DWORD PTR _size_filename$[ebp]
  00344	33 c9		 xor	 ecx, ecx
  00346	51		 push	 ecx
  00347	50		 push	 eax
  00348	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  0034b	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  00351	83 c0 1c	 add	 eax, 28			; 0000001cH
  00354	50		 push	 eax
  00355	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  0035a	83 c4 10	 add	 esp, 16			; 00000010H

; 1150 :     zip64local_putValue_inmemory(zi->ci.central_header+30,(uLong)size_extrafield_global,2);

  0035d	6a 02		 push	 2
  0035f	8b 4d 20	 mov	 ecx, DWORD PTR _size_extrafield_global$[ebp]
  00362	33 d2		 xor	 edx, edx
  00364	52		 push	 edx
  00365	51		 push	 ecx
  00366	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  00369	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0036f	83 c1 1e	 add	 ecx, 30			; 0000001eH
  00372	51		 push	 ecx
  00373	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00378	83 c4 10	 add	 esp, 16			; 00000010H

; 1151 :     zip64local_putValue_inmemory(zi->ci.central_header+32,(uLong)size_comment,2);

  0037b	6a 02		 push	 2
  0037d	8b 55 f4	 mov	 edx, DWORD PTR _size_comment$[ebp]
  00380	33 c0		 xor	 eax, eax
  00382	50		 push	 eax
  00383	52		 push	 edx
  00384	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  00387	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  0038d	83 c2 20	 add	 edx, 32			; 00000020H
  00390	52		 push	 edx
  00391	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00396	83 c4 10	 add	 esp, 16			; 00000010H

; 1152 :     zip64local_putValue_inmemory(zi->ci.central_header+34,(uLong)0,2); /*disk nm start*/

  00399	6a 02		 push	 2
  0039b	6a 00		 push	 0
  0039d	6a 00		 push	 0
  0039f	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  003a2	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  003a8	83 c1 22	 add	 ecx, 34			; 00000022H
  003ab	51		 push	 ecx
  003ac	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  003b1	83 c4 10	 add	 esp, 16			; 00000010H

; 1153 : 
; 1154 :     if (zipfi==NULL)

  003b4	83 7d 10 00	 cmp	 DWORD PTR _zipfi$[ebp], 0
  003b8	75 1d		 jne	 SHORT $LN27@zipOpenNew

; 1155 :         zip64local_putValue_inmemory(zi->ci.central_header+36,(uLong)0,2);

  003ba	6a 02		 push	 2
  003bc	6a 00		 push	 0
  003be	6a 00		 push	 0
  003c0	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  003c3	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  003c9	83 c0 24	 add	 eax, 36			; 00000024H
  003cc	50		 push	 eax
  003cd	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  003d2	83 c4 10	 add	 esp, 16			; 00000010H
  003d5	eb 21		 jmp	 SHORT $LN28@zipOpenNew
$LN27@zipOpenNew:

; 1156 :     else
; 1157 :         zip64local_putValue_inmemory(zi->ci.central_header+36,(uLong)zipfi->internal_fa,2);

  003d7	6a 02		 push	 2
  003d9	8b 4d 10	 mov	 ecx, DWORD PTR _zipfi$[ebp]
  003dc	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  003df	33 c0		 xor	 eax, eax
  003e1	50		 push	 eax
  003e2	52		 push	 edx
  003e3	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  003e6	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  003ec	83 c2 24	 add	 edx, 36			; 00000024H
  003ef	52		 push	 edx
  003f0	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  003f5	83 c4 10	 add	 esp, 16			; 00000010H
$LN28@zipOpenNew:

; 1158 : 
; 1159 :     if (zipfi==NULL)

  003f8	83 7d 10 00	 cmp	 DWORD PTR _zipfi$[ebp], 0
  003fc	75 1d		 jne	 SHORT $LN29@zipOpenNew

; 1160 :         zip64local_putValue_inmemory(zi->ci.central_header+38,(uLong)0,4);

  003fe	6a 04		 push	 4
  00400	6a 00		 push	 0
  00402	6a 00		 push	 0
  00404	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  00407	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0040d	83 c1 26	 add	 ecx, 38			; 00000026H
  00410	51		 push	 ecx
  00411	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00416	83 c4 10	 add	 esp, 16			; 00000010H
  00419	eb 21		 jmp	 SHORT $LN30@zipOpenNew
$LN29@zipOpenNew:

; 1161 :     else
; 1162 :         zip64local_putValue_inmemory(zi->ci.central_header+38,(uLong)zipfi->external_fa,4);

  0041b	6a 04		 push	 4
  0041d	8b 55 10	 mov	 edx, DWORD PTR _zipfi$[ebp]
  00420	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00423	33 c9		 xor	 ecx, ecx
  00425	51		 push	 ecx
  00426	50		 push	 eax
  00427	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  0042a	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  00430	83 c0 26	 add	 eax, 38			; 00000026H
  00433	50		 push	 eax
  00434	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00439	83 c4 10	 add	 esp, 16			; 00000010H
$LN30@zipOpenNew:

; 1163 : 
; 1164 :     if(zi->ci.pos_local_header >= 0xffffffff)

  0043c	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  0043f	89 4d d0	 mov	 DWORD PTR tv534[ebp], ecx
  00442	8b 55 d0	 mov	 edx, DWORD PTR tv534[ebp]
  00445	83 ba 84 00 00
	00 00		 cmp	 DWORD PTR [edx+132], 0
  0044c	77 0c		 ja	 SHORT $LN45@zipOpenNew
  0044e	8b 45 d0	 mov	 eax, DWORD PTR tv534[ebp]
  00451	83 b8 80 00 00
	00 ff		 cmp	 DWORD PTR [eax+128], -1
  00458	72 1d		 jb	 SHORT $LN31@zipOpenNew
$LN45@zipOpenNew:

; 1165 :       zip64local_putValue_inmemory(zi->ci.central_header+42,(uLong)0xffffffff,4);

  0045a	6a 04		 push	 4
  0045c	6a 00		 push	 0
  0045e	6a ff		 push	 -1
  00460	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  00463	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  00469	83 c2 2a	 add	 edx, 42			; 0000002aH
  0046c	52		 push	 edx
  0046d	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00472	83 c4 10	 add	 esp, 16			; 00000010H
  00475	eb 33		 jmp	 SHORT $LN32@zipOpenNew
$LN31@zipOpenNew:

; 1166 :     else
; 1167 :       zip64local_putValue_inmemory(zi->ci.central_header+42,(uLong)zi->ci.pos_local_header - zi->add_position_when_writing_offset,4);

  00477	6a 04		 push	 4
  00479	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  0047c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00482	33 d2		 xor	 edx, edx
  00484	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  00487	2b 88 f0 00 01
	00		 sub	 ecx, DWORD PTR [eax+65776]
  0048d	1b 90 f4 00 01
	00		 sbb	 edx, DWORD PTR [eax+65780]
  00493	52		 push	 edx
  00494	51		 push	 ecx
  00495	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  00498	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  0049e	83 c2 2a	 add	 edx, 42			; 0000002aH
  004a1	52		 push	 edx
  004a2	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  004a7	83 c4 10	 add	 esp, 16			; 00000010H
$LN32@zipOpenNew:

; 1168 : 
; 1169 :     for (i=0;i<size_filename;i++)

  004aa	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  004b1	eb 09		 jmp	 SHORT $LN4@zipOpenNew
$LN2@zipOpenNew:
  004b3	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  004b6	83 c0 01	 add	 eax, 1
  004b9	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$LN4@zipOpenNew:
  004bc	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  004bf	3b 4d f8	 cmp	 ecx, DWORD PTR _size_filename$[ebp]
  004c2	73 1a		 jae	 SHORT $LN3@zipOpenNew

; 1170 :         *(zi->ci.central_header+SIZECENTRALHEADER+i) = *(filename+i);

  004c4	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  004c7	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  004cd	8b 4d 0c	 mov	 ecx, DWORD PTR _filename$[ebp]
  004d0	03 4d f0	 add	 ecx, DWORD PTR _i$[ebp]
  004d3	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  004d6	8a 09		 mov	 cl, BYTE PTR [ecx]
  004d8	88 4c 10 2e	 mov	 BYTE PTR [eax+edx+46], cl
  004dc	eb d5		 jmp	 SHORT $LN2@zipOpenNew
$LN3@zipOpenNew:

; 1171 : 
; 1172 :     for (i=0;i<size_extrafield_global;i++)

  004de	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  004e5	eb 09		 jmp	 SHORT $LN7@zipOpenNew
$LN5@zipOpenNew:
  004e7	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  004ea	83 c2 01	 add	 edx, 1
  004ed	89 55 f0	 mov	 DWORD PTR _i$[ebp], edx
$LN7@zipOpenNew:
  004f0	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  004f3	3b 45 20	 cmp	 eax, DWORD PTR _size_extrafield_global$[ebp]
  004f6	73 20		 jae	 SHORT $LN6@zipOpenNew

; 1173 :         *(zi->ci.central_header+SIZECENTRALHEADER+size_filename+i) =

  004f8	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  004fb	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  00501	8b 45 f8	 mov	 eax, DWORD PTR _size_filename$[ebp]
  00504	8d 4c 02 2e	 lea	 ecx, DWORD PTR [edx+eax+46]
  00508	8b 55 1c	 mov	 edx, DWORD PTR _extrafield_global$[ebp]
  0050b	03 55 f0	 add	 edx, DWORD PTR _i$[ebp]
  0050e	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00511	8a 12		 mov	 dl, BYTE PTR [edx]
  00513	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00516	eb cf		 jmp	 SHORT $LN5@zipOpenNew
$LN6@zipOpenNew:

; 1174 :               *(((const char*)extrafield_global)+i);
; 1175 : 
; 1176 :     for (i=0;i<size_comment;i++)

  00518	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0051f	eb 09		 jmp	 SHORT $LN10@zipOpenNew
$LN8@zipOpenNew:
  00521	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00524	83 c0 01	 add	 eax, 1
  00527	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$LN10@zipOpenNew:
  0052a	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  0052d	3b 4d f4	 cmp	 ecx, DWORD PTR _size_comment$[ebp]
  00530	73 23		 jae	 SHORT $LN9@zipOpenNew

; 1177 :         *(zi->ci.central_header+SIZECENTRALHEADER+size_filename+
; 1178 :               size_extrafield_global+i) = *(comment+i);

  00532	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  00535	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  0053b	8b 4d f8	 mov	 ecx, DWORD PTR _size_filename$[ebp]
  0053e	8d 54 08 2e	 lea	 edx, DWORD PTR [eax+ecx+46]
  00542	03 55 20	 add	 edx, DWORD PTR _size_extrafield_global$[ebp]
  00545	8b 45 24	 mov	 eax, DWORD PTR _comment$[ebp]
  00548	03 45 f0	 add	 eax, DWORD PTR _i$[ebp]
  0054b	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  0054e	8a 00		 mov	 al, BYTE PTR [eax]
  00550	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00553	eb cc		 jmp	 SHORT $LN8@zipOpenNew
$LN9@zipOpenNew:

; 1179 :     if (zi->ci.central_header == NULL)

  00555	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  00558	83 b9 88 00 00
	00 00		 cmp	 DWORD PTR [ecx+136], 0
  0055f	75 0a		 jne	 SHORT $LN33@zipOpenNew

; 1180 :         return ZIP_INTERNALERROR;

  00561	b8 98 ff ff ff	 mov	 eax, -104		; ffffff98H
  00566	e9 00 02 00 00	 jmp	 $LN1@zipOpenNew
$LN33@zipOpenNew:

; 1181 : 
; 1182 :     zi->ci.zip64 = zip64;

  0056b	0f ae e8	 lfence
  0056e	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  00571	8b 45 50	 mov	 eax, DWORD PTR _zip64$[ebp]
  00574	89 82 b0 00 01
	00		 mov	 DWORD PTR [edx+65712], eax

; 1183 :     zi->ci.totalCompressedData = 0;

  0057a	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  0057d	c7 81 c0 00 01
	00 00 00 00 00	 mov	 DWORD PTR [ecx+65728], 0
  00587	c7 81 c4 00 01
	00 00 00 00 00	 mov	 DWORD PTR [ecx+65732], 0

; 1184 :     zi->ci.totalUncompressedData = 0;

  00591	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  00594	c7 82 c8 00 01
	00 00 00 00 00	 mov	 DWORD PTR [edx+65736], 0
  0059e	c7 82 cc 00 01
	00 00 00 00 00	 mov	 DWORD PTR [edx+65740], 0

; 1185 :     zi->ci.pos_zip64extrainfo = 0;

  005a8	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  005ab	c7 80 b8 00 01
	00 00 00 00 00	 mov	 DWORD PTR [eax+65720], 0
  005b5	c7 80 bc 00 01
	00 00 00 00 00	 mov	 DWORD PTR [eax+65724], 0

; 1186 : 
; 1187 :     err = Write_LocalFileHeader(zi, filename, size_extrafield_local, extrafield_local);

  005bf	8b 4d 14	 mov	 ecx, DWORD PTR _extrafield_local$[ebp]
  005c2	51		 push	 ecx
  005c3	8b 55 18	 mov	 edx, DWORD PTR _size_extrafield_local$[ebp]
  005c6	52		 push	 edx
  005c7	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  005ca	50		 push	 eax
  005cb	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  005ce	51		 push	 ecx
  005cf	e8 00 00 00 00	 call	 _Write_LocalFileHeader
  005d4	83 c4 10	 add	 esp, 16			; 00000010H
  005d7	89 45 ec	 mov	 DWORD PTR _err$[ebp], eax

; 1188 : 
; 1189 : #ifdef HAVE_BZIP2
; 1190 :     zi->ci.bstream.avail_in = (uInt)0;
; 1191 :     zi->ci.bstream.avail_out = (uInt)Z_BUFSIZE;
; 1192 :     zi->ci.bstream.next_out = (char*)zi->ci.buffered_data;
; 1193 :     zi->ci.bstream.total_in_hi32 = 0;
; 1194 :     zi->ci.bstream.total_in_lo32 = 0;
; 1195 :     zi->ci.bstream.total_out_hi32 = 0;
; 1196 :     zi->ci.bstream.total_out_lo32 = 0;
; 1197 : #endif
; 1198 : 
; 1199 :     zi->ci.stream.avail_in = (uInt)0;

  005da	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  005dd	c7 42 44 00 00
	00 00		 mov	 DWORD PTR [edx+68], 0

; 1200 :     zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;

  005e4	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  005e7	c7 40 50 00 00
	01 00		 mov	 DWORD PTR [eax+80], 65536 ; 00010000H

; 1201 :     zi->ci.stream.next_out = zi->ci.buffered_data;

  005ee	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  005f1	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  005f7	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  005fa	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx

; 1202 :     zi->ci.stream.total_in = 0;

  005fd	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  00600	c7 40 48 00 00
	00 00		 mov	 DWORD PTR [eax+72], 0

; 1203 :     zi->ci.stream.total_out = 0;

  00607	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  0060a	c7 41 54 00 00
	00 00		 mov	 DWORD PTR [ecx+84], 0

; 1204 :     zi->ci.stream.data_type = Z_BINARY;

  00611	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  00614	c7 42 6c 00 00
	00 00		 mov	 DWORD PTR [edx+108], 0

; 1205 : 
; 1206 : #ifdef HAVE_BZIP2
; 1207 :     if ((err==ZIP_OK) && (zi->ci.method == Z_DEFLATED || zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1208 : #else
; 1209 :     if ((err==ZIP_OK) && (zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  0061b	83 7d ec 00	 cmp	 DWORD PTR _err$[ebp], 0
  0061f	0f 85 88 00 00
	00		 jne	 $LN34@zipOpenNew
  00625	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  00628	83 b8 9c 00 00
	00 08		 cmp	 DWORD PTR [eax+156], 8
  0062f	75 7c		 jne	 SHORT $LN34@zipOpenNew
  00631	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  00634	83 b9 a0 00 00
	00 00		 cmp	 DWORD PTR [ecx+160], 0
  0063b	75 70		 jne	 SHORT $LN34@zipOpenNew

; 1210 : #endif
; 1211 :     {
; 1212 :         if(zi->ci.method == Z_DEFLATED)

  0063d	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  00640	83 ba 9c 00 00
	00 08		 cmp	 DWORD PTR [edx+156], 8
  00647	75 64		 jne	 SHORT $LN34@zipOpenNew

; 1213 :         {
; 1214 :           zi->ci.stream.zalloc = (alloc_func)0;

  00649	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  0064c	c7 40 60 00 00
	00 00		 mov	 DWORD PTR [eax+96], 0

; 1215 :           zi->ci.stream.zfree = (free_func)0;

  00653	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  00656	c7 41 64 00 00
	00 00		 mov	 DWORD PTR [ecx+100], 0

; 1216 :           zi->ci.stream.opaque = (voidpf)0;

  0065d	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  00660	c7 42 68 00 00
	00 00		 mov	 DWORD PTR [edx+104], 0

; 1217 : 
; 1218 :           if (windowBits>0)

  00667	83 7d 34 00	 cmp	 DWORD PTR _windowBits$[ebp], 0
  0066b	7e 08		 jle	 SHORT $LN37@zipOpenNew

; 1219 :               windowBits = -windowBits;

  0066d	8b 45 34	 mov	 eax, DWORD PTR _windowBits$[ebp]
  00670	f7 d8		 neg	 eax
  00672	89 45 34	 mov	 DWORD PTR _windowBits$[ebp], eax
$LN37@zipOpenNew:

; 1220 : 
; 1221 :           err = deflateInit2(&zi->ci.stream, level, Z_DEFLATED, windowBits, memLevel, strategy);

  00675	6a 38		 push	 56			; 00000038H
  00677	68 00 00 00 00	 push	 OFFSET ??_C@_06CJNJFBNP@1?42?411@
  0067c	8b 4d 3c	 mov	 ecx, DWORD PTR _strategy$[ebp]
  0067f	51		 push	 ecx
  00680	8b 55 38	 mov	 edx, DWORD PTR _memLevel$[ebp]
  00683	52		 push	 edx
  00684	8b 45 34	 mov	 eax, DWORD PTR _windowBits$[ebp]
  00687	50		 push	 eax
  00688	6a 08		 push	 8
  0068a	8b 4d 2c	 mov	 ecx, DWORD PTR _level$[ebp]
  0068d	51		 push	 ecx
  0068e	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  00691	83 c2 40	 add	 edx, 64			; 00000040H
  00694	52		 push	 edx
  00695	e8 00 00 00 00	 call	 _deflateInit2_@32
  0069a	89 45 ec	 mov	 DWORD PTR _err$[ebp], eax

; 1222 : 
; 1223 :           if (err==Z_OK)

  0069d	83 7d ec 00	 cmp	 DWORD PTR _err$[ebp], 0
  006a1	75 0a		 jne	 SHORT $LN34@zipOpenNew

; 1224 :               zi->ci.stream_initialised = Z_DEFLATED;

  006a3	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  006a6	c7 40 78 08 00
	00 00		 mov	 DWORD PTR [eax+120], 8
$LN34@zipOpenNew:

; 1225 :         }
; 1226 :         else if(zi->ci.method == Z_BZIP2ED)
; 1227 :         {
; 1228 : #ifdef HAVE_BZIP2
; 1229 :             // Init BZip stuff here
; 1230 :           zi->ci.bstream.bzalloc = 0;
; 1231 :           zi->ci.bstream.bzfree = 0;
; 1232 :           zi->ci.bstream.opaque = (voidpf)0;
; 1233 : 
; 1234 :           err = BZ2_bzCompressInit(&zi->ci.bstream, level, 0,35);
; 1235 :           if(err == BZ_OK)
; 1236 :             zi->ci.stream_initialised = Z_BZIP2ED;
; 1237 : #endif
; 1238 :         }
; 1239 : 
; 1240 :     }
; 1241 : 
; 1242 : #    ifndef NOCRYPT
; 1243 :     zi->ci.crypt_header_size = 0;

  006ad	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  006b0	c7 82 e0 00 01
	00 00 00 00 00	 mov	 DWORD PTR [edx+65760], 0

; 1244 :     if ((err==Z_OK) && (password != NULL))

  006ba	83 7d ec 00	 cmp	 DWORD PTR _err$[ebp], 0
  006be	0f 85 94 00 00
	00		 jne	 $LN40@zipOpenNew
  006c4	83 7d 40 00	 cmp	 DWORD PTR _password$[ebp], 0
  006c8	0f 84 8a 00 00
	00		 je	 $LN40@zipOpenNew

; 1245 :     {
; 1246 :         unsigned char bufHead[RAND_HEAD_LEN];
; 1247 :         unsigned int sizeHead;
; 1248 :         zi->ci.encrypt = 1;

  006ce	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  006d1	c7 80 ac 00 01
	00 01 00 00 00	 mov	 DWORD PTR [eax+65708], 1

; 1249 :         zi->ci.pcrc_32_tab = get_crc_table();

  006db	e8 00 00 00 00	 call	 _get_crc_table@0
  006e0	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  006e3	89 81 dc 00 01
	00		 mov	 DWORD PTR [ecx+65756], eax

; 1250 :         /*init_keys(password,zi->ci.keys,zi->ci.pcrc_32_tab);*/
; 1251 : 
; 1252 :         sizeHead=crypthead(password,bufHead,RAND_HEAD_LEN,zi->ci.keys,zi->ci.pcrc_32_tab,crcForCrypting);

  006e9	8b 55 44	 mov	 edx, DWORD PTR _crcForCrypting$[ebp]
  006ec	52		 push	 edx
  006ed	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  006f0	8b 88 dc 00 01
	00		 mov	 ecx, DWORD PTR [eax+65756]
  006f6	51		 push	 ecx
  006f7	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  006fa	81 c2 d0 00 01
	00		 add	 edx, 65744		; 000100d0H
  00700	52		 push	 edx
  00701	6a 0c		 push	 12			; 0000000cH
  00703	8d 45 dc	 lea	 eax, DWORD PTR _bufHead$2[ebp]
  00706	50		 push	 eax
  00707	8b 4d 40	 mov	 ecx, DWORD PTR _password$[ebp]
  0070a	51		 push	 ecx
  0070b	e8 00 00 00 00	 call	 _crypthead
  00710	83 c4 18	 add	 esp, 24			; 00000018H
  00713	89 45 d4	 mov	 DWORD PTR _sizeHead$1[ebp], eax

; 1253 :         zi->ci.crypt_header_size = sizeHead;

  00716	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  00719	8b 45 d4	 mov	 eax, DWORD PTR _sizeHead$1[ebp]
  0071c	89 82 e0 00 01
	00		 mov	 DWORD PTR [edx+65760], eax

; 1254 : 
; 1255 :         if (ZWRITE64(zi->z_filefunc,zi->filestream,bufHead,sizeHead) != sizeHead)

  00722	8b f4		 mov	 esi, esp
  00724	8b 4d d4	 mov	 ecx, DWORD PTR _sizeHead$1[ebp]
  00727	51		 push	 ecx
  00728	8d 55 dc	 lea	 edx, DWORD PTR _bufHead$2[ebp]
  0072b	52		 push	 edx
  0072c	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  0072f	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00732	51		 push	 ecx
  00733	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  00736	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00739	50		 push	 eax
  0073a	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  0073d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00740	ff d2		 call	 edx
  00742	83 c4 10	 add	 esp, 16			; 00000010H
  00745	3b f4		 cmp	 esi, esp
  00747	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0074c	3b 45 d4	 cmp	 eax, DWORD PTR _sizeHead$1[ebp]
  0074f	74 07		 je	 SHORT $LN40@zipOpenNew

; 1256 :                 err = ZIP_ERRNO;

  00751	c7 45 ec ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN40@zipOpenNew:

; 1257 :     }
; 1258 : #    endif
; 1259 : 
; 1260 :     if (err==Z_OK)

  00758	83 7d ec 00	 cmp	 DWORD PTR _err$[ebp], 0
  0075c	75 0a		 jne	 SHORT $LN42@zipOpenNew

; 1261 :         zi->in_opened_file_inzip = 1;

  0075e	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  00761	c7 40 38 01 00
	00 00		 mov	 DWORD PTR [eax+56], 1
$LN42@zipOpenNew:

; 1262 :     return err;

  00768	8b 45 ec	 mov	 eax, DWORD PTR _err$[ebp]
$LN1@zipOpenNew:

; 1263 : }

  0076b	52		 push	 edx
  0076c	8b cd		 mov	 ecx, ebp
  0076e	50		 push	 eax
  0076f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN48@zipOpenNew
  00775	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0077a	58		 pop	 eax
  0077b	5a		 pop	 edx
  0077c	5f		 pop	 edi
  0077d	5e		 pop	 esi
  0077e	83 c4 30	 add	 esp, 48			; 00000030H
  00781	3b ec		 cmp	 ebp, esp
  00783	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00788	8b e5		 mov	 esp, ebp
  0078a	5d		 pop	 ebp
  0078b	c2 4c 00	 ret	 76			; 0000004cH
  0078e	66 90		 npad	 2
$LN48@zipOpenNew:
  00790	01 00 00 00	 DD	 1
  00794	00 00 00 00	 DD	 $LN47@zipOpenNew
$LN47@zipOpenNew:
  00798	dc ff ff ff	 DD	 -36			; ffffffdcH
  0079c	0c 00 00 00	 DD	 12			; 0000000cH
  007a0	00 00 00 00	 DD	 $LN46@zipOpenNew
$LN46@zipOpenNew:
  007a4	62		 DB	 98			; 00000062H
  007a5	75		 DB	 117			; 00000075H
  007a6	66		 DB	 102			; 00000066H
  007a7	48		 DB	 72			; 00000048H
  007a8	65		 DB	 101			; 00000065H
  007a9	61		 DB	 97			; 00000061H
  007aa	64		 DB	 100			; 00000064H
  007ab	00		 DB	 0
_zipOpenNewFileInZip4_64@76 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _zipOpenNewFileInZip3@64
_TEXT	SEGMENT
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_raw$ = 48						; size = 4
_windowBits$ = 52					; size = 4
_memLevel$ = 56						; size = 4
_strategy$ = 60						; size = 4
_password$ = 64						; size = 4
_crcForCrypting$ = 68					; size = 4
_zipOpenNewFileInZip3@64 PROC				; COMDAT

; 1287 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1288 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,

  0000d	6a 00		 push	 0
  0000f	6a 00		 push	 0
  00011	6a 00		 push	 0
  00013	8b 45 44	 mov	 eax, DWORD PTR _crcForCrypting$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 40	 mov	 ecx, DWORD PTR _password$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 3c	 mov	 edx, DWORD PTR _strategy$[ebp]
  0001e	52		 push	 edx
  0001f	8b 45 38	 mov	 eax, DWORD PTR _memLevel$[ebp]
  00022	50		 push	 eax
  00023	8b 4d 34	 mov	 ecx, DWORD PTR _windowBits$[ebp]
  00026	51		 push	 ecx
  00027	8b 55 30	 mov	 edx, DWORD PTR _raw$[ebp]
  0002a	52		 push	 edx
  0002b	8b 45 2c	 mov	 eax, DWORD PTR _level$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d 28	 mov	 ecx, DWORD PTR _method$[ebp]
  00032	51		 push	 ecx
  00033	8b 55 24	 mov	 edx, DWORD PTR _comment$[ebp]
  00036	52		 push	 edx
  00037	8b 45 20	 mov	 eax, DWORD PTR _size_extrafield_global$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 1c	 mov	 ecx, DWORD PTR _extrafield_global$[ebp]
  0003e	51		 push	 ecx
  0003f	8b 55 18	 mov	 edx, DWORD PTR _size_extrafield_local$[ebp]
  00042	52		 push	 edx
  00043	8b 45 14	 mov	 eax, DWORD PTR _extrafield_local$[ebp]
  00046	50		 push	 eax
  00047	8b 4d 10	 mov	 ecx, DWORD PTR _zipfi$[ebp]
  0004a	51		 push	 ecx
  0004b	8b 55 0c	 mov	 edx, DWORD PTR _filename$[ebp]
  0004e	52		 push	 edx
  0004f	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 _zipOpenNewFileInZip4_64@76

; 1289 :                                  extrafield_local, size_extrafield_local,
; 1290 :                                  extrafield_global, size_extrafield_global,
; 1291 :                                  comment, method, level, raw,
; 1292 :                                  windowBits, memLevel, strategy,
; 1293 :                                  password, crcForCrypting, VERSIONMADEBY, 0, 0);
; 1294 : }

  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	5d		 pop	 ebp
  00060	c2 40 00	 ret	 64			; 00000040H
_zipOpenNewFileInZip3@64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _zipOpenNewFileInZip3_64@68
_TEXT	SEGMENT
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_raw$ = 48						; size = 4
_windowBits$ = 52					; size = 4
_memLevel$ = 56						; size = 4
_strategy$ = 60						; size = 4
_password$ = 64						; size = 4
_crcForCrypting$ = 68					; size = 4
_zip64$ = 72						; size = 4
_zipOpenNewFileInZip3_64@68 PROC			; COMDAT

; 1302 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1303 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,

  0000d	8b 45 48	 mov	 eax, DWORD PTR _zip64$[ebp]
  00010	50		 push	 eax
  00011	6a 00		 push	 0
  00013	6a 00		 push	 0
  00015	8b 4d 44	 mov	 ecx, DWORD PTR _crcForCrypting$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 40	 mov	 edx, DWORD PTR _password$[ebp]
  0001c	52		 push	 edx
  0001d	8b 45 3c	 mov	 eax, DWORD PTR _strategy$[ebp]
  00020	50		 push	 eax
  00021	8b 4d 38	 mov	 ecx, DWORD PTR _memLevel$[ebp]
  00024	51		 push	 ecx
  00025	8b 55 34	 mov	 edx, DWORD PTR _windowBits$[ebp]
  00028	52		 push	 edx
  00029	8b 45 30	 mov	 eax, DWORD PTR _raw$[ebp]
  0002c	50		 push	 eax
  0002d	8b 4d 2c	 mov	 ecx, DWORD PTR _level$[ebp]
  00030	51		 push	 ecx
  00031	8b 55 28	 mov	 edx, DWORD PTR _method$[ebp]
  00034	52		 push	 edx
  00035	8b 45 24	 mov	 eax, DWORD PTR _comment$[ebp]
  00038	50		 push	 eax
  00039	8b 4d 20	 mov	 ecx, DWORD PTR _size_extrafield_global$[ebp]
  0003c	51		 push	 ecx
  0003d	8b 55 1c	 mov	 edx, DWORD PTR _extrafield_global$[ebp]
  00040	52		 push	 edx
  00041	8b 45 18	 mov	 eax, DWORD PTR _size_extrafield_local$[ebp]
  00044	50		 push	 eax
  00045	8b 4d 14	 mov	 ecx, DWORD PTR _extrafield_local$[ebp]
  00048	51		 push	 ecx
  00049	8b 55 10	 mov	 edx, DWORD PTR _zipfi$[ebp]
  0004c	52		 push	 edx
  0004d	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  00050	50		 push	 eax
  00051	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00054	51		 push	 ecx
  00055	e8 00 00 00 00	 call	 _zipOpenNewFileInZip4_64@76

; 1304 :                                  extrafield_local, size_extrafield_local,
; 1305 :                                  extrafield_global, size_extrafield_global,
; 1306 :                                  comment, method, level, raw,
; 1307 :                                  windowBits, memLevel, strategy,
; 1308 :                                  password, crcForCrypting, VERSIONMADEBY, 0, zip64);
; 1309 : }

  0005a	3b ec		 cmp	 ebp, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	5d		 pop	 ebp
  00062	c2 44 00	 ret	 68			; 00000044H
_zipOpenNewFileInZip3_64@68 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _zipOpenNewFileInZip2@44
_TEXT	SEGMENT
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_raw$ = 48						; size = 4
_zipOpenNewFileInZip2@44 PROC				; COMDAT

; 1315 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1316 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,

  0000d	6a 00		 push	 0
  0000f	6a 00		 push	 0
  00011	6a 00		 push	 0
  00013	6a 00		 push	 0
  00015	6a 00		 push	 0
  00017	6a 00		 push	 0
  00019	6a 08		 push	 8
  0001b	6a f1		 push	 -15			; fffffff1H
  0001d	8b 45 30	 mov	 eax, DWORD PTR _raw$[ebp]
  00020	50		 push	 eax
  00021	8b 4d 2c	 mov	 ecx, DWORD PTR _level$[ebp]
  00024	51		 push	 ecx
  00025	8b 55 28	 mov	 edx, DWORD PTR _method$[ebp]
  00028	52		 push	 edx
  00029	8b 45 24	 mov	 eax, DWORD PTR _comment$[ebp]
  0002c	50		 push	 eax
  0002d	8b 4d 20	 mov	 ecx, DWORD PTR _size_extrafield_global$[ebp]
  00030	51		 push	 ecx
  00031	8b 55 1c	 mov	 edx, DWORD PTR _extrafield_global$[ebp]
  00034	52		 push	 edx
  00035	8b 45 18	 mov	 eax, DWORD PTR _size_extrafield_local$[ebp]
  00038	50		 push	 eax
  00039	8b 4d 14	 mov	 ecx, DWORD PTR _extrafield_local$[ebp]
  0003c	51		 push	 ecx
  0003d	8b 55 10	 mov	 edx, DWORD PTR _zipfi$[ebp]
  00040	52		 push	 edx
  00041	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  00044	50		 push	 eax
  00045	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00048	51		 push	 ecx
  00049	e8 00 00 00 00	 call	 _zipOpenNewFileInZip4_64@76

; 1317 :                                  extrafield_local, size_extrafield_local,
; 1318 :                                  extrafield_global, size_extrafield_global,
; 1319 :                                  comment, method, level, raw,
; 1320 :                                  -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1321 :                                  NULL, 0, VERSIONMADEBY, 0, 0);
; 1322 : }

  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	5d		 pop	 ebp
  00056	c2 2c 00	 ret	 44			; 0000002cH
_zipOpenNewFileInZip2@44 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _zipOpenNewFileInZip2_64@48
_TEXT	SEGMENT
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_raw$ = 48						; size = 4
_zip64$ = 52						; size = 4
_zipOpenNewFileInZip2_64@48 PROC			; COMDAT

; 1328 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1329 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,

  0000d	8b 45 34	 mov	 eax, DWORD PTR _zip64$[ebp]
  00010	50		 push	 eax
  00011	6a 00		 push	 0
  00013	6a 00		 push	 0
  00015	6a 00		 push	 0
  00017	6a 00		 push	 0
  00019	6a 00		 push	 0
  0001b	6a 08		 push	 8
  0001d	6a f1		 push	 -15			; fffffff1H
  0001f	8b 4d 30	 mov	 ecx, DWORD PTR _raw$[ebp]
  00022	51		 push	 ecx
  00023	8b 55 2c	 mov	 edx, DWORD PTR _level$[ebp]
  00026	52		 push	 edx
  00027	8b 45 28	 mov	 eax, DWORD PTR _method$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 24	 mov	 ecx, DWORD PTR _comment$[ebp]
  0002e	51		 push	 ecx
  0002f	8b 55 20	 mov	 edx, DWORD PTR _size_extrafield_global$[ebp]
  00032	52		 push	 edx
  00033	8b 45 1c	 mov	 eax, DWORD PTR _extrafield_global$[ebp]
  00036	50		 push	 eax
  00037	8b 4d 18	 mov	 ecx, DWORD PTR _size_extrafield_local$[ebp]
  0003a	51		 push	 ecx
  0003b	8b 55 14	 mov	 edx, DWORD PTR _extrafield_local$[ebp]
  0003e	52		 push	 edx
  0003f	8b 45 10	 mov	 eax, DWORD PTR _zipfi$[ebp]
  00042	50		 push	 eax
  00043	8b 4d 0c	 mov	 ecx, DWORD PTR _filename$[ebp]
  00046	51		 push	 ecx
  00047	8b 55 08	 mov	 edx, DWORD PTR _file$[ebp]
  0004a	52		 push	 edx
  0004b	e8 00 00 00 00	 call	 _zipOpenNewFileInZip4_64@76

; 1330 :                                  extrafield_local, size_extrafield_local,
; 1331 :                                  extrafield_global, size_extrafield_global,
; 1332 :                                  comment, method, level, raw,
; 1333 :                                  -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1334 :                                  NULL, 0, VERSIONMADEBY, 0, zip64);
; 1335 : }

  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	5d		 pop	 ebp
  00058	c2 30 00	 ret	 48			; 00000030H
_zipOpenNewFileInZip2_64@48 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _zipOpenNewFileInZip64@44
_TEXT	SEGMENT
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_zip64$ = 48						; size = 4
_zipOpenNewFileInZip64@44 PROC				; COMDAT

; 1341 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1342 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,

  0000d	8b 45 30	 mov	 eax, DWORD PTR _zip64$[ebp]
  00010	50		 push	 eax
  00011	6a 00		 push	 0
  00013	6a 00		 push	 0
  00015	6a 00		 push	 0
  00017	6a 00		 push	 0
  00019	6a 00		 push	 0
  0001b	6a 08		 push	 8
  0001d	6a f1		 push	 -15			; fffffff1H
  0001f	6a 00		 push	 0
  00021	8b 4d 2c	 mov	 ecx, DWORD PTR _level$[ebp]
  00024	51		 push	 ecx
  00025	8b 55 28	 mov	 edx, DWORD PTR _method$[ebp]
  00028	52		 push	 edx
  00029	8b 45 24	 mov	 eax, DWORD PTR _comment$[ebp]
  0002c	50		 push	 eax
  0002d	8b 4d 20	 mov	 ecx, DWORD PTR _size_extrafield_global$[ebp]
  00030	51		 push	 ecx
  00031	8b 55 1c	 mov	 edx, DWORD PTR _extrafield_global$[ebp]
  00034	52		 push	 edx
  00035	8b 45 18	 mov	 eax, DWORD PTR _size_extrafield_local$[ebp]
  00038	50		 push	 eax
  00039	8b 4d 14	 mov	 ecx, DWORD PTR _extrafield_local$[ebp]
  0003c	51		 push	 ecx
  0003d	8b 55 10	 mov	 edx, DWORD PTR _zipfi$[ebp]
  00040	52		 push	 edx
  00041	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  00044	50		 push	 eax
  00045	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00048	51		 push	 ecx
  00049	e8 00 00 00 00	 call	 _zipOpenNewFileInZip4_64@76

; 1343 :                                  extrafield_local, size_extrafield_local,
; 1344 :                                  extrafield_global, size_extrafield_global,
; 1345 :                                  comment, method, level, 0,
; 1346 :                                  -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1347 :                                  NULL, 0, VERSIONMADEBY, 0, zip64);
; 1348 : }

  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	5d		 pop	 ebp
  00056	c2 2c 00	 ret	 44			; 0000002cH
_zipOpenNewFileInZip64@44 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _zipOpenNewFileInZip@40
_TEXT	SEGMENT
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_zipOpenNewFileInZip@40 PROC				; COMDAT

; 1354 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1355 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,

  0000d	6a 00		 push	 0
  0000f	6a 00		 push	 0
  00011	6a 00		 push	 0
  00013	6a 00		 push	 0
  00015	6a 00		 push	 0
  00017	6a 00		 push	 0
  00019	6a 08		 push	 8
  0001b	6a f1		 push	 -15			; fffffff1H
  0001d	6a 00		 push	 0
  0001f	8b 45 2c	 mov	 eax, DWORD PTR _level$[ebp]
  00022	50		 push	 eax
  00023	8b 4d 28	 mov	 ecx, DWORD PTR _method$[ebp]
  00026	51		 push	 ecx
  00027	8b 55 24	 mov	 edx, DWORD PTR _comment$[ebp]
  0002a	52		 push	 edx
  0002b	8b 45 20	 mov	 eax, DWORD PTR _size_extrafield_global$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d 1c	 mov	 ecx, DWORD PTR _extrafield_global$[ebp]
  00032	51		 push	 ecx
  00033	8b 55 18	 mov	 edx, DWORD PTR _size_extrafield_local$[ebp]
  00036	52		 push	 edx
  00037	8b 45 14	 mov	 eax, DWORD PTR _extrafield_local$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 10	 mov	 ecx, DWORD PTR _zipfi$[ebp]
  0003e	51		 push	 ecx
  0003f	8b 55 0c	 mov	 edx, DWORD PTR _filename$[ebp]
  00042	52		 push	 edx
  00043	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 _zipOpenNewFileInZip4_64@76

; 1356 :                                  extrafield_local, size_extrafield_local,
; 1357 :                                  extrafield_global, size_extrafield_global,
; 1358 :                                  comment, method, level, 0,
; 1359 :                                  -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1360 :                                  NULL, 0, VERSIONMADEBY, 0, 0);
; 1361 : }

  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	5d		 pop	 ebp
  00054	c2 28 00	 ret	 40			; 00000028H
_zipOpenNewFileInZip@40 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _zip64FlushWriteBuffer
_TEXT	SEGMENT
_t$1 = -12						; size = 4
_i$2 = -8						; size = 4
_err$ = -4						; size = 4
_zi$ = 8						; size = 4
_zip64FlushWriteBuffer PROC				; COMDAT

; 1364 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00021	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1365 :     int err=ZIP_OK;

  00026	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 1366 : 
; 1367 :     if (zi->ci.encrypt != 0)

  0002d	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00030	83 b8 ac 00 01
	00 00		 cmp	 DWORD PTR [eax+65708], 0
  00037	0f 84 86 00 00
	00		 je	 $LN5@zip64Flush

; 1368 :     {
; 1369 : #ifndef NOCRYPT
; 1370 :         uInt i;
; 1371 :         int t;
; 1372 :         for (i=0;i<zi->ci.pos_in_buffered_data;i++)

  0003d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  00044	eb 09		 jmp	 SHORT $LN4@zip64Flush
$LN2@zip64Flush:
  00046	8b 4d f8	 mov	 ecx, DWORD PTR _i$2[ebp]
  00049	83 c1 01	 add	 ecx, 1
  0004c	89 4d f8	 mov	 DWORD PTR _i$2[ebp], ecx
$LN4@zip64Flush:
  0004f	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00052	8b 45 f8	 mov	 eax, DWORD PTR _i$2[ebp]
  00055	3b 42 7c	 cmp	 eax, DWORD PTR [edx+124]
  00058	73 69		 jae	 SHORT $LN5@zip64Flush

; 1373 :             zi->ci.buffered_data[i] = zencode(zi->ci.keys, zi->ci.pcrc_32_tab, zi->ci.buffered_data[i],t);

  0005a	0f ae e8	 lfence
  0005d	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  00060	8b 91 dc 00 01
	00		 mov	 edx, DWORD PTR [ecx+65756]
  00066	52		 push	 edx
  00067	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  0006a	05 d0 00 01 00	 add	 eax, 65744		; 000100d0H
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 _decrypt_byte
  00075	83 c4 08	 add	 esp, 8
  00078	89 45 f4	 mov	 DWORD PTR _t$1[ebp], eax
  0007b	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  0007e	03 4d f8	 add	 ecx, DWORD PTR _i$2[ebp]
  00081	0f b6 91 a4 00
	00 00		 movzx	 edx, BYTE PTR [ecx+164]
  00088	52		 push	 edx
  00089	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  0008c	8b 88 dc 00 01
	00		 mov	 ecx, DWORD PTR [eax+65756]
  00092	51		 push	 ecx
  00093	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00096	81 c2 d0 00 01
	00		 add	 edx, 65744		; 000100d0H
  0009c	52		 push	 edx
  0009d	e8 00 00 00 00	 call	 _update_keys
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a5	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  000a8	03 45 f8	 add	 eax, DWORD PTR _i$2[ebp]
  000ab	0f b6 88 a4 00
	00 00		 movzx	 ecx, BYTE PTR [eax+164]
  000b2	33 4d f4	 xor	 ecx, DWORD PTR _t$1[ebp]
  000b5	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  000b8	03 55 f8	 add	 edx, DWORD PTR _i$2[ebp]
  000bb	88 8a a4 00 00
	00		 mov	 BYTE PTR [edx+164], cl
  000c1	eb 83		 jmp	 SHORT $LN2@zip64Flush
$LN5@zip64Flush:

; 1374 : #endif
; 1375 :     }
; 1376 : 
; 1377 :     if (ZWRITE64(zi->z_filefunc,zi->filestream,zi->ci.buffered_data,zi->ci.pos_in_buffered_data) != zi->ci.pos_in_buffered_data)

  000c3	8b f4		 mov	 esi, esp
  000c5	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  000c8	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  000cb	51		 push	 ecx
  000cc	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  000cf	81 c2 a4 00 00
	00		 add	 edx, 164		; 000000a4H
  000d5	52		 push	 edx
  000d6	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  000d9	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  000dc	51		 push	 ecx
  000dd	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  000e0	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  000e3	50		 push	 eax
  000e4	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  000e7	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000ea	ff d2		 call	 edx
  000ec	83 c4 10	 add	 esp, 16			; 00000010H
  000ef	3b f4		 cmp	 esi, esp
  000f1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f6	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  000f9	3b 41 7c	 cmp	 eax, DWORD PTR [ecx+124]
  000fc	74 07		 je	 SHORT $LN6@zip64Flush

; 1378 :       err = ZIP_ERRNO;

  000fe	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN6@zip64Flush:

; 1379 : 
; 1380 :     zi->ci.totalCompressedData += zi->ci.pos_in_buffered_data;

  00105	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00108	8b 42 7c	 mov	 eax, DWORD PTR [edx+124]
  0010b	33 c9		 xor	 ecx, ecx
  0010d	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00110	03 82 c0 00 01
	00		 add	 eax, DWORD PTR [edx+65728]
  00116	13 8a c4 00 01
	00		 adc	 ecx, DWORD PTR [edx+65732]
  0011c	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  0011f	89 82 c0 00 01
	00		 mov	 DWORD PTR [edx+65728], eax
  00125	89 8a c4 00 01
	00		 mov	 DWORD PTR [edx+65732], ecx

; 1381 : 
; 1382 : #ifdef HAVE_BZIP2
; 1383 :     if(zi->ci.method == Z_BZIP2ED)
; 1384 :     {
; 1385 :       zi->ci.totalUncompressedData += zi->ci.bstream.total_in_lo32;
; 1386 :       zi->ci.bstream.total_in_lo32 = 0;
; 1387 :       zi->ci.bstream.total_in_hi32 = 0;
; 1388 :     }
; 1389 :     else
; 1390 : #endif
; 1391 :     {
; 1392 :       zi->ci.totalUncompressedData += zi->ci.stream.total_in;

  0012b	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  0012e	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00131	33 d2		 xor	 edx, edx
  00133	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00136	03 88 c8 00 01
	00		 add	 ecx, DWORD PTR [eax+65736]
  0013c	13 90 cc 00 01
	00		 adc	 edx, DWORD PTR [eax+65740]
  00142	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00145	89 88 c8 00 01
	00		 mov	 DWORD PTR [eax+65736], ecx
  0014b	89 90 cc 00 01
	00		 mov	 DWORD PTR [eax+65740], edx

; 1393 :       zi->ci.stream.total_in = 0;

  00151	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  00154	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0

; 1394 :     }
; 1395 : 
; 1396 : 
; 1397 :     zi->ci.pos_in_buffered_data = 0;

  0015b	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  0015e	c7 42 7c 00 00
	00 00		 mov	 DWORD PTR [edx+124], 0

; 1398 : 
; 1399 :     return err;

  00165	8b 45 fc	 mov	 eax, DWORD PTR _err$[ebp]

; 1400 : }

  00168	5e		 pop	 esi
  00169	83 c4 0c	 add	 esp, 12			; 0000000cH
  0016c	3b ec		 cmp	 ebp, esp
  0016e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00173	8b e5		 mov	 esp, ebp
  00175	5d		 pop	 ebp
  00176	c3		 ret	 0
_zip64FlushWriteBuffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _zipWriteInFileInZip@12
_TEXT	SEGMENT
_i$1 = -24						; size = 4
_copy_this$2 = -20					; size = 4
_bBreak$3 = -16						; size = 4
_uTotalOutBefore$4 = -12				; size = 4
_err$ = -8						; size = 4
_zi$ = -4						; size = 4
_file$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_zipWriteInFileInZip@12 PROC				; COMDAT

; 1403 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00012	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00015	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00018	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001b	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1404 :     zip64_internal* zi;
; 1405 :     int err=ZIP_OK;

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 1406 : 
; 1407 :     if (file == NULL)

  0002f	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00033	75 0a		 jne	 SHORT $LN7@zipWriteIn

; 1408 :         return ZIP_PARAMERROR;

  00035	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  0003a	e9 d5 01 00 00	 jmp	 $LN1@zipWriteIn
$LN7@zipWriteIn:

; 1409 :     zi = (zip64_internal*)file;

  0003f	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00042	89 45 fc	 mov	 DWORD PTR _zi$[ebp], eax

; 1410 : 
; 1411 :     if (zi->in_opened_file_inzip == 0)

  00045	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  00048	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  0004c	75 0a		 jne	 SHORT $LN8@zipWriteIn

; 1412 :         return ZIP_PARAMERROR;

  0004e	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00053	e9 bc 01 00 00	 jmp	 $LN1@zipWriteIn
$LN8@zipWriteIn:

; 1413 : 
; 1414 :     zi->ci.crc32 = crc32(zi->ci.crc32,buf,(uInt)len);

  00058	8b 55 10	 mov	 edx, DWORD PTR _len$[ebp]
  0005b	52		 push	 edx
  0005c	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0005f	50		 push	 eax
  00060	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  00063	8b 91 a8 00 01
	00		 mov	 edx, DWORD PTR [ecx+65704]
  00069	52		 push	 edx
  0006a	e8 00 00 00 00	 call	 _crc32@12
  0006f	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  00072	89 81 a8 00 01
	00		 mov	 DWORD PTR [ecx+65704], eax

; 1415 : 
; 1416 : #ifdef HAVE_BZIP2
; 1417 :     if(zi->ci.method == Z_BZIP2ED && (!zi->ci.raw))
; 1418 :     {
; 1419 :       zi->ci.bstream.next_in = (void*)buf;
; 1420 :       zi->ci.bstream.avail_in = len;
; 1421 :       err = BZ_RUN_OK;
; 1422 : 
; 1423 :       while ((err==BZ_RUN_OK) && (zi->ci.bstream.avail_in>0))
; 1424 :       {
; 1425 :         if (zi->ci.bstream.avail_out == 0)
; 1426 :         {
; 1427 :           if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)
; 1428 :             err = ZIP_ERRNO;
; 1429 :           zi->ci.bstream.avail_out = (uInt)Z_BUFSIZE;
; 1430 :           zi->ci.bstream.next_out = (char*)zi->ci.buffered_data;
; 1431 :         }
; 1432 : 
; 1433 : 
; 1434 :         if(err != BZ_RUN_OK)
; 1435 :           break;
; 1436 : 
; 1437 :         if ((zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1438 :         {
; 1439 :           uLong uTotalOutBefore_lo = zi->ci.bstream.total_out_lo32;
; 1440 : //          uLong uTotalOutBefore_hi = zi->ci.bstream.total_out_hi32;
; 1441 :           err=BZ2_bzCompress(&zi->ci.bstream,  BZ_RUN);
; 1442 : 
; 1443 :           zi->ci.pos_in_buffered_data += (uInt)(zi->ci.bstream.total_out_lo32 - uTotalOutBefore_lo) ;
; 1444 :         }
; 1445 :       }
; 1446 : 
; 1447 :       if(err == BZ_RUN_OK)
; 1448 :         err = ZIP_OK;
; 1449 :     }
; 1450 :     else
; 1451 : #endif
; 1452 :     {
; 1453 :       zi->ci.stream.next_in = (Bytef*)buf;

  00078	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  0007b	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0007e	89 42 40	 mov	 DWORD PTR [edx+64], eax

; 1454 :       zi->ci.stream.avail_in = len;

  00081	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  00084	8b 55 10	 mov	 edx, DWORD PTR _len$[ebp]
  00087	89 51 44	 mov	 DWORD PTR [ecx+68], edx
$LN2@zipWriteIn:

; 1455 : 
; 1456 :       while ((err==ZIP_OK) && (zi->ci.stream.avail_in>0))

  0008a	83 7d f8 00	 cmp	 DWORD PTR _err$[ebp], 0
  0008e	0f 85 7d 01 00
	00		 jne	 $LN3@zipWriteIn
  00094	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  00097	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  0009b	0f 86 70 01 00
	00		 jbe	 $LN3@zipWriteIn

; 1457 :       {
; 1458 :           if (zi->ci.stream.avail_out == 0)

  000a1	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  000a4	83 79 50 00	 cmp	 DWORD PTR [ecx+80], 0
  000a8	75 31		 jne	 SHORT $LN9@zipWriteIn

; 1459 :           {
; 1460 :               if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)

  000aa	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  000ad	52		 push	 edx
  000ae	e8 00 00 00 00	 call	 _zip64FlushWriteBuffer
  000b3	83 c4 04	 add	 esp, 4
  000b6	83 f8 ff	 cmp	 eax, -1
  000b9	75 07		 jne	 SHORT $LN10@zipWriteIn

; 1461 :                   err = ZIP_ERRNO;

  000bb	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN10@zipWriteIn:

; 1462 :               zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;

  000c2	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  000c5	c7 40 50 00 00
	01 00		 mov	 DWORD PTR [eax+80], 65536 ; 00010000H

; 1463 :               zi->ci.stream.next_out = zi->ci.buffered_data;

  000cc	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  000cf	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  000d5	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  000d8	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx
$LN9@zipWriteIn:

; 1464 :           }
; 1465 : 
; 1466 : 
; 1467 :           if(err != ZIP_OK)

  000db	83 7d f8 00	 cmp	 DWORD PTR _err$[ebp], 0
  000df	74 05		 je	 SHORT $LN11@zipWriteIn

; 1468 :               break;

  000e1	e9 2b 01 00 00	 jmp	 $LN3@zipWriteIn
$LN11@zipWriteIn:

; 1469 : 
; 1470 :           if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  000e6	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  000e9	83 b8 9c 00 00
	00 08		 cmp	 DWORD PTR [eax+156], 8
  000f0	75 5b		 jne	 SHORT $LN12@zipWriteIn
  000f2	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  000f5	83 b9 a0 00 00
	00 00		 cmp	 DWORD PTR [ecx+160], 0
  000fc	75 4f		 jne	 SHORT $LN12@zipWriteIn

; 1471 :           {
; 1472 :               uLong uTotalOutBefore = zi->ci.stream.total_out;

  000fe	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  00101	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00104	89 45 f4	 mov	 DWORD PTR _uTotalOutBefore$4[ebp], eax

; 1473 :               err=deflate(&zi->ci.stream,  Z_NO_FLUSH);

  00107	6a 00		 push	 0
  00109	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  0010c	83 c1 40	 add	 ecx, 64			; 00000040H
  0010f	51		 push	 ecx
  00110	e8 00 00 00 00	 call	 _deflate@8
  00115	89 45 f8	 mov	 DWORD PTR _err$[ebp], eax

; 1474 :               if(uTotalOutBefore > zi->ci.stream.total_out)

  00118	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  0011b	8b 45 f4	 mov	 eax, DWORD PTR _uTotalOutBefore$4[ebp]
  0011e	3b 42 54	 cmp	 eax, DWORD PTR [edx+84]
  00121	76 10		 jbe	 SHORT $LN14@zipWriteIn

; 1475 :               {
; 1476 :                 int bBreak = 0;

  00123	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _bBreak$3[ebp], 0

; 1477 :                 bBreak++;

  0012a	8b 4d f0	 mov	 ecx, DWORD PTR _bBreak$3[ebp]
  0012d	83 c1 01	 add	 ecx, 1
  00130	89 4d f0	 mov	 DWORD PTR _bBreak$3[ebp], ecx
$LN14@zipWriteIn:

; 1478 :               }
; 1479 : 
; 1480 :               zi->ci.pos_in_buffered_data += (uInt)(zi->ci.stream.total_out - uTotalOutBefore) ;

  00133	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  00136	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00139	2b 45 f4	 sub	 eax, DWORD PTR _uTotalOutBefore$4[ebp]
  0013c	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  0013f	03 41 7c	 add	 eax, DWORD PTR [ecx+124]
  00142	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  00145	89 42 7c	 mov	 DWORD PTR [edx+124], eax

; 1481 :           }

  00148	e9 bf 00 00 00	 jmp	 $LN13@zipWriteIn
$LN12@zipWriteIn:

; 1482 :           else
; 1483 :           {
; 1484 :               uInt copy_this,i;
; 1485 :               if (zi->ci.stream.avail_in < zi->ci.stream.avail_out)

  0014d	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  00150	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  00153	8b 50 44	 mov	 edx, DWORD PTR [eax+68]
  00156	3b 51 50	 cmp	 edx, DWORD PTR [ecx+80]
  00159	73 0b		 jae	 SHORT $LN15@zipWriteIn

; 1486 :                   copy_this = zi->ci.stream.avail_in;

  0015b	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  0015e	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00161	89 4d ec	 mov	 DWORD PTR _copy_this$2[ebp], ecx
  00164	eb 09		 jmp	 SHORT $LN16@zipWriteIn
$LN15@zipWriteIn:

; 1487 :               else
; 1488 :                   copy_this = zi->ci.stream.avail_out;

  00166	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  00169	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  0016c	89 45 ec	 mov	 DWORD PTR _copy_this$2[ebp], eax
$LN16@zipWriteIn:

; 1489 : 
; 1490 :               for (i = 0; i < copy_this; i++)

  0016f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00176	eb 09		 jmp	 SHORT $LN6@zipWriteIn
$LN4@zipWriteIn:
  00178	8b 4d e8	 mov	 ecx, DWORD PTR _i$1[ebp]
  0017b	83 c1 01	 add	 ecx, 1
  0017e	89 4d e8	 mov	 DWORD PTR _i$1[ebp], ecx
$LN6@zipWriteIn:
  00181	8b 55 e8	 mov	 edx, DWORD PTR _i$1[ebp]
  00184	3b 55 ec	 cmp	 edx, DWORD PTR _copy_this$2[ebp]
  00187	73 1a		 jae	 SHORT $LN5@zipWriteIn

; 1491 :                   *(((char*)zi->ci.stream.next_out)+i) =

  00189	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  0018c	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  0018f	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  00192	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  00195	8b 55 e8	 mov	 edx, DWORD PTR _i$1[ebp]
  00198	8b 75 e8	 mov	 esi, DWORD PTR _i$1[ebp]
  0019b	8a 0c 31	 mov	 cl, BYTE PTR [ecx+esi]
  0019e	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  001a1	eb d5		 jmp	 SHORT $LN4@zipWriteIn
$LN5@zipWriteIn:

; 1492 :                       *(((const char*)zi->ci.stream.next_in)+i);
; 1493 :               {
; 1494 :                   zi->ci.stream.avail_in -= copy_this;

  001a3	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  001a6	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  001a9	2b 45 ec	 sub	 eax, DWORD PTR _copy_this$2[ebp]
  001ac	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  001af	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 1495 :                   zi->ci.stream.avail_out-= copy_this;

  001b2	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  001b5	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  001b8	2b 45 ec	 sub	 eax, DWORD PTR _copy_this$2[ebp]
  001bb	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  001be	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 1496 :                   zi->ci.stream.next_in+= copy_this;

  001c1	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  001c4	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  001c7	03 45 ec	 add	 eax, DWORD PTR _copy_this$2[ebp]
  001ca	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  001cd	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 1497 :                   zi->ci.stream.next_out+= copy_this;

  001d0	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  001d3	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  001d6	03 45 ec	 add	 eax, DWORD PTR _copy_this$2[ebp]
  001d9	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  001dc	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 1498 :                   zi->ci.stream.total_in+= copy_this;

  001df	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  001e2	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  001e5	03 45 ec	 add	 eax, DWORD PTR _copy_this$2[ebp]
  001e8	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  001eb	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 1499 :                   zi->ci.stream.total_out+= copy_this;

  001ee	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  001f1	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  001f4	03 45 ec	 add	 eax, DWORD PTR _copy_this$2[ebp]
  001f7	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  001fa	89 41 54	 mov	 DWORD PTR [ecx+84], eax

; 1500 :                   zi->ci.pos_in_buffered_data += copy_this;

  001fd	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  00200	8b 42 7c	 mov	 eax, DWORD PTR [edx+124]
  00203	03 45 ec	 add	 eax, DWORD PTR _copy_this$2[ebp]
  00206	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  00209	89 41 7c	 mov	 DWORD PTR [ecx+124], eax
$LN13@zipWriteIn:

; 1501 :               }
; 1502 :           }
; 1503 :       }// while(...)

  0020c	e9 79 fe ff ff	 jmp	 $LN2@zipWriteIn
$LN3@zipWriteIn:

; 1504 :     }
; 1505 : 
; 1506 :     return err;

  00211	8b 45 f8	 mov	 eax, DWORD PTR _err$[ebp]
$LN1@zipWriteIn:

; 1507 : }

  00214	5e		 pop	 esi
  00215	83 c4 18	 add	 esp, 24			; 00000018H
  00218	3b ec		 cmp	 ebp, esp
  0021a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0021f	8b e5		 mov	 esp, ebp
  00221	5d		 pop	 ebp
  00222	c2 0c 00	 ret	 12			; 0000000cH
_zipWriteInFileInZip@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _zipCloseFileInZipRaw@12
_TEXT	SEGMENT
_file$ = 8						; size = 4
_uncompressed_size$ = 12				; size = 4
_crc32$ = 16						; size = 4
_zipCloseFileInZipRaw@12 PROC				; COMDAT

; 1510 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1511 :     return zipCloseFileInZipRaw64 (file, uncompressed_size, crc32);

  0000d	8b 45 10	 mov	 eax, DWORD PTR _crc32$[ebp]
  00010	50		 push	 eax
  00011	8b 4d 0c	 mov	 ecx, DWORD PTR _uncompressed_size$[ebp]
  00014	33 d2		 xor	 edx, edx
  00016	52		 push	 edx
  00017	51		 push	 ecx
  00018	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _zipCloseFileInZipRaw64@16

; 1512 : }

  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	5d		 pop	 ebp
  00029	c2 0c 00	 ret	 12			; 0000000cH
_zipCloseFileInZipRaw@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _zipCloseFileInZipRaw64@16
_TEXT	SEGMENT
tv588 = -60						; size = 4
tv525 = -56						; size = 4
tv488 = -52						; size = 4
tv444 = -48						; size = 4
_cur_pos_inzip$1 = -44					; size = 8
_p$2 = -36						; size = 4
_tmp_err$3 = -32					; size = 4
_uTotalOutBefore$4 = -28				; size = 4
_err$ = -24						; size = 4
_datasize$ = -20					; size = 2
_invalidValue$ = -16					; size = 4
_compressed_size$ = -12					; size = 8
_zi$ = -4						; size = 4
_file$ = 8						; size = 4
_uncompressed_size$ = 12				; size = 8
_crc32$ = 20						; size = 4
_zipCloseFileInZipRaw64@16 PROC				; COMDAT

; 1515 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	57		 push	 edi
  00007	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  0000a	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1516 :     zip64_internal* zi;
; 1517 :     ZPOS64_T compressed_size;
; 1518 :     uLong invalidValue = 0xffffffff;

  00020	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _invalidValue$[ebp], -1

; 1519 :     short datasize = 0;

  00027	33 c0		 xor	 eax, eax
  00029	66 89 45 ec	 mov	 WORD PTR _datasize$[ebp], ax

; 1520 :     int err=ZIP_OK;

  0002d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 1521 : 
; 1522 :     if (file == NULL)

  00034	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00038	75 0a		 jne	 SHORT $LN4@zipCloseFi

; 1523 :         return ZIP_PARAMERROR;

  0003a	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  0003f	e9 e1 06 00 00	 jmp	 $LN1@zipCloseFi
$LN4@zipCloseFi:

; 1524 :     zi = (zip64_internal*)file;

  00044	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00047	89 4d fc	 mov	 DWORD PTR _zi$[ebp], ecx

; 1525 : 
; 1526 :     if (zi->in_opened_file_inzip == 0)

  0004a	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  0004d	83 7a 38 00	 cmp	 DWORD PTR [edx+56], 0
  00051	75 0a		 jne	 SHORT $LN5@zipCloseFi

; 1527 :         return ZIP_PARAMERROR;

  00053	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00058	e9 c8 06 00 00	 jmp	 $LN1@zipCloseFi
$LN5@zipCloseFi:

; 1528 :     zi->ci.stream.avail_in = 0;

  0005d	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  00060	c7 40 44 00 00
	00 00		 mov	 DWORD PTR [eax+68], 0

; 1529 : 
; 1530 :     if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  00067	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  0006a	83 b9 9c 00 00
	00 08		 cmp	 DWORD PTR [ecx+156], 8
  00071	75 7c		 jne	 SHORT $LN7@zipCloseFi
  00073	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  00076	83 ba a0 00 00
	00 00		 cmp	 DWORD PTR [edx+160], 0
  0007d	75 70		 jne	 SHORT $LN7@zipCloseFi
$LN2@zipCloseFi:

; 1531 :                 {
; 1532 :                         while (err==ZIP_OK)

  0007f	83 7d e8 00	 cmp	 DWORD PTR _err$[ebp], 0
  00083	75 6a		 jne	 SHORT $LN7@zipCloseFi

; 1533 :                         {
; 1534 :                                 uLong uTotalOutBefore;
; 1535 :                                 if (zi->ci.stream.avail_out == 0)

  00085	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  00088	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  0008c	75 30		 jne	 SHORT $LN8@zipCloseFi

; 1536 :                                 {
; 1537 :                                         if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)

  0008e	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  00091	51		 push	 ecx
  00092	e8 00 00 00 00	 call	 _zip64FlushWriteBuffer
  00097	83 c4 04	 add	 esp, 4
  0009a	83 f8 ff	 cmp	 eax, -1
  0009d	75 07		 jne	 SHORT $LN9@zipCloseFi

; 1538 :                                                 err = ZIP_ERRNO;

  0009f	c7 45 e8 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN9@zipCloseFi:

; 1539 :                                         zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;

  000a6	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  000a9	c7 42 50 00 00
	01 00		 mov	 DWORD PTR [edx+80], 65536 ; 00010000H

; 1540 :                                         zi->ci.stream.next_out = zi->ci.buffered_data;

  000b0	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  000b3	05 a4 00 00 00	 add	 eax, 164		; 000000a4H
  000b8	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  000bb	89 41 4c	 mov	 DWORD PTR [ecx+76], eax
$LN8@zipCloseFi:

; 1541 :                                 }
; 1542 :                                 uTotalOutBefore = zi->ci.stream.total_out;

  000be	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  000c1	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  000c4	89 45 e4	 mov	 DWORD PTR _uTotalOutBefore$4[ebp], eax

; 1543 :                                 err=deflate(&zi->ci.stream,  Z_FINISH);

  000c7	6a 04		 push	 4
  000c9	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  000cc	83 c1 40	 add	 ecx, 64			; 00000040H
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 _deflate@8
  000d5	89 45 e8	 mov	 DWORD PTR _err$[ebp], eax

; 1544 :                                 zi->ci.pos_in_buffered_data += (uInt)(zi->ci.stream.total_out - uTotalOutBefore) ;

  000d8	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  000db	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  000de	2b 45 e4	 sub	 eax, DWORD PTR _uTotalOutBefore$4[ebp]
  000e1	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  000e4	03 41 7c	 add	 eax, DWORD PTR [ecx+124]
  000e7	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  000ea	89 42 7c	 mov	 DWORD PTR [edx+124], eax

; 1545 :                         }

  000ed	eb 90		 jmp	 SHORT $LN2@zipCloseFi
$LN7@zipCloseFi:

; 1546 :                 }
; 1547 :     else if ((zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1548 :     {
; 1549 : #ifdef HAVE_BZIP2
; 1550 :       err = BZ_FINISH_OK;
; 1551 :       while (err==BZ_FINISH_OK)
; 1552 :       {
; 1553 :         uLong uTotalOutBefore;
; 1554 :         if (zi->ci.bstream.avail_out == 0)
; 1555 :         {
; 1556 :           if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)
; 1557 :             err = ZIP_ERRNO;
; 1558 :           zi->ci.bstream.avail_out = (uInt)Z_BUFSIZE;
; 1559 :           zi->ci.bstream.next_out = (char*)zi->ci.buffered_data;
; 1560 :         }
; 1561 :         uTotalOutBefore = zi->ci.bstream.total_out_lo32;
; 1562 :         err=BZ2_bzCompress(&zi->ci.bstream,  BZ_FINISH);
; 1563 :         if(err == BZ_STREAM_END)
; 1564 :           err = Z_STREAM_END;
; 1565 : 
; 1566 :         zi->ci.pos_in_buffered_data += (uInt)(zi->ci.bstream.total_out_lo32 - uTotalOutBefore);
; 1567 :       }
; 1568 : 
; 1569 :       if(err == BZ_FINISH_OK)
; 1570 :         err = ZIP_OK;
; 1571 : #endif
; 1572 :     }
; 1573 : 
; 1574 :     if (err==Z_STREAM_END)

  000ef	83 7d e8 01	 cmp	 DWORD PTR _err$[ebp], 1
  000f3	75 07		 jne	 SHORT $LN11@zipCloseFi

; 1575 :         err=ZIP_OK; /* this is normal */

  000f5	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0
$LN11@zipCloseFi:

; 1576 : 
; 1577 :     if ((zi->ci.pos_in_buffered_data>0) && (err==ZIP_OK))

  000fc	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  000ff	83 7a 7c 00	 cmp	 DWORD PTR [edx+124], 0
  00103	76 1e		 jbe	 SHORT $LN12@zipCloseFi
  00105	83 7d e8 00	 cmp	 DWORD PTR _err$[ebp], 0
  00109	75 18		 jne	 SHORT $LN12@zipCloseFi

; 1578 :                 {
; 1579 :         if (zip64FlushWriteBuffer(zi)==ZIP_ERRNO)

  0010b	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  0010e	50		 push	 eax
  0010f	e8 00 00 00 00	 call	 _zip64FlushWriteBuffer
  00114	83 c4 04	 add	 esp, 4
  00117	83 f8 ff	 cmp	 eax, -1
  0011a	75 07		 jne	 SHORT $LN12@zipCloseFi

; 1580 :             err = ZIP_ERRNO;

  0011c	c7 45 e8 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN12@zipCloseFi:

; 1581 :                 }
; 1582 : 
; 1583 :     if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  00123	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  00126	83 b9 9c 00 00
	00 08		 cmp	 DWORD PTR [ecx+156], 8
  0012d	75 31		 jne	 SHORT $LN14@zipCloseFi
  0012f	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  00132	83 ba a0 00 00
	00 00		 cmp	 DWORD PTR [edx+160], 0
  00139	75 25		 jne	 SHORT $LN14@zipCloseFi

; 1584 :     {
; 1585 :         int tmp_err = deflateEnd(&zi->ci.stream);

  0013b	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  0013e	83 c0 40	 add	 eax, 64			; 00000040H
  00141	50		 push	 eax
  00142	e8 00 00 00 00	 call	 _deflateEnd@4
  00147	89 45 e0	 mov	 DWORD PTR _tmp_err$3[ebp], eax

; 1586 :         if (err == ZIP_OK)

  0014a	83 7d e8 00	 cmp	 DWORD PTR _err$[ebp], 0
  0014e	75 06		 jne	 SHORT $LN15@zipCloseFi

; 1587 :             err = tmp_err;

  00150	8b 4d e0	 mov	 ecx, DWORD PTR _tmp_err$3[ebp]
  00153	89 4d e8	 mov	 DWORD PTR _err$[ebp], ecx
$LN15@zipCloseFi:

; 1588 :         zi->ci.stream_initialised = 0;

  00156	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  00159	c7 42 78 00 00
	00 00		 mov	 DWORD PTR [edx+120], 0
$LN14@zipCloseFi:

; 1589 :     }
; 1590 : #ifdef HAVE_BZIP2
; 1591 :     else if((zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1592 :     {
; 1593 :       int tmperr = BZ2_bzCompressEnd(&zi->ci.bstream);
; 1594 :                         if (err==ZIP_OK)
; 1595 :                                 err = tmperr;
; 1596 :                         zi->ci.stream_initialised = 0;
; 1597 :     }
; 1598 : #endif
; 1599 : 
; 1600 :     if (!zi->ci.raw)

  00160	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  00163	83 b8 a0 00 00
	00 00		 cmp	 DWORD PTR [eax+160], 0
  0016a	75 21		 jne	 SHORT $LN16@zipCloseFi

; 1601 :     {
; 1602 :         crc32 = (uLong)zi->ci.crc32;

  0016c	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  0016f	8b 91 a8 00 01
	00		 mov	 edx, DWORD PTR [ecx+65704]
  00175	89 55 14	 mov	 DWORD PTR _crc32$[ebp], edx

; 1603 :         uncompressed_size = zi->ci.totalUncompressedData;

  00178	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  0017b	8b 88 c8 00 01
	00		 mov	 ecx, DWORD PTR [eax+65736]
  00181	89 4d 0c	 mov	 DWORD PTR _uncompressed_size$[ebp], ecx
  00184	8b 90 cc 00 01
	00		 mov	 edx, DWORD PTR [eax+65740]
  0018a	89 55 10	 mov	 DWORD PTR _uncompressed_size$[ebp+4], edx
$LN16@zipCloseFi:

; 1604 :     }
; 1605 :     compressed_size = zi->ci.totalCompressedData;

  0018d	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  00190	8b 88 c0 00 01
	00		 mov	 ecx, DWORD PTR [eax+65728]
  00196	89 4d f4	 mov	 DWORD PTR _compressed_size$[ebp], ecx
  00199	8b 90 c4 00 01
	00		 mov	 edx, DWORD PTR [eax+65732]
  0019f	89 55 f8	 mov	 DWORD PTR _compressed_size$[ebp+4], edx

; 1606 : 
; 1607 : #    ifndef NOCRYPT
; 1608 :     compressed_size += zi->ci.crypt_header_size;

  001a2	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  001a5	8b 80 e0 00 01
	00		 mov	 eax, DWORD PTR [eax+65760]
  001ab	99		 cdq
  001ac	03 45 f4	 add	 eax, DWORD PTR _compressed_size$[ebp]
  001af	13 55 f8	 adc	 edx, DWORD PTR _compressed_size$[ebp+4]
  001b2	89 45 f4	 mov	 DWORD PTR _compressed_size$[ebp], eax
  001b5	89 55 f8	 mov	 DWORD PTR _compressed_size$[ebp+4], edx

; 1609 : #    endif
; 1610 : 
; 1611 :     // update Current Item crc and sizes,
; 1612 :     if(compressed_size >= 0xffffffff || uncompressed_size >= 0xffffffff || zi->ci.pos_local_header >= 0xffffffff)

  001b8	83 7d f8 00	 cmp	 DWORD PTR _compressed_size$[ebp+4], 0
  001bc	77 34		 ja	 SHORT $LN18@zipCloseFi
  001be	72 06		 jb	 SHORT $LN50@zipCloseFi
  001c0	83 7d f4 ff	 cmp	 DWORD PTR _compressed_size$[ebp], -1
  001c4	73 2c		 jae	 SHORT $LN18@zipCloseFi
$LN50@zipCloseFi:
  001c6	83 7d 10 00	 cmp	 DWORD PTR _uncompressed_size$[ebp+4], 0
  001ca	77 26		 ja	 SHORT $LN18@zipCloseFi
  001cc	72 06		 jb	 SHORT $LN51@zipCloseFi
  001ce	83 7d 0c ff	 cmp	 DWORD PTR _uncompressed_size$[ebp], -1
  001d2	73 1e		 jae	 SHORT $LN18@zipCloseFi
$LN51@zipCloseFi:
  001d4	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  001d7	89 4d d0	 mov	 DWORD PTR tv444[ebp], ecx
  001da	8b 55 d0	 mov	 edx, DWORD PTR tv444[ebp]
  001dd	83 ba 84 00 00
	00 00		 cmp	 DWORD PTR [edx+132], 0
  001e4	77 0c		 ja	 SHORT $LN18@zipCloseFi
  001e6	8b 45 d0	 mov	 eax, DWORD PTR tv444[ebp]
  001e9	83 b8 80 00 00
	00 ff		 cmp	 DWORD PTR [eax+128], -1
  001f0	72 36		 jb	 SHORT $LN17@zipCloseFi
$LN18@zipCloseFi:

; 1613 :     {
; 1614 :       /*version Made by*/
; 1615 :       zip64local_putValue_inmemory(zi->ci.central_header+4,(uLong)45,2);

  001f2	6a 02		 push	 2
  001f4	6a 00		 push	 0
  001f6	6a 2d		 push	 45			; 0000002dH
  001f8	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  001fb	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  00201	83 c2 04	 add	 edx, 4
  00204	52		 push	 edx
  00205	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  0020a	83 c4 10	 add	 esp, 16			; 00000010H

; 1616 :       /*version needed*/
; 1617 :       zip64local_putValue_inmemory(zi->ci.central_header+6,(uLong)45,2);

  0020d	6a 02		 push	 2
  0020f	6a 00		 push	 0
  00211	6a 2d		 push	 45			; 0000002dH
  00213	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  00216	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0021c	83 c1 06	 add	 ecx, 6
  0021f	51		 push	 ecx
  00220	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00225	83 c4 10	 add	 esp, 16			; 00000010H
$LN17@zipCloseFi:

; 1618 : 
; 1619 :     }
; 1620 : 
; 1621 :     zip64local_putValue_inmemory(zi->ci.central_header+16,crc32,4); /*crc*/

  00228	6a 04		 push	 4
  0022a	8b 55 14	 mov	 edx, DWORD PTR _crc32$[ebp]
  0022d	33 c0		 xor	 eax, eax
  0022f	50		 push	 eax
  00230	52		 push	 edx
  00231	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  00234	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  0023a	83 c2 10	 add	 edx, 16			; 00000010H
  0023d	52		 push	 edx
  0023e	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00243	83 c4 10	 add	 esp, 16			; 00000010H

; 1622 : 
; 1623 : 
; 1624 :     if(compressed_size >= 0xffffffff)

  00246	83 7d f8 00	 cmp	 DWORD PTR _compressed_size$[ebp+4], 0
  0024a	77 06		 ja	 SHORT $LN53@zipCloseFi
  0024c	83 7d f4 ff	 cmp	 DWORD PTR _compressed_size$[ebp], -1
  00250	72 20		 jb	 SHORT $LN19@zipCloseFi
$LN53@zipCloseFi:

; 1625 :       zip64local_putValue_inmemory(zi->ci.central_header+20, invalidValue,4); /*compr size*/

  00252	6a 04		 push	 4
  00254	8b 45 f0	 mov	 eax, DWORD PTR _invalidValue$[ebp]
  00257	33 c9		 xor	 ecx, ecx
  00259	51		 push	 ecx
  0025a	50		 push	 eax
  0025b	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  0025e	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  00264	83 c0 14	 add	 eax, 20			; 00000014H
  00267	50		 push	 eax
  00268	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  0026d	83 c4 10	 add	 esp, 16			; 00000010H
  00270	eb 22		 jmp	 SHORT $LN20@zipCloseFi
$LN19@zipCloseFi:

; 1626 :     else
; 1627 :       zip64local_putValue_inmemory(zi->ci.central_header+20, compressed_size,4); /*compr size*/

  00272	0f ae e8	 lfence
  00275	6a 04		 push	 4
  00277	8b 4d f8	 mov	 ecx, DWORD PTR _compressed_size$[ebp+4]
  0027a	51		 push	 ecx
  0027b	8b 55 f4	 mov	 edx, DWORD PTR _compressed_size$[ebp]
  0027e	52		 push	 edx
  0027f	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  00282	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00288	83 c1 14	 add	 ecx, 20			; 00000014H
  0028b	51		 push	 ecx
  0028c	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00291	83 c4 10	 add	 esp, 16			; 00000010H
$LN20@zipCloseFi:

; 1628 : 
; 1629 :     /// set internal file attributes field
; 1630 :     if (zi->ci.stream.data_type == Z_ASCII)

  00294	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  00297	83 7a 6c 01	 cmp	 DWORD PTR [edx+108], 1
  0029b	75 1b		 jne	 SHORT $LN21@zipCloseFi

; 1631 :         zip64local_putValue_inmemory(zi->ci.central_header+36,(uLong)Z_ASCII,2);

  0029d	6a 02		 push	 2
  0029f	6a 00		 push	 0
  002a1	6a 01		 push	 1
  002a3	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  002a6	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  002ac	83 c1 24	 add	 ecx, 36			; 00000024H
  002af	51		 push	 ecx
  002b0	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  002b5	83 c4 10	 add	 esp, 16			; 00000010H
$LN21@zipCloseFi:

; 1632 : 
; 1633 :     if(uncompressed_size >= 0xffffffff)

  002b8	83 7d 10 00	 cmp	 DWORD PTR _uncompressed_size$[ebp+4], 0
  002bc	77 06		 ja	 SHORT $LN54@zipCloseFi
  002be	83 7d 0c ff	 cmp	 DWORD PTR _uncompressed_size$[ebp], -1
  002c2	72 20		 jb	 SHORT $LN22@zipCloseFi
$LN54@zipCloseFi:

; 1634 :       zip64local_putValue_inmemory(zi->ci.central_header+24, invalidValue,4); /*uncompr size*/

  002c4	6a 04		 push	 4
  002c6	8b 55 f0	 mov	 edx, DWORD PTR _invalidValue$[ebp]
  002c9	33 c0		 xor	 eax, eax
  002cb	50		 push	 eax
  002cc	52		 push	 edx
  002cd	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  002d0	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  002d6	83 c2 18	 add	 edx, 24			; 00000018H
  002d9	52		 push	 edx
  002da	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  002df	83 c4 10	 add	 esp, 16			; 00000010H
  002e2	eb 22		 jmp	 SHORT $LN23@zipCloseFi
$LN22@zipCloseFi:

; 1635 :     else
; 1636 :       zip64local_putValue_inmemory(zi->ci.central_header+24, uncompressed_size,4); /*uncompr size*/

  002e4	0f ae e8	 lfence
  002e7	6a 04		 push	 4
  002e9	8b 45 10	 mov	 eax, DWORD PTR _uncompressed_size$[ebp+4]
  002ec	50		 push	 eax
  002ed	8b 4d 0c	 mov	 ecx, DWORD PTR _uncompressed_size$[ebp]
  002f0	51		 push	 ecx
  002f1	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  002f4	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  002fa	83 c0 18	 add	 eax, 24			; 00000018H
  002fd	50		 push	 eax
  002fe	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00303	83 c4 10	 add	 esp, 16			; 00000010H
$LN23@zipCloseFi:

; 1637 : 
; 1638 :     // Add ZIP64 extra info field for uncompressed size
; 1639 :     if(uncompressed_size >= 0xffffffff)

  00306	83 7d 10 00	 cmp	 DWORD PTR _uncompressed_size$[ebp+4], 0
  0030a	77 06		 ja	 SHORT $LN55@zipCloseFi
  0030c	83 7d 0c ff	 cmp	 DWORD PTR _uncompressed_size$[ebp], -1
  00310	72 0b		 jb	 SHORT $LN24@zipCloseFi
$LN55@zipCloseFi:

; 1640 :       datasize += 8;

  00312	0f bf 4d ec	 movsx	 ecx, WORD PTR _datasize$[ebp]
  00316	83 c1 08	 add	 ecx, 8
  00319	66 89 4d ec	 mov	 WORD PTR _datasize$[ebp], cx
$LN24@zipCloseFi:

; 1641 : 
; 1642 :     // Add ZIP64 extra info field for compressed size
; 1643 :     if(compressed_size >= 0xffffffff)

  0031d	83 7d f8 00	 cmp	 DWORD PTR _compressed_size$[ebp+4], 0
  00321	77 06		 ja	 SHORT $LN56@zipCloseFi
  00323	83 7d f4 ff	 cmp	 DWORD PTR _compressed_size$[ebp], -1
  00327	72 0b		 jb	 SHORT $LN25@zipCloseFi
$LN56@zipCloseFi:

; 1644 :       datasize += 8;

  00329	0f bf 55 ec	 movsx	 edx, WORD PTR _datasize$[ebp]
  0032d	83 c2 08	 add	 edx, 8
  00330	66 89 55 ec	 mov	 WORD PTR _datasize$[ebp], dx
$LN25@zipCloseFi:

; 1645 : 
; 1646 :     // Add ZIP64 extra info field for relative offset to local file header of current file
; 1647 :     if(zi->ci.pos_local_header >= 0xffffffff)

  00334	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  00337	89 45 cc	 mov	 DWORD PTR tv488[ebp], eax
  0033a	8b 4d cc	 mov	 ecx, DWORD PTR tv488[ebp]
  0033d	83 b9 84 00 00
	00 00		 cmp	 DWORD PTR [ecx+132], 0
  00344	77 0c		 ja	 SHORT $LN57@zipCloseFi
  00346	8b 55 cc	 mov	 edx, DWORD PTR tv488[ebp]
  00349	83 ba 80 00 00
	00 ff		 cmp	 DWORD PTR [edx+128], -1
  00350	72 0b		 jb	 SHORT $LN26@zipCloseFi
$LN57@zipCloseFi:

; 1648 :       datasize += 8;

  00352	0f bf 45 ec	 movsx	 eax, WORD PTR _datasize$[ebp]
  00356	83 c0 08	 add	 eax, 8
  00359	66 89 45 ec	 mov	 WORD PTR _datasize$[ebp], ax
$LN26@zipCloseFi:

; 1649 : 
; 1650 :     if(datasize > 0)

  0035d	0f bf 4d ec	 movsx	 ecx, WORD PTR _datasize$[ebp]
  00361	85 c9		 test	 ecx, ecx
  00363	0f 8e 86 01 00
	00		 jle	 $LN27@zipCloseFi

; 1651 :     {
; 1652 :       char* p = NULL;

  00369	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _p$2[ebp], 0

; 1653 : 
; 1654 :       if((uLong)(datasize + 4) > zi->ci.size_centralExtraFree)

  00370	0f bf 55 ec	 movsx	 edx, WORD PTR _datasize$[ebp]
  00374	83 c2 04	 add	 edx, 4
  00377	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  0037a	3b 90 94 00 00
	00		 cmp	 edx, DWORD PTR [eax+148]
  00380	76 0a		 jbe	 SHORT $LN28@zipCloseFi

; 1655 :       {
; 1656 :         // we can not write more data to the buffer that we have room for.
; 1657 :         return ZIP_BADZIPFILE;

  00382	b8 99 ff ff ff	 mov	 eax, -103		; ffffff99H
  00387	e9 99 03 00 00	 jmp	 $LN1@zipCloseFi
$LN28@zipCloseFi:

; 1658 :       }
; 1659 : 
; 1660 :       p = zi->ci.central_header + zi->ci.size_centralheader;

  0038c	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  0038f	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  00395	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  00398	03 90 90 00 00
	00		 add	 edx, DWORD PTR [eax+144]
  0039e	89 55 dc	 mov	 DWORD PTR _p$2[ebp], edx

; 1661 : 
; 1662 :       // Add Extra Information Header for 'ZIP64 information'
; 1663 :       zip64local_putValue_inmemory(p, 0x0001, 2); // HeaderID

  003a1	6a 02		 push	 2
  003a3	6a 00		 push	 0
  003a5	6a 01		 push	 1
  003a7	8b 4d dc	 mov	 ecx, DWORD PTR _p$2[ebp]
  003aa	51		 push	 ecx
  003ab	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  003b0	83 c4 10	 add	 esp, 16			; 00000010H

; 1664 :       p += 2;

  003b3	8b 55 dc	 mov	 edx, DWORD PTR _p$2[ebp]
  003b6	83 c2 02	 add	 edx, 2
  003b9	89 55 dc	 mov	 DWORD PTR _p$2[ebp], edx

; 1665 :       zip64local_putValue_inmemory(p, datasize, 2); // DataSize

  003bc	6a 02		 push	 2
  003be	0f bf 45 ec	 movsx	 eax, WORD PTR _datasize$[ebp]
  003c2	99		 cdq
  003c3	52		 push	 edx
  003c4	50		 push	 eax
  003c5	8b 45 dc	 mov	 eax, DWORD PTR _p$2[ebp]
  003c8	50		 push	 eax
  003c9	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  003ce	83 c4 10	 add	 esp, 16			; 00000010H

; 1666 :       p += 2;

  003d1	8b 4d dc	 mov	 ecx, DWORD PTR _p$2[ebp]
  003d4	83 c1 02	 add	 ecx, 2
  003d7	89 4d dc	 mov	 DWORD PTR _p$2[ebp], ecx

; 1667 : 
; 1668 :       if(uncompressed_size >= 0xffffffff)

  003da	83 7d 10 00	 cmp	 DWORD PTR _uncompressed_size$[ebp+4], 0
  003de	77 06		 ja	 SHORT $LN58@zipCloseFi
  003e0	83 7d 0c ff	 cmp	 DWORD PTR _uncompressed_size$[ebp], -1
  003e4	72 22		 jb	 SHORT $LN29@zipCloseFi
$LN58@zipCloseFi:

; 1669 :       {
; 1670 :         zip64local_putValue_inmemory(p, uncompressed_size, 8);

  003e6	0f ae e8	 lfence
  003e9	6a 08		 push	 8
  003eb	8b 55 10	 mov	 edx, DWORD PTR _uncompressed_size$[ebp+4]
  003ee	52		 push	 edx
  003ef	8b 45 0c	 mov	 eax, DWORD PTR _uncompressed_size$[ebp]
  003f2	50		 push	 eax
  003f3	8b 4d dc	 mov	 ecx, DWORD PTR _p$2[ebp]
  003f6	51		 push	 ecx
  003f7	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  003fc	83 c4 10	 add	 esp, 16			; 00000010H

; 1671 :         p += 8;

  003ff	8b 55 dc	 mov	 edx, DWORD PTR _p$2[ebp]
  00402	83 c2 08	 add	 edx, 8
  00405	89 55 dc	 mov	 DWORD PTR _p$2[ebp], edx
$LN29@zipCloseFi:

; 1672 :       }
; 1673 : 
; 1674 :       if(compressed_size >= 0xffffffff)

  00408	83 7d f8 00	 cmp	 DWORD PTR _compressed_size$[ebp+4], 0
  0040c	77 06		 ja	 SHORT $LN59@zipCloseFi
  0040e	83 7d f4 ff	 cmp	 DWORD PTR _compressed_size$[ebp], -1
  00412	72 22		 jb	 SHORT $LN30@zipCloseFi
$LN59@zipCloseFi:

; 1675 :       {
; 1676 :         zip64local_putValue_inmemory(p, compressed_size, 8);

  00414	0f ae e8	 lfence
  00417	6a 08		 push	 8
  00419	8b 45 f8	 mov	 eax, DWORD PTR _compressed_size$[ebp+4]
  0041c	50		 push	 eax
  0041d	8b 4d f4	 mov	 ecx, DWORD PTR _compressed_size$[ebp]
  00420	51		 push	 ecx
  00421	8b 55 dc	 mov	 edx, DWORD PTR _p$2[ebp]
  00424	52		 push	 edx
  00425	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  0042a	83 c4 10	 add	 esp, 16			; 00000010H

; 1677 :         p += 8;

  0042d	8b 45 dc	 mov	 eax, DWORD PTR _p$2[ebp]
  00430	83 c0 08	 add	 eax, 8
  00433	89 45 dc	 mov	 DWORD PTR _p$2[ebp], eax
$LN30@zipCloseFi:

; 1678 :       }
; 1679 : 
; 1680 :       if(zi->ci.pos_local_header >= 0xffffffff)

  00436	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  00439	89 4d c8	 mov	 DWORD PTR tv525[ebp], ecx
  0043c	8b 55 c8	 mov	 edx, DWORD PTR tv525[ebp]
  0043f	83 ba 84 00 00
	00 00		 cmp	 DWORD PTR [edx+132], 0
  00446	77 0c		 ja	 SHORT $LN60@zipCloseFi
  00448	8b 45 c8	 mov	 eax, DWORD PTR tv525[ebp]
  0044b	83 b8 80 00 00
	00 ff		 cmp	 DWORD PTR [eax+128], -1
  00452	72 28		 jb	 SHORT $LN31@zipCloseFi
$LN60@zipCloseFi:

; 1681 :       {
; 1682 :         zip64local_putValue_inmemory(p, zi->ci.pos_local_header, 8);

  00454	6a 08		 push	 8
  00456	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  00459	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  0045f	52		 push	 edx
  00460	8b 81 80 00 00
	00		 mov	 eax, DWORD PTR [ecx+128]
  00466	50		 push	 eax
  00467	8b 4d dc	 mov	 ecx, DWORD PTR _p$2[ebp]
  0046a	51		 push	 ecx
  0046b	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00470	83 c4 10	 add	 esp, 16			; 00000010H

; 1683 :         p += 8;

  00473	8b 55 dc	 mov	 edx, DWORD PTR _p$2[ebp]
  00476	83 c2 08	 add	 edx, 8
  00479	89 55 dc	 mov	 DWORD PTR _p$2[ebp], edx
$LN31@zipCloseFi:

; 1684 :       }
; 1685 : 
; 1686 :       // Update how much extra free space we got in the memory buffer
; 1687 :       // and increase the centralheader size so the new ZIP64 fields are included
; 1688 :       // ( 4 below is the size of HeaderID and DataSize field )
; 1689 :       zi->ci.size_centralExtraFree -= datasize + 4;

  0047c	0f bf 45 ec	 movsx	 eax, WORD PTR _datasize$[ebp]
  00480	83 c0 04	 add	 eax, 4
  00483	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  00486	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  0048c	2b d0		 sub	 edx, eax
  0048e	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  00491	89 90 94 00 00
	00		 mov	 DWORD PTR [eax+148], edx

; 1690 :       zi->ci.size_centralheader += datasize + 4;

  00497	0f bf 4d ec	 movsx	 ecx, WORD PTR _datasize$[ebp]
  0049b	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  0049e	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  004a4	8d 4c 01 04	 lea	 ecx, DWORD PTR [ecx+eax+4]
  004a8	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  004ab	89 8a 90 00 00
	00		 mov	 DWORD PTR [edx+144], ecx

; 1691 : 
; 1692 :       // Update the extra info size field
; 1693 :       zi->ci.size_centralExtra += datasize + 4;

  004b1	0f bf 45 ec	 movsx	 eax, WORD PTR _datasize$[ebp]
  004b5	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  004b8	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  004be	8d 44 10 04	 lea	 eax, DWORD PTR [eax+edx+4]
  004c2	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  004c5	89 81 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], eax

; 1694 :       zip64local_putValue_inmemory(zi->ci.central_header+30,(uLong)zi->ci.size_centralExtra,2);

  004cb	6a 02		 push	 2
  004cd	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  004d0	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  004d6	33 c9		 xor	 ecx, ecx
  004d8	51		 push	 ecx
  004d9	50		 push	 eax
  004da	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  004dd	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  004e3	83 c0 1e	 add	 eax, 30			; 0000001eH
  004e6	50		 push	 eax
  004e7	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  004ec	83 c4 10	 add	 esp, 16			; 00000010H
$LN27@zipCloseFi:

; 1695 :     }
; 1696 : 
; 1697 :     if (err==ZIP_OK)

  004ef	83 7d e8 00	 cmp	 DWORD PTR _err$[ebp], 0
  004f3	75 26		 jne	 SHORT $LN32@zipCloseFi

; 1698 :         err = add_data_in_datablock(&zi->central_dir, zi->ci.central_header, (uLong)zi->ci.size_centralheader);

  004f5	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  004f8	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  004fe	52		 push	 edx
  004ff	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  00502	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00508	51		 push	 ecx
  00509	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  0050c	83 c2 30	 add	 edx, 48			; 00000030H
  0050f	52		 push	 edx
  00510	e8 00 00 00 00	 call	 _add_data_in_datablock
  00515	83 c4 0c	 add	 esp, 12			; 0000000cH
  00518	89 45 e8	 mov	 DWORD PTR _err$[ebp], eax
$LN32@zipCloseFi:

; 1699 : 
; 1700 :     free(zi->ci.central_header);

  0051b	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  0051e	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00524	51		 push	 ecx
  00525	e8 00 00 00 00	 call	 _free
  0052a	83 c4 04	 add	 esp, 4

; 1701 : 
; 1702 :     if (err==ZIP_OK)

  0052d	83 7d e8 00	 cmp	 DWORD PTR _err$[ebp], 0
  00531	0f 85 bd 01 00
	00		 jne	 $LN33@zipCloseFi

; 1703 :     {
; 1704 :         // Update the LocalFileHeader with the new values.
; 1705 : 
; 1706 :         ZPOS64_T cur_pos_inzip = ZTELL64(zi->z_filefunc,zi->filestream);

  00537	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  0053a	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0053d	50		 push	 eax
  0053e	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  00541	51		 push	 ecx
  00542	e8 00 00 00 00	 call	 _call_ztell64
  00547	83 c4 08	 add	 esp, 8
  0054a	89 45 d4	 mov	 DWORD PTR _cur_pos_inzip$1[ebp], eax
  0054d	89 55 d8	 mov	 DWORD PTR _cur_pos_inzip$1[ebp+4], edx

; 1707 : 
; 1708 :         if (ZSEEK64(zi->z_filefunc,zi->filestream, zi->ci.pos_local_header + 14,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00550	6a 00		 push	 0
  00552	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  00555	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  0055b	83 c0 0e	 add	 eax, 14			; 0000000eH
  0055e	8b 8a 84 00 00
	00		 mov	 ecx, DWORD PTR [edx+132]
  00564	83 d1 00	 adc	 ecx, 0
  00567	51		 push	 ecx
  00568	50		 push	 eax
  00569	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  0056c	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0056f	50		 push	 eax
  00570	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  00573	51		 push	 ecx
  00574	e8 00 00 00 00	 call	 _call_zseek64
  00579	83 c4 14	 add	 esp, 20			; 00000014H
  0057c	85 c0		 test	 eax, eax
  0057e	74 07		 je	 SHORT $LN34@zipCloseFi

; 1709 :             err = ZIP_ERRNO;

  00580	c7 45 e8 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN34@zipCloseFi:

; 1710 : 
; 1711 :         if (err==ZIP_OK)

  00587	83 7d e8 00	 cmp	 DWORD PTR _err$[ebp], 0
  0058b	75 1f		 jne	 SHORT $LN35@zipCloseFi

; 1712 :             err = zip64local_putValue(&zi->z_filefunc,zi->filestream,crc32,4); /* crc 32, unknown */

  0058d	6a 04		 push	 4
  0058f	8b 55 14	 mov	 edx, DWORD PTR _crc32$[ebp]
  00592	33 c0		 xor	 eax, eax
  00594	50		 push	 eax
  00595	52		 push	 edx
  00596	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  00599	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0059c	52		 push	 edx
  0059d	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  005a0	50		 push	 eax
  005a1	e8 00 00 00 00	 call	 _zip64local_putValue
  005a6	83 c4 14	 add	 esp, 20			; 00000014H
  005a9	89 45 e8	 mov	 DWORD PTR _err$[ebp], eax
$LN35@zipCloseFi:

; 1713 : 
; 1714 :         if(uncompressed_size >= 0xffffffff || compressed_size >= 0xffffffff )

  005ac	83 7d 10 00	 cmp	 DWORD PTR _uncompressed_size$[ebp+4], 0
  005b0	77 18		 ja	 SHORT $LN38@zipCloseFi
  005b2	72 06		 jb	 SHORT $LN61@zipCloseFi
  005b4	83 7d 0c ff	 cmp	 DWORD PTR _uncompressed_size$[ebp], -1
  005b8	73 10		 jae	 SHORT $LN38@zipCloseFi
$LN61@zipCloseFi:
  005ba	83 7d f8 00	 cmp	 DWORD PTR _compressed_size$[ebp+4], 0
  005be	77 0a		 ja	 SHORT $LN38@zipCloseFi
  005c0	83 7d f4 ff	 cmp	 DWORD PTR _compressed_size$[ebp], -1
  005c4	0f 82 b0 00 00
	00		 jb	 $LN36@zipCloseFi
$LN38@zipCloseFi:

; 1715 :         {
; 1716 :           if(zi->ci.pos_zip64extrainfo > 0)

  005ca	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  005cd	89 4d c4	 mov	 DWORD PTR tv588[ebp], ecx
  005d0	8b 55 c4	 mov	 edx, DWORD PTR tv588[ebp]
  005d3	83 ba bc 00 01
	00 00		 cmp	 DWORD PTR [edx+65724], 0
  005da	77 10		 ja	 SHORT $LN63@zipCloseFi
  005dc	8b 45 c4	 mov	 eax, DWORD PTR tv588[ebp]
  005df	83 b8 b8 00 01
	00 00		 cmp	 DWORD PTR [eax+65720], 0
  005e6	0f 86 85 00 00
	00		 jbe	 $LN39@zipCloseFi
$LN63@zipCloseFi:

; 1717 :           {
; 1718 :             // Update the size in the ZIP64 extended field.
; 1719 :             if (ZSEEK64(zi->z_filefunc,zi->filestream, zi->ci.pos_zip64extrainfo + 4,ZLIB_FILEFUNC_SEEK_SET)!=0)

  005ec	6a 00		 push	 0
  005ee	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  005f1	8b 91 b8 00 01
	00		 mov	 edx, DWORD PTR [ecx+65720]
  005f7	83 c2 04	 add	 edx, 4
  005fa	8b 81 bc 00 01
	00		 mov	 eax, DWORD PTR [ecx+65724]
  00600	83 d0 00	 adc	 eax, 0
  00603	50		 push	 eax
  00604	52		 push	 edx
  00605	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  00608	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0060b	52		 push	 edx
  0060c	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  0060f	50		 push	 eax
  00610	e8 00 00 00 00	 call	 _call_zseek64
  00615	83 c4 14	 add	 esp, 20			; 00000014H
  00618	85 c0		 test	 eax, eax
  0061a	74 07		 je	 SHORT $LN41@zipCloseFi

; 1720 :               err = ZIP_ERRNO;

  0061c	c7 45 e8 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN41@zipCloseFi:

; 1721 : 
; 1722 :             if (err==ZIP_OK) /* compressed size, unknown */

  00623	83 7d e8 00	 cmp	 DWORD PTR _err$[ebp], 0
  00627	75 20		 jne	 SHORT $LN42@zipCloseFi

; 1723 :               err = zip64local_putValue(&zi->z_filefunc, zi->filestream, uncompressed_size, 8);

  00629	6a 08		 push	 8
  0062b	8b 4d 10	 mov	 ecx, DWORD PTR _uncompressed_size$[ebp+4]
  0062e	51		 push	 ecx
  0062f	8b 55 0c	 mov	 edx, DWORD PTR _uncompressed_size$[ebp]
  00632	52		 push	 edx
  00633	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  00636	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00639	51		 push	 ecx
  0063a	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  0063d	52		 push	 edx
  0063e	e8 00 00 00 00	 call	 _zip64local_putValue
  00643	83 c4 14	 add	 esp, 20			; 00000014H
  00646	89 45 e8	 mov	 DWORD PTR _err$[ebp], eax
$LN42@zipCloseFi:

; 1724 : 
; 1725 :             if (err==ZIP_OK) /* uncompressed size, unknown */

  00649	83 7d e8 00	 cmp	 DWORD PTR _err$[ebp], 0
  0064d	75 20		 jne	 SHORT $LN43@zipCloseFi

; 1726 :               err = zip64local_putValue(&zi->z_filefunc, zi->filestream, compressed_size, 8);

  0064f	6a 08		 push	 8
  00651	8b 45 f8	 mov	 eax, DWORD PTR _compressed_size$[ebp+4]
  00654	50		 push	 eax
  00655	8b 4d f4	 mov	 ecx, DWORD PTR _compressed_size$[ebp]
  00658	51		 push	 ecx
  00659	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  0065c	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0065f	50		 push	 eax
  00660	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  00663	51		 push	 ecx
  00664	e8 00 00 00 00	 call	 _zip64local_putValue
  00669	83 c4 14	 add	 esp, 20			; 00000014H
  0066c	89 45 e8	 mov	 DWORD PTR _err$[ebp], eax
$LN43@zipCloseFi:

; 1727 :           }

  0066f	eb 07		 jmp	 SHORT $LN40@zipCloseFi
$LN39@zipCloseFi:

; 1728 :           else
; 1729 :               err = ZIP_BADZIPFILE; // Caller passed zip64 = 0, so no room for zip64 info -> fatal

  00671	c7 45 e8 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN40@zipCloseFi:

; 1730 :         }

  00678	eb 52		 jmp	 SHORT $LN37@zipCloseFi
$LN36@zipCloseFi:

; 1731 :         else
; 1732 :         {
; 1733 :           if (err==ZIP_OK) /* compressed size, unknown */

  0067a	83 7d e8 00	 cmp	 DWORD PTR _err$[ebp], 0
  0067e	75 23		 jne	 SHORT $LN44@zipCloseFi

; 1734 :               err = zip64local_putValue(&zi->z_filefunc,zi->filestream,compressed_size,4);

  00680	0f ae e8	 lfence
  00683	6a 04		 push	 4
  00685	8b 55 f8	 mov	 edx, DWORD PTR _compressed_size$[ebp+4]
  00688	52		 push	 edx
  00689	8b 45 f4	 mov	 eax, DWORD PTR _compressed_size$[ebp]
  0068c	50		 push	 eax
  0068d	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  00690	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00693	52		 push	 edx
  00694	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  00697	50		 push	 eax
  00698	e8 00 00 00 00	 call	 _zip64local_putValue
  0069d	83 c4 14	 add	 esp, 20			; 00000014H
  006a0	89 45 e8	 mov	 DWORD PTR _err$[ebp], eax
$LN44@zipCloseFi:

; 1735 : 
; 1736 :           if (err==ZIP_OK) /* uncompressed size, unknown */

  006a3	83 7d e8 00	 cmp	 DWORD PTR _err$[ebp], 0
  006a7	75 23		 jne	 SHORT $LN37@zipCloseFi

; 1737 :               err = zip64local_putValue(&zi->z_filefunc,zi->filestream,uncompressed_size,4);

  006a9	0f ae e8	 lfence
  006ac	6a 04		 push	 4
  006ae	8b 4d 10	 mov	 ecx, DWORD PTR _uncompressed_size$[ebp+4]
  006b1	51		 push	 ecx
  006b2	8b 55 0c	 mov	 edx, DWORD PTR _uncompressed_size$[ebp]
  006b5	52		 push	 edx
  006b6	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  006b9	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  006bc	51		 push	 ecx
  006bd	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  006c0	52		 push	 edx
  006c1	e8 00 00 00 00	 call	 _zip64local_putValue
  006c6	83 c4 14	 add	 esp, 20			; 00000014H
  006c9	89 45 e8	 mov	 DWORD PTR _err$[ebp], eax
$LN37@zipCloseFi:

; 1738 :         }
; 1739 : 
; 1740 :         if (ZSEEK64(zi->z_filefunc,zi->filestream, cur_pos_inzip,ZLIB_FILEFUNC_SEEK_SET)!=0)

  006cc	6a 00		 push	 0
  006ce	8b 45 d8	 mov	 eax, DWORD PTR _cur_pos_inzip$1[ebp+4]
  006d1	50		 push	 eax
  006d2	8b 4d d4	 mov	 ecx, DWORD PTR _cur_pos_inzip$1[ebp]
  006d5	51		 push	 ecx
  006d6	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  006d9	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  006dc	50		 push	 eax
  006dd	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  006e0	51		 push	 ecx
  006e1	e8 00 00 00 00	 call	 _call_zseek64
  006e6	83 c4 14	 add	 esp, 20			; 00000014H
  006e9	85 c0		 test	 eax, eax
  006eb	74 07		 je	 SHORT $LN33@zipCloseFi

; 1741 :             err = ZIP_ERRNO;

  006ed	c7 45 e8 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN33@zipCloseFi:

; 1742 :     }
; 1743 : 
; 1744 :     zi->number_entry ++;

  006f4	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  006f7	8b 82 f8 00 01
	00		 mov	 eax, DWORD PTR [edx+65784]
  006fd	83 c0 01	 add	 eax, 1
  00700	8b 8a fc 00 01
	00		 mov	 ecx, DWORD PTR [edx+65788]
  00706	83 d1 00	 adc	 ecx, 0
  00709	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  0070c	89 82 f8 00 01
	00		 mov	 DWORD PTR [edx+65784], eax
  00712	89 8a fc 00 01
	00		 mov	 DWORD PTR [edx+65788], ecx

; 1745 :     zi->in_opened_file_inzip = 0;

  00718	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  0071b	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 1746 : 
; 1747 :     return err;

  00722	8b 45 e8	 mov	 eax, DWORD PTR _err$[ebp]
$LN1@zipCloseFi:

; 1748 : }

  00725	5f		 pop	 edi
  00726	83 c4 3c	 add	 esp, 60			; 0000003cH
  00729	3b ec		 cmp	 ebp, esp
  0072b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00730	8b e5		 mov	 esp, ebp
  00732	5d		 pop	 ebp
  00733	c2 10 00	 ret	 16			; 00000010H
_zipCloseFileInZipRaw64@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _zipCloseFileInZip@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_zipCloseFileInZip@4 PROC				; COMDAT

; 1751 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1752 :     return zipCloseFileInZipRaw (file,0,0);

  0000d	6a 00		 push	 0
  0000f	6a 00		 push	 0
  00011	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _zipCloseFileInZipRaw@12

; 1753 : }

  0001a	3b ec		 cmp	 ebp, esp
  0001c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
_zipCloseFileInZip@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _Write_Zip64EndOfCentralDirectoryLocator
_TEXT	SEGMENT
_pos$ = -12						; size = 8
_err$ = -4						; size = 4
_zi$ = 8						; size = 4
_zip64eocd_pos_inzip$ = 12				; size = 8
_Write_Zip64EndOfCentralDirectoryLocator PROC		; COMDAT

; 1756 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1757 :   int err = ZIP_OK;

  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 1758 :   ZPOS64_T pos = zip64eocd_pos_inzip - zi->add_position_when_writing_offset;

  0002c	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _zip64eocd_pos_inzip$[ebp]
  00032	2b 88 f0 00 01
	00		 sub	 ecx, DWORD PTR [eax+65776]
  00038	8b 55 10	 mov	 edx, DWORD PTR _zip64eocd_pos_inzip$[ebp+4]
  0003b	1b 90 f4 00 01
	00		 sbb	 edx, DWORD PTR [eax+65780]
  00041	89 4d f4	 mov	 DWORD PTR _pos$[ebp], ecx
  00044	89 55 f8	 mov	 DWORD PTR _pos$[ebp+4], edx

; 1759 : 
; 1760 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)ZIP64ENDLOCHEADERMAGIC,4);

  00047	6a 04		 push	 4
  00049	6a 00		 push	 0
  0004b	68 50 4b 06 07	 push	 117853008		; 07064b50H
  00050	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00053	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00056	51		 push	 ecx
  00057	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  0005a	52		 push	 edx
  0005b	e8 00 00 00 00	 call	 _zip64local_putValue
  00060	83 c4 14	 add	 esp, 20			; 00000014H
  00063	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax

; 1761 : 
; 1762 :   /*num disks*/
; 1763 :     if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  00066	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  0006a	75 1c		 jne	 SHORT $LN2@Write_Zip6

; 1764 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4);

  0006c	6a 04		 push	 4
  0006e	6a 00		 push	 0
  00070	6a 00		 push	 0
  00072	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00075	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00078	51		 push	 ecx
  00079	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  0007c	52		 push	 edx
  0007d	e8 00 00 00 00	 call	 _zip64local_putValue
  00082	83 c4 14	 add	 esp, 20			; 00000014H
  00085	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN2@Write_Zip6:

; 1765 : 
; 1766 :   /*relative offset*/
; 1767 :     if (err==ZIP_OK) /* Relative offset to the Zip64EndOfCentralDirectory */

  00088	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  0008c	75 20		 jne	 SHORT $LN3@Write_Zip6

; 1768 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream, pos,8);

  0008e	6a 08		 push	 8
  00090	8b 45 f8	 mov	 eax, DWORD PTR _pos$[ebp+4]
  00093	50		 push	 eax
  00094	8b 4d f4	 mov	 ecx, DWORD PTR _pos$[ebp]
  00097	51		 push	 ecx
  00098	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  0009b	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0009e	50		 push	 eax
  0009f	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  000a2	51		 push	 ecx
  000a3	e8 00 00 00 00	 call	 _zip64local_putValue
  000a8	83 c4 14	 add	 esp, 20			; 00000014H
  000ab	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN3@Write_Zip6:

; 1769 : 
; 1770 :   /*total disks*/ /* Do not support spawning of disk so always say 1 here*/
; 1771 :     if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  000ae	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  000b2	75 1c		 jne	 SHORT $LN4@Write_Zip6

; 1772 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)1,4);

  000b4	6a 04		 push	 4
  000b6	6a 00		 push	 0
  000b8	6a 01		 push	 1
  000ba	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  000bd	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  000c0	50		 push	 eax
  000c1	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  000c4	51		 push	 ecx
  000c5	e8 00 00 00 00	 call	 _zip64local_putValue
  000ca	83 c4 14	 add	 esp, 20			; 00000014H
  000cd	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN4@Write_Zip6:

; 1773 : 
; 1774 :     return err;

  000d0	8b 45 fc	 mov	 eax, DWORD PTR _err$[ebp]

; 1775 : }

  000d3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d6	3b ec		 cmp	 ebp, esp
  000d8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000dd	8b e5		 mov	 esp, ebp
  000df	5d		 pop	 ebp
  000e0	c3		 ret	 0
_Write_Zip64EndOfCentralDirectoryLocator ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _Write_Zip64EndOfCentralDirectoryRecord
_TEXT	SEGMENT
_pos$1 = -16						; size = 8
_Zip64DataSize$ = -8					; size = 4
_err$ = -4						; size = 4
_zi$ = 8						; size = 4
_size_centraldir$ = 12					; size = 4
_centraldir_pos_inzip$ = 16				; size = 8
_Write_Zip64EndOfCentralDirectoryRecord PROC		; COMDAT

; 1778 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1779 :   int err = ZIP_OK;

  00021	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 1780 : 
; 1781 :   uLong Zip64DataSize = 44;

  00028	c7 45 f8 2c 00
	00 00		 mov	 DWORD PTR _Zip64DataSize$[ebp], 44 ; 0000002cH

; 1782 : 
; 1783 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)ZIP64ENDHEADERMAGIC,4);

  0002f	6a 04		 push	 4
  00031	6a 00		 push	 0
  00033	68 50 4b 06 06	 push	 101075792		; 06064b50H
  00038	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  0003b	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0003e	51		 push	 ecx
  0003f	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00042	52		 push	 edx
  00043	e8 00 00 00 00	 call	 _zip64local_putValue
  00048	83 c4 14	 add	 esp, 20			; 00000014H
  0004b	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax

; 1784 : 
; 1785 :   if (err==ZIP_OK) /* size of this 'zip64 end of central directory' */

  0004e	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  00052	75 1f		 jne	 SHORT $LN2@Write_Zip6

; 1786 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(ZPOS64_T)Zip64DataSize,8); // why ZPOS64_T of this ?

  00054	6a 08		 push	 8
  00056	8b 45 f8	 mov	 eax, DWORD PTR _Zip64DataSize$[ebp]
  00059	33 c9		 xor	 ecx, ecx
  0005b	51		 push	 ecx
  0005c	50		 push	 eax
  0005d	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00060	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00063	50		 push	 eax
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  00067	51		 push	 ecx
  00068	e8 00 00 00 00	 call	 _zip64local_putValue
  0006d	83 c4 14	 add	 esp, 20			; 00000014H
  00070	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN2@Write_Zip6:

; 1787 : 
; 1788 :   if (err==ZIP_OK) /* version made by */

  00073	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  00077	75 1c		 jne	 SHORT $LN3@Write_Zip6

; 1789 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)45,2);

  00079	6a 02		 push	 2
  0007b	6a 00		 push	 0
  0007d	6a 2d		 push	 45			; 0000002dH
  0007f	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00082	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00085	50		 push	 eax
  00086	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  00089	51		 push	 ecx
  0008a	e8 00 00 00 00	 call	 _zip64local_putValue
  0008f	83 c4 14	 add	 esp, 20			; 00000014H
  00092	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN3@Write_Zip6:

; 1790 : 
; 1791 :   if (err==ZIP_OK) /* version needed */

  00095	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  00099	75 1c		 jne	 SHORT $LN4@Write_Zip6

; 1792 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)45,2);

  0009b	6a 02		 push	 2
  0009d	6a 00		 push	 0
  0009f	6a 2d		 push	 45			; 0000002dH
  000a1	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  000a4	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  000a7	50		 push	 eax
  000a8	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  000ab	51		 push	 ecx
  000ac	e8 00 00 00 00	 call	 _zip64local_putValue
  000b1	83 c4 14	 add	 esp, 20			; 00000014H
  000b4	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN4@Write_Zip6:

; 1793 : 
; 1794 :   if (err==ZIP_OK) /* number of this disk */

  000b7	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  000bb	75 1c		 jne	 SHORT $LN5@Write_Zip6

; 1795 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4);

  000bd	6a 04		 push	 4
  000bf	6a 00		 push	 0
  000c1	6a 00		 push	 0
  000c3	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  000c6	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  000c9	50		 push	 eax
  000ca	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  000cd	51		 push	 ecx
  000ce	e8 00 00 00 00	 call	 _zip64local_putValue
  000d3	83 c4 14	 add	 esp, 20			; 00000014H
  000d6	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN5@Write_Zip6:

; 1796 : 
; 1797 :   if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  000d9	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  000dd	75 1c		 jne	 SHORT $LN6@Write_Zip6

; 1798 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4);

  000df	6a 04		 push	 4
  000e1	6a 00		 push	 0
  000e3	6a 00		 push	 0
  000e5	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  000e8	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  000eb	50		 push	 eax
  000ec	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  000ef	51		 push	 ecx
  000f0	e8 00 00 00 00	 call	 _zip64local_putValue
  000f5	83 c4 14	 add	 esp, 20			; 00000014H
  000f8	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN6@Write_Zip6:

; 1799 : 
; 1800 :   if (err==ZIP_OK) /* total number of entries in the central dir on this disk */

  000fb	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  000ff	75 29		 jne	 SHORT $LN7@Write_Zip6

; 1801 :     err = zip64local_putValue(&zi->z_filefunc, zi->filestream, zi->number_entry, 8);

  00101	6a 08		 push	 8
  00103	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00106	8b 82 fc 00 01
	00		 mov	 eax, DWORD PTR [edx+65788]
  0010c	50		 push	 eax
  0010d	8b 8a f8 00 01
	00		 mov	 ecx, DWORD PTR [edx+65784]
  00113	51		 push	 ecx
  00114	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00117	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0011a	50		 push	 eax
  0011b	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  0011e	51		 push	 ecx
  0011f	e8 00 00 00 00	 call	 _zip64local_putValue
  00124	83 c4 14	 add	 esp, 20			; 00000014H
  00127	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN7@Write_Zip6:

; 1802 : 
; 1803 :   if (err==ZIP_OK) /* total number of entries in the central dir */

  0012a	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  0012e	75 29		 jne	 SHORT $LN8@Write_Zip6

; 1804 :     err = zip64local_putValue(&zi->z_filefunc, zi->filestream, zi->number_entry, 8);

  00130	6a 08		 push	 8
  00132	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00135	8b 82 fc 00 01
	00		 mov	 eax, DWORD PTR [edx+65788]
  0013b	50		 push	 eax
  0013c	8b 8a f8 00 01
	00		 mov	 ecx, DWORD PTR [edx+65784]
  00142	51		 push	 ecx
  00143	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00146	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00149	50		 push	 eax
  0014a	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  0014d	51		 push	 ecx
  0014e	e8 00 00 00 00	 call	 _zip64local_putValue
  00153	83 c4 14	 add	 esp, 20			; 00000014H
  00156	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN8@Write_Zip6:

; 1805 : 
; 1806 :   if (err==ZIP_OK) /* size of the central directory */

  00159	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  0015d	75 1f		 jne	 SHORT $LN9@Write_Zip6

; 1807 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(ZPOS64_T)size_centraldir,8);

  0015f	6a 08		 push	 8
  00161	8b 55 0c	 mov	 edx, DWORD PTR _size_centraldir$[ebp]
  00164	33 c0		 xor	 eax, eax
  00166	50		 push	 eax
  00167	52		 push	 edx
  00168	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  0016b	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0016e	52		 push	 edx
  0016f	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00172	50		 push	 eax
  00173	e8 00 00 00 00	 call	 _zip64local_putValue
  00178	83 c4 14	 add	 esp, 20			; 00000014H
  0017b	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN9@Write_Zip6:

; 1808 : 
; 1809 :   if (err==ZIP_OK) /* offset of start of central directory with respect to the starting disk number */

  0017e	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  00182	75 3b		 jne	 SHORT $LN10@Write_Zip6

; 1810 :   {
; 1811 :     ZPOS64_T pos = centraldir_pos_inzip - zi->add_position_when_writing_offset;

  00184	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  00187	8b 55 10	 mov	 edx, DWORD PTR _centraldir_pos_inzip$[ebp]
  0018a	2b 91 f0 00 01
	00		 sub	 edx, DWORD PTR [ecx+65776]
  00190	8b 45 14	 mov	 eax, DWORD PTR _centraldir_pos_inzip$[ebp+4]
  00193	1b 81 f4 00 01
	00		 sbb	 eax, DWORD PTR [ecx+65780]
  00199	89 55 f0	 mov	 DWORD PTR _pos$1[ebp], edx
  0019c	89 45 f4	 mov	 DWORD PTR _pos$1[ebp+4], eax

; 1812 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream, (ZPOS64_T)pos,8);

  0019f	6a 08		 push	 8
  001a1	8b 4d f4	 mov	 ecx, DWORD PTR _pos$1[ebp+4]
  001a4	51		 push	 ecx
  001a5	8b 55 f0	 mov	 edx, DWORD PTR _pos$1[ebp]
  001a8	52		 push	 edx
  001a9	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  001ac	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  001af	51		 push	 ecx
  001b0	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  001b3	52		 push	 edx
  001b4	e8 00 00 00 00	 call	 _zip64local_putValue
  001b9	83 c4 14	 add	 esp, 20			; 00000014H
  001bc	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN10@Write_Zip6:

; 1813 :   }
; 1814 :   return err;

  001bf	8b 45 fc	 mov	 eax, DWORD PTR _err$[ebp]

; 1815 : }

  001c2	83 c4 10	 add	 esp, 16			; 00000010H
  001c5	3b ec		 cmp	 ebp, esp
  001c7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001cc	8b e5		 mov	 esp, ebp
  001ce	5d		 pop	 ebp
  001cf	c3		 ret	 0
_Write_Zip64EndOfCentralDirectoryRecord ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _Write_EndOfCentralDirectoryRecord
_TEXT	SEGMENT
tv226 = -20						; size = 4
tv208 = -16						; size = 4
_pos$1 = -12						; size = 8
_err$ = -4						; size = 4
_zi$ = 8						; size = 4
_size_centraldir$ = 12					; size = 4
_centraldir_pos_inzip$ = 16				; size = 8
_Write_EndOfCentralDirectoryRecord PROC			; COMDAT

; 1817 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001a	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1818 :   int err = ZIP_OK;

  00024	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 1819 : 
; 1820 :   /*signature*/
; 1821 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)ENDHEADERMAGIC,4);

  0002b	6a 04		 push	 4
  0002d	6a 00		 push	 0
  0002f	68 50 4b 05 06	 push	 101010256		; 06054b50H
  00034	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00037	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0003a	51		 push	 ecx
  0003b	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  0003e	52		 push	 edx
  0003f	e8 00 00 00 00	 call	 _zip64local_putValue
  00044	83 c4 14	 add	 esp, 20			; 00000014H
  00047	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax

; 1822 : 
; 1823 :   if (err==ZIP_OK) /* number of this disk */

  0004a	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  0004e	75 1c		 jne	 SHORT $LN2@Write_EndO

; 1824 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,2);

  00050	6a 02		 push	 2
  00052	6a 00		 push	 0
  00054	6a 00		 push	 0
  00056	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00059	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0005c	51		 push	 ecx
  0005d	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 _zip64local_putValue
  00066	83 c4 14	 add	 esp, 20			; 00000014H
  00069	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN2@Write_EndO:

; 1825 : 
; 1826 :   if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  0006c	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  00070	75 1c		 jne	 SHORT $LN3@Write_EndO

; 1827 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,2);

  00072	6a 02		 push	 2
  00074	6a 00		 push	 0
  00076	6a 00		 push	 0
  00078	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  0007b	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0007e	51		 push	 ecx
  0007f	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00082	52		 push	 edx
  00083	e8 00 00 00 00	 call	 _zip64local_putValue
  00088	83 c4 14	 add	 esp, 20			; 00000014H
  0008b	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN3@Write_EndO:

; 1828 : 
; 1829 :   if (err==ZIP_OK) /* total number of entries in the central dir on this disk */

  0008e	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  00092	75 67		 jne	 SHORT $LN4@Write_EndO

; 1830 :   {
; 1831 :     {
; 1832 :       if(zi->number_entry >= 0xFFFF)

  00094	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00097	89 45 f0	 mov	 DWORD PTR tv208[ebp], eax
  0009a	8b 4d f0	 mov	 ecx, DWORD PTR tv208[ebp]
  0009d	83 b9 fc 00 01
	00 00		 cmp	 DWORD PTR [ecx+65788], 0
  000a4	77 0f		 ja	 SHORT $LN16@Write_EndO
  000a6	8b 55 f0	 mov	 edx, DWORD PTR tv208[ebp]
  000a9	81 ba f8 00 01
	00 ff ff 00 00	 cmp	 DWORD PTR [edx+65784], 65535 ; 0000ffffH
  000b3	72 21		 jb	 SHORT $LN5@Write_EndO
$LN16@Write_EndO:

; 1833 :         err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xffff,2); // use value in ZIP64 record

  000b5	6a 02		 push	 2
  000b7	6a 00		 push	 0
  000b9	68 ff ff 00 00	 push	 65535			; 0000ffffH
  000be	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  000c1	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  000c4	51		 push	 ecx
  000c5	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  000c8	52		 push	 edx
  000c9	e8 00 00 00 00	 call	 _zip64local_putValue
  000ce	83 c4 14	 add	 esp, 20			; 00000014H
  000d1	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
  000d4	eb 25		 jmp	 SHORT $LN4@Write_EndO
$LN5@Write_EndO:

; 1834 :       else
; 1835 :         err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->number_entry,2);

  000d6	6a 02		 push	 2
  000d8	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  000db	8b 88 f8 00 01
	00		 mov	 ecx, DWORD PTR [eax+65784]
  000e1	33 d2		 xor	 edx, edx
  000e3	52		 push	 edx
  000e4	51		 push	 ecx
  000e5	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  000e8	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  000eb	51		 push	 ecx
  000ec	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  000ef	52		 push	 edx
  000f0	e8 00 00 00 00	 call	 _zip64local_putValue
  000f5	83 c4 14	 add	 esp, 20			; 00000014H
  000f8	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN4@Write_EndO:

; 1836 :     }
; 1837 :   }
; 1838 : 
; 1839 :   if (err==ZIP_OK) /* total number of entries in the central dir */

  000fb	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  000ff	75 67		 jne	 SHORT $LN7@Write_EndO

; 1840 :   {
; 1841 :     if(zi->number_entry >= 0xFFFF)

  00101	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00104	89 45 ec	 mov	 DWORD PTR tv226[ebp], eax
  00107	8b 4d ec	 mov	 ecx, DWORD PTR tv226[ebp]
  0010a	83 b9 fc 00 01
	00 00		 cmp	 DWORD PTR [ecx+65788], 0
  00111	77 0f		 ja	 SHORT $LN17@Write_EndO
  00113	8b 55 ec	 mov	 edx, DWORD PTR tv226[ebp]
  00116	81 ba f8 00 01
	00 ff ff 00 00	 cmp	 DWORD PTR [edx+65784], 65535 ; 0000ffffH
  00120	72 21		 jb	 SHORT $LN8@Write_EndO
$LN17@Write_EndO:

; 1842 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xffff,2); // use value in ZIP64 record

  00122	6a 02		 push	 2
  00124	6a 00		 push	 0
  00126	68 ff ff 00 00	 push	 65535			; 0000ffffH
  0012b	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  0012e	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00131	51		 push	 ecx
  00132	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00135	52		 push	 edx
  00136	e8 00 00 00 00	 call	 _zip64local_putValue
  0013b	83 c4 14	 add	 esp, 20			; 00000014H
  0013e	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
  00141	eb 25		 jmp	 SHORT $LN7@Write_EndO
$LN8@Write_EndO:

; 1843 :     else
; 1844 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->number_entry,2);

  00143	6a 02		 push	 2
  00145	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00148	8b 88 f8 00 01
	00		 mov	 ecx, DWORD PTR [eax+65784]
  0014e	33 d2		 xor	 edx, edx
  00150	52		 push	 edx
  00151	51		 push	 ecx
  00152	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00155	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00158	51		 push	 ecx
  00159	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  0015c	52		 push	 edx
  0015d	e8 00 00 00 00	 call	 _zip64local_putValue
  00162	83 c4 14	 add	 esp, 20			; 00000014H
  00165	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN7@Write_EndO:

; 1845 :   }
; 1846 : 
; 1847 :   if (err==ZIP_OK) /* size of the central directory */

  00168	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  0016c	75 1f		 jne	 SHORT $LN10@Write_EndO

; 1848 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_centraldir,4);

  0016e	6a 04		 push	 4
  00170	8b 45 0c	 mov	 eax, DWORD PTR _size_centraldir$[ebp]
  00173	33 c9		 xor	 ecx, ecx
  00175	51		 push	 ecx
  00176	50		 push	 eax
  00177	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  0017a	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0017d	50		 push	 eax
  0017e	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  00181	51		 push	 ecx
  00182	e8 00 00 00 00	 call	 _zip64local_putValue
  00187	83 c4 14	 add	 esp, 20			; 00000014H
  0018a	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN10@Write_EndO:

; 1849 : 
; 1850 :   if (err==ZIP_OK) /* offset of start of central directory with respect to the starting disk number */

  0018d	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  00191	75 70		 jne	 SHORT $LN11@Write_EndO

; 1851 :   {
; 1852 :     ZPOS64_T pos = centraldir_pos_inzip - zi->add_position_when_writing_offset;

  00193	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00196	8b 45 10	 mov	 eax, DWORD PTR _centraldir_pos_inzip$[ebp]
  00199	2b 82 f0 00 01
	00		 sub	 eax, DWORD PTR [edx+65776]
  0019f	8b 4d 14	 mov	 ecx, DWORD PTR _centraldir_pos_inzip$[ebp+4]
  001a2	1b 8a f4 00 01
	00		 sbb	 ecx, DWORD PTR [edx+65780]
  001a8	89 45 f4	 mov	 DWORD PTR _pos$1[ebp], eax
  001ab	89 4d f8	 mov	 DWORD PTR _pos$1[ebp+4], ecx

; 1853 :     if(pos >= 0xffffffff)

  001ae	83 7d f8 00	 cmp	 DWORD PTR _pos$1[ebp+4], 0
  001b2	77 06		 ja	 SHORT $LN18@Write_EndO
  001b4	83 7d f4 ff	 cmp	 DWORD PTR _pos$1[ebp], -1
  001b8	72 1e		 jb	 SHORT $LN12@Write_EndO
$LN18@Write_EndO:

; 1854 :     {
; 1855 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream, (uLong)0xffffffff,4);

  001ba	6a 04		 push	 4
  001bc	6a 00		 push	 0
  001be	6a ff		 push	 -1
  001c0	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  001c3	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  001c6	50		 push	 eax
  001c7	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  001ca	51		 push	 ecx
  001cb	e8 00 00 00 00	 call	 _zip64local_putValue
  001d0	83 c4 14	 add	 esp, 20			; 00000014H
  001d3	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax

; 1856 :     }

  001d6	eb 2b		 jmp	 SHORT $LN11@Write_EndO
$LN12@Write_EndO:

; 1857 :     else
; 1858 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream, (uLong)(centraldir_pos_inzip - zi->add_position_when_writing_offset),4);

  001d8	0f ae e8	 lfence
  001db	6a 04		 push	 4
  001dd	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  001e0	8b 45 10	 mov	 eax, DWORD PTR _centraldir_pos_inzip$[ebp]
  001e3	2b 82 f0 00 01
	00		 sub	 eax, DWORD PTR [edx+65776]
  001e9	33 c9		 xor	 ecx, ecx
  001eb	51		 push	 ecx
  001ec	50		 push	 eax
  001ed	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  001f0	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  001f3	50		 push	 eax
  001f4	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  001f7	51		 push	 ecx
  001f8	e8 00 00 00 00	 call	 _zip64local_putValue
  001fd	83 c4 14	 add	 esp, 20			; 00000014H
  00200	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN11@Write_EndO:

; 1859 :   }
; 1860 : 
; 1861 :    return err;

  00203	8b 45 fc	 mov	 eax, DWORD PTR _err$[ebp]

; 1862 : }

  00206	83 c4 14	 add	 esp, 20			; 00000014H
  00209	3b ec		 cmp	 ebp, esp
  0020b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00210	8b e5		 mov	 esp, ebp
  00212	5d		 pop	 ebp
  00213	c3		 ret	 0
_Write_EndOfCentralDirectoryRecord ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _Write_GlobalComment
_TEXT	SEGMENT
_size_global_comment$ = -8				; size = 4
_err$ = -4						; size = 4
_zi$ = 8						; size = 4
_global_comment$ = 12					; size = 4
_Write_GlobalComment PROC				; COMDAT

; 1865 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1866 :   int err = ZIP_OK;

  0001f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 1867 :   uInt size_global_comment = 0;

  00026	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _size_global_comment$[ebp], 0

; 1868 : 
; 1869 :   if(global_comment != NULL)

  0002d	83 7d 0c 00	 cmp	 DWORD PTR _global_comment$[ebp], 0
  00031	74 0f		 je	 SHORT $LN2@Write_Glob

; 1870 :     size_global_comment = (uInt)strlen(global_comment);

  00033	8b 45 0c	 mov	 eax, DWORD PTR _global_comment$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _strlen
  0003c	83 c4 04	 add	 esp, 4
  0003f	89 45 f8	 mov	 DWORD PTR _size_global_comment$[ebp], eax
$LN2@Write_Glob:

; 1871 : 
; 1872 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_global_comment,2);

  00042	6a 02		 push	 2
  00044	8b 4d f8	 mov	 ecx, DWORD PTR _size_global_comment$[ebp]
  00047	33 d2		 xor	 edx, edx
  00049	52		 push	 edx
  0004a	51		 push	 ecx
  0004b	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  0004e	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00051	51		 push	 ecx
  00052	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00055	52		 push	 edx
  00056	e8 00 00 00 00	 call	 _zip64local_putValue
  0005b	83 c4 14	 add	 esp, 20			; 00000014H
  0005e	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax

; 1873 : 
; 1874 :   if (err == ZIP_OK && size_global_comment > 0)

  00061	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  00065	75 3f		 jne	 SHORT $LN3@Write_Glob
  00067	83 7d f8 00	 cmp	 DWORD PTR _size_global_comment$[ebp], 0
  0006b	76 39		 jbe	 SHORT $LN3@Write_Glob

; 1875 :   {
; 1876 :     if (ZWRITE64(zi->z_filefunc,zi->filestream, global_comment, size_global_comment) != size_global_comment)

  0006d	0f ae e8	 lfence
  00070	8b f4		 mov	 esi, esp
  00072	8b 45 f8	 mov	 eax, DWORD PTR _size_global_comment$[ebp]
  00075	50		 push	 eax
  00076	8b 4d 0c	 mov	 ecx, DWORD PTR _global_comment$[ebp]
  00079	51		 push	 ecx
  0007a	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  0007d	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00080	50		 push	 eax
  00081	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  00084	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00087	52		 push	 edx
  00088	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  0008b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0008e	ff d1		 call	 ecx
  00090	83 c4 10	 add	 esp, 16			; 00000010H
  00093	3b f4		 cmp	 esi, esp
  00095	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009a	3b 45 f8	 cmp	 eax, DWORD PTR _size_global_comment$[ebp]
  0009d	74 07		 je	 SHORT $LN3@Write_Glob

; 1877 :       err = ZIP_ERRNO;

  0009f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN3@Write_Glob:

; 1878 :   }
; 1879 :   return err;

  000a6	8b 45 fc	 mov	 eax, DWORD PTR _err$[ebp]

; 1880 : }

  000a9	5e		 pop	 esi
  000aa	83 c4 08	 add	 esp, 8
  000ad	3b ec		 cmp	 ebp, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c3		 ret	 0
_Write_GlobalComment ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT _zipClose@8
_TEXT	SEGMENT
tv217 = -44						; size = 4
_Zip64EOCDpos$1 = -40					; size = 8
_ldi$2 = -32						; size = 4
_pos$ = -28						; size = 8
_centraldir_pos_inzip$ = -20				; size = 8
_size_centraldir$ = -12					; size = 4
_err$ = -8						; size = 4
_zi$ = -4						; size = 4
_file$ = 8						; size = 4
_global_comment$ = 12					; size = 4
_zipClose@8 PROC					; COMDAT

; 1883 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d d4	 lea	 edi, DWORD PTR [ebp-44]
  0000b	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1884 :     zip64_internal* zi;
; 1885 :     int err = 0;

  00021	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 1886 :     uLong size_centraldir = 0;

  00028	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _size_centraldir$[ebp], 0

; 1887 :     ZPOS64_T centraldir_pos_inzip;
; 1888 :     ZPOS64_T pos;
; 1889 : 
; 1890 :     if (file == NULL)

  0002f	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00033	75 0a		 jne	 SHORT $LN4@zipClose

; 1891 :         return ZIP_PARAMERROR;

  00035	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  0003a	e9 fd 01 00 00	 jmp	 $LN1@zipClose
$LN4@zipClose:

; 1892 : 
; 1893 :     zi = (zip64_internal*)file;

  0003f	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00042	89 45 fc	 mov	 DWORD PTR _zi$[ebp], eax

; 1894 : 
; 1895 :     if (zi->in_opened_file_inzip == 1)

  00045	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  00048	83 79 38 01	 cmp	 DWORD PTR [ecx+56], 1
  0004c	75 0c		 jne	 SHORT $LN5@zipClose

; 1896 :     {
; 1897 :         err = zipCloseFileInZip (file);

  0004e	8b 55 08	 mov	 edx, DWORD PTR _file$[ebp]
  00051	52		 push	 edx
  00052	e8 00 00 00 00	 call	 _zipCloseFileInZip@4
  00057	89 45 f8	 mov	 DWORD PTR _err$[ebp], eax
$LN5@zipClose:

; 1898 :     }
; 1899 : 
; 1900 : #ifndef NO_ADDFILEINEXISTINGZIP
; 1901 :     if (global_comment==NULL)

  0005a	83 7d 0c 00	 cmp	 DWORD PTR _global_comment$[ebp], 0
  0005e	75 0c		 jne	 SHORT $LN6@zipClose

; 1902 :         global_comment = zi->globalcomment;

  00060	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  00063	8b 88 00 01 01
	00		 mov	 ecx, DWORD PTR [eax+65792]
  00069	89 4d 0c	 mov	 DWORD PTR _global_comment$[ebp], ecx
$LN6@zipClose:

; 1903 : #endif
; 1904 : 
; 1905 :     centraldir_pos_inzip = ZTELL64(zi->z_filefunc,zi->filestream);

  0006c	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  0006f	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00072	50		 push	 eax
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 _call_ztell64
  0007c	83 c4 08	 add	 esp, 8
  0007f	89 45 ec	 mov	 DWORD PTR _centraldir_pos_inzip$[ebp], eax
  00082	89 55 f0	 mov	 DWORD PTR _centraldir_pos_inzip$[ebp+4], edx

; 1906 : 
; 1907 :     if (err==ZIP_OK)

  00085	83 7d f8 00	 cmp	 DWORD PTR _err$[ebp], 0
  00089	75 73		 jne	 SHORT $LN7@zipClose

; 1908 :     {
; 1909 :         linkedlist_datablock_internal* ldi = zi->central_dir.first_block;

  0008b	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  0008e	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00091	89 45 e0	 mov	 DWORD PTR _ldi$2[ebp], eax
$LN2@zipClose:

; 1910 :         while (ldi!=NULL)

  00094	83 7d e0 00	 cmp	 DWORD PTR _ldi$2[ebp], 0
  00098	74 64		 je	 SHORT $LN7@zipClose

; 1911 :         {
; 1912 :             if ((err==ZIP_OK) && (ldi->filled_in_this_block>0))

  0009a	83 7d f8 00	 cmp	 DWORD PTR _err$[ebp], 0
  0009e	75 48		 jne	 SHORT $LN8@zipClose
  000a0	8b 4d e0	 mov	 ecx, DWORD PTR _ldi$2[ebp]
  000a3	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  000a7	76 3f		 jbe	 SHORT $LN8@zipClose

; 1913 :             {
; 1914 :                 if (ZWRITE64(zi->z_filefunc,zi->filestream, ldi->data, ldi->filled_in_this_block) != ldi->filled_in_this_block)

  000a9	8b f4		 mov	 esi, esp
  000ab	8b 55 e0	 mov	 edx, DWORD PTR _ldi$2[ebp]
  000ae	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000b1	50		 push	 eax
  000b2	8b 4d e0	 mov	 ecx, DWORD PTR _ldi$2[ebp]
  000b5	83 c1 10	 add	 ecx, 16			; 00000010H
  000b8	51		 push	 ecx
  000b9	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  000bc	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  000bf	50		 push	 eax
  000c0	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  000c3	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000c6	52		 push	 edx
  000c7	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  000ca	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000cd	ff d1		 call	 ecx
  000cf	83 c4 10	 add	 esp, 16			; 00000010H
  000d2	3b f4		 cmp	 esi, esp
  000d4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d9	8b 55 e0	 mov	 edx, DWORD PTR _ldi$2[ebp]
  000dc	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  000df	74 07		 je	 SHORT $LN8@zipClose

; 1915 :                     err = ZIP_ERRNO;

  000e1	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN8@zipClose:

; 1916 :             }
; 1917 : 
; 1918 :             size_centraldir += ldi->filled_in_this_block;

  000e8	8b 45 e0	 mov	 eax, DWORD PTR _ldi$2[ebp]
  000eb	8b 4d f4	 mov	 ecx, DWORD PTR _size_centraldir$[ebp]
  000ee	03 48 08	 add	 ecx, DWORD PTR [eax+8]
  000f1	89 4d f4	 mov	 DWORD PTR _size_centraldir$[ebp], ecx

; 1919 :             ldi = ldi->next_datablock;

  000f4	8b 55 e0	 mov	 edx, DWORD PTR _ldi$2[ebp]
  000f7	8b 02		 mov	 eax, DWORD PTR [edx]
  000f9	89 45 e0	 mov	 DWORD PTR _ldi$2[ebp], eax

; 1920 :         }

  000fc	eb 96		 jmp	 SHORT $LN2@zipClose
$LN7@zipClose:

; 1921 :     }
; 1922 :     free_linkedlist(&(zi->central_dir));

  000fe	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  00101	83 c1 30	 add	 ecx, 48			; 00000030H
  00104	51		 push	 ecx
  00105	e8 00 00 00 00	 call	 _free_linkedlist
  0010a	83 c4 04	 add	 esp, 4

; 1923 : 
; 1924 :     pos = centraldir_pos_inzip - zi->add_position_when_writing_offset;

  0010d	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  00110	8b 45 ec	 mov	 eax, DWORD PTR _centraldir_pos_inzip$[ebp]
  00113	2b 82 f0 00 01
	00		 sub	 eax, DWORD PTR [edx+65776]
  00119	8b 4d f0	 mov	 ecx, DWORD PTR _centraldir_pos_inzip$[ebp+4]
  0011c	1b 8a f4 00 01
	00		 sbb	 ecx, DWORD PTR [edx+65780]
  00122	89 45 e4	 mov	 DWORD PTR _pos$[ebp], eax
  00125	89 4d e8	 mov	 DWORD PTR _pos$[ebp+4], ecx

; 1925 :     if(pos >= 0xffffffff || zi->number_entry > 0xFFFF)

  00128	83 7d e8 00	 cmp	 DWORD PTR _pos$[ebp+4], 0
  0012c	77 29		 ja	 SHORT $LN11@zipClose
  0012e	72 06		 jb	 SHORT $LN20@zipClose
  00130	83 7d e4 ff	 cmp	 DWORD PTR _pos$[ebp], -1
  00134	73 21		 jae	 SHORT $LN11@zipClose
$LN20@zipClose:
  00136	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  00139	89 55 d4	 mov	 DWORD PTR tv217[ebp], edx
  0013c	8b 45 d4	 mov	 eax, DWORD PTR tv217[ebp]
  0013f	83 b8 fc 00 01
	00 00		 cmp	 DWORD PTR [eax+65788], 0
  00146	77 0f		 ja	 SHORT $LN11@zipClose
  00148	8b 4d d4	 mov	 ecx, DWORD PTR tv217[ebp]
  0014b	81 b9 f8 00 01
	00 ff ff 00 00	 cmp	 DWORD PTR [ecx+65784], 65535 ; 0000ffffH
  00155	76 45		 jbe	 SHORT $LN10@zipClose
$LN11@zipClose:

; 1926 :     {
; 1927 :       ZPOS64_T Zip64EOCDpos = ZTELL64(zi->z_filefunc,zi->filestream);

  00157	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  0015a	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0015d	50		 push	 eax
  0015e	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  00161	51		 push	 ecx
  00162	e8 00 00 00 00	 call	 _call_ztell64
  00167	83 c4 08	 add	 esp, 8
  0016a	89 45 d8	 mov	 DWORD PTR _Zip64EOCDpos$1[ebp], eax
  0016d	89 55 dc	 mov	 DWORD PTR _Zip64EOCDpos$1[ebp+4], edx

; 1928 :       Write_Zip64EndOfCentralDirectoryRecord(zi, size_centraldir, centraldir_pos_inzip);

  00170	8b 55 f0	 mov	 edx, DWORD PTR _centraldir_pos_inzip$[ebp+4]
  00173	52		 push	 edx
  00174	8b 45 ec	 mov	 eax, DWORD PTR _centraldir_pos_inzip$[ebp]
  00177	50		 push	 eax
  00178	8b 4d f4	 mov	 ecx, DWORD PTR _size_centraldir$[ebp]
  0017b	51		 push	 ecx
  0017c	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  0017f	52		 push	 edx
  00180	e8 00 00 00 00	 call	 _Write_Zip64EndOfCentralDirectoryRecord
  00185	83 c4 10	 add	 esp, 16			; 00000010H

; 1929 : 
; 1930 :       Write_Zip64EndOfCentralDirectoryLocator(zi, Zip64EOCDpos);

  00188	8b 45 dc	 mov	 eax, DWORD PTR _Zip64EOCDpos$1[ebp+4]
  0018b	50		 push	 eax
  0018c	8b 4d d8	 mov	 ecx, DWORD PTR _Zip64EOCDpos$1[ebp]
  0018f	51		 push	 ecx
  00190	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  00193	52		 push	 edx
  00194	e8 00 00 00 00	 call	 _Write_Zip64EndOfCentralDirectoryLocator
  00199	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@zipClose:

; 1931 :     }
; 1932 : 
; 1933 :     if (err==ZIP_OK)

  0019c	83 7d f8 00	 cmp	 DWORD PTR _err$[ebp], 0
  001a0	75 1b		 jne	 SHORT $LN12@zipClose

; 1934 :       err = Write_EndOfCentralDirectoryRecord(zi, size_centraldir, centraldir_pos_inzip);

  001a2	8b 45 f0	 mov	 eax, DWORD PTR _centraldir_pos_inzip$[ebp+4]
  001a5	50		 push	 eax
  001a6	8b 4d ec	 mov	 ecx, DWORD PTR _centraldir_pos_inzip$[ebp]
  001a9	51		 push	 ecx
  001aa	8b 55 f4	 mov	 edx, DWORD PTR _size_centraldir$[ebp]
  001ad	52		 push	 edx
  001ae	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  001b1	50		 push	 eax
  001b2	e8 00 00 00 00	 call	 _Write_EndOfCentralDirectoryRecord
  001b7	83 c4 10	 add	 esp, 16			; 00000010H
  001ba	89 45 f8	 mov	 DWORD PTR _err$[ebp], eax
$LN12@zipClose:

; 1935 : 
; 1936 :     if(err == ZIP_OK)

  001bd	83 7d f8 00	 cmp	 DWORD PTR _err$[ebp], 0
  001c1	75 13		 jne	 SHORT $LN13@zipClose

; 1937 :       err = Write_GlobalComment(zi, global_comment);

  001c3	8b 4d 0c	 mov	 ecx, DWORD PTR _global_comment$[ebp]
  001c6	51		 push	 ecx
  001c7	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  001ca	52		 push	 edx
  001cb	e8 00 00 00 00	 call	 _Write_GlobalComment
  001d0	83 c4 08	 add	 esp, 8
  001d3	89 45 f8	 mov	 DWORD PTR _err$[ebp], eax
$LN13@zipClose:

; 1938 : 
; 1939 :     if (ZCLOSE64(zi->z_filefunc,zi->filestream) != 0)

  001d6	8b f4		 mov	 esi, esp
  001d8	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  001db	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  001de	51		 push	 ecx
  001df	8b 55 fc	 mov	 edx, DWORD PTR _zi$[ebp]
  001e2	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  001e5	50		 push	 eax
  001e6	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  001e9	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  001ec	ff d2		 call	 edx
  001ee	83 c4 08	 add	 esp, 8
  001f1	3b f4		 cmp	 esi, esp
  001f3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001f8	85 c0		 test	 eax, eax
  001fa	74 0d		 je	 SHORT $LN14@zipClose

; 1940 :         if (err == ZIP_OK)

  001fc	83 7d f8 00	 cmp	 DWORD PTR _err$[ebp], 0
  00200	75 07		 jne	 SHORT $LN14@zipClose

; 1941 :             err = ZIP_ERRNO;

  00202	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN14@zipClose:

; 1942 : 
; 1943 : #ifndef NO_ADDFILEINEXISTINGZIP
; 1944 :     TRYFREE(zi->globalcomment);

  00209	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  0020c	83 b8 00 01 01
	00 00		 cmp	 DWORD PTR [eax+65792], 0
  00213	74 12		 je	 SHORT $LN16@zipClose
  00215	8b 4d fc	 mov	 ecx, DWORD PTR _zi$[ebp]
  00218	8b 91 00 01 01
	00		 mov	 edx, DWORD PTR [ecx+65792]
  0021e	52		 push	 edx
  0021f	e8 00 00 00 00	 call	 _free
  00224	83 c4 04	 add	 esp, 4
$LN16@zipClose:

; 1945 : #endif
; 1946 :     TRYFREE(zi);

  00227	83 7d fc 00	 cmp	 DWORD PTR _zi$[ebp], 0
  0022b	74 0c		 je	 SHORT $LN17@zipClose
  0022d	8b 45 fc	 mov	 eax, DWORD PTR _zi$[ebp]
  00230	50		 push	 eax
  00231	e8 00 00 00 00	 call	 _free
  00236	83 c4 04	 add	 esp, 4
$LN17@zipClose:

; 1947 : 
; 1948 :     return err;

  00239	8b 45 f8	 mov	 eax, DWORD PTR _err$[ebp]
$LN1@zipClose:

; 1949 : }

  0023c	5f		 pop	 edi
  0023d	5e		 pop	 esi
  0023e	83 c4 2c	 add	 esp, 44			; 0000002cH
  00241	3b ec		 cmp	 ebp, esp
  00243	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00248	8b e5		 mov	 esp, ebp
  0024a	5d		 pop	 ebp
  0024b	c2 08 00	 ret	 8
_zipClose@8 ENDP
_TEXT	ENDS
END

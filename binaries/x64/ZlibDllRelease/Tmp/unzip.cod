; Listing generated by Microsoft (R) Optimizing Compiler Version 19.20.27525.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	unz_copyright
EXTRN	__imp_strcmp:PROC
	ORG $+13
unz_copyright DB ' unzip 1.01 Copyright 1998-2004 Gilles Vollant - http:/'
	DB	'/www.winimage.com/zLibDll', 00H
__DB664BEB_corecrt_stdio_config@h DB 01H
__E28BBA23_corecrt_wstdio@h DB 01H
__4A1C29A8_stdio@h DB 01H
__9CFFAB73_corecrt_memcpy_s@h DB 01H
__55B7CB8D_corecrt_wstring@h DB 01H
__2F7506B6_string@h DB 01H
__95347B96_ctype@h DB 01H
__149DB6BE_basetsd@h DB 01H
__5BA8817F_winnt@h DB 01H
__8421AFE7_processthreadsapi@h DB 01H
__F192E00B_memoryapi@h DB 01H
__0DF854E2_winerror@h DB 01H
__940BF1C4_winbase@h DB 01H
__78A3E64A_stralign@h DB 01H
__D0AA5D20_unzip@c DB 01H
PUBLIC	unzGetGlobalComment
PUBLIC	unzCloseCurrentFile
PUBLIC	unzGetLocalExtrafield
PUBLIC	unzeof
PUBLIC	unztell64
PUBLIC	unztell
PUBLIC	unzReadCurrentFile
PUBLIC	unzGetCurrentFileZStreamPos64
PUBLIC	unzOpenCurrentFile2
PUBLIC	unzOpenCurrentFilePassword
PUBLIC	unzOpenCurrentFile
PUBLIC	unzOpenCurrentFile3
PUBLIC	unzGoToFilePos
PUBLIC	unzGoToFilePos64
PUBLIC	unzGetFilePos
PUBLIC	unzGetFilePos64
PUBLIC	unzLocateFile
PUBLIC	unzGoToNextFile
PUBLIC	unzGoToFirstFile
PUBLIC	unzGetCurrentFileInfo
PUBLIC	unzGetCurrentFileInfo64
PUBLIC	unzGetGlobalInfo
PUBLIC	unzGetGlobalInfo64
PUBLIC	unzClose
PUBLIC	unzOpen64
PUBLIC	unzOpen
PUBLIC	unzOpen2_64
PUBLIC	unzOpen2
PUBLIC	unzStringFileNameCompare
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGetGlobalComment DD imagerel $LN10
	DD	imagerel $LN10+282
	DD	imagerel $unwind$unzGetGlobalComment
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzCloseCurrentFile DD imagerel $LN11
	DD	imagerel $LN11+296
	DD	imagerel $unwind$unzCloseCurrentFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGetLocalExtrafield DD imagerel $LN12
	DD	imagerel $LN12+335
	DD	imagerel $unwind$unzGetLocalExtrafield
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzeof DD imagerel $LN8
	DD	imagerel $LN8+131
	DD	imagerel $unwind$unzeof
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unztell64 DD imagerel $LN6
	DD	imagerel $LN6+121
	DD	imagerel $unwind$unztell64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unztell DD imagerel $LN6
	DD	imagerel $LN6+113
	DD	imagerel $unwind$unztell
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzReadCurrentFile DD imagerel $LN36
	DD	imagerel $LN36+1441
	DD	imagerel $unwind$unzReadCurrentFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGetCurrentFileZStreamPos64 DD imagerel $LN6
	DD	imagerel $LN6+120
	DD	imagerel $unwind$unzGetCurrentFileZStreamPos64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzOpenCurrentFile2 DD imagerel $LN4
	DD	imagerel $LN4+97
	DD	imagerel $unwind$unzOpenCurrentFile2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzOpenCurrentFilePassword DD imagerel $LN4
	DD	imagerel $LN4+81
	DD	imagerel $unwind$unzOpenCurrentFilePassword
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzOpenCurrentFile DD imagerel $LN4
	DD	imagerel $LN4+75
	DD	imagerel $unwind$unzOpenCurrentFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzOpenCurrentFile3 DD imagerel $LN30
	DD	imagerel $LN30+1129
	DD	imagerel $unwind$unzOpenCurrentFile3
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unz64local_CheckCurrentFileCoherencyHeader DD imagerel unz64local_CheckCurrentFileCoherencyHeader
	DD	imagerel unz64local_CheckCurrentFileCoherencyHeader+1193
	DD	imagerel $unwind$unz64local_CheckCurrentFileCoherencyHeader
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGoToFilePos DD imagerel $LN5
	DD	imagerel $LN5+129
	DD	imagerel $unwind$unzGoToFilePos
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGoToFilePos64 DD imagerel $LN8
	DD	imagerel $LN8+264
	DD	imagerel $unwind$unzGoToFilePos64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGetFilePos DD imagerel $LN5
	DD	imagerel $LN5+125
	DD	imagerel $unwind$unzGetFilePos
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGetFilePos64 DD imagerel $LN7
	DD	imagerel $LN7+151
	DD	imagerel $unwind$unzGetFilePos64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzLocateFile DD imagerel $LN11
	DD	imagerel $LN11+523
	DD	imagerel $unwind$unzLocateFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGoToNextFile DD imagerel $LN10
	DD	imagerel $LN10+376
	DD	imagerel $unwind$unzGoToNextFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGoToFirstFile DD imagerel $LN7
	DD	imagerel $LN7+270
	DD	imagerel $unwind$unzGoToFirstFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGetCurrentFileInfo DD imagerel $LN5
	DD	imagerel $LN5+484
	DD	imagerel $unwind$unzGetCurrentFileInfo
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGetCurrentFileInfo64 DD imagerel $LN4
	DD	imagerel $LN4+142
	DD	imagerel $unwind$unzGetCurrentFileInfo64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unz64local_GetCurrentFileInfoInternal DD imagerel unz64local_GetCurrentFileInfoInternal
	DD	imagerel unz64local_GetCurrentFileInfoInternal+2432
	DD	imagerel $unwind$unz64local_GetCurrentFileInfoInternal
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unz64local_DosDateToTmuDate DD imagerel unz64local_DosDateToTmuDate
	DD	imagerel unz64local_DosDateToTmuDate+228
	DD	imagerel $unwind$unz64local_DosDateToTmuDate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGetGlobalInfo DD imagerel $LN5
	DD	imagerel $LN5+111
	DD	imagerel $unwind$unzGetGlobalInfo
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGetGlobalInfo64 DD imagerel $LN5
	DD	imagerel $LN5+103
	DD	imagerel $unwind$unzGetGlobalInfo64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzClose DD imagerel $LN7
	DD	imagerel $LN7+145
	DD	imagerel $unwind$unzClose
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzOpen64 DD imagerel $LN4
	DD	imagerel $LN4+66
	DD	imagerel $unwind$unzOpen64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzOpen DD imagerel $LN4
	DD	imagerel $LN4+63
	DD	imagerel $unwind$unzOpen
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzOpen2_64 DD imagerel $LN6
	DD	imagerel $LN6+189
	DD	imagerel $unwind$unzOpen2_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzOpen2 DD imagerel $LN6
	DD	imagerel $LN6+155
	DD	imagerel $unwind$unzOpen2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzOpenInternal DD imagerel unzOpenInternal
	DD	imagerel unzOpenInternal+1619
	DD	imagerel $unwind$unzOpenInternal
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unz64local_SearchCentralDir64 DD imagerel unz64local_SearchCentralDir64
	DD	imagerel unz64local_SearchCentralDir64+1066
	DD	imagerel $unwind$unz64local_SearchCentralDir64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unz64local_SearchCentralDir DD imagerel unz64local_SearchCentralDir
	DD	imagerel unz64local_SearchCentralDir+651
	DD	imagerel $unwind$unz64local_SearchCentralDir
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzStringFileNameCompare DD imagerel $LN6
	DD	imagerel $LN6+113
	DD	imagerel $unwind$unzStringFileNameCompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$strcmpcasenosensitive_internal DD imagerel strcmpcasenosensitive_internal
	DD	imagerel strcmpcasenosensitive_internal+272
	DD	imagerel $unwind$strcmpcasenosensitive_internal
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unz64local_getLong64 DD imagerel unz64local_getLong64
	DD	imagerel unz64local_getLong64+549
	DD	imagerel $unwind$unz64local_getLong64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unz64local_getLong DD imagerel unz64local_getLong
	DD	imagerel unz64local_getLong+302
	DD	imagerel $unwind$unz64local_getLong
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unz64local_getShort DD imagerel unz64local_getShort
	DD	imagerel unz64local_getShort+202
	DD	imagerel $unwind$unz64local_getShort
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unz64local_getByte DD imagerel unz64local_getByte
	DD	imagerel unz64local_getByte+178
	DD	imagerel $unwind$unz64local_getByte
;	COMDAT xdata
xdata	SEGMENT
$unwind$unz64local_getByte DD 022801H
	DD	070107214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
unz64local_getByte$rtcName$0 DB 063H
	DB	00H
	ORG $+14
unz64local_getByte$rtcVarDesc DD 024H
	DD	01H
	DQ	FLAT:unz64local_getByte$rtcName$0
	ORG $+48
unz64local_getByte$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:unz64local_getByte$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unz64local_getShort DD 022801H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
unz64local_getShort$rtcName$0 DB 069H
	DB	00H
	ORG $+14
unz64local_getShort$rtcVarDesc DD 034H
	DD	04H
	DQ	FLAT:unz64local_getShort$rtcName$0
	ORG $+48
unz64local_getShort$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:unz64local_getShort$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unz64local_getLong DD 022801H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
unz64local_getLong$rtcName$0 DB 069H
	DB	00H
	ORG $+14
unz64local_getLong$rtcVarDesc DD 034H
	DD	04H
	DQ	FLAT:unz64local_getLong$rtcName$0
	ORG $+48
unz64local_getLong$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:unz64local_getLong$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unz64local_getLong64 DD 022801H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
unz64local_getLong64$rtcName$0 DB 069H
	DB	00H
	ORG $+14
unz64local_getLong64$rtcVarDesc DD 034H
	DD	04H
	DQ	FLAT:unz64local_getLong64$rtcName$0
	ORG $+48
unz64local_getLong64$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:unz64local_getLong64$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$strcmpcasenosensitive_internal DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzStringFileNameCompare DD 022801H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unz64local_SearchCentralDir DD 022601H
	DD	0700bd20fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unz64local_SearchCentralDir64 DD 032901H
	DD	0140112H
	DD	0700bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
unz64local_SearchCentralDir64$rtcName$0 DB 075H
	DB	04cH
	DB	00H
	ORG $+5
unz64local_SearchCentralDir64$rtcName$1 DB 072H
	DB	065H
	DB	06cH
	DB	061H
	DB	074H
	DB	069H
	DB	076H
	DB	065H
	DB	04fH
	DB	066H
	DB	066H
	DB	073H
	DB	065H
	DB	074H
	DB	00H
	ORG $+9
unz64local_SearchCentralDir64$rtcVarDesc DD 078H
	DD	08H
	DQ	FLAT:unz64local_SearchCentralDir64$rtcName$1
	DD	054H
	DD	04H
	DQ	FLAT:unz64local_SearchCentralDir64$rtcName$0
	ORG $+96
unz64local_SearchCentralDir64$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:unz64local_SearchCentralDir64$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzOpenInternal DD 042f01H
	DD	0470118H
	DD	060107011H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
unzOpenInternal$rtcName$0 DB 075H
	DB	073H
	DB	00H
	ORG $+1
unzOpenInternal$rtcName$1 DB 075H
	DB	04cH
	DB	00H
	ORG $+1
unzOpenInternal$rtcName$2 DB 06eH
	DB	075H
	DB	06dH
	DB	062H
	DB	065H
	DB	072H
	DB	05fH
	DB	064H
	DB	069H
	DB	073H
	DB	06bH
	DB	00H
unzOpenInternal$rtcName$5 DB 075H
	DB	053H
	DB	00H
	ORG $+1
unzOpenInternal$rtcName$3 DB 06eH
	DB	075H
	DB	06dH
	DB	062H
	DB	065H
	DB	072H
	DB	05fH
	DB	064H
	DB	069H
	DB	073H
	DB	06bH
	DB	05fH
	DB	077H
	DB	069H
	DB	074H
	DB	068H
	DB	05fH
	DB	043H
	DB	044H
	DB	00H
	ORG $+4
unzOpenInternal$rtcName$4 DB 06eH
	DB	075H
	DB	06dH
	DB	062H
	DB	065H
	DB	072H
	DB	05fH
	DB	065H
	DB	06eH
	DB	074H
	DB	072H
	DB	079H
	DB	05fH
	DB	043H
	DB	044H
	DB	00H
unzOpenInternal$rtcName$6 DB 075H
	DB	04cH
	DB	036H
	DB	034H
	DB	00H
	ORG $+3
unzOpenInternal$rtcFrameData DD 07H
	DD	00H
	DQ	FLAT:unzOpenInternal$rtcVarDesc
	ORG $+8
unzOpenInternal$rtcVarDesc DD 0218H
	DD	08H
	DQ	FLAT:unzOpenInternal$rtcName$6
	DD	01f4H
	DD	04H
	DQ	FLAT:unzOpenInternal$rtcName$5
	DD	01d8H
	DD	08H
	DQ	FLAT:unzOpenInternal$rtcName$4
	DD	01b4H
	DD	04H
	DQ	FLAT:unzOpenInternal$rtcName$3
	DD	0194H
	DD	04H
	DQ	FLAT:unzOpenInternal$rtcName$2
	DD	0174H
	DD	04H
	DQ	FLAT:unzOpenInternal$rtcName$1
	DD	030H
	DD	0120H
	DQ	FLAT:unzOpenInternal$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzOpen2 DD 032901H
	DD	0140112H
	DD	0700bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
unzOpen2$rtcName$0 DB 07aH
	DB	06cH
	DB	069H
	DB	062H
	DB	05fH
	DB	066H
	DB	069H
	DB	06cH
	DB	065H
	DB	066H
	DB	075H
	DB	06eH
	DB	063H
	DB	036H
	DB	034H
	DB	05fH
	DB	033H
	DB	032H
	DB	05fH
	DB	064H
	DB	065H
	DB	066H
	DB	05fH
	DB	066H
	DB	069H
	DB	06cH
	DB	06cH
	DB	00H
	ORG $+4
unzOpen2$rtcVarDesc DD 030H
	DD	058H
	DQ	FLAT:unzOpen2$rtcName$0
	ORG $+48
unzOpen2$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:unzOpen2$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzOpen2_64 DD 042a01H
	DD	0150113H
	DD	0600b700cH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
unzOpen2_64$rtcName$0 DB 07aH
	DB	06cH
	DB	069H
	DB	062H
	DB	05fH
	DB	066H
	DB	069H
	DB	06cH
	DB	065H
	DB	066H
	DB	075H
	DB	06eH
	DB	063H
	DB	036H
	DB	034H
	DB	05fH
	DB	033H
	DB	032H
	DB	05fH
	DB	064H
	DB	065H
	DB	066H
	DB	05fH
	DB	066H
	DB	069H
	DB	06cH
	DB	06cH
	DB	00H
	ORG $+4
unzOpen2_64$rtcVarDesc DD 030H
	DD	058H
	DQ	FLAT:unzOpen2_64$rtcName$0
	ORG $+48
unzOpen2_64$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:unzOpen2_64$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzOpen DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzOpen64 DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzClose DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGetGlobalInfo64 DD 032401H
	DD	0700c6210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGetGlobalInfo DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unz64local_DosDateToTmuDate DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unz64local_GetCurrentFileInfoInternal DD 043401H
	DD	031011dH
	DD	060157016H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
unz64local_GetCurrentFileInfoInternal$rtcName$0 DB 066H
	DB	069H
	DB	06cH
	DB	065H
	DB	05fH
	DB	069H
	DB	06eH
	DB	066H
	DB	06fH
	DB	00H
	ORG $+6
unz64local_GetCurrentFileInfoInternal$rtcName$1 DB 066H
	DB	069H
	DB	06cH
	DB	065H
	DB	05fH
	DB	069H
	DB	06eH
	DB	066H
	DB	06fH
	DB	05fH
	DB	069H
	DB	06eH
	DB	074H
	DB	065H
	DB	072H
	DB	06eH
	DB	061H
	DB	06cH
	DB	00H
	ORG $+1
unz64local_GetCurrentFileInfoInternal$rtcName$2 DB 075H
	DB	04dH
	DB	061H
	DB	067H
	DB	069H
	DB	063H
	DB	00H
	ORG $+1
unz64local_GetCurrentFileInfoInternal$rtcName$3 DB 075H
	DB	04cH
	DB	00H
	ORG $+1
unz64local_GetCurrentFileInfoInternal$rtcName$4 DB 068H
	DB	065H
	DB	061H
	DB	064H
	DB	065H
	DB	072H
	DB	049H
	DB	064H
	DB	00H
	ORG $+3
unz64local_GetCurrentFileInfoInternal$rtcName$6 DB 075H
	DB	04cH
	DB	00H
	ORG $+1
unz64local_GetCurrentFileInfoInternal$rtcName$5 DB 064H
	DB	061H
	DB	074H
	DB	061H
	DB	053H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+7
unz64local_GetCurrentFileInfoInternal$rtcVarDesc DD 0164H
	DD	04H
	DQ	FLAT:unz64local_GetCurrentFileInfoInternal$rtcName$6
	DD	0144H
	DD	04H
	DQ	FLAT:unz64local_GetCurrentFileInfoInternal$rtcName$5
	DD	0124H
	DD	04H
	DQ	FLAT:unz64local_GetCurrentFileInfoInternal$rtcName$4
	DD	0f4H
	DD	04H
	DQ	FLAT:unz64local_GetCurrentFileInfoInternal$rtcName$3
	DD	0d4H
	DD	04H
	DQ	FLAT:unz64local_GetCurrentFileInfoInternal$rtcName$2
	DD	0b8H
	DD	08H
	DQ	FLAT:unz64local_GetCurrentFileInfoInternal$rtcName$1
	DD	040H
	DD	058H
	DQ	FLAT:unz64local_GetCurrentFileInfoInternal$rtcName$0
	ORG $+336
unz64local_GetCurrentFileInfoInternal$rtcFrameData DD 07H
	DD	00H
	DQ	FLAT:unz64local_GetCurrentFileInfoInternal$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGetCurrentFileInfo64 DD 022d01H
	DD	070159219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGetCurrentFileInfo DD 043401H
	DD	01d011dH
	DD	060157016H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
unzGetCurrentFileInfo$rtcName$0 DB 066H
	DB	069H
	DB	06cH
	DB	065H
	DB	05fH
	DB	069H
	DB	06eH
	DB	066H
	DB	06fH
	DB	036H
	DB	034H
	DB	00H
	ORG $+4
unzGetCurrentFileInfo$rtcVarDesc DD 070H
	DD	058H
	DQ	FLAT:unzGetCurrentFileInfo$rtcName$0
	ORG $+48
unzGetCurrentFileInfo$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:unzGetCurrentFileInfo$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGoToFirstFile DD 022101H
	DD	07006d20aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGoToNextFile DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzLocateFile DD 042f01H
	DD	0470118H
	DD	060107011H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
unzLocateFile$rtcName$0 DB 063H
	DB	075H
	DB	072H
	DB	05fH
	DB	066H
	DB	069H
	DB	06cH
	DB	065H
	DB	05fH
	DB	069H
	DB	06eH
	DB	066H
	DB	06fH
	DB	053H
	DB	061H
	DB	076H
	DB	065H
	DB	064H
	DB	00H
	ORG $+5
unzLocateFile$rtcName$1 DB 063H
	DB	075H
	DB	072H
	DB	05fH
	DB	066H
	DB	069H
	DB	06cH
	DB	065H
	DB	05fH
	DB	069H
	DB	06eH
	DB	066H
	DB	06fH
	DB	05fH
	DB	069H
	DB	06eH
	DB	074H
	DB	065H
	DB	072H
	DB	06eH
	DB	061H
	DB	06cH
	DB	053H
	DB	061H
	DB	076H
	DB	065H
	DB	064H
	DB	00H
	ORG $+4
unzLocateFile$rtcName$2 DB 073H
	DB	07aH
	DB	043H
	DB	075H
	DB	072H
	DB	072H
	DB	065H
	DB	06eH
	DB	074H
	DB	046H
	DB	069H
	DB	06cH
	DB	065H
	DB	04eH
	DB	061H
	DB	06dH
	DB	065H
	DB	00H
	ORG $+6
unzLocateFile$rtcVarDesc DD 0110H
	DD	0101H
	DQ	FLAT:unzLocateFile$rtcName$2
	DD	0d8H
	DD	08H
	DQ	FLAT:unzLocateFile$rtcName$1
	DD	060H
	DD	058H
	DQ	FLAT:unzLocateFile$rtcName$0
	ORG $+144
unzLocateFile$rtcFrameData DD 03H
	DD	00H
	DQ	FLAT:unzLocateFile$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGetFilePos64 DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGetFilePos DD 022301H
	DD	0700b920fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
unzGetFilePos$rtcName$0 DB 066H
	DB	069H
	DB	06cH
	DB	065H
	DB	05fH
	DB	070H
	DB	06fH
	DB	073H
	DB	036H
	DB	034H
	DB	00H
	ORG $+5
unzGetFilePos$rtcVarDesc DD 028H
	DD	010H
	DQ	FLAT:unzGetFilePos$rtcName$0
	ORG $+48
unzGetFilePos$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:unzGetFilePos$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGoToFilePos64 DD 022301H
	DD	0700bb20fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGoToFilePos DD 022301H
	DD	0700b920fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
unzGoToFilePos$rtcName$0 DB 066H
	DB	069H
	DB	06cH
	DB	065H
	DB	05fH
	DB	070H
	DB	06fH
	DB	073H
	DB	036H
	DB	034H
	DB	00H
	ORG $+5
unzGoToFilePos$rtcVarDesc DD 028H
	DD	010H
	DQ	FLAT:unzGoToFilePos$rtcName$0
	ORG $+48
unzGoToFilePos$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:unzGoToFilePos$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unz64local_CheckCurrentFileCoherencyHeader DD 033301H
	DD	018011cH
	DD	07015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
unz64local_CheckCurrentFileCoherencyHeader$rtcName$0 DB 075H
	DB	04dH
	DB	061H
	DB	067H
	DB	069H
	DB	063H
	DB	00H
	ORG $+1
unz64local_CheckCurrentFileCoherencyHeader$rtcName$1 DB 075H
	DB	044H
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+2
unz64local_CheckCurrentFileCoherencyHeader$rtcName$2 DB 075H
	DB	046H
	DB	06cH
	DB	061H
	DB	067H
	DB	073H
	DB	00H
	ORG $+1
unz64local_CheckCurrentFileCoherencyHeader$rtcName$3 DB 073H
	DB	069H
	DB	07aH
	DB	065H
	DB	05fH
	DB	066H
	DB	069H
	DB	06cH
	DB	065H
	DB	06eH
	DB	061H
	DB	06dH
	DB	065H
	DB	00H
	ORG $+2
unz64local_CheckCurrentFileCoherencyHeader$rtcName$4 DB 073H
	DB	069H
	DB	07aH
	DB	065H
	DB	05fH
	DB	065H
	DB	078H
	DB	074H
	DB	072H
	DB	061H
	DB	05fH
	DB	066H
	DB	069H
	DB	065H
	DB	06cH
	DB	064H
	DB	00H
	ORG $+7
unz64local_CheckCurrentFileCoherencyHeader$rtcVarDesc DD 0a4H
	DD	04H
	DQ	FLAT:unz64local_CheckCurrentFileCoherencyHeader$rtcName$4
	DD	084H
	DD	04H
	DQ	FLAT:unz64local_CheckCurrentFileCoherencyHeader$rtcName$3
	DD	064H
	DD	04H
	DQ	FLAT:unz64local_CheckCurrentFileCoherencyHeader$rtcName$2
	DD	044H
	DD	04H
	DQ	FLAT:unz64local_CheckCurrentFileCoherencyHeader$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:unz64local_CheckCurrentFileCoherencyHeader$rtcName$0
	ORG $+240
unz64local_CheckCurrentFileCoherencyHeader$rtcFrameData DD 05H
	DD	00H
	DQ	FLAT:unz64local_CheckCurrentFileCoherencyHeader$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzOpenCurrentFile3 DD 043401H
	DD	015011dH
	DD	060157016H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
unzOpenCurrentFile3$rtcName$0 DB 069H
	DB	053H
	DB	069H
	DB	07aH
	DB	065H
	DB	056H
	DB	061H
	DB	072H
	DB	00H
	ORG $+7
unzOpenCurrentFile3$rtcName$1 DB 06fH
	DB	066H
	DB	066H
	DB	073H
	DB	065H
	DB	074H
	DB	05fH
	DB	06cH
	DB	06fH
	DB	063H
	DB	061H
	DB	06cH
	DB	05fH
	DB	065H
	DB	078H
	DB	074H
	DB	072H
	DB	061H
	DB	066H
	DB	069H
	DB	065H
	DB	06cH
	DB	064H
	DB	00H
unzOpenCurrentFile3$rtcName$2 DB 073H
	DB	069H
	DB	07aH
	DB	065H
	DB	05fH
	DB	06cH
	DB	06fH
	DB	063H
	DB	061H
	DB	06cH
	DB	05fH
	DB	065H
	DB	078H
	DB	074H
	DB	072H
	DB	061H
	DB	066H
	DB	069H
	DB	065H
	DB	06cH
	DB	064H
	DB	00H
	ORG $+2
unzOpenCurrentFile3$rtcVarDesc DD 084H
	DD	04H
	DQ	FLAT:unzOpenCurrentFile3$rtcName$2
	DD	068H
	DD	08H
	DQ	FLAT:unzOpenCurrentFile3$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:unzOpenCurrentFile3$rtcName$0
	ORG $+144
unzOpenCurrentFile3$rtcFrameData DD 03H
	DD	00H
	DQ	FLAT:unzOpenCurrentFile3$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzOpenCurrentFile DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzOpenCurrentFilePassword DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzOpenCurrentFile2 DD 022d01H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGetCurrentFileZStreamPos64 DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzReadCurrentFile DD 022e01H
	DD	07010f217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unztell DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unztell64 DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzeof DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGetLocalExtrafield DD 022801H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzCloseCurrentFile DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGetGlobalComment DD 022801H
	DD	070105214H
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unz64local_getByte
_TEXT	SEGMENT
c$ = 36
err$ = 52
pzlib_filefunc_def$ = 80
filestream$ = 88
pi$ = 96
unz64local_getByte PROC					; COMDAT

; 213  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 10 00 00 00	 mov	 ecx, 16
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 214  :     unsigned char c;
; 215  :     int err = (int)ZREAD64(*pzlib_filefunc_def,filestream,&c,1);

  00034	41 b9 01 00 00
	00		 mov	 r9d, 1
  0003a	4c 8d 44 24 24	 lea	 r8, QWORD PTR c$[rsp]
  0003f	48 8b 54 24 58	 mov	 rdx, QWORD PTR filestream$[rsp]
  00044	48 8b 44 24 50	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  00049	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  0004d	48 8b 44 24 50	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  00052	ff 50 08	 call	 QWORD PTR [rax+8]
  00055	89 44 24 34	 mov	 DWORD PTR err$[rsp], eax

; 216  :     if (err==1)

  00059	83 7c 24 34 01	 cmp	 DWORD PTR err$[rsp], 1
  0005e	75 12		 jne	 SHORT $LN2@unz64local

; 217  :     {
; 218  :         *pi = (int)c;

  00060	0f b6 44 24 24	 movzx	 eax, BYTE PTR c$[rsp]
  00065	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pi$[rsp]
  0006a	89 01		 mov	 DWORD PTR [rcx], eax

; 219  :         return UNZ_OK;

  0006c	33 c0		 xor	 eax, eax
  0006e	eb 27		 jmp	 SHORT $LN1@unz64local

; 220  :     }

  00070	eb 25		 jmp	 SHORT $LN3@unz64local
$LN2@unz64local:

; 221  :     else
; 222  :     {
; 223  :         if (ZERROR64(*pzlib_filefunc_def,filestream))

  00072	48 8b 54 24 58	 mov	 rdx, QWORD PTR filestream$[rsp]
  00077	48 8b 44 24 50	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0007c	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  00080	48 8b 44 24 50	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  00085	ff 50 30	 call	 QWORD PTR [rax+48]
  00088	85 c0		 test	 eax, eax
  0008a	74 09		 je	 SHORT $LN4@unz64local

; 224  :             return UNZ_ERRNO;

  0008c	b8 ff ff ff ff	 mov	 eax, -1
  00091	eb 04		 jmp	 SHORT $LN1@unz64local
  00093	eb 02		 jmp	 SHORT $LN5@unz64local
$LN4@unz64local:

; 225  :         else
; 226  :             return UNZ_EOF;

  00095	33 c0		 xor	 eax, eax
$LN5@unz64local:
$LN3@unz64local:
$LN1@unz64local:

; 227  :     }
; 228  : }

  00097	48 8b f8	 mov	 rdi, rax
  0009a	48 8b cc	 mov	 rcx, rsp
  0009d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:unz64local_getByte$rtcFrameData
  000a4	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000a9	48 8b c7	 mov	 rax, rdi
  000ac	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000b0	5f		 pop	 rdi
  000b1	c3		 ret	 0
unz64local_getByte ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unz64local_getShort
_TEXT	SEGMENT
x$ = 32
i$ = 52
err$ = 68
pzlib_filefunc_def$ = 96
filestream$ = 104
pX$ = 112
unz64local_getShort PROC				; COMDAT

; 242  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 14 00 00 00	 mov	 ecx, 20
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 243  :     uLong x ;
; 244  :     int i = 0;

  00034	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0

; 245  :     int err;
; 246  : 
; 247  :     err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  0003c	4c 8d 44 24 34	 lea	 r8, QWORD PTR i$[rsp]
  00041	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  00046	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0004b	e8 00 00 00 00	 call	 unz64local_getByte
  00050	89 44 24 44	 mov	 DWORD PTR err$[rsp], eax

; 248  :     x = (uLong)i;

  00054	8b 44 24 34	 mov	 eax, DWORD PTR i$[rsp]
  00058	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax

; 249  : 
; 250  :     if (err==UNZ_OK)

  0005c	83 7c 24 44 00	 cmp	 DWORD PTR err$[rsp], 0
  00061	75 18		 jne	 SHORT $LN2@unz64local

; 251  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00063	4c 8d 44 24 34	 lea	 r8, QWORD PTR i$[rsp]
  00068	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  0006d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00072	e8 00 00 00 00	 call	 unz64local_getByte
  00077	89 44 24 44	 mov	 DWORD PTR err$[rsp], eax
$LN2@unz64local:

; 252  :     x |= ((uLong)i)<<8;

  0007b	8b 44 24 34	 mov	 eax, DWORD PTR i$[rsp]
  0007f	c1 e0 08	 shl	 eax, 8
  00082	8b 4c 24 20	 mov	 ecx, DWORD PTR x$[rsp]
  00086	0b c8		 or	 ecx, eax
  00088	8b c1		 mov	 eax, ecx
  0008a	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax

; 253  : 
; 254  :     if (err==UNZ_OK)

  0008e	83 7c 24 44 00	 cmp	 DWORD PTR err$[rsp], 0
  00093	75 0d		 jne	 SHORT $LN3@unz64local

; 255  :         *pX = x;

  00095	48 8b 44 24 70	 mov	 rax, QWORD PTR pX$[rsp]
  0009a	8b 4c 24 20	 mov	 ecx, DWORD PTR x$[rsp]
  0009e	89 08		 mov	 DWORD PTR [rax], ecx
  000a0	eb 0b		 jmp	 SHORT $LN4@unz64local
$LN3@unz64local:

; 256  :     else
; 257  :         *pX = 0;

  000a2	48 8b 44 24 70	 mov	 rax, QWORD PTR pX$[rsp]
  000a7	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
$LN4@unz64local:

; 258  :     return err;

  000ad	8b 44 24 44	 mov	 eax, DWORD PTR err$[rsp]

; 259  : }

  000b1	8b f8		 mov	 edi, eax
  000b3	48 8b cc	 mov	 rcx, rsp
  000b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:unz64local_getShort$rtcFrameData
  000bd	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000c2	8b c7		 mov	 eax, edi
  000c4	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000c8	5f		 pop	 rdi
  000c9	c3		 ret	 0
unz64local_getShort ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unz64local_getLong
_TEXT	SEGMENT
x$ = 32
i$ = 52
err$ = 68
pzlib_filefunc_def$ = 96
filestream$ = 104
pX$ = 112
unz64local_getLong PROC					; COMDAT

; 269  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 14 00 00 00	 mov	 ecx, 20
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 270  :     uLong x ;
; 271  :     int i = 0;

  00034	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0

; 272  :     int err;
; 273  : 
; 274  :     err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  0003c	4c 8d 44 24 34	 lea	 r8, QWORD PTR i$[rsp]
  00041	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  00046	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0004b	e8 00 00 00 00	 call	 unz64local_getByte
  00050	89 44 24 44	 mov	 DWORD PTR err$[rsp], eax

; 275  :     x = (uLong)i;

  00054	8b 44 24 34	 mov	 eax, DWORD PTR i$[rsp]
  00058	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax

; 276  : 
; 277  :     if (err==UNZ_OK)

  0005c	83 7c 24 44 00	 cmp	 DWORD PTR err$[rsp], 0
  00061	75 18		 jne	 SHORT $LN2@unz64local

; 278  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00063	4c 8d 44 24 34	 lea	 r8, QWORD PTR i$[rsp]
  00068	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  0006d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00072	e8 00 00 00 00	 call	 unz64local_getByte
  00077	89 44 24 44	 mov	 DWORD PTR err$[rsp], eax
$LN2@unz64local:

; 279  :     x |= ((uLong)i)<<8;

  0007b	8b 44 24 34	 mov	 eax, DWORD PTR i$[rsp]
  0007f	c1 e0 08	 shl	 eax, 8
  00082	8b 4c 24 20	 mov	 ecx, DWORD PTR x$[rsp]
  00086	0b c8		 or	 ecx, eax
  00088	8b c1		 mov	 eax, ecx
  0008a	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax

; 280  : 
; 281  :     if (err==UNZ_OK)

  0008e	83 7c 24 44 00	 cmp	 DWORD PTR err$[rsp], 0
  00093	75 18		 jne	 SHORT $LN3@unz64local

; 282  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00095	4c 8d 44 24 34	 lea	 r8, QWORD PTR i$[rsp]
  0009a	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  0009f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  000a4	e8 00 00 00 00	 call	 unz64local_getByte
  000a9	89 44 24 44	 mov	 DWORD PTR err$[rsp], eax
$LN3@unz64local:

; 283  :     x |= ((uLong)i)<<16;

  000ad	8b 44 24 34	 mov	 eax, DWORD PTR i$[rsp]
  000b1	c1 e0 10	 shl	 eax, 16
  000b4	8b 4c 24 20	 mov	 ecx, DWORD PTR x$[rsp]
  000b8	0b c8		 or	 ecx, eax
  000ba	8b c1		 mov	 eax, ecx
  000bc	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax

; 284  : 
; 285  :     if (err==UNZ_OK)

  000c0	83 7c 24 44 00	 cmp	 DWORD PTR err$[rsp], 0
  000c5	75 18		 jne	 SHORT $LN4@unz64local

; 286  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  000c7	4c 8d 44 24 34	 lea	 r8, QWORD PTR i$[rsp]
  000cc	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  000d1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  000d6	e8 00 00 00 00	 call	 unz64local_getByte
  000db	89 44 24 44	 mov	 DWORD PTR err$[rsp], eax
$LN4@unz64local:

; 287  :     x += ((uLong)i)<<24;

  000df	8b 44 24 34	 mov	 eax, DWORD PTR i$[rsp]
  000e3	c1 e0 18	 shl	 eax, 24
  000e6	8b 4c 24 20	 mov	 ecx, DWORD PTR x$[rsp]
  000ea	03 c8		 add	 ecx, eax
  000ec	8b c1		 mov	 eax, ecx
  000ee	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax

; 288  : 
; 289  :     if (err==UNZ_OK)

  000f2	83 7c 24 44 00	 cmp	 DWORD PTR err$[rsp], 0
  000f7	75 0d		 jne	 SHORT $LN5@unz64local

; 290  :         *pX = x;

  000f9	48 8b 44 24 70	 mov	 rax, QWORD PTR pX$[rsp]
  000fe	8b 4c 24 20	 mov	 ecx, DWORD PTR x$[rsp]
  00102	89 08		 mov	 DWORD PTR [rax], ecx
  00104	eb 0b		 jmp	 SHORT $LN6@unz64local
$LN5@unz64local:

; 291  :     else
; 292  :         *pX = 0;

  00106	48 8b 44 24 70	 mov	 rax, QWORD PTR pX$[rsp]
  0010b	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
$LN6@unz64local:

; 293  :     return err;

  00111	8b 44 24 44	 mov	 eax, DWORD PTR err$[rsp]

; 294  : }

  00115	8b f8		 mov	 edi, eax
  00117	48 8b cc	 mov	 rcx, rsp
  0011a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:unz64local_getLong$rtcFrameData
  00121	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00126	8b c7		 mov	 eax, edi
  00128	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0012c	5f		 pop	 rdi
  0012d	c3		 ret	 0
unz64local_getLong ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unz64local_getLong64
_TEXT	SEGMENT
x$ = 32
i$ = 52
err$ = 68
pzlib_filefunc_def$ = 96
filestream$ = 104
pX$ = 112
unz64local_getLong64 PROC				; COMDAT

; 305  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 14 00 00 00	 mov	 ecx, 20
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 306  :     ZPOS64_T x ;
; 307  :     int i = 0;

  00034	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0

; 308  :     int err;
; 309  : 
; 310  :     err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  0003c	4c 8d 44 24 34	 lea	 r8, QWORD PTR i$[rsp]
  00041	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  00046	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0004b	e8 00 00 00 00	 call	 unz64local_getByte
  00050	89 44 24 44	 mov	 DWORD PTR err$[rsp], eax

; 311  :     x = (ZPOS64_T)i;

  00054	48 63 44 24 34	 movsxd	 rax, DWORD PTR i$[rsp]
  00059	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 312  : 
; 313  :     if (err==UNZ_OK)

  0005e	83 7c 24 44 00	 cmp	 DWORD PTR err$[rsp], 0
  00063	75 18		 jne	 SHORT $LN2@unz64local

; 314  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00065	4c 8d 44 24 34	 lea	 r8, QWORD PTR i$[rsp]
  0006a	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  0006f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00074	e8 00 00 00 00	 call	 unz64local_getByte
  00079	89 44 24 44	 mov	 DWORD PTR err$[rsp], eax
$LN2@unz64local:

; 315  :     x |= ((ZPOS64_T)i)<<8;

  0007d	48 63 44 24 34	 movsxd	 rax, DWORD PTR i$[rsp]
  00082	48 c1 e0 08	 shl	 rax, 8
  00086	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  0008b	48 0b c8	 or	 rcx, rax
  0008e	48 8b c1	 mov	 rax, rcx
  00091	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 316  : 
; 317  :     if (err==UNZ_OK)

  00096	83 7c 24 44 00	 cmp	 DWORD PTR err$[rsp], 0
  0009b	75 18		 jne	 SHORT $LN3@unz64local

; 318  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  0009d	4c 8d 44 24 34	 lea	 r8, QWORD PTR i$[rsp]
  000a2	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  000a7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  000ac	e8 00 00 00 00	 call	 unz64local_getByte
  000b1	89 44 24 44	 mov	 DWORD PTR err$[rsp], eax
$LN3@unz64local:

; 319  :     x |= ((ZPOS64_T)i)<<16;

  000b5	48 63 44 24 34	 movsxd	 rax, DWORD PTR i$[rsp]
  000ba	48 c1 e0 10	 shl	 rax, 16
  000be	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  000c3	48 0b c8	 or	 rcx, rax
  000c6	48 8b c1	 mov	 rax, rcx
  000c9	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 320  : 
; 321  :     if (err==UNZ_OK)

  000ce	83 7c 24 44 00	 cmp	 DWORD PTR err$[rsp], 0
  000d3	75 18		 jne	 SHORT $LN4@unz64local

; 322  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  000d5	4c 8d 44 24 34	 lea	 r8, QWORD PTR i$[rsp]
  000da	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  000df	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  000e4	e8 00 00 00 00	 call	 unz64local_getByte
  000e9	89 44 24 44	 mov	 DWORD PTR err$[rsp], eax
$LN4@unz64local:

; 323  :     x |= ((ZPOS64_T)i)<<24;

  000ed	48 63 44 24 34	 movsxd	 rax, DWORD PTR i$[rsp]
  000f2	48 c1 e0 18	 shl	 rax, 24
  000f6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  000fb	48 0b c8	 or	 rcx, rax
  000fe	48 8b c1	 mov	 rax, rcx
  00101	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 324  : 
; 325  :     if (err==UNZ_OK)

  00106	83 7c 24 44 00	 cmp	 DWORD PTR err$[rsp], 0
  0010b	75 18		 jne	 SHORT $LN5@unz64local

; 326  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  0010d	4c 8d 44 24 34	 lea	 r8, QWORD PTR i$[rsp]
  00112	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  00117	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0011c	e8 00 00 00 00	 call	 unz64local_getByte
  00121	89 44 24 44	 mov	 DWORD PTR err$[rsp], eax
$LN5@unz64local:

; 327  :     x |= ((ZPOS64_T)i)<<32;

  00125	48 63 44 24 34	 movsxd	 rax, DWORD PTR i$[rsp]
  0012a	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  0012e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00133	48 0b c8	 or	 rcx, rax
  00136	48 8b c1	 mov	 rax, rcx
  00139	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 328  : 
; 329  :     if (err==UNZ_OK)

  0013e	83 7c 24 44 00	 cmp	 DWORD PTR err$[rsp], 0
  00143	75 18		 jne	 SHORT $LN6@unz64local

; 330  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00145	4c 8d 44 24 34	 lea	 r8, QWORD PTR i$[rsp]
  0014a	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  0014f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00154	e8 00 00 00 00	 call	 unz64local_getByte
  00159	89 44 24 44	 mov	 DWORD PTR err$[rsp], eax
$LN6@unz64local:

; 331  :     x |= ((ZPOS64_T)i)<<40;

  0015d	48 63 44 24 34	 movsxd	 rax, DWORD PTR i$[rsp]
  00162	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  00166	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  0016b	48 0b c8	 or	 rcx, rax
  0016e	48 8b c1	 mov	 rax, rcx
  00171	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 332  : 
; 333  :     if (err==UNZ_OK)

  00176	83 7c 24 44 00	 cmp	 DWORD PTR err$[rsp], 0
  0017b	75 18		 jne	 SHORT $LN7@unz64local

; 334  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  0017d	4c 8d 44 24 34	 lea	 r8, QWORD PTR i$[rsp]
  00182	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  00187	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0018c	e8 00 00 00 00	 call	 unz64local_getByte
  00191	89 44 24 44	 mov	 DWORD PTR err$[rsp], eax
$LN7@unz64local:

; 335  :     x |= ((ZPOS64_T)i)<<48;

  00195	48 63 44 24 34	 movsxd	 rax, DWORD PTR i$[rsp]
  0019a	48 c1 e0 30	 shl	 rax, 48			; 00000030H
  0019e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  001a3	48 0b c8	 or	 rcx, rax
  001a6	48 8b c1	 mov	 rax, rcx
  001a9	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 336  : 
; 337  :     if (err==UNZ_OK)

  001ae	83 7c 24 44 00	 cmp	 DWORD PTR err$[rsp], 0
  001b3	75 18		 jne	 SHORT $LN8@unz64local

; 338  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  001b5	4c 8d 44 24 34	 lea	 r8, QWORD PTR i$[rsp]
  001ba	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  001bf	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  001c4	e8 00 00 00 00	 call	 unz64local_getByte
  001c9	89 44 24 44	 mov	 DWORD PTR err$[rsp], eax
$LN8@unz64local:

; 339  :     x |= ((ZPOS64_T)i)<<56;

  001cd	48 63 44 24 34	 movsxd	 rax, DWORD PTR i$[rsp]
  001d2	48 c1 e0 38	 shl	 rax, 56			; 00000038H
  001d6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  001db	48 0b c8	 or	 rcx, rax
  001de	48 8b c1	 mov	 rax, rcx
  001e1	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 340  : 
; 341  :     if (err==UNZ_OK)

  001e6	83 7c 24 44 00	 cmp	 DWORD PTR err$[rsp], 0
  001eb	75 0f		 jne	 SHORT $LN9@unz64local

; 342  :         *pX = x;

  001ed	48 8b 44 24 70	 mov	 rax, QWORD PTR pX$[rsp]
  001f2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  001f7	48 89 08	 mov	 QWORD PTR [rax], rcx
  001fa	eb 0c		 jmp	 SHORT $LN10@unz64local
$LN9@unz64local:

; 343  :     else
; 344  :         *pX = 0;

  001fc	48 8b 44 24 70	 mov	 rax, QWORD PTR pX$[rsp]
  00201	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
$LN10@unz64local:

; 345  :     return err;

  00208	8b 44 24 44	 mov	 eax, DWORD PTR err$[rsp]

; 346  : }

  0020c	8b f8		 mov	 edi, eax
  0020e	48 8b cc	 mov	 rcx, rsp
  00211	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:unz64local_getLong64$rtcFrameData
  00218	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0021d	8b c7		 mov	 eax, edi
  0021f	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00223	5f		 pop	 rdi
  00224	c3		 ret	 0
unz64local_getLong64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT strcmpcasenosensitive_internal
_TEXT	SEGMENT
c1$1 = 32
c2$2 = 33
tv84 = 36
fileName1$ = 64
fileName2$ = 72
strcmpcasenosensitive_internal PROC			; COMDAT

; 350  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
$LN2@strcmpcase:

; 351  :     for (;;)
; 352  :     {
; 353  :         char c1=*(fileName1++);

  0002f	48 8b 44 24 40	 mov	 rax, QWORD PTR fileName1$[rsp]
  00034	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00037	88 44 24 20	 mov	 BYTE PTR c1$1[rsp], al
  0003b	48 8b 44 24 40	 mov	 rax, QWORD PTR fileName1$[rsp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 44 24 40	 mov	 QWORD PTR fileName1$[rsp], rax

; 354  :         char c2=*(fileName2++);

  00048	48 8b 44 24 48	 mov	 rax, QWORD PTR fileName2$[rsp]
  0004d	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00050	88 44 24 21	 mov	 BYTE PTR c2$2[rsp], al
  00054	48 8b 44 24 48	 mov	 rax, QWORD PTR fileName2$[rsp]
  00059	48 ff c0	 inc	 rax
  0005c	48 89 44 24 48	 mov	 QWORD PTR fileName2$[rsp], rax

; 355  :         if ((c1>='a') && (c1<='z'))

  00061	0f be 44 24 20	 movsx	 eax, BYTE PTR c1$1[rsp]
  00066	83 f8 61	 cmp	 eax, 97			; 00000061H
  00069	7c 16		 jl	 SHORT $LN5@strcmpcase
  0006b	0f be 44 24 20	 movsx	 eax, BYTE PTR c1$1[rsp]
  00070	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  00073	7f 0c		 jg	 SHORT $LN5@strcmpcase

; 356  :             c1 -= 0x20;

  00075	0f be 44 24 20	 movsx	 eax, BYTE PTR c1$1[rsp]
  0007a	83 e8 20	 sub	 eax, 32			; 00000020H
  0007d	88 44 24 20	 mov	 BYTE PTR c1$1[rsp], al
$LN5@strcmpcase:

; 357  :         if ((c2>='a') && (c2<='z'))

  00081	0f be 44 24 21	 movsx	 eax, BYTE PTR c2$2[rsp]
  00086	83 f8 61	 cmp	 eax, 97			; 00000061H
  00089	7c 16		 jl	 SHORT $LN6@strcmpcase
  0008b	0f be 44 24 21	 movsx	 eax, BYTE PTR c2$2[rsp]
  00090	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  00093	7f 0c		 jg	 SHORT $LN6@strcmpcase

; 358  :             c2 -= 0x20;

  00095	0f be 44 24 21	 movsx	 eax, BYTE PTR c2$2[rsp]
  0009a	83 e8 20	 sub	 eax, 32			; 00000020H
  0009d	88 44 24 21	 mov	 BYTE PTR c2$2[rsp], al
$LN6@strcmpcase:

; 359  :         if (c1=='\0')

  000a1	0f be 44 24 20	 movsx	 eax, BYTE PTR c1$1[rsp]
  000a6	85 c0		 test	 eax, eax
  000a8	75 21		 jne	 SHORT $LN7@strcmpcase

; 360  :             return ((c2=='\0') ? 0 : -1);

  000aa	0f be 44 24 21	 movsx	 eax, BYTE PTR c2$2[rsp]
  000af	85 c0		 test	 eax, eax
  000b1	75 0a		 jne	 SHORT $LN12@strcmpcase
  000b3	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR tv84[rsp], 0
  000bb	eb 08		 jmp	 SHORT $LN13@strcmpcase
$LN12@strcmpcase:
  000bd	c7 44 24 24 ff
	ff ff ff	 mov	 DWORD PTR tv84[rsp], -1
$LN13@strcmpcase:
  000c5	8b 44 24 24	 mov	 eax, DWORD PTR tv84[rsp]
  000c9	eb 3f		 jmp	 SHORT $LN1@strcmpcase
$LN7@strcmpcase:

; 361  :         if (c2=='\0')

  000cb	0f be 44 24 21	 movsx	 eax, BYTE PTR c2$2[rsp]
  000d0	85 c0		 test	 eax, eax
  000d2	75 07		 jne	 SHORT $LN8@strcmpcase

; 362  :             return 1;

  000d4	b8 01 00 00 00	 mov	 eax, 1
  000d9	eb 2f		 jmp	 SHORT $LN1@strcmpcase
$LN8@strcmpcase:

; 363  :         if (c1<c2)

  000db	0f be 44 24 20	 movsx	 eax, BYTE PTR c1$1[rsp]
  000e0	0f be 4c 24 21	 movsx	 ecx, BYTE PTR c2$2[rsp]
  000e5	3b c1		 cmp	 eax, ecx
  000e7	7d 07		 jge	 SHORT $LN9@strcmpcase

; 364  :             return -1;

  000e9	b8 ff ff ff ff	 mov	 eax, -1
  000ee	eb 1a		 jmp	 SHORT $LN1@strcmpcase
$LN9@strcmpcase:

; 365  :         if (c1>c2)

  000f0	0f be 44 24 20	 movsx	 eax, BYTE PTR c1$1[rsp]
  000f5	0f be 4c 24 21	 movsx	 ecx, BYTE PTR c2$2[rsp]
  000fa	3b c1		 cmp	 eax, ecx
  000fc	7e 07		 jle	 SHORT $LN10@strcmpcase

; 366  :             return 1;

  000fe	b8 01 00 00 00	 mov	 eax, 1
  00103	eb 05		 jmp	 SHORT $LN1@strcmpcase
$LN10@strcmpcase:

; 367  :     }

  00105	e9 25 ff ff ff	 jmp	 $LN2@strcmpcase
$LN1@strcmpcase:

; 368  : }

  0010a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0010e	5f		 pop	 rdi
  0010f	c3		 ret	 0
strcmpcasenosensitive_internal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unzStringFileNameCompare
_TEXT	SEGMENT
fileName1$ = 48
fileName2$ = 56
iCaseSensitivity$ = 64
unzStringFileNameCompare PROC				; COMDAT

; 394  : {

$LN6:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 395  :     if (iCaseSensitivity==0)

  00034	83 7c 24 40 00	 cmp	 DWORD PTR iCaseSensitivity$[rsp], 0
  00039	75 08		 jne	 SHORT $LN2@unzStringF

; 396  :         iCaseSensitivity=CASESENSITIVITYDEFAULTVALUE;

  0003b	c7 44 24 40 02
	00 00 00	 mov	 DWORD PTR iCaseSensitivity$[rsp], 2
$LN2@unzStringF:

; 397  : 
; 398  :     if (iCaseSensitivity==1)

  00043	83 7c 24 40 01	 cmp	 DWORD PTR iCaseSensitivity$[rsp], 1
  00048	75 12		 jne	 SHORT $LN3@unzStringF

; 399  :         return strcmp(fileName1,fileName2);

  0004a	48 8b 54 24 38	 mov	 rdx, QWORD PTR fileName2$[rsp]
  0004f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR fileName1$[rsp]
  00054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strcmp
  0005a	eb 0f		 jmp	 SHORT $LN1@unzStringF
$LN3@unzStringF:

; 400  : 
; 401  :     return STRCMPCASENOSENTIVEFUNCTION(fileName1,fileName2);

  0005c	48 8b 54 24 38	 mov	 rdx, QWORD PTR fileName2$[rsp]
  00061	48 8b 4c 24 30	 mov	 rcx, QWORD PTR fileName1$[rsp]
  00066	e8 00 00 00 00	 call	 strcmpcasenosensitive_internal
$LN1@unzStringF:

; 402  : }

  0006b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006f	5f		 pop	 rdi
  00070	c3		 ret	 0
unzStringFileNameCompare ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unz64local_SearchCentralDir
_TEXT	SEGMENT
buf$ = 32
uSizeFile$ = 40
uBackRead$ = 48
uMaxBack$ = 56
uPosFound$ = 64
uReadSize$1 = 72
uReadPos$2 = 80
i$3 = 88
tv89 = 92
tv139 = 96
tv140 = 100
pzlib_filefunc_def$ = 128
filestream$ = 136
unz64local_SearchCentralDir PROC			; COMDAT

; 414  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 1c 00 00 00	 mov	 ecx, 28
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR [rsp+128]
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 415  :     unsigned char* buf;
; 416  :     ZPOS64_T uSizeFile;
; 417  :     ZPOS64_T uBackRead;
; 418  :     ZPOS64_T uMaxBack=0xffff; /* maximum size of global comment */

  00032	48 c7 44 24 38
	ff ff 00 00	 mov	 QWORD PTR uMaxBack$[rsp], 65535 ; 0000ffffH

; 419  :     ZPOS64_T uPosFound=0;

  0003b	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR uPosFound$[rsp], 0

; 420  : 
; 421  :     if (ZSEEK64(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  00044	41 b9 02 00 00
	00		 mov	 r9d, 2
  0004a	45 33 c0	 xor	 r8d, r8d
  0004d	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  00055	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0005d	e8 00 00 00 00	 call	 call_zseek64
  00062	85 c0		 test	 eax, eax
  00064	74 07		 je	 SHORT $LN7@unz64local

; 422  :         return 0;

  00066	33 c0		 xor	 eax, eax
  00068	e9 18 02 00 00	 jmp	 $LN1@unz64local
$LN7@unz64local:

; 423  : 
; 424  : 
; 425  :     uSizeFile = ZTELL64(*pzlib_filefunc_def,filestream);

  0006d	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  00075	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0007d	e8 00 00 00 00	 call	 call_ztell64
  00082	48 89 44 24 28	 mov	 QWORD PTR uSizeFile$[rsp], rax

; 426  : 
; 427  :     if (uMaxBack>uSizeFile)

  00087	48 8b 44 24 28	 mov	 rax, QWORD PTR uSizeFile$[rsp]
  0008c	48 39 44 24 38	 cmp	 QWORD PTR uMaxBack$[rsp], rax
  00091	76 0a		 jbe	 SHORT $LN8@unz64local

; 428  :         uMaxBack = uSizeFile;

  00093	48 8b 44 24 28	 mov	 rax, QWORD PTR uSizeFile$[rsp]
  00098	48 89 44 24 38	 mov	 QWORD PTR uMaxBack$[rsp], rax
$LN8@unz64local:

; 429  : 
; 430  :     buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  0009d	b9 04 04 00 00	 mov	 ecx, 1028		; 00000404H
  000a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  000a8	48 89 44 24 20	 mov	 QWORD PTR buf$[rsp], rax

; 431  :     if (buf==NULL)

  000ad	48 83 7c 24 20
	00		 cmp	 QWORD PTR buf$[rsp], 0
  000b3	75 07		 jne	 SHORT $LN9@unz64local

; 432  :         return 0;

  000b5	33 c0		 xor	 eax, eax
  000b7	e9 c9 01 00 00	 jmp	 $LN1@unz64local
$LN9@unz64local:

; 433  : 
; 434  :     uBackRead = 4;

  000bc	48 c7 44 24 30
	04 00 00 00	 mov	 QWORD PTR uBackRead$[rsp], 4
$LN2@unz64local:

; 435  :     while (uBackRead<uMaxBack)

  000c5	48 8b 44 24 38	 mov	 rax, QWORD PTR uMaxBack$[rsp]
  000ca	48 39 44 24 30	 cmp	 QWORD PTR uBackRead$[rsp], rax
  000cf	0f 83 98 01 00
	00		 jae	 $LN3@unz64local

; 436  :     {
; 437  :         uLong uReadSize;
; 438  :         ZPOS64_T uReadPos ;
; 439  :         int i;
; 440  :         if (uBackRead+BUFREADCOMMENT>uMaxBack)

  000d5	0f ae e8	 lfence
  000d8	48 8b 44 24 30	 mov	 rax, QWORD PTR uBackRead$[rsp]
  000dd	48 05 00 04 00
	00		 add	 rax, 1024		; 00000400H
  000e3	48 3b 44 24 38	 cmp	 rax, QWORD PTR uMaxBack$[rsp]
  000e8	76 0c		 jbe	 SHORT $LN10@unz64local

; 441  :             uBackRead = uMaxBack;

  000ea	48 8b 44 24 38	 mov	 rax, QWORD PTR uMaxBack$[rsp]
  000ef	48 89 44 24 30	 mov	 QWORD PTR uBackRead$[rsp], rax
  000f4	eb 10		 jmp	 SHORT $LN11@unz64local
$LN10@unz64local:

; 442  :         else
; 443  :             uBackRead+=BUFREADCOMMENT;

  000f6	48 8b 44 24 30	 mov	 rax, QWORD PTR uBackRead$[rsp]
  000fb	48 05 00 04 00
	00		 add	 rax, 1024		; 00000400H
  00101	48 89 44 24 30	 mov	 QWORD PTR uBackRead$[rsp], rax
$LN11@unz64local:

; 444  :         uReadPos = uSizeFile-uBackRead ;

  00106	48 8b 44 24 30	 mov	 rax, QWORD PTR uBackRead$[rsp]
  0010b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR uSizeFile$[rsp]
  00110	48 2b c8	 sub	 rcx, rax
  00113	48 8b c1	 mov	 rax, rcx
  00116	48 89 44 24 50	 mov	 QWORD PTR uReadPos$2[rsp], rax

; 445  : 
; 446  :         uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?

  0011b	48 8b 44 24 50	 mov	 rax, QWORD PTR uReadPos$2[rsp]
  00120	48 8b 4c 24 28	 mov	 rcx, QWORD PTR uSizeFile$[rsp]
  00125	48 2b c8	 sub	 rcx, rax
  00128	48 8b c1	 mov	 rax, rcx
  0012b	48 3d 04 04 00
	00		 cmp	 rax, 1028		; 00000404H
  00131	76 0a		 jbe	 SHORT $LN18@unz64local
  00133	c7 44 24 5c 04
	04 00 00	 mov	 DWORD PTR tv89[rsp], 1028 ; 00000404H
  0013b	eb 14		 jmp	 SHORT $LN19@unz64local
$LN18@unz64local:
  0013d	48 8b 44 24 50	 mov	 rax, QWORD PTR uReadPos$2[rsp]
  00142	48 8b 4c 24 28	 mov	 rcx, QWORD PTR uSizeFile$[rsp]
  00147	48 2b c8	 sub	 rcx, rax
  0014a	48 8b c1	 mov	 rax, rcx
  0014d	89 44 24 5c	 mov	 DWORD PTR tv89[rsp], eax
$LN19@unz64local:
  00151	8b 44 24 5c	 mov	 eax, DWORD PTR tv89[rsp]
  00155	89 44 24 48	 mov	 DWORD PTR uReadSize$1[rsp], eax

; 447  :                      (BUFREADCOMMENT+4) : (uLong)(uSizeFile-uReadPos);
; 448  :         if (ZSEEK64(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00159	45 33 c9	 xor	 r9d, r9d
  0015c	4c 8b 44 24 50	 mov	 r8, QWORD PTR uReadPos$2[rsp]
  00161	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  00169	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00171	e8 00 00 00 00	 call	 call_zseek64
  00176	85 c0		 test	 eax, eax
  00178	74 05		 je	 SHORT $LN12@unz64local

; 449  :             break;

  0017a	e9 ee 00 00 00	 jmp	 $LN3@unz64local
$LN12@unz64local:

; 450  : 
; 451  :         if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  0017f	0f ae e8	 lfence
  00182	44 8b 4c 24 48	 mov	 r9d, DWORD PTR uReadSize$1[rsp]
  00187	4c 8b 44 24 20	 mov	 r8, QWORD PTR buf$[rsp]
  0018c	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  00194	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0019c	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  001a0	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  001a8	ff 50 08	 call	 QWORD PTR [rax+8]
  001ab	3b 44 24 48	 cmp	 eax, DWORD PTR uReadSize$1[rsp]
  001af	74 05		 je	 SHORT $LN13@unz64local

; 452  :             break;

  001b1	e9 b7 00 00 00	 jmp	 $LN3@unz64local
$LN13@unz64local:

; 453  : 
; 454  :         for (i=(int)uReadSize-3; (i--)>0;)

  001b6	8b 44 24 48	 mov	 eax, DWORD PTR uReadSize$1[rsp]
  001ba	83 e8 03	 sub	 eax, 3
  001bd	89 44 24 58	 mov	 DWORD PTR i$3[rsp], eax
$LN4@unz64local:
  001c1	8b 44 24 58	 mov	 eax, DWORD PTR i$3[rsp]
  001c5	89 44 24 60	 mov	 DWORD PTR tv139[rsp], eax
  001c9	8b 44 24 58	 mov	 eax, DWORD PTR i$3[rsp]
  001cd	ff c8		 dec	 eax
  001cf	89 44 24 58	 mov	 DWORD PTR i$3[rsp], eax
  001d3	83 7c 24 60 00	 cmp	 DWORD PTR tv139[rsp], 0
  001d8	7e 0a		 jle	 SHORT $LN20@unz64local
  001da	c7 44 24 64 01
	00 00 00	 mov	 DWORD PTR tv140[rsp], 1
  001e2	eb 08		 jmp	 SHORT $LN21@unz64local
$LN20@unz64local:
  001e4	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tv140[rsp], 0
$LN21@unz64local:
  001ec	83 7c 24 64 00	 cmp	 DWORD PTR tv140[rsp], 0
  001f1	74 6b		 je	 SHORT $LN5@unz64local

; 455  :             if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) &&
; 456  :                 ((*(buf+i+2))==0x05) && ((*(buf+i+3))==0x06))

  001f3	48 63 44 24 58	 movsxd	 rax, DWORD PTR i$3[rsp]
  001f8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR buf$[rsp]
  001fd	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00201	83 f8 50	 cmp	 eax, 80			; 00000050H
  00204	75 53		 jne	 SHORT $LN14@unz64local
  00206	48 63 44 24 58	 movsxd	 rax, DWORD PTR i$3[rsp]
  0020b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR buf$[rsp]
  00210	0f b6 44 01 01	 movzx	 eax, BYTE PTR [rcx+rax+1]
  00215	83 f8 4b	 cmp	 eax, 75			; 0000004bH
  00218	75 3f		 jne	 SHORT $LN14@unz64local
  0021a	48 63 44 24 58	 movsxd	 rax, DWORD PTR i$3[rsp]
  0021f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR buf$[rsp]
  00224	0f b6 44 01 02	 movzx	 eax, BYTE PTR [rcx+rax+2]
  00229	83 f8 05	 cmp	 eax, 5
  0022c	75 2b		 jne	 SHORT $LN14@unz64local
  0022e	48 63 44 24 58	 movsxd	 rax, DWORD PTR i$3[rsp]
  00233	48 8b 4c 24 20	 mov	 rcx, QWORD PTR buf$[rsp]
  00238	0f b6 44 01 03	 movzx	 eax, BYTE PTR [rcx+rax+3]
  0023d	83 f8 06	 cmp	 eax, 6
  00240	75 17		 jne	 SHORT $LN14@unz64local

; 457  :             {
; 458  :                 uPosFound = uReadPos+i;

  00242	48 63 44 24 58	 movsxd	 rax, DWORD PTR i$3[rsp]
  00247	48 8b 4c 24 50	 mov	 rcx, QWORD PTR uReadPos$2[rsp]
  0024c	48 03 c8	 add	 rcx, rax
  0024f	48 8b c1	 mov	 rax, rcx
  00252	48 89 44 24 40	 mov	 QWORD PTR uPosFound$[rsp], rax

; 459  :                 break;

  00257	eb 05		 jmp	 SHORT $LN5@unz64local
$LN14@unz64local:

; 460  :             }

  00259	e9 63 ff ff ff	 jmp	 $LN4@unz64local
$LN5@unz64local:

; 461  : 
; 462  :         if (uPosFound!=0)

  0025e	48 83 7c 24 40
	00		 cmp	 QWORD PTR uPosFound$[rsp], 0
  00264	74 02		 je	 SHORT $LN15@unz64local

; 463  :             break;

  00266	eb 05		 jmp	 SHORT $LN3@unz64local
$LN15@unz64local:

; 464  :     }

  00268	e9 58 fe ff ff	 jmp	 $LN2@unz64local
$LN3@unz64local:

; 465  :     TRYFREE(buf);

  0026d	48 83 7c 24 20
	00		 cmp	 QWORD PTR buf$[rsp], 0
  00273	74 0b		 je	 SHORT $LN16@unz64local
  00275	48 8b 4c 24 20	 mov	 rcx, QWORD PTR buf$[rsp]
  0027a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN16@unz64local:

; 466  :     return uPosFound;

  00280	48 8b 44 24 40	 mov	 rax, QWORD PTR uPosFound$[rsp]
$LN1@unz64local:

; 467  : }

  00285	48 83 c4 70	 add	 rsp, 112		; 00000070H
  00289	5f		 pop	 rdi
  0028a	c3		 ret	 0
unz64local_SearchCentralDir ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unz64local_SearchCentralDir64
_TEXT	SEGMENT
buf$ = 32
uSizeFile$ = 40
uBackRead$ = 48
uMaxBack$ = 56
uPosFound$ = 64
uL$ = 84
relativeOffset$ = 120
uReadSize$5 = 132
uReadPos$6 = 136
i$7 = 144
tv89 = 148
tv139 = 152
tv140 = 156
pzlib_filefunc_def$ = 176
filestream$ = 184
unz64local_SearchCentralDir64 PROC			; COMDAT

; 480  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  00012	48 8b fc	 mov	 rdi, rsp
  00015	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+176]
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00030	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 481  :     unsigned char* buf;
; 482  :     ZPOS64_T uSizeFile;
; 483  :     ZPOS64_T uBackRead;
; 484  :     ZPOS64_T uMaxBack=0xffff; /* maximum size of global comment */

  00035	48 c7 44 24 38
	ff ff 00 00	 mov	 QWORD PTR uMaxBack$[rsp], 65535 ; 0000ffffH

; 485  :     ZPOS64_T uPosFound=0;

  0003e	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR uPosFound$[rsp], 0

; 486  :     uLong uL;
; 487  :                 ZPOS64_T relativeOffset;
; 488  : 
; 489  :     if (ZSEEK64(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  00047	41 b9 02 00 00
	00		 mov	 r9d, 2
  0004d	45 33 c0	 xor	 r8d, r8d
  00050	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  00058	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00060	e8 00 00 00 00	 call	 call_zseek64
  00065	85 c0		 test	 eax, eax
  00067	74 07		 je	 SHORT $LN7@unz64local

; 490  :         return 0;

  00069	33 c0		 xor	 eax, eax
  0006b	e9 9c 03 00 00	 jmp	 $LN1@unz64local
$LN7@unz64local:

; 491  : 
; 492  : 
; 493  :     uSizeFile = ZTELL64(*pzlib_filefunc_def,filestream);

  00070	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  00078	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00080	e8 00 00 00 00	 call	 call_ztell64
  00085	48 89 44 24 28	 mov	 QWORD PTR uSizeFile$[rsp], rax

; 494  : 
; 495  :     if (uMaxBack>uSizeFile)

  0008a	48 8b 44 24 28	 mov	 rax, QWORD PTR uSizeFile$[rsp]
  0008f	48 39 44 24 38	 cmp	 QWORD PTR uMaxBack$[rsp], rax
  00094	76 0a		 jbe	 SHORT $LN8@unz64local

; 496  :         uMaxBack = uSizeFile;

  00096	48 8b 44 24 28	 mov	 rax, QWORD PTR uSizeFile$[rsp]
  0009b	48 89 44 24 38	 mov	 QWORD PTR uMaxBack$[rsp], rax
$LN8@unz64local:

; 497  : 
; 498  :     buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  000a0	b9 04 04 00 00	 mov	 ecx, 1028		; 00000404H
  000a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  000ab	48 89 44 24 20	 mov	 QWORD PTR buf$[rsp], rax

; 499  :     if (buf==NULL)

  000b0	48 83 7c 24 20
	00		 cmp	 QWORD PTR buf$[rsp], 0
  000b6	75 07		 jne	 SHORT $LN9@unz64local

; 500  :         return 0;

  000b8	33 c0		 xor	 eax, eax
  000ba	e9 4d 03 00 00	 jmp	 $LN1@unz64local
$LN9@unz64local:

; 501  : 
; 502  :     uBackRead = 4;

  000bf	48 c7 44 24 30
	04 00 00 00	 mov	 QWORD PTR uBackRead$[rsp], 4
$LN2@unz64local:

; 503  :     while (uBackRead<uMaxBack)

  000c8	48 8b 44 24 38	 mov	 rax, QWORD PTR uMaxBack$[rsp]
  000cd	48 39 44 24 30	 cmp	 QWORD PTR uBackRead$[rsp], rax
  000d2	0f 83 e6 01 00
	00		 jae	 $LN3@unz64local

; 504  :     {
; 505  :         uLong uReadSize;
; 506  :         ZPOS64_T uReadPos;
; 507  :         int i;
; 508  :         if (uBackRead+BUFREADCOMMENT>uMaxBack)

  000d8	0f ae e8	 lfence
  000db	48 8b 44 24 30	 mov	 rax, QWORD PTR uBackRead$[rsp]
  000e0	48 05 00 04 00
	00		 add	 rax, 1024		; 00000400H
  000e6	48 3b 44 24 38	 cmp	 rax, QWORD PTR uMaxBack$[rsp]
  000eb	76 0c		 jbe	 SHORT $LN10@unz64local

; 509  :             uBackRead = uMaxBack;

  000ed	48 8b 44 24 38	 mov	 rax, QWORD PTR uMaxBack$[rsp]
  000f2	48 89 44 24 30	 mov	 QWORD PTR uBackRead$[rsp], rax
  000f7	eb 10		 jmp	 SHORT $LN11@unz64local
$LN10@unz64local:

; 510  :         else
; 511  :             uBackRead+=BUFREADCOMMENT;

  000f9	48 8b 44 24 30	 mov	 rax, QWORD PTR uBackRead$[rsp]
  000fe	48 05 00 04 00
	00		 add	 rax, 1024		; 00000400H
  00104	48 89 44 24 30	 mov	 QWORD PTR uBackRead$[rsp], rax
$LN11@unz64local:

; 512  :         uReadPos = uSizeFile-uBackRead ;

  00109	48 8b 44 24 30	 mov	 rax, QWORD PTR uBackRead$[rsp]
  0010e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR uSizeFile$[rsp]
  00113	48 2b c8	 sub	 rcx, rax
  00116	48 8b c1	 mov	 rax, rcx
  00119	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR uReadPos$6[rsp], rax

; 513  : 
; 514  :         uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?

  00121	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR uReadPos$6[rsp]
  00129	48 8b 4c 24 28	 mov	 rcx, QWORD PTR uSizeFile$[rsp]
  0012e	48 2b c8	 sub	 rcx, rax
  00131	48 8b c1	 mov	 rax, rcx
  00134	48 3d 04 04 00
	00		 cmp	 rax, 1028		; 00000404H
  0013a	76 0d		 jbe	 SHORT $LN29@unz64local
  0013c	c7 84 24 94 00
	00 00 04 04 00
	00		 mov	 DWORD PTR tv89[rsp], 1028 ; 00000404H
  00147	eb 1a		 jmp	 SHORT $LN30@unz64local
$LN29@unz64local:
  00149	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR uReadPos$6[rsp]
  00151	48 8b 4c 24 28	 mov	 rcx, QWORD PTR uSizeFile$[rsp]
  00156	48 2b c8	 sub	 rcx, rax
  00159	48 8b c1	 mov	 rax, rcx
  0015c	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv89[rsp], eax
$LN30@unz64local:
  00163	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR tv89[rsp]
  0016a	89 84 24 84 00
	00 00		 mov	 DWORD PTR uReadSize$5[rsp], eax

; 515  :                      (BUFREADCOMMENT+4) : (uLong)(uSizeFile-uReadPos);
; 516  :         if (ZSEEK64(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00171	45 33 c9	 xor	 r9d, r9d
  00174	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR uReadPos$6[rsp]
  0017c	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  00184	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0018c	e8 00 00 00 00	 call	 call_zseek64
  00191	85 c0		 test	 eax, eax
  00193	74 05		 je	 SHORT $LN12@unz64local

; 517  :             break;

  00195	e9 24 01 00 00	 jmp	 $LN3@unz64local
$LN12@unz64local:

; 518  : 
; 519  :         if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  0019a	0f ae e8	 lfence
  0019d	44 8b 8c 24 84
	00 00 00	 mov	 r9d, DWORD PTR uReadSize$5[rsp]
  001a5	4c 8b 44 24 20	 mov	 r8, QWORD PTR buf$[rsp]
  001aa	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  001b2	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  001ba	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  001be	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  001c6	ff 50 08	 call	 QWORD PTR [rax+8]
  001c9	3b 84 24 84 00
	00 00		 cmp	 eax, DWORD PTR uReadSize$5[rsp]
  001d0	74 05		 je	 SHORT $LN13@unz64local

; 520  :             break;

  001d2	e9 e7 00 00 00	 jmp	 $LN3@unz64local
$LN13@unz64local:

; 521  : 
; 522  :         for (i=(int)uReadSize-3; (i--)>0;)

  001d7	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR uReadSize$5[rsp]
  001de	83 e8 03	 sub	 eax, 3
  001e1	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$7[rsp], eax
$LN4@unz64local:
  001e8	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$7[rsp]
  001ef	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv139[rsp], eax
  001f6	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$7[rsp]
  001fd	ff c8		 dec	 eax
  001ff	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$7[rsp], eax
  00206	83 bc 24 98 00
	00 00 00	 cmp	 DWORD PTR tv139[rsp], 0
  0020e	7e 0d		 jle	 SHORT $LN31@unz64local
  00210	c7 84 24 9c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv140[rsp], 1
  0021b	eb 0b		 jmp	 SHORT $LN32@unz64local
$LN31@unz64local:
  0021d	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv140[rsp], 0
$LN32@unz64local:
  00228	83 bc 24 9c 00
	00 00 00	 cmp	 DWORD PTR tv140[rsp], 0
  00230	74 7d		 je	 SHORT $LN5@unz64local

; 523  :             if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) &&
; 524  :                 ((*(buf+i+2))==0x06) && ((*(buf+i+3))==0x07))

  00232	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$7[rsp]
  0023a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR buf$[rsp]
  0023f	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00243	83 f8 50	 cmp	 eax, 80			; 00000050H
  00246	75 62		 jne	 SHORT $LN14@unz64local
  00248	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$7[rsp]
  00250	48 8b 4c 24 20	 mov	 rcx, QWORD PTR buf$[rsp]
  00255	0f b6 44 01 01	 movzx	 eax, BYTE PTR [rcx+rax+1]
  0025a	83 f8 4b	 cmp	 eax, 75			; 0000004bH
  0025d	75 4b		 jne	 SHORT $LN14@unz64local
  0025f	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$7[rsp]
  00267	48 8b 4c 24 20	 mov	 rcx, QWORD PTR buf$[rsp]
  0026c	0f b6 44 01 02	 movzx	 eax, BYTE PTR [rcx+rax+2]
  00271	83 f8 06	 cmp	 eax, 6
  00274	75 34		 jne	 SHORT $LN14@unz64local
  00276	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$7[rsp]
  0027e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR buf$[rsp]
  00283	0f b6 44 01 03	 movzx	 eax, BYTE PTR [rcx+rax+3]
  00288	83 f8 07	 cmp	 eax, 7
  0028b	75 1d		 jne	 SHORT $LN14@unz64local

; 525  :             {
; 526  :                 uPosFound = uReadPos+i;

  0028d	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$7[rsp]
  00295	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR uReadPos$6[rsp]
  0029d	48 03 c8	 add	 rcx, rax
  002a0	48 8b c1	 mov	 rax, rcx
  002a3	48 89 44 24 40	 mov	 QWORD PTR uPosFound$[rsp], rax

; 527  :                 break;

  002a8	eb 05		 jmp	 SHORT $LN5@unz64local
$LN14@unz64local:

; 528  :             }

  002aa	e9 39 ff ff ff	 jmp	 $LN4@unz64local
$LN5@unz64local:

; 529  : 
; 530  :         if (uPosFound!=0)

  002af	48 83 7c 24 40
	00		 cmp	 QWORD PTR uPosFound$[rsp], 0
  002b5	74 02		 je	 SHORT $LN15@unz64local

; 531  :             break;

  002b7	eb 05		 jmp	 SHORT $LN3@unz64local
$LN15@unz64local:

; 532  :     }

  002b9	e9 0a fe ff ff	 jmp	 $LN2@unz64local
$LN3@unz64local:

; 533  :     TRYFREE(buf);

  002be	48 83 7c 24 20
	00		 cmp	 QWORD PTR buf$[rsp], 0
  002c4	74 0b		 je	 SHORT $LN16@unz64local
  002c6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR buf$[rsp]
  002cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN16@unz64local:

; 534  :     if (uPosFound == 0)

  002d1	48 83 7c 24 40
	00		 cmp	 QWORD PTR uPosFound$[rsp], 0
  002d7	75 07		 jne	 SHORT $LN17@unz64local

; 535  :         return 0;

  002d9	33 c0		 xor	 eax, eax
  002db	e9 2c 01 00 00	 jmp	 $LN1@unz64local
$LN17@unz64local:

; 536  : 
; 537  :     /* Zip64 end of central directory locator */
; 538  :     if (ZSEEK64(*pzlib_filefunc_def,filestream, uPosFound,ZLIB_FILEFUNC_SEEK_SET)!=0)

  002e0	45 33 c9	 xor	 r9d, r9d
  002e3	4c 8b 44 24 40	 mov	 r8, QWORD PTR uPosFound$[rsp]
  002e8	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  002f0	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  002f8	e8 00 00 00 00	 call	 call_zseek64
  002fd	85 c0		 test	 eax, eax
  002ff	74 07		 je	 SHORT $LN18@unz64local

; 539  :         return 0;

  00301	33 c0		 xor	 eax, eax
  00303	e9 04 01 00 00	 jmp	 $LN1@unz64local
$LN18@unz64local:

; 540  : 
; 541  :     /* the signature, already checked */
; 542  :     if (unz64local_getLong(pzlib_filefunc_def,filestream,&uL)!=UNZ_OK)

  00308	4c 8d 44 24 54	 lea	 r8, QWORD PTR uL$[rsp]
  0030d	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  00315	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0031d	e8 00 00 00 00	 call	 unz64local_getLong
  00322	85 c0		 test	 eax, eax
  00324	74 07		 je	 SHORT $LN19@unz64local

; 543  :         return 0;

  00326	33 c0		 xor	 eax, eax
  00328	e9 df 00 00 00	 jmp	 $LN1@unz64local
$LN19@unz64local:

; 544  : 
; 545  :     /* number of the disk with the start of the zip64 end of  central directory */
; 546  :     if (unz64local_getLong(pzlib_filefunc_def,filestream,&uL)!=UNZ_OK)

  0032d	4c 8d 44 24 54	 lea	 r8, QWORD PTR uL$[rsp]
  00332	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  0033a	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00342	e8 00 00 00 00	 call	 unz64local_getLong
  00347	85 c0		 test	 eax, eax
  00349	74 07		 je	 SHORT $LN20@unz64local

; 547  :         return 0;

  0034b	33 c0		 xor	 eax, eax
  0034d	e9 ba 00 00 00	 jmp	 $LN1@unz64local
$LN20@unz64local:

; 548  :     if (uL != 0)

  00352	83 7c 24 54 00	 cmp	 DWORD PTR uL$[rsp], 0
  00357	74 07		 je	 SHORT $LN21@unz64local

; 549  :         return 0;

  00359	33 c0		 xor	 eax, eax
  0035b	e9 ac 00 00 00	 jmp	 $LN1@unz64local
$LN21@unz64local:

; 550  : 
; 551  :     /* relative offset of the zip64 end of central directory record */
; 552  :     if (unz64local_getLong64(pzlib_filefunc_def,filestream,&relativeOffset)!=UNZ_OK)

  00360	4c 8d 44 24 78	 lea	 r8, QWORD PTR relativeOffset$[rsp]
  00365	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  0036d	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00375	e8 00 00 00 00	 call	 unz64local_getLong64
  0037a	85 c0		 test	 eax, eax
  0037c	74 07		 je	 SHORT $LN22@unz64local

; 553  :         return 0;

  0037e	33 c0		 xor	 eax, eax
  00380	e9 87 00 00 00	 jmp	 $LN1@unz64local
$LN22@unz64local:

; 554  : 
; 555  :     /* total number of disks */
; 556  :     if (unz64local_getLong(pzlib_filefunc_def,filestream,&uL)!=UNZ_OK)

  00385	4c 8d 44 24 54	 lea	 r8, QWORD PTR uL$[rsp]
  0038a	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  00392	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0039a	e8 00 00 00 00	 call	 unz64local_getLong
  0039f	85 c0		 test	 eax, eax
  003a1	74 04		 je	 SHORT $LN23@unz64local

; 557  :         return 0;

  003a3	33 c0		 xor	 eax, eax
  003a5	eb 65		 jmp	 SHORT $LN1@unz64local
$LN23@unz64local:

; 558  :     if (uL != 1)

  003a7	83 7c 24 54 01	 cmp	 DWORD PTR uL$[rsp], 1
  003ac	74 04		 je	 SHORT $LN24@unz64local

; 559  :         return 0;

  003ae	33 c0		 xor	 eax, eax
  003b0	eb 5a		 jmp	 SHORT $LN1@unz64local
$LN24@unz64local:

; 560  : 
; 561  :     /* Goto end of central directory record */
; 562  :     if (ZSEEK64(*pzlib_filefunc_def,filestream, relativeOffset,ZLIB_FILEFUNC_SEEK_SET)!=0)

  003b2	45 33 c9	 xor	 r9d, r9d
  003b5	4c 8b 44 24 78	 mov	 r8, QWORD PTR relativeOffset$[rsp]
  003ba	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  003c2	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  003ca	e8 00 00 00 00	 call	 call_zseek64
  003cf	85 c0		 test	 eax, eax
  003d1	74 04		 je	 SHORT $LN25@unz64local

; 563  :         return 0;

  003d3	33 c0		 xor	 eax, eax
  003d5	eb 35		 jmp	 SHORT $LN1@unz64local
$LN25@unz64local:

; 564  : 
; 565  :      /* the signature */
; 566  :     if (unz64local_getLong(pzlib_filefunc_def,filestream,&uL)!=UNZ_OK)

  003d7	4c 8d 44 24 54	 lea	 r8, QWORD PTR uL$[rsp]
  003dc	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  003e4	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  003ec	e8 00 00 00 00	 call	 unz64local_getLong
  003f1	85 c0		 test	 eax, eax
  003f3	74 04		 je	 SHORT $LN26@unz64local

; 567  :         return 0;

  003f5	33 c0		 xor	 eax, eax
  003f7	eb 13		 jmp	 SHORT $LN1@unz64local
$LN26@unz64local:

; 568  : 
; 569  :     if (uL != 0x06064b50)

  003f9	81 7c 24 54 50
	4b 06 06	 cmp	 DWORD PTR uL$[rsp], 101075792 ; 06064b50H
  00401	74 04		 je	 SHORT $LN27@unz64local

; 570  :         return 0;

  00403	33 c0		 xor	 eax, eax
  00405	eb 05		 jmp	 SHORT $LN1@unz64local
$LN27@unz64local:

; 571  : 
; 572  :     return relativeOffset;

  00407	48 8b 44 24 78	 mov	 rax, QWORD PTR relativeOffset$[rsp]
$LN1@unz64local:

; 573  : }

  0040c	48 8b f8	 mov	 rdi, rax
  0040f	48 8b cc	 mov	 rcx, rsp
  00412	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:unz64local_SearchCentralDir64$rtcFrameData
  00419	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0041e	48 8b c7	 mov	 rax, rdi
  00421	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  00428	5f		 pop	 rdi
  00429	c3		 ret	 0
unz64local_SearchCentralDir64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unzOpenInternal
_TEXT	SEGMENT
us$ = 48
s$ = 344
central_pos$ = 352
uL$ = 372
number_disk$ = 404
number_disk_with_CD$ = 436
number_entry_CD$ = 472
err$ = 484
uS$10 = 500
uL64$11 = 536
path$ = 592
pzlib_filefunc64_32_def$ = 600
is64bitOpenFunction$ = 608
unzOpenInternal PROC					; COMDAT

; 587  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 38 02
	00 00		 sub	 rsp, 568		; 00000238H
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 8e 00 00 00	 mov	 ecx, 142		; 0000008eH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR [rsp+592]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 588  :     unz64_s us;
; 589  :     unz64_s *s;
; 590  :     ZPOS64_T central_pos;
; 591  :     uLong   uL;
; 592  : 
; 593  :     uLong number_disk;          /* number of the current dist, used for
; 594  :                                    spaning ZIP, unsupported, always 0*/
; 595  :     uLong number_disk_with_CD;  /* number the the disk with central dir, used
; 596  :                                    for spaning ZIP, unsupported, always 0*/
; 597  :     ZPOS64_T number_entry_CD;      /* total number of entries in
; 598  :                                    the central dir
; 599  :                                    (same than number_entry on nospan) */
; 600  : 
; 601  :     int err=UNZ_OK;

  0003b	c7 84 24 e4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR err$[rsp], 0

; 602  : 
; 603  :     if (unz_copyright[0]!=' ')

  00046	b8 01 00 00 00	 mov	 eax, 1
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:unz_copyright
  00056	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0005a	83 f8 20	 cmp	 eax, 32			; 00000020H
  0005d	74 07		 je	 SHORT $LN2@unzOpenInt

; 604  :         return NULL;

  0005f	33 c0		 xor	 eax, eax
  00061	e9 ce 05 00 00	 jmp	 $LN1@unzOpenInt
$LN2@unzOpenInt:

; 605  : 
; 606  :     us.z_filefunc.zseek32_file = NULL;

  00066	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR us$[rsp+80], 0

; 607  :     us.z_filefunc.ztell32_file = NULL;

  00072	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR us$[rsp+72], 0

; 608  :     if (pzlib_filefunc64_32_def==NULL)

  0007b	48 83 bc 24 58
	02 00 00 00	 cmp	 QWORD PTR pzlib_filefunc64_32_def$[rsp], 0
  00084	75 0c		 jne	 SHORT $LN3@unzOpenInt

; 609  :         fill_fopen64_filefunc(&us.z_filefunc.zfile_func64);

  00086	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  0008b	e8 00 00 00 00	 call	 fill_fopen64_filefunc
  00090	eb 17		 jmp	 SHORT $LN4@unzOpenInt
$LN3@unzOpenInt:

; 610  :     else
; 611  :         us.z_filefunc = *pzlib_filefunc64_32_def;

  00092	48 8d 44 24 30	 lea	 rax, QWORD PTR us$[rsp]
  00097	48 8b f8	 mov	 rdi, rax
  0009a	48 8b b4 24 58
	02 00 00	 mov	 rsi, QWORD PTR pzlib_filefunc64_32_def$[rsp]
  000a2	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  000a7	f3 a4		 rep movsb
$LN4@unzOpenInt:

; 612  :     us.is64bitOpenFunction = is64bitOpenFunction;

  000a9	8b 84 24 60 02
	00 00		 mov	 eax, DWORD PTR is64bitOpenFunction$[rsp]
  000b0	89 84 24 88 00
	00 00		 mov	 DWORD PTR us$[rsp+88], eax

; 613  : 
; 614  : 
; 615  : 
; 616  :     us.filestream = ZOPEN64(us.z_filefunc,

  000b7	41 b8 05 00 00
	00		 mov	 r8d, 5
  000bd	48 8b 94 24 50
	02 00 00	 mov	 rdx, QWORD PTR path$[rsp]
  000c5	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  000ca	e8 00 00 00 00	 call	 call_zopen64
  000cf	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR us$[rsp+96], rax

; 617  :                                                  path,
; 618  :                                                  ZLIB_FILEFUNC_MODE_READ |
; 619  :                                                  ZLIB_FILEFUNC_MODE_EXISTING);
; 620  :     if (us.filestream==NULL)

  000d7	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR us$[rsp+96], 0
  000e0	75 07		 jne	 SHORT $LN5@unzOpenInt

; 621  :         return NULL;

  000e2	33 c0		 xor	 eax, eax
  000e4	e9 4b 05 00 00	 jmp	 $LN1@unzOpenInt
$LN5@unzOpenInt:

; 622  : 
; 623  :     central_pos = unz64local_SearchCentralDir64(&us.z_filefunc,us.filestream);

  000e9	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR us$[rsp+96]
  000f1	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  000f6	e8 00 00 00 00	 call	 unz64local_SearchCentralDir64
  000fb	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR central_pos$[rsp], rax

; 624  :     if (central_pos)

  00103	48 83 bc 24 60
	01 00 00 00	 cmp	 QWORD PTR central_pos$[rsp], 0
  0010c	0f 84 12 02 00
	00		 je	 $LN6@unzOpenInt

; 625  :     {
; 626  :         uLong uS;
; 627  :         ZPOS64_T uL64;
; 628  : 
; 629  :         us.isZip64 = 1;

  00112	c7 84 24 4c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR us$[rsp+284], 1

; 630  : 
; 631  :         if (ZSEEK64(us.z_filefunc, us.filestream,
; 632  :                                       central_pos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0011d	45 33 c9	 xor	 r9d, r9d
  00120	4c 8b 84 24 60
	01 00 00	 mov	 r8, QWORD PTR central_pos$[rsp]
  00128	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR us$[rsp+96]
  00130	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  00135	e8 00 00 00 00	 call	 call_zseek64
  0013a	85 c0		 test	 eax, eax
  0013c	74 0b		 je	 SHORT $LN8@unzOpenInt

; 633  :         err=UNZ_ERRNO;

  0013e	c7 84 24 e4 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN8@unzOpenInt:

; 634  : 
; 635  :         /* the signature, already checked */
; 636  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  00149	4c 8d 84 24 74
	01 00 00	 lea	 r8, QWORD PTR uL$[rsp]
  00151	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR us$[rsp+96]
  00159	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  0015e	e8 00 00 00 00	 call	 unz64local_getLong
  00163	85 c0		 test	 eax, eax
  00165	74 0b		 je	 SHORT $LN9@unzOpenInt

; 637  :             err=UNZ_ERRNO;

  00167	c7 84 24 e4 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN9@unzOpenInt:

; 638  : 
; 639  :         /* size of zip64 end of central directory record */
; 640  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&uL64)!=UNZ_OK)

  00172	4c 8d 84 24 18
	02 00 00	 lea	 r8, QWORD PTR uL64$11[rsp]
  0017a	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR us$[rsp+96]
  00182	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  00187	e8 00 00 00 00	 call	 unz64local_getLong64
  0018c	85 c0		 test	 eax, eax
  0018e	74 0b		 je	 SHORT $LN10@unzOpenInt

; 641  :             err=UNZ_ERRNO;

  00190	c7 84 24 e4 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN10@unzOpenInt:

; 642  : 
; 643  :         /* version made by */
; 644  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&uS)!=UNZ_OK)

  0019b	4c 8d 84 24 f4
	01 00 00	 lea	 r8, QWORD PTR uS$10[rsp]
  001a3	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR us$[rsp+96]
  001ab	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  001b0	e8 00 00 00 00	 call	 unz64local_getShort
  001b5	85 c0		 test	 eax, eax
  001b7	74 0b		 je	 SHORT $LN11@unzOpenInt

; 645  :             err=UNZ_ERRNO;

  001b9	c7 84 24 e4 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN11@unzOpenInt:

; 646  : 
; 647  :         /* version needed to extract */
; 648  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&uS)!=UNZ_OK)

  001c4	4c 8d 84 24 f4
	01 00 00	 lea	 r8, QWORD PTR uS$10[rsp]
  001cc	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR us$[rsp+96]
  001d4	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  001d9	e8 00 00 00 00	 call	 unz64local_getShort
  001de	85 c0		 test	 eax, eax
  001e0	74 0b		 je	 SHORT $LN12@unzOpenInt

; 649  :             err=UNZ_ERRNO;

  001e2	c7 84 24 e4 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN12@unzOpenInt:

; 650  : 
; 651  :         /* number of this disk */
; 652  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&number_disk)!=UNZ_OK)

  001ed	4c 8d 84 24 94
	01 00 00	 lea	 r8, QWORD PTR number_disk$[rsp]
  001f5	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR us$[rsp+96]
  001fd	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  00202	e8 00 00 00 00	 call	 unz64local_getLong
  00207	85 c0		 test	 eax, eax
  00209	74 0b		 je	 SHORT $LN13@unzOpenInt

; 653  :             err=UNZ_ERRNO;

  0020b	c7 84 24 e4 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN13@unzOpenInt:

; 654  : 
; 655  :         /* number of the disk with the start of the central directory */
; 656  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&number_disk_with_CD)!=UNZ_OK)

  00216	4c 8d 84 24 b4
	01 00 00	 lea	 r8, QWORD PTR number_disk_with_CD$[rsp]
  0021e	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR us$[rsp+96]
  00226	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  0022b	e8 00 00 00 00	 call	 unz64local_getLong
  00230	85 c0		 test	 eax, eax
  00232	74 0b		 je	 SHORT $LN14@unzOpenInt

; 657  :             err=UNZ_ERRNO;

  00234	c7 84 24 e4 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN14@unzOpenInt:

; 658  : 
; 659  :         /* total number of entries in the central directory on this disk */
; 660  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&us.gi.number_entry)!=UNZ_OK)

  0023f	4c 8d 84 24 98
	00 00 00	 lea	 r8, QWORD PTR us$[rsp+104]
  00247	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR us$[rsp+96]
  0024f	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  00254	e8 00 00 00 00	 call	 unz64local_getLong64
  00259	85 c0		 test	 eax, eax
  0025b	74 0b		 je	 SHORT $LN15@unzOpenInt

; 661  :             err=UNZ_ERRNO;

  0025d	c7 84 24 e4 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN15@unzOpenInt:

; 662  : 
; 663  :         /* total number of entries in the central directory */
; 664  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&number_entry_CD)!=UNZ_OK)

  00268	4c 8d 84 24 d8
	01 00 00	 lea	 r8, QWORD PTR number_entry_CD$[rsp]
  00270	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR us$[rsp+96]
  00278	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  0027d	e8 00 00 00 00	 call	 unz64local_getLong64
  00282	85 c0		 test	 eax, eax
  00284	74 0b		 je	 SHORT $LN16@unzOpenInt

; 665  :             err=UNZ_ERRNO;

  00286	c7 84 24 e4 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN16@unzOpenInt:

; 666  : 
; 667  :         if ((number_entry_CD!=us.gi.number_entry) ||
; 668  :             (number_disk_with_CD!=0) ||

  00291	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR us$[rsp+104]
  00299	48 39 84 24 d8
	01 00 00	 cmp	 QWORD PTR number_entry_CD$[rsp], rax
  002a1	75 14		 jne	 SHORT $LN18@unzOpenInt
  002a3	83 bc 24 b4 01
	00 00 00	 cmp	 DWORD PTR number_disk_with_CD$[rsp], 0
  002ab	75 0a		 jne	 SHORT $LN18@unzOpenInt
  002ad	83 bc 24 94 01
	00 00 00	 cmp	 DWORD PTR number_disk$[rsp], 0
  002b5	74 0b		 je	 SHORT $LN17@unzOpenInt
$LN18@unzOpenInt:

; 669  :             (number_disk!=0))
; 670  :             err=UNZ_BADZIPFILE;

  002b7	c7 84 24 e4 01
	00 00 99 ff ff
	ff		 mov	 DWORD PTR err$[rsp], -103 ; ffffffffffffff99H
$LN17@unzOpenInt:

; 671  : 
; 672  :         /* size of the central directory */
; 673  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&us.size_central_dir)!=UNZ_OK)

  002c2	4c 8d 84 24 d0
	00 00 00	 lea	 r8, QWORD PTR us$[rsp+160]
  002ca	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR us$[rsp+96]
  002d2	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  002d7	e8 00 00 00 00	 call	 unz64local_getLong64
  002dc	85 c0		 test	 eax, eax
  002de	74 0b		 je	 SHORT $LN19@unzOpenInt

; 674  :             err=UNZ_ERRNO;

  002e0	c7 84 24 e4 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN19@unzOpenInt:

; 675  : 
; 676  :         /* offset of start of central directory with respect to the
; 677  :           starting disk number */
; 678  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&us.offset_central_dir)!=UNZ_OK)

  002eb	4c 8d 84 24 d8
	00 00 00	 lea	 r8, QWORD PTR us$[rsp+168]
  002f3	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR us$[rsp+96]
  002fb	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  00300	e8 00 00 00 00	 call	 unz64local_getLong64
  00305	85 c0		 test	 eax, eax
  00307	74 0b		 je	 SHORT $LN20@unzOpenInt

; 679  :             err=UNZ_ERRNO;

  00309	c7 84 24 e4 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN20@unzOpenInt:

; 680  : 
; 681  :         us.gi.size_comment = 0;

  00314	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR us$[rsp+112], 0

; 682  :     }

  0031f	e9 1c 02 00 00	 jmp	 $LN7@unzOpenInt
$LN6@unzOpenInt:

; 683  :     else
; 684  :     {
; 685  :         central_pos = unz64local_SearchCentralDir(&us.z_filefunc,us.filestream);

  00324	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR us$[rsp+96]
  0032c	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  00331	e8 00 00 00 00	 call	 unz64local_SearchCentralDir
  00336	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR central_pos$[rsp], rax

; 686  :         if (central_pos==0)

  0033e	48 83 bc 24 60
	01 00 00 00	 cmp	 QWORD PTR central_pos$[rsp], 0
  00347	75 0b		 jne	 SHORT $LN21@unzOpenInt

; 687  :             err=UNZ_ERRNO;

  00349	c7 84 24 e4 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN21@unzOpenInt:

; 688  : 
; 689  :         us.isZip64 = 0;

  00354	c7 84 24 4c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR us$[rsp+284], 0

; 690  : 
; 691  :         if (ZSEEK64(us.z_filefunc, us.filestream,
; 692  :                                         central_pos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0035f	45 33 c9	 xor	 r9d, r9d
  00362	4c 8b 84 24 60
	01 00 00	 mov	 r8, QWORD PTR central_pos$[rsp]
  0036a	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR us$[rsp+96]
  00372	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  00377	e8 00 00 00 00	 call	 call_zseek64
  0037c	85 c0		 test	 eax, eax
  0037e	74 0b		 je	 SHORT $LN22@unzOpenInt

; 693  :             err=UNZ_ERRNO;

  00380	c7 84 24 e4 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN22@unzOpenInt:

; 694  : 
; 695  :         /* the signature, already checked */
; 696  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  0038b	4c 8d 84 24 74
	01 00 00	 lea	 r8, QWORD PTR uL$[rsp]
  00393	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR us$[rsp+96]
  0039b	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  003a0	e8 00 00 00 00	 call	 unz64local_getLong
  003a5	85 c0		 test	 eax, eax
  003a7	74 0b		 je	 SHORT $LN23@unzOpenInt

; 697  :             err=UNZ_ERRNO;

  003a9	c7 84 24 e4 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN23@unzOpenInt:

; 698  : 
; 699  :         /* number of this disk */
; 700  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&number_disk)!=UNZ_OK)

  003b4	4c 8d 84 24 94
	01 00 00	 lea	 r8, QWORD PTR number_disk$[rsp]
  003bc	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR us$[rsp+96]
  003c4	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  003c9	e8 00 00 00 00	 call	 unz64local_getShort
  003ce	85 c0		 test	 eax, eax
  003d0	74 0b		 je	 SHORT $LN24@unzOpenInt

; 701  :             err=UNZ_ERRNO;

  003d2	c7 84 24 e4 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN24@unzOpenInt:

; 702  : 
; 703  :         /* number of the disk with the start of the central directory */
; 704  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&number_disk_with_CD)!=UNZ_OK)

  003dd	4c 8d 84 24 b4
	01 00 00	 lea	 r8, QWORD PTR number_disk_with_CD$[rsp]
  003e5	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR us$[rsp+96]
  003ed	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  003f2	e8 00 00 00 00	 call	 unz64local_getShort
  003f7	85 c0		 test	 eax, eax
  003f9	74 0b		 je	 SHORT $LN25@unzOpenInt

; 705  :             err=UNZ_ERRNO;

  003fb	c7 84 24 e4 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN25@unzOpenInt:

; 706  : 
; 707  :         /* total number of entries in the central dir on this disk */
; 708  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  00406	4c 8d 84 24 74
	01 00 00	 lea	 r8, QWORD PTR uL$[rsp]
  0040e	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR us$[rsp+96]
  00416	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  0041b	e8 00 00 00 00	 call	 unz64local_getShort
  00420	85 c0		 test	 eax, eax
  00422	74 0b		 je	 SHORT $LN26@unzOpenInt

; 709  :             err=UNZ_ERRNO;

  00424	c7 84 24 e4 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN26@unzOpenInt:

; 710  :         us.gi.number_entry = uL;

  0042f	8b 84 24 74 01
	00 00		 mov	 eax, DWORD PTR uL$[rsp]
  00436	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR us$[rsp+104], rax

; 711  : 
; 712  :         /* total number of entries in the central dir */
; 713  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  0043e	4c 8d 84 24 74
	01 00 00	 lea	 r8, QWORD PTR uL$[rsp]
  00446	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR us$[rsp+96]
  0044e	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  00453	e8 00 00 00 00	 call	 unz64local_getShort
  00458	85 c0		 test	 eax, eax
  0045a	74 0b		 je	 SHORT $LN27@unzOpenInt

; 714  :             err=UNZ_ERRNO;

  0045c	c7 84 24 e4 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN27@unzOpenInt:

; 715  :         number_entry_CD = uL;

  00467	8b 84 24 74 01
	00 00		 mov	 eax, DWORD PTR uL$[rsp]
  0046e	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR number_entry_CD$[rsp], rax

; 716  : 
; 717  :         if ((number_entry_CD!=us.gi.number_entry) ||
; 718  :             (number_disk_with_CD!=0) ||

  00476	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR us$[rsp+104]
  0047e	48 39 84 24 d8
	01 00 00	 cmp	 QWORD PTR number_entry_CD$[rsp], rax
  00486	75 14		 jne	 SHORT $LN29@unzOpenInt
  00488	83 bc 24 b4 01
	00 00 00	 cmp	 DWORD PTR number_disk_with_CD$[rsp], 0
  00490	75 0a		 jne	 SHORT $LN29@unzOpenInt
  00492	83 bc 24 94 01
	00 00 00	 cmp	 DWORD PTR number_disk$[rsp], 0
  0049a	74 0b		 je	 SHORT $LN28@unzOpenInt
$LN29@unzOpenInt:

; 719  :             (number_disk!=0))
; 720  :             err=UNZ_BADZIPFILE;

  0049c	c7 84 24 e4 01
	00 00 99 ff ff
	ff		 mov	 DWORD PTR err$[rsp], -103 ; ffffffffffffff99H
$LN28@unzOpenInt:

; 721  : 
; 722  :         /* size of the central directory */
; 723  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  004a7	4c 8d 84 24 74
	01 00 00	 lea	 r8, QWORD PTR uL$[rsp]
  004af	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR us$[rsp+96]
  004b7	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  004bc	e8 00 00 00 00	 call	 unz64local_getLong
  004c1	85 c0		 test	 eax, eax
  004c3	74 0b		 je	 SHORT $LN30@unzOpenInt

; 724  :             err=UNZ_ERRNO;

  004c5	c7 84 24 e4 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN30@unzOpenInt:

; 725  :         us.size_central_dir = uL;

  004d0	8b 84 24 74 01
	00 00		 mov	 eax, DWORD PTR uL$[rsp]
  004d7	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR us$[rsp+160], rax

; 726  : 
; 727  :         /* offset of start of central directory with respect to the
; 728  :             starting disk number */
; 729  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  004df	4c 8d 84 24 74
	01 00 00	 lea	 r8, QWORD PTR uL$[rsp]
  004e7	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR us$[rsp+96]
  004ef	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  004f4	e8 00 00 00 00	 call	 unz64local_getLong
  004f9	85 c0		 test	 eax, eax
  004fb	74 0b		 je	 SHORT $LN31@unzOpenInt

; 730  :             err=UNZ_ERRNO;

  004fd	c7 84 24 e4 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN31@unzOpenInt:

; 731  :         us.offset_central_dir = uL;

  00508	8b 84 24 74 01
	00 00		 mov	 eax, DWORD PTR uL$[rsp]
  0050f	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR us$[rsp+168], rax

; 732  : 
; 733  :         /* zipfile comment length */
; 734  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&us.gi.size_comment)!=UNZ_OK)

  00517	4c 8d 84 24 a0
	00 00 00	 lea	 r8, QWORD PTR us$[rsp+112]
  0051f	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR us$[rsp+96]
  00527	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  0052c	e8 00 00 00 00	 call	 unz64local_getShort
  00531	85 c0		 test	 eax, eax
  00533	74 0b		 je	 SHORT $LN32@unzOpenInt

; 735  :             err=UNZ_ERRNO;

  00535	c7 84 24 e4 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN32@unzOpenInt:
$LN7@unzOpenInt:

; 736  :     }
; 737  : 
; 738  :     if ((central_pos<us.offset_central_dir+us.size_central_dir) &&

  00540	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR us$[rsp+160]
  00548	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR us$[rsp+168]
  00550	48 03 c8	 add	 rcx, rax
  00553	48 8b c1	 mov	 rax, rcx
  00556	48 39 84 24 60
	01 00 00	 cmp	 QWORD PTR central_pos$[rsp], rax
  0055e	73 15		 jae	 SHORT $LN33@unzOpenInt
  00560	83 bc 24 e4 01
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  00568	75 0b		 jne	 SHORT $LN33@unzOpenInt

; 739  :         (err==UNZ_OK))
; 740  :         err=UNZ_BADZIPFILE;

  0056a	c7 84 24 e4 01
	00 00 99 ff ff
	ff		 mov	 DWORD PTR err$[rsp], -103 ; ffffffffffffff99H
$LN33@unzOpenInt:

; 741  : 
; 742  :     if (err!=UNZ_OK)

  00575	83 bc 24 e4 01
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  0057d	74 18		 je	 SHORT $LN34@unzOpenInt

; 743  :     {
; 744  :         ZCLOSE64(us.z_filefunc, us.filestream);

  0057f	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR us$[rsp+96]
  00587	48 8b 4c 24 68	 mov	 rcx, QWORD PTR us$[rsp+56]
  0058c	ff 54 24 58	 call	 QWORD PTR us$[rsp+40]

; 745  :         return NULL;

  00590	33 c0		 xor	 eax, eax
  00592	e9 9d 00 00 00	 jmp	 $LN1@unzOpenInt
$LN34@unzOpenInt:

; 746  :     }
; 747  : 
; 748  :     us.byte_before_the_zipfile = central_pos -

  00597	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR us$[rsp+160]
  0059f	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR us$[rsp+168]
  005a7	48 03 c8	 add	 rcx, rax
  005aa	48 8b c1	 mov	 rax, rcx
  005ad	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR central_pos$[rsp]
  005b5	48 2b c8	 sub	 rcx, rax
  005b8	48 8b c1	 mov	 rax, rcx
  005bb	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR us$[rsp+120], rax

; 749  :                             (us.offset_central_dir+us.size_central_dir);
; 750  :     us.central_pos = central_pos;

  005c3	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR central_pos$[rsp]
  005cb	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR us$[rsp+152], rax

; 751  :     us.pfile_in_zip_read = NULL;

  005d3	48 c7 84 24 40
	01 00 00 00 00
	00 00		 mov	 QWORD PTR us$[rsp+272], 0

; 752  :     us.encrypted = 0;

  005df	c7 84 24 48 01
	00 00 00 00 00
	00		 mov	 DWORD PTR us$[rsp+280], 0

; 753  : 
; 754  : 
; 755  :     s=(unz64_s*)ALLOC(sizeof(unz64_s));

  005ea	b9 20 01 00 00	 mov	 ecx, 288		; 00000120H
  005ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  005f5	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR s$[rsp], rax

; 756  :     if( s != NULL)

  005fd	48 83 bc 24 58
	01 00 00 00	 cmp	 QWORD PTR s$[rsp], 0
  00606	74 24		 je	 SHORT $LN35@unzOpenInt

; 757  :     {
; 758  :         *s=us;

  00608	48 8d 44 24 30	 lea	 rax, QWORD PTR us$[rsp]
  0060d	48 8b bc 24 58
	01 00 00	 mov	 rdi, QWORD PTR s$[rsp]
  00615	48 8b f0	 mov	 rsi, rax
  00618	b9 20 01 00 00	 mov	 ecx, 288		; 00000120H
  0061d	f3 a4		 rep movsb

; 759  :         unzGoToFirstFile((unzFile)s);

  0061f	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00627	e8 00 00 00 00	 call	 unzGoToFirstFile
$LN35@unzOpenInt:

; 760  :     }
; 761  :     return (unzFile)s;

  0062c	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
$LN1@unzOpenInt:

; 762  : }

  00634	48 8b f8	 mov	 rdi, rax
  00637	48 8b cc	 mov	 rcx, rsp
  0063a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:unzOpenInternal$rtcFrameData
  00641	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00646	48 8b c7	 mov	 rax, rdi
  00649	48 81 c4 38 02
	00 00		 add	 rsp, 568		; 00000238H
  00650	5f		 pop	 rdi
  00651	5e		 pop	 rsi
  00652	c3		 ret	 0
unzOpenInternal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unzOpen2
_TEXT	SEGMENT
zlib_filefunc64_32_def_fill$4 = 48
path$ = 176
pzlib_filefunc32_def$ = 184
unzOpen2 PROC						; COMDAT

; 767  : {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  00012	48 8b fc	 mov	 rdi, rsp
  00015	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+176]
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00030	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 768  :     if (pzlib_filefunc32_def != NULL)

  00035	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR pzlib_filefunc32_def$[rsp], 0
  0003e	74 2b		 je	 SHORT $LN2@unzOpen2

; 769  :     {
; 770  :         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
; 771  :         fill_zlib_filefunc64_32_def_from_filefunc32(&zlib_filefunc64_32_def_fill,pzlib_filefunc32_def);

  00040	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR pzlib_filefunc32_def$[rsp]
  00048	48 8d 4c 24 30	 lea	 rcx, QWORD PTR zlib_filefunc64_32_def_fill$4[rsp]
  0004d	e8 00 00 00 00	 call	 fill_zlib_filefunc64_32_def_from_filefunc32

; 772  :         return unzOpenInternal(path, &zlib_filefunc64_32_def_fill, 0);

  00052	45 33 c0	 xor	 r8d, r8d
  00055	48 8d 54 24 30	 lea	 rdx, QWORD PTR zlib_filefunc64_32_def_fill$4[rsp]
  0005a	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR path$[rsp]
  00062	e8 00 00 00 00	 call	 unzOpenInternal
  00067	eb 14		 jmp	 SHORT $LN1@unzOpen2

; 773  :     }

  00069	eb 12		 jmp	 SHORT $LN3@unzOpen2
$LN2@unzOpen2:

; 774  :     else
; 775  :         return unzOpenInternal(path, NULL, 0);

  0006b	45 33 c0	 xor	 r8d, r8d
  0006e	33 d2		 xor	 edx, edx
  00070	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR path$[rsp]
  00078	e8 00 00 00 00	 call	 unzOpenInternal
$LN3@unzOpen2:
$LN1@unzOpen2:

; 776  : }

  0007d	48 8b f8	 mov	 rdi, rax
  00080	48 8b cc	 mov	 rcx, rsp
  00083	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:unzOpen2$rtcFrameData
  0008a	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0008f	48 8b c7	 mov	 rax, rdi
  00092	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  00099	5f		 pop	 rdi
  0009a	c3		 ret	 0
unzOpen2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unzOpen2_64
_TEXT	SEGMENT
zlib_filefunc64_32_def_fill$4 = 48
path$ = 192
pzlib_filefunc_def$ = 200
unzOpen2_64 PROC					; COMDAT

; 780  : {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 2a 00 00 00	 mov	 ecx, 42			; 0000002aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+192]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 781  :     if (pzlib_filefunc_def != NULL)

  00036	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR pzlib_filefunc_def$[rsp], 0
  0003f	74 48		 je	 SHORT $LN2@unzOpen2_6

; 782  :     {
; 783  :         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
; 784  :         zlib_filefunc64_32_def_fill.zfile_func64 = *pzlib_filefunc_def;

  00041	48 8d 44 24 30	 lea	 rax, QWORD PTR zlib_filefunc64_32_def_fill$4[rsp]
  00046	48 8b f8	 mov	 rdi, rax
  00049	48 8b b4 24 c8
	00 00 00	 mov	 rsi, QWORD PTR pzlib_filefunc_def$[rsp]
  00051	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00056	f3 a4		 rep movsb

; 785  :         zlib_filefunc64_32_def_fill.ztell32_file = NULL;

  00058	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR zlib_filefunc64_32_def_fill$4[rsp+72], 0

; 786  :         zlib_filefunc64_32_def_fill.zseek32_file = NULL;

  00061	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR zlib_filefunc64_32_def_fill$4[rsp+80], 0

; 787  :         return unzOpenInternal(path, &zlib_filefunc64_32_def_fill, 1);

  0006d	41 b8 01 00 00
	00		 mov	 r8d, 1
  00073	48 8d 54 24 30	 lea	 rdx, QWORD PTR zlib_filefunc64_32_def_fill$4[rsp]
  00078	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR path$[rsp]
  00080	e8 00 00 00 00	 call	 unzOpenInternal
  00085	eb 17		 jmp	 SHORT $LN1@unzOpen2_6

; 788  :     }

  00087	eb 15		 jmp	 SHORT $LN3@unzOpen2_6
$LN2@unzOpen2_6:

; 789  :     else
; 790  :         return unzOpenInternal(path, NULL, 1);

  00089	41 b8 01 00 00
	00		 mov	 r8d, 1
  0008f	33 d2		 xor	 edx, edx
  00091	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR path$[rsp]
  00099	e8 00 00 00 00	 call	 unzOpenInternal
$LN3@unzOpen2_6:
$LN1@unzOpen2_6:

; 791  : }

  0009e	48 8b f8	 mov	 rdi, rax
  000a1	48 8b cc	 mov	 rcx, rsp
  000a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:unzOpen2_64$rtcFrameData
  000ab	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000b0	48 8b c7	 mov	 rax, rdi
  000b3	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  000ba	5f		 pop	 rdi
  000bb	5e		 pop	 rsi
  000bc	c3		 ret	 0
unzOpen2_64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unzOpen
_TEXT	SEGMENT
path$ = 48
unzOpen	PROC						; COMDAT

; 794  : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 795  :     return unzOpenInternal(path, NULL, 0);

  0002a	45 33 c0	 xor	 r8d, r8d
  0002d	33 d2		 xor	 edx, edx
  0002f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR path$[rsp]
  00034	e8 00 00 00 00	 call	 unzOpenInternal

; 796  : }

  00039	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003d	5f		 pop	 rdi
  0003e	c3		 ret	 0
unzOpen	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unzOpen64
_TEXT	SEGMENT
path$ = 48
unzOpen64 PROC						; COMDAT

; 799  : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 800  :     return unzOpenInternal(path, NULL, 1);

  0002a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00030	33 d2		 xor	 edx, edx
  00032	48 8b 4c 24 30	 mov	 rcx, QWORD PTR path$[rsp]
  00037	e8 00 00 00 00	 call	 unzOpenInternal

; 801  : }

  0003c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00040	5f		 pop	 rdi
  00041	c3		 ret	 0
unzOpen64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unzClose
_TEXT	SEGMENT
s$ = 32
file$ = 64
unzClose PROC						; COMDAT

; 809  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 810  :     unz64_s* s;
; 811  :     if (file==NULL)

  0002a	48 83 7c 24 40
	00		 cmp	 QWORD PTR file$[rsp], 0
  00030	75 07		 jne	 SHORT $LN2@unzClose

; 812  :         return UNZ_PARAMERROR;

  00032	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00037	eb 52		 jmp	 SHORT $LN1@unzClose
$LN2@unzClose:

; 813  :     s=(unz64_s*)file;

  00039	48 8b 44 24 40	 mov	 rax, QWORD PTR file$[rsp]
  0003e	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax

; 814  : 
; 815  :     if (s->pfile_in_zip_read!=NULL)

  00043	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00048	48 83 b8 10 01
	00 00 00	 cmp	 QWORD PTR [rax+272], 0
  00050	74 0a		 je	 SHORT $LN3@unzClose

; 816  :         unzCloseCurrentFile(file);

  00052	48 8b 4c 24 40	 mov	 rcx, QWORD PTR file$[rsp]
  00057	e8 00 00 00 00	 call	 unzCloseCurrentFile
$LN3@unzClose:

; 817  : 
; 818  :     ZCLOSE64(s->z_filefunc, s->filestream);

  0005c	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00061	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  00065	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0006a	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  0006e	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00073	ff 50 28	 call	 QWORD PTR [rax+40]

; 819  :     TRYFREE(s);

  00076	48 83 7c 24 20
	00		 cmp	 QWORD PTR s$[rsp], 0
  0007c	74 0b		 je	 SHORT $LN4@unzClose
  0007e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00083	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN4@unzClose:

; 820  :     return UNZ_OK;

  00089	33 c0		 xor	 eax, eax
$LN1@unzClose:

; 821  : }

  0008b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008f	5f		 pop	 rdi
  00090	c3		 ret	 0
unzClose ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unzGetGlobalInfo64
_TEXT	SEGMENT
s$ = 32
file$ = 80
pglobal_info$ = 88
unzGetGlobalInfo64 PROC					; COMDAT

; 829  : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00010	48 8b fc	 mov	 rdi, rsp
  00013	b9 0e 00 00 00	 mov	 ecx, 14
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]
  00024	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 830  :     unz64_s* s;
; 831  :     if (file==NULL)

  00030	48 83 7c 24 50
	00		 cmp	 QWORD PTR file$[rsp], 0
  00036	75 07		 jne	 SHORT $LN2@unzGetGlob

; 832  :         return UNZ_PARAMERROR;

  00038	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  0003d	eb 21		 jmp	 SHORT $LN1@unzGetGlob
$LN2@unzGetGlob:

; 833  :     s=(unz64_s*)file;

  0003f	48 8b 44 24 50	 mov	 rax, QWORD PTR file$[rsp]
  00044	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax

; 834  :     *pglobal_info=s->gi;

  00049	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0004e	48 8b 7c 24 58	 mov	 rdi, QWORD PTR pglobal_info$[rsp]
  00053	48 8d 70 68	 lea	 rsi, QWORD PTR [rax+104]
  00057	b9 10 00 00 00	 mov	 ecx, 16
  0005c	f3 a4		 rep movsb

; 835  :     return UNZ_OK;

  0005e	33 c0		 xor	 eax, eax
$LN1@unzGetGlob:

; 836  : }

  00060	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00064	5f		 pop	 rdi
  00065	5e		 pop	 rsi
  00066	c3		 ret	 0
unzGetGlobalInfo64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unzGetGlobalInfo
_TEXT	SEGMENT
s$ = 32
file$ = 64
pglobal_info32$ = 72
unzGetGlobalInfo PROC					; COMDAT

; 839  : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 840  :     unz64_s* s;
; 841  :     if (file==NULL)

  0002f	48 83 7c 24 40
	00		 cmp	 QWORD PTR file$[rsp], 0
  00035	75 07		 jne	 SHORT $LN2@unzGetGlob

; 842  :         return UNZ_PARAMERROR;

  00037	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  0003c	eb 2b		 jmp	 SHORT $LN1@unzGetGlob
$LN2@unzGetGlob:

; 843  :     s=(unz64_s*)file;

  0003e	48 8b 44 24 40	 mov	 rax, QWORD PTR file$[rsp]
  00043	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax

; 844  :     /* to do : check if number_entry is not truncated */
; 845  :     pglobal_info32->number_entry = (uLong)s->gi.number_entry;

  00048	48 8b 44 24 48	 mov	 rax, QWORD PTR pglobal_info32$[rsp]
  0004d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00052	8b 49 68	 mov	 ecx, DWORD PTR [rcx+104]
  00055	89 08		 mov	 DWORD PTR [rax], ecx

; 846  :     pglobal_info32->size_comment = s->gi.size_comment;

  00057	48 8b 44 24 48	 mov	 rax, QWORD PTR pglobal_info32$[rsp]
  0005c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00061	8b 49 70	 mov	 ecx, DWORD PTR [rcx+112]
  00064	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 847  :     return UNZ_OK;

  00067	33 c0		 xor	 eax, eax
$LN1@unzGetGlob:

; 848  : }

  00069	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0006d	5f		 pop	 rdi
  0006e	c3		 ret	 0
unzGetGlobalInfo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unz64local_DosDateToTmuDate
_TEXT	SEGMENT
uDate$ = 32
ulDosDate$ = 64
ptm$ = 72
unz64local_DosDateToTmuDate PROC			; COMDAT

; 853  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 854  :     ZPOS64_T uDate;
; 855  :     uDate = (ZPOS64_T)(ulDosDate>>16);

  0002f	48 8b 44 24 40	 mov	 rax, QWORD PTR ulDosDate$[rsp]
  00034	48 c1 e8 10	 shr	 rax, 16
  00038	48 89 44 24 20	 mov	 QWORD PTR uDate$[rsp], rax

; 856  :     ptm->tm_mday = (uInt)(uDate&0x1f) ;

  0003d	48 8b 44 24 20	 mov	 rax, QWORD PTR uDate$[rsp]
  00042	48 83 e0 1f	 and	 rax, 31
  00046	48 8b 4c 24 48	 mov	 rcx, QWORD PTR ptm$[rsp]
  0004b	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 857  :     ptm->tm_mon =  (uInt)((((uDate)&0x1E0)/0x20)-1) ;

  0004e	48 8b 44 24 20	 mov	 rax, QWORD PTR uDate$[rsp]
  00053	48 25 e0 01 00
	00		 and	 rax, 480		; 000001e0H
  00059	33 d2		 xor	 edx, edx
  0005b	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00060	48 f7 f1	 div	 rcx
  00063	48 ff c8	 dec	 rax
  00066	48 8b 4c 24 48	 mov	 rcx, QWORD PTR ptm$[rsp]
  0006b	89 41 10	 mov	 DWORD PTR [rcx+16], eax

; 858  :     ptm->tm_year = (uInt)(((uDate&0x0FE00)/0x0200)+1980) ;

  0006e	48 8b 44 24 20	 mov	 rax, QWORD PTR uDate$[rsp]
  00073	48 25 00 fe 00
	00		 and	 rax, 65024		; 0000fe00H
  00079	33 d2		 xor	 edx, edx
  0007b	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  00080	48 f7 f1	 div	 rcx
  00083	48 05 bc 07 00
	00		 add	 rax, 1980		; 000007bcH
  00089	48 8b 4c 24 48	 mov	 rcx, QWORD PTR ptm$[rsp]
  0008e	89 41 14	 mov	 DWORD PTR [rcx+20], eax

; 859  : 
; 860  :     ptm->tm_hour = (uInt) ((ulDosDate &0xF800)/0x800);

  00091	48 8b 44 24 40	 mov	 rax, QWORD PTR ulDosDate$[rsp]
  00096	48 25 00 f8 00
	00		 and	 rax, 63488		; 0000f800H
  0009c	33 d2		 xor	 edx, edx
  0009e	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  000a3	48 f7 f1	 div	 rcx
  000a6	48 8b 4c 24 48	 mov	 rcx, QWORD PTR ptm$[rsp]
  000ab	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 861  :     ptm->tm_min =  (uInt) ((ulDosDate&0x7E0)/0x20) ;

  000ae	48 8b 44 24 40	 mov	 rax, QWORD PTR ulDosDate$[rsp]
  000b3	48 25 e0 07 00
	00		 and	 rax, 2016		; 000007e0H
  000b9	33 d2		 xor	 edx, edx
  000bb	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  000c0	48 f7 f1	 div	 rcx
  000c3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR ptm$[rsp]
  000c8	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 862  :     ptm->tm_sec =  (uInt) (2*(ulDosDate&0x1f)) ;

  000cb	48 8b 44 24 40	 mov	 rax, QWORD PTR ulDosDate$[rsp]
  000d0	48 83 e0 1f	 and	 rax, 31
  000d4	48 d1 e0	 shl	 rax, 1
  000d7	48 8b 4c 24 48	 mov	 rcx, QWORD PTR ptm$[rsp]
  000dc	89 01		 mov	 DWORD PTR [rcx], eax

; 863  : }

  000de	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000e2	5f		 pop	 rdi
  000e3	c3		 ret	 0
unz64local_DosDateToTmuDate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unz64local_GetCurrentFileInfoInternal
_TEXT	SEGMENT
s$ = 32
file_info$ = 64
file_info_internal$ = 184
err$ = 196
uMagic$ = 212
lSeek$ = 228
uL$ = 244
uSizeRead$10 = 260
uSizeRead$11 = 264
acc$12 = 272
headerId$13 = 292
dataSize$14 = 324
uL$15 = 356
uSizeRead$16 = 372
file$ = 416
pfile_info$ = 424
pfile_info_internal$ = 432
szFileName$ = 440
fileNameBufferSize$ = 448
extraField$ = 456
extraFieldBufferSize$ = 464
szComment$ = 472
commentBufferSize$ = 480
unz64local_GetCurrentFileInfoInternal PROC		; COMDAT

; 889  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+416]
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0003b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 890  :     unz64_s* s;
; 891  :     unz_file_info64 file_info;
; 892  :     unz_file_info64_internal file_info_internal;
; 893  :     int err=UNZ_OK;

  00040	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR err$[rsp], 0

; 894  :     uLong uMagic;
; 895  :     long lSeek=0;

  0004b	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR lSeek$[rsp], 0

; 896  :     uLong uL;
; 897  : 
; 898  :     if (file==NULL)

  00056	48 83 bc 24 a0
	01 00 00 00	 cmp	 QWORD PTR file$[rsp], 0
  0005f	75 0a		 jne	 SHORT $LN4@unz64local

; 899  :         return UNZ_PARAMERROR;

  00061	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00066	e9 f6 08 00 00	 jmp	 $LN1@unz64local
$LN4@unz64local:

; 900  :     s=(unz64_s*)file;

  0006b	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR file$[rsp]
  00073	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax

; 901  :     if (ZSEEK64(s->z_filefunc, s->filestream,
; 902  :               s->pos_in_central_dir+s->byte_before_the_zipfile,
; 903  :               ZLIB_FILEFUNC_SEEK_SET)!=0)

  00078	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0007d	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  00084	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00089	48 03 41 78	 add	 rax, QWORD PTR [rcx+120]
  0008d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00092	45 33 c9	 xor	 r9d, r9d
  00095	4c 8b c0	 mov	 r8, rax
  00098	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0009d	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  000a1	e8 00 00 00 00	 call	 call_zseek64
  000a6	85 c0		 test	 eax, eax
  000a8	74 0b		 je	 SHORT $LN5@unz64local

; 904  :         err=UNZ_ERRNO;

  000aa	c7 84 24 c4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN5@unz64local:

; 905  : 
; 906  : 
; 907  :     /* we check the magic */
; 908  :     if (err==UNZ_OK)

  000b5	83 bc 24 c4 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  000bd	75 47		 jne	 SHORT $LN6@unz64local

; 909  :     {
; 910  :         if (unz64local_getLong(&s->z_filefunc, s->filestream,&uMagic) != UNZ_OK)

  000bf	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000c4	4c 8d 84 24 d4
	00 00 00	 lea	 r8, QWORD PTR uMagic$[rsp]
  000cc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  000d1	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  000d5	48 8b c8	 mov	 rcx, rax
  000d8	e8 00 00 00 00	 call	 unz64local_getLong
  000dd	85 c0		 test	 eax, eax
  000df	74 0d		 je	 SHORT $LN7@unz64local

; 911  :             err=UNZ_ERRNO;

  000e1	c7 84 24 c4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
  000ec	eb 18		 jmp	 SHORT $LN8@unz64local
$LN7@unz64local:

; 912  :         else if (uMagic!=0x02014b50)

  000ee	81 bc 24 d4 00
	00 00 50 4b 01
	02		 cmp	 DWORD PTR uMagic$[rsp], 33639248 ; 02014b50H
  000f9	74 0b		 je	 SHORT $LN9@unz64local

; 913  :             err=UNZ_BADZIPFILE;

  000fb	c7 84 24 c4 00
	00 00 99 ff ff
	ff		 mov	 DWORD PTR err$[rsp], -103 ; ffffffffffffff99H
$LN9@unz64local:
$LN8@unz64local:
$LN6@unz64local:

; 914  :     }
; 915  : 
; 916  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.version) != UNZ_OK)

  00106	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0010b	4c 8d 44 24 40	 lea	 r8, QWORD PTR file_info$[rsp]
  00110	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00115	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00119	48 8b c8	 mov	 rcx, rax
  0011c	e8 00 00 00 00	 call	 unz64local_getShort
  00121	85 c0		 test	 eax, eax
  00123	74 0b		 je	 SHORT $LN10@unz64local

; 917  :         err=UNZ_ERRNO;

  00125	c7 84 24 c4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN10@unz64local:

; 918  : 
; 919  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.version_needed) != UNZ_OK)

  00130	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00135	4c 8d 44 24 44	 lea	 r8, QWORD PTR file_info$[rsp+4]
  0013a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  0013f	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00143	48 8b c8	 mov	 rcx, rax
  00146	e8 00 00 00 00	 call	 unz64local_getShort
  0014b	85 c0		 test	 eax, eax
  0014d	74 0b		 je	 SHORT $LN11@unz64local

; 920  :         err=UNZ_ERRNO;

  0014f	c7 84 24 c4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN11@unz64local:

; 921  : 
; 922  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.flag) != UNZ_OK)

  0015a	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0015f	4c 8d 44 24 48	 lea	 r8, QWORD PTR file_info$[rsp+8]
  00164	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00169	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  0016d	48 8b c8	 mov	 rcx, rax
  00170	e8 00 00 00 00	 call	 unz64local_getShort
  00175	85 c0		 test	 eax, eax
  00177	74 0b		 je	 SHORT $LN12@unz64local

; 923  :         err=UNZ_ERRNO;

  00179	c7 84 24 c4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN12@unz64local:

; 924  : 
; 925  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.compression_method) != UNZ_OK)

  00184	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00189	4c 8d 44 24 4c	 lea	 r8, QWORD PTR file_info$[rsp+12]
  0018e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00193	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00197	48 8b c8	 mov	 rcx, rax
  0019a	e8 00 00 00 00	 call	 unz64local_getShort
  0019f	85 c0		 test	 eax, eax
  001a1	74 0b		 je	 SHORT $LN13@unz64local

; 926  :         err=UNZ_ERRNO;

  001a3	c7 84 24 c4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN13@unz64local:

; 927  : 
; 928  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&file_info.dosDate) != UNZ_OK)

  001ae	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  001b3	4c 8d 44 24 50	 lea	 r8, QWORD PTR file_info$[rsp+16]
  001b8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  001bd	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  001c1	48 8b c8	 mov	 rcx, rax
  001c4	e8 00 00 00 00	 call	 unz64local_getLong
  001c9	85 c0		 test	 eax, eax
  001cb	74 0b		 je	 SHORT $LN14@unz64local

; 929  :         err=UNZ_ERRNO;

  001cd	c7 84 24 c4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN14@unz64local:

; 930  : 
; 931  :     unz64local_DosDateToTmuDate(file_info.dosDate,&file_info.tmu_date);

  001d8	8b 44 24 50	 mov	 eax, DWORD PTR file_info$[rsp+16]
  001dc	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR file_info$[rsp+64]
  001e4	8b c8		 mov	 ecx, eax
  001e6	e8 00 00 00 00	 call	 unz64local_DosDateToTmuDate

; 932  : 
; 933  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&file_info.crc) != UNZ_OK)

  001eb	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  001f0	4c 8d 44 24 54	 lea	 r8, QWORD PTR file_info$[rsp+20]
  001f5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  001fa	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  001fe	48 8b c8	 mov	 rcx, rax
  00201	e8 00 00 00 00	 call	 unz64local_getLong
  00206	85 c0		 test	 eax, eax
  00208	74 0b		 je	 SHORT $LN15@unz64local

; 934  :         err=UNZ_ERRNO;

  0020a	c7 84 24 c4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN15@unz64local:

; 935  : 
; 936  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uL) != UNZ_OK)

  00215	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0021a	4c 8d 84 24 f4
	00 00 00	 lea	 r8, QWORD PTR uL$[rsp]
  00222	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00227	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  0022b	48 8b c8	 mov	 rcx, rax
  0022e	e8 00 00 00 00	 call	 unz64local_getLong
  00233	85 c0		 test	 eax, eax
  00235	74 0b		 je	 SHORT $LN16@unz64local

; 937  :         err=UNZ_ERRNO;

  00237	c7 84 24 c4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN16@unz64local:

; 938  :     file_info.compressed_size = uL;

  00242	8b 84 24 f4 00
	00 00		 mov	 eax, DWORD PTR uL$[rsp]
  00249	48 89 44 24 58	 mov	 QWORD PTR file_info$[rsp+24], rax

; 939  : 
; 940  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uL) != UNZ_OK)

  0024e	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00253	4c 8d 84 24 f4
	00 00 00	 lea	 r8, QWORD PTR uL$[rsp]
  0025b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00260	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00264	48 8b c8	 mov	 rcx, rax
  00267	e8 00 00 00 00	 call	 unz64local_getLong
  0026c	85 c0		 test	 eax, eax
  0026e	74 0b		 je	 SHORT $LN17@unz64local

; 941  :         err=UNZ_ERRNO;

  00270	c7 84 24 c4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN17@unz64local:

; 942  :     file_info.uncompressed_size = uL;

  0027b	8b 84 24 f4 00
	00 00		 mov	 eax, DWORD PTR uL$[rsp]
  00282	48 89 44 24 60	 mov	 QWORD PTR file_info$[rsp+32], rax

; 943  : 
; 944  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.size_filename) != UNZ_OK)

  00287	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0028c	4c 8d 44 24 68	 lea	 r8, QWORD PTR file_info$[rsp+40]
  00291	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00296	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  0029a	48 8b c8	 mov	 rcx, rax
  0029d	e8 00 00 00 00	 call	 unz64local_getShort
  002a2	85 c0		 test	 eax, eax
  002a4	74 0b		 je	 SHORT $LN18@unz64local

; 945  :         err=UNZ_ERRNO;

  002a6	c7 84 24 c4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN18@unz64local:

; 946  : 
; 947  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.size_file_extra) != UNZ_OK)

  002b1	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  002b6	4c 8d 44 24 6c	 lea	 r8, QWORD PTR file_info$[rsp+44]
  002bb	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  002c0	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  002c4	48 8b c8	 mov	 rcx, rax
  002c7	e8 00 00 00 00	 call	 unz64local_getShort
  002cc	85 c0		 test	 eax, eax
  002ce	74 0b		 je	 SHORT $LN19@unz64local

; 948  :         err=UNZ_ERRNO;

  002d0	c7 84 24 c4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN19@unz64local:

; 949  : 
; 950  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.size_file_comment) != UNZ_OK)

  002db	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  002e0	4c 8d 44 24 70	 lea	 r8, QWORD PTR file_info$[rsp+48]
  002e5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  002ea	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  002ee	48 8b c8	 mov	 rcx, rax
  002f1	e8 00 00 00 00	 call	 unz64local_getShort
  002f6	85 c0		 test	 eax, eax
  002f8	74 0b		 je	 SHORT $LN20@unz64local

; 951  :         err=UNZ_ERRNO;

  002fa	c7 84 24 c4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN20@unz64local:

; 952  : 
; 953  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.disk_num_start) != UNZ_OK)

  00305	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0030a	4c 8d 44 24 74	 lea	 r8, QWORD PTR file_info$[rsp+52]
  0030f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00314	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00318	48 8b c8	 mov	 rcx, rax
  0031b	e8 00 00 00 00	 call	 unz64local_getShort
  00320	85 c0		 test	 eax, eax
  00322	74 0b		 je	 SHORT $LN21@unz64local

; 954  :         err=UNZ_ERRNO;

  00324	c7 84 24 c4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN21@unz64local:

; 955  : 
; 956  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.internal_fa) != UNZ_OK)

  0032f	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00334	4c 8d 44 24 78	 lea	 r8, QWORD PTR file_info$[rsp+56]
  00339	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  0033e	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00342	48 8b c8	 mov	 rcx, rax
  00345	e8 00 00 00 00	 call	 unz64local_getShort
  0034a	85 c0		 test	 eax, eax
  0034c	74 0b		 je	 SHORT $LN22@unz64local

; 957  :         err=UNZ_ERRNO;

  0034e	c7 84 24 c4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN22@unz64local:

; 958  : 
; 959  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&file_info.external_fa) != UNZ_OK)

  00359	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0035e	4c 8d 44 24 7c	 lea	 r8, QWORD PTR file_info$[rsp+60]
  00363	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00368	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  0036c	48 8b c8	 mov	 rcx, rax
  0036f	e8 00 00 00 00	 call	 unz64local_getLong
  00374	85 c0		 test	 eax, eax
  00376	74 0b		 je	 SHORT $LN23@unz64local

; 960  :         err=UNZ_ERRNO;

  00378	c7 84 24 c4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN23@unz64local:

; 961  : 
; 962  :                 // relative offset of local header
; 963  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uL) != UNZ_OK)

  00383	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00388	4c 8d 84 24 f4
	00 00 00	 lea	 r8, QWORD PTR uL$[rsp]
  00390	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00395	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00399	48 8b c8	 mov	 rcx, rax
  0039c	e8 00 00 00 00	 call	 unz64local_getLong
  003a1	85 c0		 test	 eax, eax
  003a3	74 0b		 je	 SHORT $LN24@unz64local

; 964  :         err=UNZ_ERRNO;

  003a5	c7 84 24 c4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN24@unz64local:

; 965  :     file_info_internal.offset_curfile = uL;

  003b0	8b 84 24 f4 00
	00 00		 mov	 eax, DWORD PTR uL$[rsp]
  003b7	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR file_info_internal$[rsp], rax

; 966  : 
; 967  :     lSeek+=file_info.size_filename;

  003bf	8b 44 24 68	 mov	 eax, DWORD PTR file_info$[rsp+40]
  003c3	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR lSeek$[rsp]
  003ca	03 c8		 add	 ecx, eax
  003cc	8b c1		 mov	 eax, ecx
  003ce	89 84 24 e4 00
	00 00		 mov	 DWORD PTR lSeek$[rsp], eax

; 968  :     if ((err==UNZ_OK) && (szFileName!=NULL))

  003d5	83 bc 24 c4 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  003dd	0f 85 b2 00 00
	00		 jne	 $LN25@unz64local
  003e3	48 83 bc 24 b8
	01 00 00 00	 cmp	 QWORD PTR szFileName$[rsp], 0
  003ec	0f 84 a3 00 00
	00		 je	 $LN25@unz64local

; 969  :     {
; 970  :         uLong uSizeRead ;
; 971  :         if (file_info.size_filename<fileNameBufferSize)

  003f2	8b 84 24 c0 01
	00 00		 mov	 eax, DWORD PTR fileNameBufferSize$[rsp]
  003f9	39 44 24 68	 cmp	 DWORD PTR file_info$[rsp+40], eax
  003fd	73 1d		 jae	 SHORT $LN26@unz64local

; 972  :         {
; 973  :             *(szFileName+file_info.size_filename)='\0';

  003ff	8b 44 24 68	 mov	 eax, DWORD PTR file_info$[rsp+40]
  00403	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR szFileName$[rsp]
  0040b	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 974  :             uSizeRead = file_info.size_filename;

  0040f	8b 44 24 68	 mov	 eax, DWORD PTR file_info$[rsp+40]
  00413	89 84 24 04 01
	00 00		 mov	 DWORD PTR uSizeRead$10[rsp], eax

; 975  :         }

  0041a	eb 0e		 jmp	 SHORT $LN27@unz64local
$LN26@unz64local:

; 976  :         else
; 977  :             uSizeRead = fileNameBufferSize;

  0041c	8b 84 24 c0 01
	00 00		 mov	 eax, DWORD PTR fileNameBufferSize$[rsp]
  00423	89 84 24 04 01
	00 00		 mov	 DWORD PTR uSizeRead$10[rsp], eax
$LN27@unz64local:

; 978  : 
; 979  :         if ((file_info.size_filename>0) && (fileNameBufferSize>0))

  0042a	83 7c 24 68 00	 cmp	 DWORD PTR file_info$[rsp+40], 0
  0042f	76 4b		 jbe	 SHORT $LN28@unz64local
  00431	83 bc 24 c0 01
	00 00 00	 cmp	 DWORD PTR fileNameBufferSize$[rsp], 0
  00439	76 41		 jbe	 SHORT $LN28@unz64local

; 980  :             if (ZREAD64(s->z_filefunc, s->filestream,szFileName,uSizeRead)!=uSizeRead)

  0043b	0f ae e8	 lfence
  0043e	44 8b 8c 24 04
	01 00 00	 mov	 r9d, DWORD PTR uSizeRead$10[rsp]
  00446	4c 8b 84 24 b8
	01 00 00	 mov	 r8, QWORD PTR szFileName$[rsp]
  0044e	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00453	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  00457	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0045c	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  00460	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00465	ff 50 08	 call	 QWORD PTR [rax+8]
  00468	3b 84 24 04 01
	00 00		 cmp	 eax, DWORD PTR uSizeRead$10[rsp]
  0046f	74 0b		 je	 SHORT $LN29@unz64local

; 981  :                 err=UNZ_ERRNO;

  00471	c7 84 24 c4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN29@unz64local:
$LN28@unz64local:

; 982  :         lSeek -= uSizeRead;

  0047c	8b 84 24 04 01
	00 00		 mov	 eax, DWORD PTR uSizeRead$10[rsp]
  00483	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR lSeek$[rsp]
  0048a	2b c8		 sub	 ecx, eax
  0048c	8b c1		 mov	 eax, ecx
  0048e	89 84 24 e4 00
	00 00		 mov	 DWORD PTR lSeek$[rsp], eax
$LN25@unz64local:

; 983  :     }
; 984  : 
; 985  :     // Read extrafield
; 986  :     if ((err==UNZ_OK) && (extraField!=NULL))

  00495	83 bc 24 c4 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  0049d	0f 85 f8 00 00
	00		 jne	 $LN30@unz64local
  004a3	48 83 bc 24 c8
	01 00 00 00	 cmp	 QWORD PTR extraField$[rsp], 0
  004ac	0f 84 e9 00 00
	00		 je	 $LN30@unz64local

; 987  :     {
; 988  :         ZPOS64_T uSizeRead ;
; 989  :         if (file_info.size_file_extra<extraFieldBufferSize)

  004b2	8b 84 24 d0 01
	00 00		 mov	 eax, DWORD PTR extraFieldBufferSize$[rsp]
  004b9	39 44 24 6c	 cmp	 DWORD PTR file_info$[rsp+44], eax
  004bd	73 0e		 jae	 SHORT $LN32@unz64local

; 990  :             uSizeRead = file_info.size_file_extra;

  004bf	8b 44 24 6c	 mov	 eax, DWORD PTR file_info$[rsp+44]
  004c3	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR uSizeRead$11[rsp], rax
  004cb	eb 0f		 jmp	 SHORT $LN33@unz64local
$LN32@unz64local:

; 991  :         else
; 992  :             uSizeRead = extraFieldBufferSize;

  004cd	8b 84 24 d0 01
	00 00		 mov	 eax, DWORD PTR extraFieldBufferSize$[rsp]
  004d4	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR uSizeRead$11[rsp], rax
$LN33@unz64local:

; 993  : 
; 994  :         if (lSeek!=0)

  004dc	83 bc 24 e4 00
	00 00 00	 cmp	 DWORD PTR lSeek$[rsp], 0
  004e4	74 40		 je	 SHORT $LN34@unz64local

; 995  :         {
; 996  :             if (ZSEEK64(s->z_filefunc, s->filestream,lSeek,ZLIB_FILEFUNC_SEEK_CUR)==0)

  004e6	48 63 84 24 e4
	00 00 00	 movsxd	 rax, DWORD PTR lSeek$[rsp]
  004ee	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  004f3	41 b9 01 00 00
	00		 mov	 r9d, 1
  004f9	4c 8b c0	 mov	 r8, rax
  004fc	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00501	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  00505	e8 00 00 00 00	 call	 call_zseek64
  0050a	85 c0		 test	 eax, eax
  0050c	75 0d		 jne	 SHORT $LN35@unz64local

; 997  :                 lSeek=0;

  0050e	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR lSeek$[rsp], 0
  00519	eb 0b		 jmp	 SHORT $LN36@unz64local
$LN35@unz64local:

; 998  :             else
; 999  :                 err=UNZ_ERRNO;

  0051b	c7 84 24 c4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN36@unz64local:
$LN34@unz64local:

; 1000 :         }
; 1001 : 
; 1002 :         if ((file_info.size_file_extra>0) && (extraFieldBufferSize>0))

  00526	83 7c 24 6c 00	 cmp	 DWORD PTR file_info$[rsp+44], 0
  0052b	76 4b		 jbe	 SHORT $LN37@unz64local
  0052d	83 bc 24 d0 01
	00 00 00	 cmp	 DWORD PTR extraFieldBufferSize$[rsp], 0
  00535	76 41		 jbe	 SHORT $LN37@unz64local

; 1003 :             if (ZREAD64(s->z_filefunc, s->filestream,extraField,(uLong)uSizeRead)!=uSizeRead)

  00537	44 8b 8c 24 08
	01 00 00	 mov	 r9d, DWORD PTR uSizeRead$11[rsp]
  0053f	4c 8b 84 24 c8
	01 00 00	 mov	 r8, QWORD PTR extraField$[rsp]
  00547	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0054c	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  00550	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00555	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  00559	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0055e	ff 50 08	 call	 QWORD PTR [rax+8]
  00561	8b c0		 mov	 eax, eax
  00563	48 3b 84 24 08
	01 00 00	 cmp	 rax, QWORD PTR uSizeRead$11[rsp]
  0056b	74 0b		 je	 SHORT $LN38@unz64local

; 1004 :                 err=UNZ_ERRNO;

  0056d	c7 84 24 c4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN38@unz64local:
$LN37@unz64local:

; 1005 : 
; 1006 :         lSeek += file_info.size_file_extra - (uLong)uSizeRead;

  00578	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR uSizeRead$11[rsp]
  0057f	8b 4c 24 6c	 mov	 ecx, DWORD PTR file_info$[rsp+44]
  00583	2b c8		 sub	 ecx, eax
  00585	8b c1		 mov	 eax, ecx
  00587	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR lSeek$[rsp]
  0058e	03 c8		 add	 ecx, eax
  00590	8b c1		 mov	 eax, ecx
  00592	89 84 24 e4 00
	00 00		 mov	 DWORD PTR lSeek$[rsp], eax

; 1007 :     }

  00599	eb 16		 jmp	 SHORT $LN31@unz64local
$LN30@unz64local:

; 1008 :     else
; 1009 :         lSeek += file_info.size_file_extra;

  0059b	8b 44 24 6c	 mov	 eax, DWORD PTR file_info$[rsp+44]
  0059f	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR lSeek$[rsp]
  005a6	03 c8		 add	 ecx, eax
  005a8	8b c1		 mov	 eax, ecx
  005aa	89 84 24 e4 00
	00 00		 mov	 DWORD PTR lSeek$[rsp], eax
$LN31@unz64local:

; 1010 : 
; 1011 : 
; 1012 :     if ((err==UNZ_OK) && (file_info.size_file_extra != 0))

  005b1	83 bc 24 c4 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  005b9	0f 85 1d 02 00
	00		 jne	 $LN39@unz64local
  005bf	83 7c 24 6c 00	 cmp	 DWORD PTR file_info$[rsp+44], 0
  005c4	0f 84 12 02 00
	00		 je	 $LN39@unz64local

; 1013 :     {
; 1014 :                                 uLong acc = 0;

  005ca	c7 84 24 10 01
	00 00 00 00 00
	00		 mov	 DWORD PTR acc$12[rsp], 0

; 1015 : 
; 1016 :         // since lSeek now points to after the extra field we need to move back
; 1017 :         lSeek -= file_info.size_file_extra;

  005d5	8b 44 24 6c	 mov	 eax, DWORD PTR file_info$[rsp+44]
  005d9	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR lSeek$[rsp]
  005e0	2b c8		 sub	 ecx, eax
  005e2	8b c1		 mov	 eax, ecx
  005e4	89 84 24 e4 00
	00 00		 mov	 DWORD PTR lSeek$[rsp], eax

; 1018 : 
; 1019 :         if (lSeek!=0)

  005eb	83 bc 24 e4 00
	00 00 00	 cmp	 DWORD PTR lSeek$[rsp], 0
  005f3	74 40		 je	 SHORT $LN40@unz64local

; 1020 :         {
; 1021 :             if (ZSEEK64(s->z_filefunc, s->filestream,lSeek,ZLIB_FILEFUNC_SEEK_CUR)==0)

  005f5	48 63 84 24 e4
	00 00 00	 movsxd	 rax, DWORD PTR lSeek$[rsp]
  005fd	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00602	41 b9 01 00 00
	00		 mov	 r9d, 1
  00608	4c 8b c0	 mov	 r8, rax
  0060b	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00610	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  00614	e8 00 00 00 00	 call	 call_zseek64
  00619	85 c0		 test	 eax, eax
  0061b	75 0d		 jne	 SHORT $LN41@unz64local

; 1022 :                 lSeek=0;

  0061d	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR lSeek$[rsp], 0
  00628	eb 0b		 jmp	 SHORT $LN42@unz64local
$LN41@unz64local:

; 1023 :             else
; 1024 :                 err=UNZ_ERRNO;

  0062a	c7 84 24 c4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN42@unz64local:
$LN40@unz64local:
$LN2@unz64local:

; 1025 :         }
; 1026 : 
; 1027 :         while(acc < file_info.size_file_extra)

  00635	8b 44 24 6c	 mov	 eax, DWORD PTR file_info$[rsp+44]
  00639	39 84 24 10 01
	00 00		 cmp	 DWORD PTR acc$12[rsp], eax
  00640	0f 83 96 01 00
	00		 jae	 $LN3@unz64local

; 1028 :         {
; 1029 :             uLong headerId;
; 1030 :                                                 uLong dataSize;
; 1031 : 
; 1032 :             if (unz64local_getShort(&s->z_filefunc, s->filestream,&headerId) != UNZ_OK)

  00646	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0064b	4c 8d 84 24 24
	01 00 00	 lea	 r8, QWORD PTR headerId$13[rsp]
  00653	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00658	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  0065c	48 8b c8	 mov	 rcx, rax
  0065f	e8 00 00 00 00	 call	 unz64local_getShort
  00664	85 c0		 test	 eax, eax
  00666	74 0b		 je	 SHORT $LN43@unz64local

; 1033 :                 err=UNZ_ERRNO;

  00668	c7 84 24 c4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN43@unz64local:

; 1034 : 
; 1035 :             if (unz64local_getShort(&s->z_filefunc, s->filestream,&dataSize) != UNZ_OK)

  00673	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00678	4c 8d 84 24 44
	01 00 00	 lea	 r8, QWORD PTR dataSize$14[rsp]
  00680	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00685	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00689	48 8b c8	 mov	 rcx, rax
  0068c	e8 00 00 00 00	 call	 unz64local_getShort
  00691	85 c0		 test	 eax, eax
  00693	74 0b		 je	 SHORT $LN44@unz64local

; 1036 :                 err=UNZ_ERRNO;

  00695	c7 84 24 c4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN44@unz64local:

; 1037 : 
; 1038 :             /* ZIP64 extra fields */
; 1039 :             if (headerId == 0x0001)

  006a0	83 bc 24 24 01
	00 00 01	 cmp	 DWORD PTR headerId$13[rsp], 1
  006a8	0f 85 de 00 00
	00		 jne	 $LN45@unz64local

; 1040 :             {
; 1041 :                                                         uLong uL;
; 1042 : 
; 1043 :                                                                 if(file_info.uncompressed_size == MAXU32)

  006ae	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  006b3	48 39 44 24 60	 cmp	 QWORD PTR file_info$[rsp+32], rax
  006b8	75 2a		 jne	 SHORT $LN47@unz64local

; 1044 :                                                                 {
; 1045 :                                                                         if (unz64local_getLong64(&s->z_filefunc, s->filestream,&file_info.uncompressed_size) != UNZ_OK)

  006ba	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  006bf	4c 8d 44 24 60	 lea	 r8, QWORD PTR file_info$[rsp+32]
  006c4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  006c9	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  006cd	48 8b c8	 mov	 rcx, rax
  006d0	e8 00 00 00 00	 call	 unz64local_getLong64
  006d5	85 c0		 test	 eax, eax
  006d7	74 0b		 je	 SHORT $LN48@unz64local

; 1046 :                                                                                         err=UNZ_ERRNO;

  006d9	c7 84 24 c4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN48@unz64local:
$LN47@unz64local:

; 1047 :                                                                 }
; 1048 : 
; 1049 :                                                                 if(file_info.compressed_size == MAXU32)

  006e4	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  006e9	48 39 44 24 58	 cmp	 QWORD PTR file_info$[rsp+24], rax
  006ee	75 2a		 jne	 SHORT $LN49@unz64local

; 1050 :                                                                 {
; 1051 :                                                                         if (unz64local_getLong64(&s->z_filefunc, s->filestream,&file_info.compressed_size) != UNZ_OK)

  006f0	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  006f5	4c 8d 44 24 58	 lea	 r8, QWORD PTR file_info$[rsp+24]
  006fa	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  006ff	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00703	48 8b c8	 mov	 rcx, rax
  00706	e8 00 00 00 00	 call	 unz64local_getLong64
  0070b	85 c0		 test	 eax, eax
  0070d	74 0b		 je	 SHORT $LN50@unz64local

; 1052 :                                                                                   err=UNZ_ERRNO;

  0070f	c7 84 24 c4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN50@unz64local:
$LN49@unz64local:

; 1053 :                                                                 }
; 1054 : 
; 1055 :                                                                 if(file_info_internal.offset_curfile == MAXU32)

  0071a	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  0071f	48 39 84 24 b8
	00 00 00	 cmp	 QWORD PTR file_info_internal$[rsp], rax
  00727	75 2d		 jne	 SHORT $LN51@unz64local

; 1056 :                                                                 {
; 1057 :                                                                         /* Relative Header offset */
; 1058 :                                                                         if (unz64local_getLong64(&s->z_filefunc, s->filestream,&file_info_internal.offset_curfile) != UNZ_OK)

  00729	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0072e	4c 8d 84 24 b8
	00 00 00	 lea	 r8, QWORD PTR file_info_internal$[rsp]
  00736	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  0073b	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  0073f	48 8b c8	 mov	 rcx, rax
  00742	e8 00 00 00 00	 call	 unz64local_getLong64
  00747	85 c0		 test	 eax, eax
  00749	74 0b		 je	 SHORT $LN52@unz64local

; 1059 :                                                                                 err=UNZ_ERRNO;

  0074b	c7 84 24 c4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN52@unz64local:
$LN51@unz64local:

; 1060 :                                                                 }
; 1061 : 
; 1062 :                                                                 if(file_info.disk_num_start == MAXU32)

  00756	83 7c 24 74 ff	 cmp	 DWORD PTR file_info$[rsp+52], -1 ; ffffffffH
  0075b	75 2d		 jne	 SHORT $LN53@unz64local

; 1063 :                                                                 {
; 1064 :                                                                         /* Disk Start Number */
; 1065 :                                                                         if (unz64local_getLong(&s->z_filefunc, s->filestream,&uL) != UNZ_OK)

  0075d	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00762	4c 8d 84 24 64
	01 00 00	 lea	 r8, QWORD PTR uL$15[rsp]
  0076a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  0076f	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00773	48 8b c8	 mov	 rcx, rax
  00776	e8 00 00 00 00	 call	 unz64local_getLong
  0077b	85 c0		 test	 eax, eax
  0077d	74 0b		 je	 SHORT $LN54@unz64local

; 1066 :                                                                                 err=UNZ_ERRNO;

  0077f	c7 84 24 c4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN54@unz64local:
$LN53@unz64local:

; 1067 :                                                                 }
; 1068 : 
; 1069 :             }

  0078a	eb 32		 jmp	 SHORT $LN46@unz64local
$LN45@unz64local:

; 1070 :             else
; 1071 :             {
; 1072 :                 if (ZSEEK64(s->z_filefunc, s->filestream,dataSize,ZLIB_FILEFUNC_SEEK_CUR)!=0)

  0078c	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR dataSize$14[rsp]
  00793	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00798	41 b9 01 00 00
	00		 mov	 r9d, 1
  0079e	44 8b c0	 mov	 r8d, eax
  007a1	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  007a6	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  007aa	e8 00 00 00 00	 call	 call_zseek64
  007af	85 c0		 test	 eax, eax
  007b1	74 0b		 je	 SHORT $LN55@unz64local

; 1073 :                     err=UNZ_ERRNO;

  007b3	c7 84 24 c4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN55@unz64local:
$LN46@unz64local:

; 1074 :             }
; 1075 : 
; 1076 :             acc += 2 + 2 + dataSize;

  007be	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR acc$12[rsp]
  007c5	8b 8c 24 44 01
	00 00		 mov	 ecx, DWORD PTR dataSize$14[rsp]
  007cc	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  007d0	89 84 24 10 01
	00 00		 mov	 DWORD PTR acc$12[rsp], eax

; 1077 :         }

  007d7	e9 59 fe ff ff	 jmp	 $LN2@unz64local
$LN3@unz64local:
$LN39@unz64local:

; 1078 :     }
; 1079 : 
; 1080 :     if ((err==UNZ_OK) && (szComment!=NULL))

  007dc	83 bc 24 c4 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  007e4	0f 85 06 01 00
	00		 jne	 $LN56@unz64local
  007ea	48 83 bc 24 d8
	01 00 00 00	 cmp	 QWORD PTR szComment$[rsp], 0
  007f3	0f 84 f7 00 00
	00		 je	 $LN56@unz64local

; 1081 :     {
; 1082 :         uLong uSizeRead ;
; 1083 :         if (file_info.size_file_comment<commentBufferSize)

  007f9	8b 84 24 e0 01
	00 00		 mov	 eax, DWORD PTR commentBufferSize$[rsp]
  00800	39 44 24 70	 cmp	 DWORD PTR file_info$[rsp+48], eax
  00804	73 1d		 jae	 SHORT $LN58@unz64local

; 1084 :         {
; 1085 :             *(szComment+file_info.size_file_comment)='\0';

  00806	8b 44 24 70	 mov	 eax, DWORD PTR file_info$[rsp+48]
  0080a	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR szComment$[rsp]
  00812	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 1086 :             uSizeRead = file_info.size_file_comment;

  00816	8b 44 24 70	 mov	 eax, DWORD PTR file_info$[rsp+48]
  0081a	89 84 24 74 01
	00 00		 mov	 DWORD PTR uSizeRead$16[rsp], eax

; 1087 :         }

  00821	eb 0e		 jmp	 SHORT $LN59@unz64local
$LN58@unz64local:

; 1088 :         else
; 1089 :             uSizeRead = commentBufferSize;

  00823	8b 84 24 e0 01
	00 00		 mov	 eax, DWORD PTR commentBufferSize$[rsp]
  0082a	89 84 24 74 01
	00 00		 mov	 DWORD PTR uSizeRead$16[rsp], eax
$LN59@unz64local:

; 1090 : 
; 1091 :         if (lSeek!=0)

  00831	83 bc 24 e4 00
	00 00 00	 cmp	 DWORD PTR lSeek$[rsp], 0
  00839	74 40		 je	 SHORT $LN60@unz64local

; 1092 :         {
; 1093 :             if (ZSEEK64(s->z_filefunc, s->filestream,lSeek,ZLIB_FILEFUNC_SEEK_CUR)==0)

  0083b	48 63 84 24 e4
	00 00 00	 movsxd	 rax, DWORD PTR lSeek$[rsp]
  00843	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00848	41 b9 01 00 00
	00		 mov	 r9d, 1
  0084e	4c 8b c0	 mov	 r8, rax
  00851	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00856	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  0085a	e8 00 00 00 00	 call	 call_zseek64
  0085f	85 c0		 test	 eax, eax
  00861	75 0d		 jne	 SHORT $LN61@unz64local

; 1094 :                 lSeek=0;

  00863	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR lSeek$[rsp], 0
  0086e	eb 0b		 jmp	 SHORT $LN62@unz64local
$LN61@unz64local:

; 1095 :             else
; 1096 :                 err=UNZ_ERRNO;

  00870	c7 84 24 c4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN62@unz64local:
$LN60@unz64local:

; 1097 :         }
; 1098 : 
; 1099 :         if ((file_info.size_file_comment>0) && (commentBufferSize>0))

  0087b	83 7c 24 70 00	 cmp	 DWORD PTR file_info$[rsp+48], 0
  00880	76 4b		 jbe	 SHORT $LN63@unz64local
  00882	83 bc 24 e0 01
	00 00 00	 cmp	 DWORD PTR commentBufferSize$[rsp], 0
  0088a	76 41		 jbe	 SHORT $LN63@unz64local

; 1100 :             if (ZREAD64(s->z_filefunc, s->filestream,szComment,uSizeRead)!=uSizeRead)

  0088c	0f ae e8	 lfence
  0088f	44 8b 8c 24 74
	01 00 00	 mov	 r9d, DWORD PTR uSizeRead$16[rsp]
  00897	4c 8b 84 24 d8
	01 00 00	 mov	 r8, QWORD PTR szComment$[rsp]
  0089f	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  008a4	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  008a8	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  008ad	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  008b1	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  008b6	ff 50 08	 call	 QWORD PTR [rax+8]
  008b9	3b 84 24 74 01
	00 00		 cmp	 eax, DWORD PTR uSizeRead$16[rsp]
  008c0	74 0b		 je	 SHORT $LN64@unz64local

; 1101 :                 err=UNZ_ERRNO;

  008c2	c7 84 24 c4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN64@unz64local:
$LN63@unz64local:

; 1102 :         lSeek+=file_info.size_file_comment - uSizeRead;

  008cd	8b 84 24 74 01
	00 00		 mov	 eax, DWORD PTR uSizeRead$16[rsp]
  008d4	8b 4c 24 70	 mov	 ecx, DWORD PTR file_info$[rsp+48]
  008d8	2b c8		 sub	 ecx, eax
  008da	8b c1		 mov	 eax, ecx
  008dc	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR lSeek$[rsp]
  008e3	03 c8		 add	 ecx, eax
  008e5	8b c1		 mov	 eax, ecx
  008e7	89 84 24 e4 00
	00 00		 mov	 DWORD PTR lSeek$[rsp], eax

; 1103 :     }

  008ee	eb 16		 jmp	 SHORT $LN57@unz64local
$LN56@unz64local:

; 1104 :     else
; 1105 :         lSeek+=file_info.size_file_comment;

  008f0	8b 44 24 70	 mov	 eax, DWORD PTR file_info$[rsp+48]
  008f4	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR lSeek$[rsp]
  008fb	03 c8		 add	 ecx, eax
  008fd	8b c1		 mov	 eax, ecx
  008ff	89 84 24 e4 00
	00 00		 mov	 DWORD PTR lSeek$[rsp], eax
$LN57@unz64local:

; 1106 : 
; 1107 : 
; 1108 :     if ((err==UNZ_OK) && (pfile_info!=NULL))

  00906	83 bc 24 c4 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  0090e	75 22		 jne	 SHORT $LN65@unz64local
  00910	48 83 bc 24 a8
	01 00 00 00	 cmp	 QWORD PTR pfile_info$[rsp], 0
  00919	74 17		 je	 SHORT $LN65@unz64local

; 1109 :         *pfile_info=file_info;

  0091b	48 8d 44 24 40	 lea	 rax, QWORD PTR file_info$[rsp]
  00920	48 8b bc 24 a8
	01 00 00	 mov	 rdi, QWORD PTR pfile_info$[rsp]
  00928	48 8b f0	 mov	 rsi, rax
  0092b	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  00930	f3 a4		 rep movsb
$LN65@unz64local:

; 1110 : 
; 1111 :     if ((err==UNZ_OK) && (pfile_info_internal!=NULL))

  00932	83 bc 24 c4 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  0093a	75 1e		 jne	 SHORT $LN66@unz64local
  0093c	48 83 bc 24 b0
	01 00 00 00	 cmp	 QWORD PTR pfile_info_internal$[rsp], 0
  00945	74 13		 je	 SHORT $LN66@unz64local

; 1112 :         *pfile_info_internal=file_info_internal;

  00947	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR pfile_info_internal$[rsp]
  0094f	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR file_info_internal$[rsp]
  00957	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN66@unz64local:

; 1113 : 
; 1114 :     return err;

  0095a	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR err$[rsp]
$LN1@unz64local:

; 1115 : }

  00961	48 8b f8	 mov	 rdi, rax
  00964	48 8b cc	 mov	 rcx, rsp
  00967	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:unz64local_GetCurrentFileInfoInternal$rtcFrameData
  0096e	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00973	48 8b c7	 mov	 rax, rdi
  00976	48 81 c4 88 01
	00 00		 add	 rsp, 392		; 00000188H
  0097d	5f		 pop	 rdi
  0097e	5e		 pop	 rsi
  0097f	c3		 ret	 0
unz64local_GetCurrentFileInfoInternal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unzGetCurrentFileInfo64
_TEXT	SEGMENT
file$ = 96
pfile_info$ = 104
szFileName$ = 112
fileNameBufferSize$ = 120
extraField$ = 128
extraFieldBufferSize$ = 136
szComment$ = 144
commentBufferSize$ = 152
unzGetCurrentFileInfo64 PROC				; COMDAT

; 1129 : {

$LN4:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 14 00 00 00	 mov	 ecx, 20
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00034	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1130 :     return unz64local_GetCurrentFileInfoInternal(file,pfile_info,NULL,

  00039	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR commentBufferSize$[rsp]
  00040	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00044	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR szComment$[rsp]
  0004c	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00051	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR extraFieldBufferSize$[rsp]
  00058	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0005c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR extraField$[rsp]
  00064	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00069	8b 44 24 78	 mov	 eax, DWORD PTR fileNameBufferSize$[rsp]
  0006d	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00071	4c 8b 4c 24 70	 mov	 r9, QWORD PTR szFileName$[rsp]
  00076	45 33 c0	 xor	 r8d, r8d
  00079	48 8b 54 24 68	 mov	 rdx, QWORD PTR pfile_info$[rsp]
  0007e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR file$[rsp]
  00083	e8 00 00 00 00	 call	 unz64local_GetCurrentFileInfoInternal

; 1131 :                                                 szFileName,fileNameBufferSize,
; 1132 :                                                 extraField,extraFieldBufferSize,
; 1133 :                                                 szComment,commentBufferSize);
; 1134 : }

  00088	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0008c	5f		 pop	 rdi
  0008d	c3		 ret	 0
unzGetCurrentFileInfo64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unzGetCurrentFileInfo
_TEXT	SEGMENT
err$ = 80
file_info64$ = 112
file$ = 256
pfile_info$ = 264
szFileName$ = 272
fileNameBufferSize$ = 280
extraField$ = 288
extraFieldBufferSize$ = 296
szComment$ = 304
commentBufferSize$ = 312
unzGetCurrentFileInfo PROC				; COMDAT

; 1141 : {

$LN5:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR [rsp+256]
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0003b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1142 :     int err;
; 1143 :     unz_file_info64 file_info64;
; 1144 :     err = unz64local_GetCurrentFileInfoInternal(file,&file_info64,NULL,

  00040	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR commentBufferSize$[rsp]
  00047	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  0004b	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR szComment$[rsp]
  00053	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00058	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR extraFieldBufferSize$[rsp]
  0005f	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00063	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR extraField$[rsp]
  0006b	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00070	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR fileNameBufferSize$[rsp]
  00077	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007b	4c 8b 8c 24 10
	01 00 00	 mov	 r9, QWORD PTR szFileName$[rsp]
  00083	45 33 c0	 xor	 r8d, r8d
  00086	48 8d 54 24 70	 lea	 rdx, QWORD PTR file_info64$[rsp]
  0008b	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR file$[rsp]
  00093	e8 00 00 00 00	 call	 unz64local_GetCurrentFileInfoInternal
  00098	89 44 24 50	 mov	 DWORD PTR err$[rsp], eax

; 1145 :                                                 szFileName,fileNameBufferSize,
; 1146 :                                                 extraField,extraFieldBufferSize,
; 1147 :                                                 szComment,commentBufferSize);
; 1148 :     if ((err==UNZ_OK) && (pfile_info != NULL))

  0009c	83 7c 24 50 00	 cmp	 DWORD PTR err$[rsp], 0
  000a1	0f 85 1c 01 00
	00		 jne	 $LN2@unzGetCurr
  000a7	48 83 bc 24 08
	01 00 00 00	 cmp	 QWORD PTR pfile_info$[rsp], 0
  000b0	0f 84 0d 01 00
	00		 je	 $LN2@unzGetCurr

; 1149 :     {
; 1150 :         pfile_info->version = file_info64.version;

  000b6	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR pfile_info$[rsp]
  000be	8b 4c 24 70	 mov	 ecx, DWORD PTR file_info64$[rsp]
  000c2	89 08		 mov	 DWORD PTR [rax], ecx

; 1151 :         pfile_info->version_needed = file_info64.version_needed;

  000c4	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR pfile_info$[rsp]
  000cc	8b 4c 24 74	 mov	 ecx, DWORD PTR file_info64$[rsp+4]
  000d0	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 1152 :         pfile_info->flag = file_info64.flag;

  000d3	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR pfile_info$[rsp]
  000db	8b 4c 24 78	 mov	 ecx, DWORD PTR file_info64$[rsp+8]
  000df	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 1153 :         pfile_info->compression_method = file_info64.compression_method;

  000e2	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR pfile_info$[rsp]
  000ea	8b 4c 24 7c	 mov	 ecx, DWORD PTR file_info64$[rsp+12]
  000ee	89 48 0c	 mov	 DWORD PTR [rax+12], ecx

; 1154 :         pfile_info->dosDate = file_info64.dosDate;

  000f1	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR pfile_info$[rsp]
  000f9	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR file_info64$[rsp+16]
  00100	89 48 10	 mov	 DWORD PTR [rax+16], ecx

; 1155 :         pfile_info->crc = file_info64.crc;

  00103	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR pfile_info$[rsp]
  0010b	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR file_info64$[rsp+20]
  00112	89 48 14	 mov	 DWORD PTR [rax+20], ecx

; 1156 : 
; 1157 :         pfile_info->size_filename = file_info64.size_filename;

  00115	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR pfile_info$[rsp]
  0011d	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR file_info64$[rsp+40]
  00124	89 48 20	 mov	 DWORD PTR [rax+32], ecx

; 1158 :         pfile_info->size_file_extra = file_info64.size_file_extra;

  00127	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR pfile_info$[rsp]
  0012f	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR file_info64$[rsp+44]
  00136	89 48 24	 mov	 DWORD PTR [rax+36], ecx

; 1159 :         pfile_info->size_file_comment = file_info64.size_file_comment;

  00139	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR pfile_info$[rsp]
  00141	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR file_info64$[rsp+48]
  00148	89 48 28	 mov	 DWORD PTR [rax+40], ecx

; 1160 : 
; 1161 :         pfile_info->disk_num_start = file_info64.disk_num_start;

  0014b	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR pfile_info$[rsp]
  00153	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR file_info64$[rsp+52]
  0015a	89 48 2c	 mov	 DWORD PTR [rax+44], ecx

; 1162 :         pfile_info->internal_fa = file_info64.internal_fa;

  0015d	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR pfile_info$[rsp]
  00165	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR file_info64$[rsp+56]
  0016c	89 48 30	 mov	 DWORD PTR [rax+48], ecx

; 1163 :         pfile_info->external_fa = file_info64.external_fa;

  0016f	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR pfile_info$[rsp]
  00177	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR file_info64$[rsp+60]
  0017e	89 48 34	 mov	 DWORD PTR [rax+52], ecx

; 1164 : 
; 1165 :         pfile_info->tmu_date = file_info64.tmu_date,

  00181	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR pfile_info$[rsp]
  00189	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR file_info64$[rsp+64]
  00191	48 8d 78 38	 lea	 rdi, QWORD PTR [rax+56]
  00195	48 8b f1	 mov	 rsi, rcx
  00198	b9 18 00 00 00	 mov	 ecx, 24
  0019d	f3 a4		 rep movsb
  0019f	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR pfile_info$[rsp]
  001a7	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR file_info64$[rsp+24]
  001ae	89 48 18	 mov	 DWORD PTR [rax+24], ecx

; 1166 : 
; 1167 : 
; 1168 :         pfile_info->compressed_size = (uLong)file_info64.compressed_size;
; 1169 :         pfile_info->uncompressed_size = (uLong)file_info64.uncompressed_size;

  001b1	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR pfile_info$[rsp]
  001b9	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR file_info64$[rsp+32]
  001c0	89 48 1c	 mov	 DWORD PTR [rax+28], ecx
$LN2@unzGetCurr:

; 1170 : 
; 1171 :     }
; 1172 :     return err;

  001c3	8b 44 24 50	 mov	 eax, DWORD PTR err$[rsp]

; 1173 : }

  001c7	8b f8		 mov	 edi, eax
  001c9	48 8b cc	 mov	 rcx, rsp
  001cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:unzGetCurrentFileInfo$rtcFrameData
  001d3	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001d8	8b c7		 mov	 eax, edi
  001da	48 81 c4 e8 00
	00 00		 add	 rsp, 232		; 000000e8H
  001e1	5f		 pop	 rdi
  001e2	5e		 pop	 rsi
  001e3	c3		 ret	 0
unzGetCurrentFileInfo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unzGoToFirstFile
_TEXT	SEGMENT
err$ = 80
s$ = 88
tv82 = 96
file$ = 128
unzGoToFirstFile PROC					; COMDAT

; 1179 : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 1c 00 00 00	 mov	 ecx, 28
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR [rsp+128]
  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00028	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1180 :     int err=UNZ_OK;

  0002d	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 1181 :     unz64_s* s;
; 1182 :     if (file==NULL)

  00035	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR file$[rsp], 0
  0003e	75 0a		 jne	 SHORT $LN2@unzGoToFir

; 1183 :         return UNZ_PARAMERROR;

  00040	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00045	e9 be 00 00 00	 jmp	 $LN1@unzGoToFir
$LN2@unzGoToFir:

; 1184 :     s=(unz64_s*)file;

  0004a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR file$[rsp]
  00052	48 89 44 24 58	 mov	 QWORD PTR s$[rsp], rax

; 1185 :     s->pos_in_central_dir=s->offset_central_dir;

  00057	48 8b 44 24 58	 mov	 rax, QWORD PTR s$[rsp]
  0005c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR s$[rsp]
  00061	48 8b 89 a8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+168]
  00068	48 89 88 88 00
	00 00		 mov	 QWORD PTR [rax+136], rcx

; 1186 :     s->num_file=0;

  0006f	48 8b 44 24 58	 mov	 rax, QWORD PTR s$[rsp]
  00074	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0

; 1187 :     err=unz64local_GetCurrentFileInfoInternal(file,&s->cur_file_info,

  0007f	48 8b 44 24 58	 mov	 rax, QWORD PTR s$[rsp]
  00084	48 05 08 01 00
	00		 add	 rax, 264		; 00000108H
  0008a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR s$[rsp]
  0008f	48 81 c1 b0 00
	00 00		 add	 rcx, 176		; 000000b0H
  00096	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR [rsp+64], 0
  0009e	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR [rsp+56], 0
  000a7	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  000af	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  000b8	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  000c0	45 33 c9	 xor	 r9d, r9d
  000c3	4c 8b c0	 mov	 r8, rax
  000c6	48 8b d1	 mov	 rdx, rcx
  000c9	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR file$[rsp]
  000d1	e8 00 00 00 00	 call	 unz64local_GetCurrentFileInfoInternal
  000d6	89 44 24 50	 mov	 DWORD PTR err$[rsp], eax

; 1188 :                                              &s->cur_file_info_internal,
; 1189 :                                              NULL,0,NULL,0,NULL,0);
; 1190 :     s->current_file_ok = (err == UNZ_OK);

  000da	83 7c 24 50 00	 cmp	 DWORD PTR err$[rsp], 0
  000df	75 0a		 jne	 SHORT $LN4@unzGoToFir
  000e1	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR tv82[rsp], 1
  000e9	eb 08		 jmp	 SHORT $LN5@unzGoToFir
$LN4@unzGoToFir:
  000eb	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv82[rsp], 0
$LN5@unzGoToFir:
  000f3	48 63 44 24 60	 movsxd	 rax, DWORD PTR tv82[rsp]
  000f8	48 8b 4c 24 58	 mov	 rcx, QWORD PTR s$[rsp]
  000fd	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax

; 1191 :     return err;

  00104	8b 44 24 50	 mov	 eax, DWORD PTR err$[rsp]
$LN1@unzGoToFir:

; 1192 : }

  00108	48 83 c4 70	 add	 rsp, 112		; 00000070H
  0010c	5f		 pop	 rdi
  0010d	c3		 ret	 0
unzGoToFirstFile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unzGoToNextFile
_TEXT	SEGMENT
s$ = 80
err$ = 88
tv133 = 92
file$ = 112
unzGoToNextFile PROC					; COMDAT

; 1200 : {

$LN10:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 18 00 00 00	 mov	 ecx, 24
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1201 :     unz64_s* s;
; 1202 :     int err;
; 1203 : 
; 1204 :     if (file==NULL)

  0002a	48 83 7c 24 70
	00		 cmp	 QWORD PTR file$[rsp], 0
  00030	75 0a		 jne	 SHORT $LN2@unzGoToNex

; 1205 :         return UNZ_PARAMERROR;

  00032	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00037	e9 36 01 00 00	 jmp	 $LN1@unzGoToNex
$LN2@unzGoToNex:

; 1206 :     s=(unz64_s*)file;

  0003c	48 8b 44 24 70	 mov	 rax, QWORD PTR file$[rsp]
  00041	48 89 44 24 50	 mov	 QWORD PTR s$[rsp], rax

; 1207 :     if (!s->current_file_ok)

  00046	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0004b	48 83 b8 90 00
	00 00 00	 cmp	 QWORD PTR [rax+144], 0
  00053	75 0a		 jne	 SHORT $LN3@unzGoToNex

; 1208 :         return UNZ_END_OF_LIST_OF_FILE;

  00055	b8 9c ff ff ff	 mov	 eax, -100		; ffffffffffffff9cH
  0005a	e9 13 01 00 00	 jmp	 $LN1@unzGoToNex
$LN3@unzGoToNex:

; 1209 :     if (s->gi.number_entry != 0xffff)    /* 2^16 files overflow hack */

  0005f	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00064	48 81 78 68 ff
	ff 00 00	 cmp	 QWORD PTR [rax+104], 65535 ; 0000ffffH
  0006c	74 24		 je	 SHORT $LN4@unzGoToNex

; 1210 :       if (s->num_file+1==s->gi.number_entry)

  0006e	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00073	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  0007a	48 ff c0	 inc	 rax
  0007d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00082	48 3b 41 68	 cmp	 rax, QWORD PTR [rcx+104]
  00086	75 0a		 jne	 SHORT $LN5@unzGoToNex

; 1211 :         return UNZ_END_OF_LIST_OF_FILE;

  00088	b8 9c ff ff ff	 mov	 eax, -100		; ffffffffffffff9cH
  0008d	e9 e0 00 00 00	 jmp	 $LN1@unzGoToNex
$LN5@unzGoToNex:
$LN4@unzGoToNex:

; 1212 : 
; 1213 :     s->pos_in_central_dir += SIZECENTRALDIRITEM + s->cur_file_info.size_filename +

  00092	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00097	8b 80 d8 00 00
	00		 mov	 eax, DWORD PTR [rax+216]
  0009d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  000a2	8b 89 dc 00 00
	00		 mov	 ecx, DWORD PTR [rcx+220]
  000a8	8d 44 08 2e	 lea	 eax, DWORD PTR [rax+rcx+46]
  000ac	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  000b1	03 81 e0 00 00
	00		 add	 eax, DWORD PTR [rcx+224]
  000b7	8b c0		 mov	 eax, eax
  000b9	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  000be	48 03 81 88 00
	00 00		 add	 rax, QWORD PTR [rcx+136]
  000c5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  000ca	48 89 81 88 00
	00 00		 mov	 QWORD PTR [rcx+136], rax

; 1214 :             s->cur_file_info.size_file_extra + s->cur_file_info.size_file_comment ;
; 1215 :     s->num_file++;

  000d1	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000d6	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  000dd	48 ff c0	 inc	 rax
  000e0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  000e5	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax

; 1216 :     err = unz64local_GetCurrentFileInfoInternal(file,&s->cur_file_info,

  000ec	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000f1	48 05 08 01 00
	00		 add	 rax, 264		; 00000108H
  000f7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  000fc	48 81 c1 b0 00
	00 00		 add	 rcx, 176		; 000000b0H
  00103	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR [rsp+64], 0
  0010b	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR [rsp+56], 0
  00114	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  0011c	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  00125	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  0012d	45 33 c9	 xor	 r9d, r9d
  00130	4c 8b c0	 mov	 r8, rax
  00133	48 8b d1	 mov	 rdx, rcx
  00136	48 8b 4c 24 70	 mov	 rcx, QWORD PTR file$[rsp]
  0013b	e8 00 00 00 00	 call	 unz64local_GetCurrentFileInfoInternal
  00140	89 44 24 58	 mov	 DWORD PTR err$[rsp], eax

; 1217 :                                                &s->cur_file_info_internal,
; 1218 :                                                NULL,0,NULL,0,NULL,0);
; 1219 :     s->current_file_ok = (err == UNZ_OK);

  00144	83 7c 24 58 00	 cmp	 DWORD PTR err$[rsp], 0
  00149	75 0a		 jne	 SHORT $LN7@unzGoToNex
  0014b	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR tv133[rsp], 1
  00153	eb 08		 jmp	 SHORT $LN8@unzGoToNex
$LN7@unzGoToNex:
  00155	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv133[rsp], 0
$LN8@unzGoToNex:
  0015d	48 63 44 24 5c	 movsxd	 rax, DWORD PTR tv133[rsp]
  00162	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00167	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax

; 1220 :     return err;

  0016e	8b 44 24 58	 mov	 eax, DWORD PTR err$[rsp]
$LN1@unzGoToNex:

; 1221 : }

  00172	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00176	5f		 pop	 rdi
  00177	c3		 ret	 0
unzGoToNextFile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unzLocateFile
_TEXT	SEGMENT
s$ = 64
err$ = 72
cur_file_infoSaved$ = 96
cur_file_info_internalSaved$ = 216
num_fileSaved$ = 232
pos_in_central_dirSaved$ = 240
szCurrentFileName$6 = 272
file$ = 592
szFileName$ = 600
iCaseSensitivity$ = 608
unzLocateFile PROC					; COMDAT

; 1233 : {

$LN11:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 38 02
	00 00		 sub	 rsp, 568		; 00000238H
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 8e 00 00 00	 mov	 ecx, 142		; 0000008eH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR [rsp+592]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1234 :     unz64_s* s;
; 1235 :     int err;
; 1236 : 
; 1237 :     /* We remember the 'current' position in the file so that we can jump
; 1238 :      * back there if we fail.
; 1239 :      */
; 1240 :     unz_file_info64 cur_file_infoSaved;
; 1241 :     unz_file_info64_internal cur_file_info_internalSaved;
; 1242 :     ZPOS64_T num_fileSaved;
; 1243 :     ZPOS64_T pos_in_central_dirSaved;
; 1244 : 
; 1245 : 
; 1246 :     if (file==NULL)

  0003b	48 83 bc 24 50
	02 00 00 00	 cmp	 QWORD PTR file$[rsp], 0
  00044	75 0a		 jne	 SHORT $LN4@unzLocateF

; 1247 :         return UNZ_PARAMERROR;

  00046	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  0004b	e9 9c 01 00 00	 jmp	 $LN1@unzLocateF
$LN4@unzLocateF:

; 1248 : 
; 1249 :     if (strlen(szFileName)>=UNZ_MAXFILENAMEINZIP)

  00050	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR szFileName$[rsp]
  00058	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlen
  0005e	48 3d 00 01 00
	00		 cmp	 rax, 256		; 00000100H
  00064	72 0a		 jb	 SHORT $LN5@unzLocateF

; 1250 :         return UNZ_PARAMERROR;

  00066	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  0006b	e9 7c 01 00 00	 jmp	 $LN1@unzLocateF
$LN5@unzLocateF:

; 1251 : 
; 1252 :     s=(unz64_s*)file;

  00070	48 8b 84 24 50
	02 00 00	 mov	 rax, QWORD PTR file$[rsp]
  00078	48 89 44 24 40	 mov	 QWORD PTR s$[rsp], rax

; 1253 :     if (!s->current_file_ok)

  0007d	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  00082	48 83 b8 90 00
	00 00 00	 cmp	 QWORD PTR [rax+144], 0
  0008a	75 0a		 jne	 SHORT $LN6@unzLocateF

; 1254 :         return UNZ_END_OF_LIST_OF_FILE;

  0008c	b8 9c ff ff ff	 mov	 eax, -100		; ffffffffffffff9cH
  00091	e9 56 01 00 00	 jmp	 $LN1@unzLocateF
$LN6@unzLocateF:

; 1255 : 
; 1256 :     /* Save the current state */
; 1257 :     num_fileSaved = s->num_file;

  00096	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  0009b	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  000a2	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR num_fileSaved$[rsp], rax

; 1258 :     pos_in_central_dirSaved = s->pos_in_central_dir;

  000aa	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  000af	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  000b6	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR pos_in_central_dirSaved$[rsp], rax

; 1259 :     cur_file_infoSaved = s->cur_file_info;

  000be	48 8d 44 24 60	 lea	 rax, QWORD PTR cur_file_infoSaved$[rsp]
  000c3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  000c8	48 8b f8	 mov	 rdi, rax
  000cb	48 8d b1 b0 00
	00 00		 lea	 rsi, QWORD PTR [rcx+176]
  000d2	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  000d7	f3 a4		 rep movsb

; 1260 :     cur_file_info_internalSaved = s->cur_file_info_internal;

  000d9	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  000de	48 8b 80 08 01
	00 00		 mov	 rax, QWORD PTR [rax+264]
  000e5	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR cur_file_info_internalSaved$[rsp], rax

; 1261 : 
; 1262 :     err = unzGoToFirstFile(file);

  000ed	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR file$[rsp]
  000f5	e8 00 00 00 00	 call	 unzGoToFirstFile
  000fa	89 44 24 48	 mov	 DWORD PTR err$[rsp], eax
$LN2@unzLocateF:

; 1263 : 
; 1264 :     while (err == UNZ_OK)

  000fe	83 7c 24 48 00	 cmp	 DWORD PTR err$[rsp], 0
  00103	0f 85 88 00 00
	00		 jne	 $LN3@unzLocateF

; 1265 :     {
; 1266 :         char szCurrentFileName[UNZ_MAXFILENAMEINZIP+1];
; 1267 :         err = unzGetCurrentFileInfo64(file,NULL,

  00109	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  00111	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  0011a	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00122	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0012b	41 b9 00 01 00
	00		 mov	 r9d, 256		; 00000100H
  00131	4c 8d 84 24 10
	01 00 00	 lea	 r8, QWORD PTR szCurrentFileName$6[rsp]
  00139	33 d2		 xor	 edx, edx
  0013b	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR file$[rsp]
  00143	e8 00 00 00 00	 call	 unzGetCurrentFileInfo64
  00148	89 44 24 48	 mov	 DWORD PTR err$[rsp], eax

; 1268 :                                     szCurrentFileName,sizeof(szCurrentFileName)-1,
; 1269 :                                     NULL,0,NULL,0);
; 1270 :         if (err == UNZ_OK)

  0014c	83 7c 24 48 00	 cmp	 DWORD PTR err$[rsp], 0
  00151	75 39		 jne	 SHORT $LN7@unzLocateF

; 1271 :         {
; 1272 :             if (unzStringFileNameCompare(szCurrentFileName,
; 1273 :                                             szFileName,iCaseSensitivity)==0)

  00153	0f ae e8	 lfence
  00156	44 8b 84 24 60
	02 00 00	 mov	 r8d, DWORD PTR iCaseSensitivity$[rsp]
  0015e	48 8b 94 24 58
	02 00 00	 mov	 rdx, QWORD PTR szFileName$[rsp]
  00166	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR szCurrentFileName$6[rsp]
  0016e	e8 00 00 00 00	 call	 unzStringFileNameCompare
  00173	85 c0		 test	 eax, eax
  00175	75 04		 jne	 SHORT $LN8@unzLocateF

; 1274 :                 return UNZ_OK;

  00177	33 c0		 xor	 eax, eax
  00179	eb 71		 jmp	 SHORT $LN1@unzLocateF
$LN8@unzLocateF:

; 1275 :             err = unzGoToNextFile(file);

  0017b	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR file$[rsp]
  00183	e8 00 00 00 00	 call	 unzGoToNextFile
  00188	89 44 24 48	 mov	 DWORD PTR err$[rsp], eax
$LN7@unzLocateF:

; 1276 :         }
; 1277 :     }

  0018c	e9 6d ff ff ff	 jmp	 $LN2@unzLocateF
$LN3@unzLocateF:

; 1278 : 
; 1279 :     /* We failed, so restore the state of the 'current file' to where we
; 1280 :      * were.
; 1281 :      */
; 1282 :     s->num_file = num_fileSaved ;

  00191	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  00196	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR num_fileSaved$[rsp]
  0019e	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx

; 1283 :     s->pos_in_central_dir = pos_in_central_dirSaved ;

  001a5	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  001aa	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR pos_in_central_dirSaved$[rsp]
  001b2	48 89 88 88 00
	00 00		 mov	 QWORD PTR [rax+136], rcx

; 1284 :     s->cur_file_info = cur_file_infoSaved;

  001b9	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  001be	48 8d 4c 24 60	 lea	 rcx, QWORD PTR cur_file_infoSaved$[rsp]
  001c3	48 8d b8 b0 00
	00 00		 lea	 rdi, QWORD PTR [rax+176]
  001ca	48 8b f1	 mov	 rsi, rcx
  001cd	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  001d2	f3 a4		 rep movsb

; 1285 :     s->cur_file_info_internal = cur_file_info_internalSaved;

  001d4	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  001d9	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR cur_file_info_internalSaved$[rsp]
  001e1	48 89 88 08 01
	00 00		 mov	 QWORD PTR [rax+264], rcx

; 1286 :     return err;

  001e8	8b 44 24 48	 mov	 eax, DWORD PTR err$[rsp]
$LN1@unzLocateF:

; 1287 : }

  001ec	48 8b f8	 mov	 rdi, rax
  001ef	48 8b cc	 mov	 rcx, rsp
  001f2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:unzLocateFile$rtcFrameData
  001f9	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001fe	48 8b c7	 mov	 rax, rdi
  00201	48 81 c4 38 02
	00 00		 add	 rsp, 568		; 00000238H
  00208	5f		 pop	 rdi
  00209	5e		 pop	 rsi
  0020a	c3		 ret	 0
unzLocateFile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unzGetFilePos64
_TEXT	SEGMENT
s$ = 32
file$ = 64
file_pos$ = 72
unzGetFilePos64 PROC					; COMDAT

; 1309 : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1310 :     unz64_s* s;
; 1311 : 
; 1312 :     if (file==NULL || file_pos==NULL)

  0002f	48 83 7c 24 40
	00		 cmp	 QWORD PTR file$[rsp], 0
  00035	74 08		 je	 SHORT $LN3@unzGetFile
  00037	48 83 7c 24 48
	00		 cmp	 QWORD PTR file_pos$[rsp], 0
  0003d	75 07		 jne	 SHORT $LN2@unzGetFile
$LN3@unzGetFile:

; 1313 :         return UNZ_PARAMERROR;

  0003f	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00044	eb 4b		 jmp	 SHORT $LN1@unzGetFile
$LN2@unzGetFile:

; 1314 :     s=(unz64_s*)file;

  00046	48 8b 44 24 40	 mov	 rax, QWORD PTR file$[rsp]
  0004b	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax

; 1315 :     if (!s->current_file_ok)

  00050	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00055	48 83 b8 90 00
	00 00 00	 cmp	 QWORD PTR [rax+144], 0
  0005d	75 07		 jne	 SHORT $LN4@unzGetFile

; 1316 :         return UNZ_END_OF_LIST_OF_FILE;

  0005f	b8 9c ff ff ff	 mov	 eax, -100		; ffffffffffffff9cH
  00064	eb 2b		 jmp	 SHORT $LN1@unzGetFile
$LN4@unzGetFile:

; 1317 : 
; 1318 :     file_pos->pos_in_zip_directory  = s->pos_in_central_dir;

  00066	48 8b 44 24 48	 mov	 rax, QWORD PTR file_pos$[rsp]
  0006b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00070	48 8b 89 88 00
	00 00		 mov	 rcx, QWORD PTR [rcx+136]
  00077	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1319 :     file_pos->num_of_file           = s->num_file;

  0007a	48 8b 44 24 48	 mov	 rax, QWORD PTR file_pos$[rsp]
  0007f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00084	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  0008b	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1320 : 
; 1321 :     return UNZ_OK;

  0008f	33 c0		 xor	 eax, eax
$LN1@unzGetFile:

; 1322 : }

  00091	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00095	5f		 pop	 rdi
  00096	c3		 ret	 0
unzGetFilePos64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unzGetFilePos
_TEXT	SEGMENT
file_pos64$ = 40
err$ = 68
file$ = 96
file_pos$ = 104
unzGetFilePos PROC					; COMDAT

; 1327 : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 14 00 00 00	 mov	 ecx, 20
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1328 :     unz64_file_pos file_pos64;
; 1329 :     int err = unzGetFilePos64(file,&file_pos64);

  0002f	48 8d 54 24 28	 lea	 rdx, QWORD PTR file_pos64$[rsp]
  00034	48 8b 4c 24 60	 mov	 rcx, QWORD PTR file$[rsp]
  00039	e8 00 00 00 00	 call	 unzGetFilePos64
  0003e	89 44 24 44	 mov	 DWORD PTR err$[rsp], eax

; 1330 :     if (err==UNZ_OK)

  00042	83 7c 24 44 00	 cmp	 DWORD PTR err$[rsp], 0
  00047	75 17		 jne	 SHORT $LN2@unzGetFile

; 1331 :     {
; 1332 :         file_pos->pos_in_zip_directory = (uLong)file_pos64.pos_in_zip_directory;

  00049	48 8b 44 24 68	 mov	 rax, QWORD PTR file_pos$[rsp]
  0004e	8b 4c 24 28	 mov	 ecx, DWORD PTR file_pos64$[rsp]
  00052	89 08		 mov	 DWORD PTR [rax], ecx

; 1333 :         file_pos->num_of_file = (uLong)file_pos64.num_of_file;

  00054	48 8b 44 24 68	 mov	 rax, QWORD PTR file_pos$[rsp]
  00059	8b 4c 24 30	 mov	 ecx, DWORD PTR file_pos64$[rsp+8]
  0005d	89 48 04	 mov	 DWORD PTR [rax+4], ecx
$LN2@unzGetFile:

; 1334 :     }
; 1335 :     return err;

  00060	8b 44 24 44	 mov	 eax, DWORD PTR err$[rsp]

; 1336 : }

  00064	8b f8		 mov	 edi, eax
  00066	48 8b cc	 mov	 rcx, rsp
  00069	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:unzGetFilePos$rtcFrameData
  00070	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00075	8b c7		 mov	 eax, edi
  00077	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0007b	5f		 pop	 rdi
  0007c	c3		 ret	 0
unzGetFilePos ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unzGoToFilePos64
_TEXT	SEGMENT
s$ = 80
err$ = 88
tv84 = 92
file$ = 112
file_pos$ = 120
unzGoToFilePos64 PROC					; COMDAT

; 1339 : {

$LN8:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 18 00 00 00	 mov	 ecx, 24
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1340 :     unz64_s* s;
; 1341 :     int err;
; 1342 : 
; 1343 :     if (file==NULL || file_pos==NULL)

  0002f	48 83 7c 24 70
	00		 cmp	 QWORD PTR file$[rsp], 0
  00035	74 08		 je	 SHORT $LN3@unzGoToFil
  00037	48 83 7c 24 78
	00		 cmp	 QWORD PTR file_pos$[rsp], 0
  0003d	75 0a		 jne	 SHORT $LN2@unzGoToFil
$LN3@unzGoToFil:

; 1344 :         return UNZ_PARAMERROR;

  0003f	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00044	e9 b9 00 00 00	 jmp	 $LN1@unzGoToFil
$LN2@unzGoToFil:

; 1345 :     s=(unz64_s*)file;

  00049	48 8b 44 24 70	 mov	 rax, QWORD PTR file$[rsp]
  0004e	48 89 44 24 50	 mov	 QWORD PTR s$[rsp], rax

; 1346 : 
; 1347 :     /* jump to the right spot */
; 1348 :     s->pos_in_central_dir = file_pos->pos_in_zip_directory;

  00053	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00058	48 8b 4c 24 78	 mov	 rcx, QWORD PTR file_pos$[rsp]
  0005d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00060	48 89 88 88 00
	00 00		 mov	 QWORD PTR [rax+136], rcx

; 1349 :     s->num_file           = file_pos->num_of_file;

  00067	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0006c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR file_pos$[rsp]
  00071	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00075	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx

; 1350 : 
; 1351 :     /* set the current file */
; 1352 :     err = unz64local_GetCurrentFileInfoInternal(file,&s->cur_file_info,

  0007c	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00081	48 05 08 01 00
	00		 add	 rax, 264		; 00000108H
  00087	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0008c	48 81 c1 b0 00
	00 00		 add	 rcx, 176		; 000000b0H
  00093	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR [rsp+64], 0
  0009b	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR [rsp+56], 0
  000a4	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  000ac	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  000b5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  000bd	45 33 c9	 xor	 r9d, r9d
  000c0	4c 8b c0	 mov	 r8, rax
  000c3	48 8b d1	 mov	 rdx, rcx
  000c6	48 8b 4c 24 70	 mov	 rcx, QWORD PTR file$[rsp]
  000cb	e8 00 00 00 00	 call	 unz64local_GetCurrentFileInfoInternal
  000d0	89 44 24 58	 mov	 DWORD PTR err$[rsp], eax

; 1353 :                                                &s->cur_file_info_internal,
; 1354 :                                                NULL,0,NULL,0,NULL,0);
; 1355 :     /* return results */
; 1356 :     s->current_file_ok = (err == UNZ_OK);

  000d4	83 7c 24 58 00	 cmp	 DWORD PTR err$[rsp], 0
  000d9	75 0a		 jne	 SHORT $LN5@unzGoToFil
  000db	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR tv84[rsp], 1
  000e3	eb 08		 jmp	 SHORT $LN6@unzGoToFil
$LN5@unzGoToFil:
  000e5	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv84[rsp], 0
$LN6@unzGoToFil:
  000ed	48 63 44 24 5c	 movsxd	 rax, DWORD PTR tv84[rsp]
  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  000f7	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax

; 1357 :     return err;

  000fe	8b 44 24 58	 mov	 eax, DWORD PTR err$[rsp]
$LN1@unzGoToFil:

; 1358 : }

  00102	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00106	5f		 pop	 rdi
  00107	c3		 ret	 0
unzGoToFilePos64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unzGoToFilePos
_TEXT	SEGMENT
file_pos64$ = 40
file$ = 96
file_pos$ = 104
unzGoToFilePos PROC					; COMDAT

; 1363 : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 14 00 00 00	 mov	 ecx, 20
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1364 :     unz64_file_pos file_pos64;
; 1365 :     if (file_pos == NULL)

  0002f	48 83 7c 24 68
	00		 cmp	 QWORD PTR file_pos$[rsp], 0
  00035	75 07		 jne	 SHORT $LN2@unzGoToFil

; 1366 :         return UNZ_PARAMERROR;

  00037	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  0003c	eb 28		 jmp	 SHORT $LN1@unzGoToFil
$LN2@unzGoToFil:

; 1367 : 
; 1368 :     file_pos64.pos_in_zip_directory = file_pos->pos_in_zip_directory;

  0003e	48 8b 44 24 68	 mov	 rax, QWORD PTR file_pos$[rsp]
  00043	8b 00		 mov	 eax, DWORD PTR [rax]
  00045	48 89 44 24 28	 mov	 QWORD PTR file_pos64$[rsp], rax

; 1369 :     file_pos64.num_of_file = file_pos->num_of_file;

  0004a	48 8b 44 24 68	 mov	 rax, QWORD PTR file_pos$[rsp]
  0004f	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00052	48 89 44 24 30	 mov	 QWORD PTR file_pos64$[rsp+8], rax

; 1370 :     return unzGoToFilePos64(file,&file_pos64);

  00057	48 8d 54 24 28	 lea	 rdx, QWORD PTR file_pos64$[rsp]
  0005c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR file$[rsp]
  00061	e8 00 00 00 00	 call	 unzGoToFilePos64
$LN1@unzGoToFil:

; 1371 : }

  00066	48 8b f8	 mov	 rdi, rax
  00069	48 8b cc	 mov	 rcx, rsp
  0006c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:unzGoToFilePos$rtcFrameData
  00073	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00078	48 8b c7	 mov	 rax, rdi
  0007b	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0007f	5f		 pop	 rdi
  00080	c3		 ret	 0
unzGoToFilePos ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unz64local_CheckCurrentFileCoherencyHeader
_TEXT	SEGMENT
uMagic$ = 36
uData$ = 68
uFlags$ = 100
size_filename$ = 132
size_extra_field$ = 164
err$ = 180
s$ = 208
piSizeVar$ = 216
poffset_local_extrafield$ = 224
psize_local_extrafield$ = 232
unz64local_CheckCurrentFileCoherencyHeader PROC		; COMDAT

; 1388 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+208]
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0003a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1389 :     uLong uMagic,uData,uFlags;
; 1390 :     uLong size_filename;
; 1391 :     uLong size_extra_field;
; 1392 :     int err=UNZ_OK;

  0003f	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR err$[rsp], 0

; 1393 : 
; 1394 :     *piSizeVar = 0;

  0004a	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR piSizeVar$[rsp]
  00052	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 1395 :     *poffset_local_extrafield = 0;

  00058	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR poffset_local_extrafield$[rsp]
  00060	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1396 :     *psize_local_extrafield = 0;

  00067	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR psize_local_extrafield$[rsp]
  0006f	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 1397 : 
; 1398 :     if (ZSEEK64(s->z_filefunc, s->filestream,s->cur_file_info_internal.offset_curfile +
; 1399 :                                 s->byte_before_the_zipfile,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00075	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0007d	48 8b 80 08 01
	00 00		 mov	 rax, QWORD PTR [rax+264]
  00084	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  0008c	48 03 41 78	 add	 rax, QWORD PTR [rcx+120]
  00090	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00098	45 33 c9	 xor	 r9d, r9d
  0009b	4c 8b c0	 mov	 r8, rax
  0009e	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  000a6	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  000aa	e8 00 00 00 00	 call	 call_zseek64
  000af	85 c0		 test	 eax, eax
  000b1	74 0a		 je	 SHORT $LN2@unz64local

; 1400 :         return UNZ_ERRNO;

  000b3	b8 ff ff ff ff	 mov	 eax, -1
  000b8	e9 ce 03 00 00	 jmp	 $LN1@unz64local
$LN2@unz64local:

; 1401 : 
; 1402 : 
; 1403 :     if (err==UNZ_OK)

  000bd	83 bc 24 b4 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  000c5	75 47		 jne	 SHORT $LN3@unz64local

; 1404 :     {
; 1405 :         if (unz64local_getLong(&s->z_filefunc, s->filestream,&uMagic) != UNZ_OK)

  000c7	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  000cf	4c 8d 44 24 24	 lea	 r8, QWORD PTR uMagic$[rsp]
  000d4	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  000dc	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  000e0	48 8b c8	 mov	 rcx, rax
  000e3	e8 00 00 00 00	 call	 unz64local_getLong
  000e8	85 c0		 test	 eax, eax
  000ea	74 0d		 je	 SHORT $LN4@unz64local

; 1406 :             err=UNZ_ERRNO;

  000ec	c7 84 24 b4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
  000f7	eb 15		 jmp	 SHORT $LN5@unz64local
$LN4@unz64local:

; 1407 :         else if (uMagic!=0x04034b50)

  000f9	81 7c 24 24 50
	4b 03 04	 cmp	 DWORD PTR uMagic$[rsp], 67324752 ; 04034b50H
  00101	74 0b		 je	 SHORT $LN6@unz64local

; 1408 :             err=UNZ_BADZIPFILE;

  00103	c7 84 24 b4 00
	00 00 99 ff ff
	ff		 mov	 DWORD PTR err$[rsp], -103 ; ffffffffffffff99H
$LN6@unz64local:
$LN5@unz64local:
$LN3@unz64local:

; 1409 :     }
; 1410 : 
; 1411 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&uData) != UNZ_OK)

  0010e	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00116	4c 8d 44 24 44	 lea	 r8, QWORD PTR uData$[rsp]
  0011b	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00123	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00127	48 8b c8	 mov	 rcx, rax
  0012a	e8 00 00 00 00	 call	 unz64local_getShort
  0012f	85 c0		 test	 eax, eax
  00131	74 0b		 je	 SHORT $LN7@unz64local

; 1412 :         err=UNZ_ERRNO;

  00133	c7 84 24 b4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN7@unz64local:

; 1413 : /*
; 1414 :     else if ((err==UNZ_OK) && (uData!=s->cur_file_info.wVersion))
; 1415 :         err=UNZ_BADZIPFILE;
; 1416 : */
; 1417 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&uFlags) != UNZ_OK)

  0013e	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00146	4c 8d 44 24 64	 lea	 r8, QWORD PTR uFlags$[rsp]
  0014b	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00153	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00157	48 8b c8	 mov	 rcx, rax
  0015a	e8 00 00 00 00	 call	 unz64local_getShort
  0015f	85 c0		 test	 eax, eax
  00161	74 0b		 je	 SHORT $LN8@unz64local

; 1418 :         err=UNZ_ERRNO;

  00163	c7 84 24 b4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN8@unz64local:

; 1419 : 
; 1420 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&uData) != UNZ_OK)

  0016e	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00176	4c 8d 44 24 44	 lea	 r8, QWORD PTR uData$[rsp]
  0017b	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00183	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00187	48 8b c8	 mov	 rcx, rax
  0018a	e8 00 00 00 00	 call	 unz64local_getShort
  0018f	85 c0		 test	 eax, eax
  00191	74 0d		 je	 SHORT $LN9@unz64local

; 1421 :         err=UNZ_ERRNO;

  00193	c7 84 24 b4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
  0019e	eb 29		 jmp	 SHORT $LN10@unz64local
$LN9@unz64local:

; 1422 :     else if ((err==UNZ_OK) && (uData!=s->cur_file_info.compression_method))

  001a0	83 bc 24 b4 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  001a8	75 1f		 jne	 SHORT $LN11@unz64local
  001aa	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  001b2	8b 80 bc 00 00
	00		 mov	 eax, DWORD PTR [rax+188]
  001b8	39 44 24 44	 cmp	 DWORD PTR uData$[rsp], eax
  001bc	74 0b		 je	 SHORT $LN11@unz64local

; 1423 :         err=UNZ_BADZIPFILE;

  001be	c7 84 24 b4 00
	00 00 99 ff ff
	ff		 mov	 DWORD PTR err$[rsp], -103 ; ffffffffffffff99H
$LN11@unz64local:
$LN10@unz64local:

; 1424 : 
; 1425 :     if ((err==UNZ_OK) && (s->cur_file_info.compression_method!=0) &&
; 1426 : /* #ifdef HAVE_BZIP2 */
; 1427 :                          (s->cur_file_info.compression_method!=Z_BZIP2ED) &&

  001c9	83 bc 24 b4 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  001d1	75 3e		 jne	 SHORT $LN12@unz64local
  001d3	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  001db	83 b8 bc 00 00
	00 00		 cmp	 DWORD PTR [rax+188], 0
  001e2	74 2d		 je	 SHORT $LN12@unz64local
  001e4	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  001ec	83 b8 bc 00 00
	00 0c		 cmp	 DWORD PTR [rax+188], 12
  001f3	74 1c		 je	 SHORT $LN12@unz64local
  001f5	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  001fd	83 b8 bc 00 00
	00 08		 cmp	 DWORD PTR [rax+188], 8
  00204	74 0b		 je	 SHORT $LN12@unz64local

; 1428 : /* #endif */
; 1429 :                          (s->cur_file_info.compression_method!=Z_DEFLATED))
; 1430 :         err=UNZ_BADZIPFILE;

  00206	c7 84 24 b4 00
	00 00 99 ff ff
	ff		 mov	 DWORD PTR err$[rsp], -103 ; ffffffffffffff99H
$LN12@unz64local:

; 1431 : 
; 1432 :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* date/time */

  00211	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00219	4c 8d 44 24 44	 lea	 r8, QWORD PTR uData$[rsp]
  0021e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00226	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  0022a	48 8b c8	 mov	 rcx, rax
  0022d	e8 00 00 00 00	 call	 unz64local_getLong
  00232	85 c0		 test	 eax, eax
  00234	74 0b		 je	 SHORT $LN13@unz64local

; 1433 :         err=UNZ_ERRNO;

  00236	c7 84 24 b4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN13@unz64local:

; 1434 : 
; 1435 :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* crc */

  00241	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00249	4c 8d 44 24 44	 lea	 r8, QWORD PTR uData$[rsp]
  0024e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00256	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  0025a	48 8b c8	 mov	 rcx, rax
  0025d	e8 00 00 00 00	 call	 unz64local_getLong
  00262	85 c0		 test	 eax, eax
  00264	74 0d		 je	 SHORT $LN14@unz64local

; 1436 :         err=UNZ_ERRNO;

  00266	c7 84 24 b4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
  00271	eb 34		 jmp	 SHORT $LN15@unz64local
$LN14@unz64local:

; 1437 :     else if ((err==UNZ_OK) && (uData!=s->cur_file_info.crc) && ((uFlags & 8)==0))

  00273	83 bc 24 b4 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  0027b	75 2a		 jne	 SHORT $LN16@unz64local
  0027d	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00285	8b 80 c4 00 00
	00		 mov	 eax, DWORD PTR [rax+196]
  0028b	39 44 24 44	 cmp	 DWORD PTR uData$[rsp], eax
  0028f	74 16		 je	 SHORT $LN16@unz64local
  00291	8b 44 24 64	 mov	 eax, DWORD PTR uFlags$[rsp]
  00295	83 e0 08	 and	 eax, 8
  00298	85 c0		 test	 eax, eax
  0029a	75 0b		 jne	 SHORT $LN16@unz64local

; 1438 :         err=UNZ_BADZIPFILE;

  0029c	c7 84 24 b4 00
	00 00 99 ff ff
	ff		 mov	 DWORD PTR err$[rsp], -103 ; ffffffffffffff99H
$LN16@unz64local:
$LN15@unz64local:

; 1439 : 
; 1440 :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* size compr */

  002a7	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  002af	4c 8d 44 24 44	 lea	 r8, QWORD PTR uData$[rsp]
  002b4	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  002bc	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  002c0	48 8b c8	 mov	 rcx, rax
  002c3	e8 00 00 00 00	 call	 unz64local_getLong
  002c8	85 c0		 test	 eax, eax
  002ca	74 0d		 je	 SHORT $LN17@unz64local

; 1441 :         err=UNZ_ERRNO;

  002cc	c7 84 24 b4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
  002d7	eb 3c		 jmp	 SHORT $LN18@unz64local
$LN17@unz64local:

; 1442 :     else if (uData != 0xFFFFFFFF && (err==UNZ_OK) && (uData!=s->cur_file_info.compressed_size) && ((uFlags & 8)==0))

  002d9	83 7c 24 44 ff	 cmp	 DWORD PTR uData$[rsp], -1 ; ffffffffH
  002de	74 35		 je	 SHORT $LN19@unz64local
  002e0	83 bc 24 b4 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  002e8	75 2b		 jne	 SHORT $LN19@unz64local
  002ea	8b 44 24 44	 mov	 eax, DWORD PTR uData$[rsp]
  002ee	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  002f6	48 3b 81 c8 00
	00 00		 cmp	 rax, QWORD PTR [rcx+200]
  002fd	74 16		 je	 SHORT $LN19@unz64local
  002ff	8b 44 24 64	 mov	 eax, DWORD PTR uFlags$[rsp]
  00303	83 e0 08	 and	 eax, 8
  00306	85 c0		 test	 eax, eax
  00308	75 0b		 jne	 SHORT $LN19@unz64local

; 1443 :         err=UNZ_BADZIPFILE;

  0030a	c7 84 24 b4 00
	00 00 99 ff ff
	ff		 mov	 DWORD PTR err$[rsp], -103 ; ffffffffffffff99H
$LN19@unz64local:
$LN18@unz64local:

; 1444 : 
; 1445 :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* size uncompr */

  00315	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0031d	4c 8d 44 24 44	 lea	 r8, QWORD PTR uData$[rsp]
  00322	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  0032a	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  0032e	48 8b c8	 mov	 rcx, rax
  00331	e8 00 00 00 00	 call	 unz64local_getLong
  00336	85 c0		 test	 eax, eax
  00338	74 0d		 je	 SHORT $LN20@unz64local

; 1446 :         err=UNZ_ERRNO;

  0033a	c7 84 24 b4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
  00345	eb 3c		 jmp	 SHORT $LN21@unz64local
$LN20@unz64local:

; 1447 :     else if (uData != 0xFFFFFFFF && (err==UNZ_OK) && (uData!=s->cur_file_info.uncompressed_size) && ((uFlags & 8)==0))

  00347	83 7c 24 44 ff	 cmp	 DWORD PTR uData$[rsp], -1 ; ffffffffH
  0034c	74 35		 je	 SHORT $LN22@unz64local
  0034e	83 bc 24 b4 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  00356	75 2b		 jne	 SHORT $LN22@unz64local
  00358	8b 44 24 44	 mov	 eax, DWORD PTR uData$[rsp]
  0035c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00364	48 3b 81 d0 00
	00 00		 cmp	 rax, QWORD PTR [rcx+208]
  0036b	74 16		 je	 SHORT $LN22@unz64local
  0036d	8b 44 24 64	 mov	 eax, DWORD PTR uFlags$[rsp]
  00371	83 e0 08	 and	 eax, 8
  00374	85 c0		 test	 eax, eax
  00376	75 0b		 jne	 SHORT $LN22@unz64local

; 1448 :         err=UNZ_BADZIPFILE;

  00378	c7 84 24 b4 00
	00 00 99 ff ff
	ff		 mov	 DWORD PTR err$[rsp], -103 ; ffffffffffffff99H
$LN22@unz64local:
$LN21@unz64local:

; 1449 : 
; 1450 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&size_filename) != UNZ_OK)

  00383	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0038b	4c 8d 84 24 84
	00 00 00	 lea	 r8, QWORD PTR size_filename$[rsp]
  00393	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  0039b	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  0039f	48 8b c8	 mov	 rcx, rax
  003a2	e8 00 00 00 00	 call	 unz64local_getShort
  003a7	85 c0		 test	 eax, eax
  003a9	74 0d		 je	 SHORT $LN23@unz64local

; 1451 :         err=UNZ_ERRNO;

  003ab	c7 84 24 b4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
  003b6	eb 2c		 jmp	 SHORT $LN24@unz64local
$LN23@unz64local:

; 1452 :     else if ((err==UNZ_OK) && (size_filename!=s->cur_file_info.size_filename))

  003b8	83 bc 24 b4 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  003c0	75 22		 jne	 SHORT $LN25@unz64local
  003c2	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  003ca	8b 80 d8 00 00
	00		 mov	 eax, DWORD PTR [rax+216]
  003d0	39 84 24 84 00
	00 00		 cmp	 DWORD PTR size_filename$[rsp], eax
  003d7	74 0b		 je	 SHORT $LN25@unz64local

; 1453 :         err=UNZ_BADZIPFILE;

  003d9	c7 84 24 b4 00
	00 00 99 ff ff
	ff		 mov	 DWORD PTR err$[rsp], -103 ; ffffffffffffff99H
$LN25@unz64local:
$LN24@unz64local:

; 1454 : 
; 1455 :     *piSizeVar += (uInt)size_filename;

  003e4	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR piSizeVar$[rsp]
  003ec	8b 00		 mov	 eax, DWORD PTR [rax]
  003ee	03 84 24 84 00
	00 00		 add	 eax, DWORD PTR size_filename$[rsp]
  003f5	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR piSizeVar$[rsp]
  003fd	89 01		 mov	 DWORD PTR [rcx], eax

; 1456 : 
; 1457 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&size_extra_field) != UNZ_OK)

  003ff	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00407	4c 8d 84 24 a4
	00 00 00	 lea	 r8, QWORD PTR size_extra_field$[rsp]
  0040f	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00417	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  0041b	48 8b c8	 mov	 rcx, rax
  0041e	e8 00 00 00 00	 call	 unz64local_getShort
  00423	85 c0		 test	 eax, eax
  00425	74 0b		 je	 SHORT $LN26@unz64local

; 1458 :         err=UNZ_ERRNO;

  00427	c7 84 24 b4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN26@unz64local:

; 1459 :     *poffset_local_extrafield= s->cur_file_info_internal.offset_curfile +

  00432	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0043a	48 8b 80 08 01
	00 00		 mov	 rax, QWORD PTR [rax+264]
  00441	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR size_filename$[rsp]
  00448	48 8d 44 08 1e	 lea	 rax, QWORD PTR [rax+rcx+30]
  0044d	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR poffset_local_extrafield$[rsp]
  00455	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1460 :                                     SIZEZIPLOCALHEADER + size_filename;
; 1461 :     *psize_local_extrafield = (uInt)size_extra_field;

  00458	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR psize_local_extrafield$[rsp]
  00460	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR size_extra_field$[rsp]
  00467	89 08		 mov	 DWORD PTR [rax], ecx

; 1462 : 
; 1463 :     *piSizeVar += (uInt)size_extra_field;

  00469	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR piSizeVar$[rsp]
  00471	8b 00		 mov	 eax, DWORD PTR [rax]
  00473	03 84 24 a4 00
	00 00		 add	 eax, DWORD PTR size_extra_field$[rsp]
  0047a	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR piSizeVar$[rsp]
  00482	89 01		 mov	 DWORD PTR [rcx], eax

; 1464 : 
; 1465 :     return err;

  00484	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR err$[rsp]
$LN1@unz64local:

; 1466 : }

  0048b	48 8b f8	 mov	 rdi, rax
  0048e	48 8b cc	 mov	 rcx, rsp
  00491	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:unz64local_CheckCurrentFileCoherencyHeader$rtcFrameData
  00498	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0049d	48 8b c7	 mov	 rax, rdi
  004a0	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  004a7	5f		 pop	 rdi
  004a8	c3		 ret	 0
unz64local_CheckCurrentFileCoherencyHeader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unzOpenCurrentFile3
_TEXT	SEGMENT
err$ = 32
iSizeVar$ = 52
s$ = 72
pfile_in_zip_read_info$ = 80
offset_local_extrafield$ = 104
size_local_extrafield$ = 132
tv135 = 148
file$ = 192
method$ = 200
level$ = 208
raw$ = 216
password$ = 224
unzOpenCurrentFile3 PROC				; COMDAT

; 1474 : {

$LN30:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 2a 00 00 00	 mov	 ecx, 42			; 0000002aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+192]
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0003b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1475 :     int err=UNZ_OK;

  00040	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 1476 :     uInt iSizeVar;
; 1477 :     unz64_s* s;
; 1478 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1479 :     ZPOS64_T offset_local_extrafield;  /* offset of the local extra field */
; 1480 :     uInt  size_local_extrafield;    /* size of the local extra field */
; 1481 : #    ifndef NOUNCRYPT
; 1482 :     char source[12];
; 1483 : #    else
; 1484 :     if (password != NULL)

  00048	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR password$[rsp], 0
  00051	74 0a		 je	 SHORT $LN4@unzOpenCur

; 1485 :         return UNZ_PARAMERROR;

  00053	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00058	e9 ed 03 00 00	 jmp	 $LN1@unzOpenCur
$LN4@unzOpenCur:

; 1486 : #    endif
; 1487 : 
; 1488 :     if (file==NULL)

  0005d	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR file$[rsp], 0
  00066	75 0a		 jne	 SHORT $LN5@unzOpenCur

; 1489 :         return UNZ_PARAMERROR;

  00068	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  0006d	e9 d8 03 00 00	 jmp	 $LN1@unzOpenCur
$LN5@unzOpenCur:

; 1490 :     s=(unz64_s*)file;

  00072	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR file$[rsp]
  0007a	48 89 44 24 48	 mov	 QWORD PTR s$[rsp], rax

; 1491 :     if (!s->current_file_ok)

  0007f	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  00084	48 83 b8 90 00
	00 00 00	 cmp	 QWORD PTR [rax+144], 0
  0008c	75 0a		 jne	 SHORT $LN6@unzOpenCur

; 1492 :         return UNZ_PARAMERROR;

  0008e	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00093	e9 b2 03 00 00	 jmp	 $LN1@unzOpenCur
$LN6@unzOpenCur:

; 1493 : 
; 1494 :     if (s->pfile_in_zip_read != NULL)

  00098	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  0009d	48 83 b8 10 01
	00 00 00	 cmp	 QWORD PTR [rax+272], 0
  000a5	74 0d		 je	 SHORT $LN7@unzOpenCur

; 1495 :         unzCloseCurrentFile(file);

  000a7	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR file$[rsp]
  000af	e8 00 00 00 00	 call	 unzCloseCurrentFile
$LN7@unzOpenCur:

; 1496 : 
; 1497 :     if (unz64local_CheckCurrentFileCoherencyHeader(s,&iSizeVar, &offset_local_extrafield,&size_local_extrafield)!=UNZ_OK)

  000b4	4c 8d 8c 24 84
	00 00 00	 lea	 r9, QWORD PTR size_local_extrafield$[rsp]
  000bc	4c 8d 44 24 68	 lea	 r8, QWORD PTR offset_local_extrafield$[rsp]
  000c1	48 8d 54 24 34	 lea	 rdx, QWORD PTR iSizeVar$[rsp]
  000c6	48 8b 4c 24 48	 mov	 rcx, QWORD PTR s$[rsp]
  000cb	e8 00 00 00 00	 call	 unz64local_CheckCurrentFileCoherencyHeader
  000d0	85 c0		 test	 eax, eax
  000d2	74 0a		 je	 SHORT $LN8@unzOpenCur

; 1498 :         return UNZ_BADZIPFILE;

  000d4	b8 99 ff ff ff	 mov	 eax, -103		; ffffffffffffff99H
  000d9	e9 6c 03 00 00	 jmp	 $LN1@unzOpenCur
$LN8@unzOpenCur:

; 1499 : 
; 1500 :     pfile_in_zip_read_info = (file_in_zip64_read_info_s*)ALLOC(sizeof(file_in_zip64_read_info_s));

  000de	b9 20 01 00 00	 mov	 ecx, 288		; 00000120H
  000e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  000e9	48 89 44 24 50	 mov	 QWORD PTR pfile_in_zip_read_info$[rsp], rax

; 1501 :     if (pfile_in_zip_read_info==NULL)

  000ee	48 83 7c 24 50
	00		 cmp	 QWORD PTR pfile_in_zip_read_info$[rsp], 0
  000f4	75 0a		 jne	 SHORT $LN9@unzOpenCur

; 1502 :         return UNZ_INTERNALERROR;

  000f6	b8 98 ff ff ff	 mov	 eax, -104		; ffffffffffffff98H
  000fb	e9 4a 03 00 00	 jmp	 $LN1@unzOpenCur
$LN9@unzOpenCur:

; 1503 : 
; 1504 :     pfile_in_zip_read_info->read_buffer=(char*)ALLOC(UNZ_BUFSIZE);

  00100	b9 00 40 00 00	 mov	 ecx, 16384		; 00004000H
  00105	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0010b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00110	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1505 :     pfile_in_zip_read_info->offset_local_extrafield = offset_local_extrafield;

  00113	48 8b 44 24 50	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00118	48 8b 4c 24 68	 mov	 rcx, QWORD PTR offset_local_extrafield$[rsp]
  0011d	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 1506 :     pfile_in_zip_read_info->size_local_extrafield = size_local_extrafield;

  00121	48 8b 44 24 50	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00126	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR size_local_extrafield$[rsp]
  0012d	89 48 78	 mov	 DWORD PTR [rax+120], ecx

; 1507 :     pfile_in_zip_read_info->pos_local_extrafield=0;

  00130	48 8b 44 24 50	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00135	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0

; 1508 :     pfile_in_zip_read_info->raw=raw;

  00140	48 8b 44 24 50	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00145	8b 8c 24 d8 00
	00 00		 mov	 ecx, DWORD PTR raw$[rsp]
  0014c	89 88 18 01 00
	00		 mov	 DWORD PTR [rax+280], ecx

; 1509 : 
; 1510 :     if (pfile_in_zip_read_info->read_buffer==NULL)

  00152	48 8b 44 24 50	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00157	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0015b	75 1d		 jne	 SHORT $LN10@unzOpenCur

; 1511 :     {
; 1512 :         TRYFREE(pfile_in_zip_read_info);

  0015d	48 83 7c 24 50
	00		 cmp	 QWORD PTR pfile_in_zip_read_info$[rsp], 0
  00163	74 0b		 je	 SHORT $LN11@unzOpenCur
  00165	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  0016a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN11@unzOpenCur:

; 1513 :         return UNZ_INTERNALERROR;

  00170	b8 98 ff ff ff	 mov	 eax, -104		; ffffffffffffff98H
  00175	e9 d0 02 00 00	 jmp	 $LN1@unzOpenCur
$LN10@unzOpenCur:

; 1514 :     }
; 1515 : 
; 1516 :     pfile_in_zip_read_info->stream_initialised=0;

  0017a	48 8b 44 24 50	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0017f	c7 40 68 00 00
	00 00		 mov	 DWORD PTR [rax+104], 0

; 1517 : 
; 1518 :     if (method!=NULL)

  00186	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR method$[rsp], 0
  0018f	74 15		 je	 SHORT $LN12@unzOpenCur

; 1519 :         *method = (int)s->cur_file_info.compression_method;

  00191	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR method$[rsp]
  00199	48 8b 4c 24 48	 mov	 rcx, QWORD PTR s$[rsp]
  0019e	8b 89 bc 00 00
	00		 mov	 ecx, DWORD PTR [rcx+188]
  001a4	89 08		 mov	 DWORD PTR [rax], ecx
$LN12@unzOpenCur:

; 1520 : 
; 1521 :     if (level!=NULL)

  001a6	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR level$[rsp], 0
  001af	74 71		 je	 SHORT $LN13@unzOpenCur

; 1522 :     {
; 1523 :         *level = 6;

  001b1	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR level$[rsp]
  001b9	c7 00 06 00 00
	00		 mov	 DWORD PTR [rax], 6

; 1524 :         switch (s->cur_file_info.flag & 0x06)

  001bf	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  001c4	8b 80 b8 00 00
	00		 mov	 eax, DWORD PTR [rax+184]
  001ca	83 e0 06	 and	 eax, 6
  001cd	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv135[rsp], eax
  001d4	83 bc 24 94 00
	00 00 02	 cmp	 DWORD PTR tv135[rsp], 2
  001dc	74 36		 je	 SHORT $LN16@unzOpenCur
  001de	83 bc 24 94 00
	00 00 04	 cmp	 DWORD PTR tv135[rsp], 4
  001e6	74 1c		 je	 SHORT $LN15@unzOpenCur
  001e8	83 bc 24 94 00
	00 00 06	 cmp	 DWORD PTR tv135[rsp], 6
  001f0	74 02		 je	 SHORT $LN14@unzOpenCur
  001f2	eb 2e		 jmp	 SHORT $LN2@unzOpenCur
$LN14@unzOpenCur:

; 1525 :         {
; 1526 :           case 6 : *level = 1; break;

  001f4	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR level$[rsp]
  001fc	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1
  00202	eb 1e		 jmp	 SHORT $LN2@unzOpenCur
$LN15@unzOpenCur:

; 1527 :           case 4 : *level = 2; break;

  00204	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR level$[rsp]
  0020c	c7 00 02 00 00
	00		 mov	 DWORD PTR [rax], 2
  00212	eb 0e		 jmp	 SHORT $LN2@unzOpenCur
$LN16@unzOpenCur:

; 1528 :           case 2 : *level = 9; break;

  00214	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR level$[rsp]
  0021c	c7 00 09 00 00
	00		 mov	 DWORD PTR [rax], 9
$LN2@unzOpenCur:
$LN13@unzOpenCur:

; 1529 :         }
; 1530 :     }
; 1531 : 
; 1532 :     if ((s->cur_file_info.compression_method!=0) &&
; 1533 : /* #ifdef HAVE_BZIP2 */
; 1534 :         (s->cur_file_info.compression_method!=Z_BZIP2ED) &&

  00222	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  00227	83 b8 bc 00 00
	00 00		 cmp	 DWORD PTR [rax+188], 0
  0022e	74 24		 je	 SHORT $LN17@unzOpenCur
  00230	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  00235	83 b8 bc 00 00
	00 0c		 cmp	 DWORD PTR [rax+188], 12
  0023c	74 16		 je	 SHORT $LN17@unzOpenCur
  0023e	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  00243	83 b8 bc 00 00
	00 08		 cmp	 DWORD PTR [rax+188], 8
  0024a	74 08		 je	 SHORT $LN17@unzOpenCur

; 1535 : /* #endif */
; 1536 :         (s->cur_file_info.compression_method!=Z_DEFLATED))
; 1537 : 
; 1538 :         err=UNZ_BADZIPFILE;

  0024c	c7 44 24 20 99
	ff ff ff	 mov	 DWORD PTR err$[rsp], -103 ; ffffffffffffff99H
$LN17@unzOpenCur:

; 1539 : 
; 1540 :     pfile_in_zip_read_info->crc32_wait=s->cur_file_info.crc;

  00254	48 8b 44 24 50	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00259	48 8b 4c 24 48	 mov	 rcx, QWORD PTR s$[rsp]
  0025e	8b 89 c4 00 00
	00		 mov	 ecx, DWORD PTR [rcx+196]
  00264	89 88 94 00 00
	00		 mov	 DWORD PTR [rax+148], ecx

; 1541 :     pfile_in_zip_read_info->crc32=0;

  0026a	48 8b 44 24 50	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0026f	c7 80 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+144], 0

; 1542 :     pfile_in_zip_read_info->total_out_64=0;

  00279	48 8b 44 24 50	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0027e	48 c7 80 88 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+136], 0

; 1543 :     pfile_in_zip_read_info->compression_method = s->cur_file_info.compression_method;

  00289	48 8b 44 24 50	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0028e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR s$[rsp]
  00293	8b 89 bc 00 00
	00		 mov	 ecx, DWORD PTR [rcx+188]
  00299	89 88 08 01 00
	00		 mov	 DWORD PTR [rax+264], ecx

; 1544 :     pfile_in_zip_read_info->filestream=s->filestream;

  0029f	48 8b 44 24 50	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  002a4	48 8b 4c 24 48	 mov	 rcx, QWORD PTR s$[rsp]
  002a9	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  002ad	48 89 88 00 01
	00 00		 mov	 QWORD PTR [rax+256], rcx

; 1545 :     pfile_in_zip_read_info->z_filefunc=s->z_filefunc;

  002b4	48 8b 44 24 50	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  002b9	48 8d b8 a8 00
	00 00		 lea	 rdi, QWORD PTR [rax+168]
  002c0	48 8b 74 24 48	 mov	 rsi, QWORD PTR s$[rsp]
  002c5	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  002ca	f3 a4		 rep movsb

; 1546 :     pfile_in_zip_read_info->byte_before_the_zipfile=s->byte_before_the_zipfile;

  002cc	48 8b 44 24 50	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  002d1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR s$[rsp]
  002d6	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  002da	48 89 88 10 01
	00 00		 mov	 QWORD PTR [rax+272], rcx

; 1547 : 
; 1548 :     pfile_in_zip_read_info->stream.total_out = 0;

  002e1	48 8b 44 24 50	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  002e6	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [rax+36], 0

; 1549 : 
; 1550 :     if ((s->cur_file_info.compression_method==Z_BZIP2ED) && (!raw))

  002ed	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  002f2	83 b8 bc 00 00
	00 0c		 cmp	 DWORD PTR [rax+188], 12
  002f9	75 1e		 jne	 SHORT $LN18@unzOpenCur
  002fb	83 bc 24 d8 00
	00 00 00	 cmp	 DWORD PTR raw$[rsp], 0
  00303	75 14		 jne	 SHORT $LN18@unzOpenCur

; 1551 :     {
; 1552 : #ifdef HAVE_BZIP2
; 1553 :       pfile_in_zip_read_info->bstream.bzalloc = (void *(*) (void *, int, int))0;
; 1554 :       pfile_in_zip_read_info->bstream.bzfree = (free_func)0;
; 1555 :       pfile_in_zip_read_info->bstream.opaque = (voidpf)0;
; 1556 :       pfile_in_zip_read_info->bstream.state = (voidpf)0;
; 1557 : 
; 1558 :       pfile_in_zip_read_info->stream.zalloc = (alloc_func)0;
; 1559 :       pfile_in_zip_read_info->stream.zfree = (free_func)0;
; 1560 :       pfile_in_zip_read_info->stream.opaque = (voidpf)0;
; 1561 :       pfile_in_zip_read_info->stream.next_in = (voidpf)0;
; 1562 :       pfile_in_zip_read_info->stream.avail_in = 0;
; 1563 : 
; 1564 :       err=BZ2_bzDecompressInit(&pfile_in_zip_read_info->bstream, 0, 0);
; 1565 :       if (err == Z_OK)
; 1566 :         pfile_in_zip_read_info->stream_initialised=Z_BZIP2ED;
; 1567 :       else
; 1568 :       {
; 1569 :         TRYFREE(pfile_in_zip_read_info);
; 1570 :         return err;
; 1571 :       }
; 1572 : #else
; 1573 :       pfile_in_zip_read_info->raw=1;

  00305	48 8b 44 24 50	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0030a	c7 80 18 01 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+280], 1

; 1574 : #endif
; 1575 :     }

  00314	e9 b5 00 00 00	 jmp	 $LN19@unzOpenCur
$LN18@unzOpenCur:

; 1576 :     else if ((s->cur_file_info.compression_method==Z_DEFLATED) && (!raw))

  00319	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  0031e	83 b8 bc 00 00
	00 08		 cmp	 DWORD PTR [rax+188], 8
  00325	0f 85 a3 00 00
	00		 jne	 $LN20@unzOpenCur
  0032b	83 bc 24 d8 00
	00 00 00	 cmp	 DWORD PTR raw$[rsp], 0
  00333	0f 85 95 00 00
	00		 jne	 $LN20@unzOpenCur

; 1577 :     {
; 1578 :       pfile_in_zip_read_info->stream.zalloc = (alloc_func)0;

  00339	48 8b 44 24 50	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0033e	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0

; 1579 :       pfile_in_zip_read_info->stream.zfree = (free_func)0;

  00346	48 8b 44 24 50	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0034b	48 c7 40 40 00
	00 00 00	 mov	 QWORD PTR [rax+64], 0

; 1580 :       pfile_in_zip_read_info->stream.opaque = (voidpf)0;

  00353	48 8b 44 24 50	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00358	48 c7 40 48 00
	00 00 00	 mov	 QWORD PTR [rax+72], 0

; 1581 :       pfile_in_zip_read_info->stream.next_in = 0;

  00360	48 8b 44 24 50	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00365	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 1582 :       pfile_in_zip_read_info->stream.avail_in = 0;

  0036d	48 8b 44 24 50	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00372	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [rax+16], 0

; 1583 : 
; 1584 :       err=inflateInit2(&pfile_in_zip_read_info->stream, -MAX_WBITS);

  00379	48 8b 44 24 50	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0037e	48 83 c0 08	 add	 rax, 8
  00382	41 b9 58 00 00
	00		 mov	 r9d, 88			; 00000058H
  00388	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06CJNJFBNP@1?42?411@
  0038f	ba f1 ff ff ff	 mov	 edx, -15
  00394	48 8b c8	 mov	 rcx, rax
  00397	e8 00 00 00 00	 call	 inflateInit2_
  0039c	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax

; 1585 :       if (err == Z_OK)

  003a0	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  003a5	75 0e		 jne	 SHORT $LN21@unzOpenCur

; 1586 :         pfile_in_zip_read_info->stream_initialised=Z_DEFLATED;

  003a7	48 8b 44 24 50	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  003ac	c7 40 68 08 00
	00 00		 mov	 DWORD PTR [rax+104], 8
  003b3	eb 19		 jmp	 SHORT $LN22@unzOpenCur
$LN21@unzOpenCur:

; 1587 :       else
; 1588 :       {
; 1589 :         TRYFREE(pfile_in_zip_read_info);

  003b5	48 83 7c 24 50
	00		 cmp	 QWORD PTR pfile_in_zip_read_info$[rsp], 0
  003bb	74 0b		 je	 SHORT $LN23@unzOpenCur
  003bd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  003c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN23@unzOpenCur:

; 1590 :         return err;

  003c8	8b 44 24 20	 mov	 eax, DWORD PTR err$[rsp]
  003cc	eb 7c		 jmp	 SHORT $LN1@unzOpenCur
$LN22@unzOpenCur:
$LN20@unzOpenCur:
$LN19@unzOpenCur:

; 1591 :       }
; 1592 :         /* windowBits is passed < 0 to tell that there is no zlib header.
; 1593 :          * Note that in this case inflate *requires* an extra "dummy" byte
; 1594 :          * after the compressed stream in order to complete decompression and
; 1595 :          * return Z_STREAM_END.
; 1596 :          * In unzip, i don't wait absolutely Z_STREAM_END because I known the
; 1597 :          * size of both compressed and uncompressed data
; 1598 :          */
; 1599 :     }
; 1600 :     pfile_in_zip_read_info->rest_read_compressed =

  003ce	48 8b 44 24 50	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  003d3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR s$[rsp]
  003d8	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  003df	48 89 88 98 00
	00 00		 mov	 QWORD PTR [rax+152], rcx

; 1601 :             s->cur_file_info.compressed_size ;
; 1602 :     pfile_in_zip_read_info->rest_read_uncompressed =

  003e6	48 8b 44 24 50	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  003eb	48 8b 4c 24 48	 mov	 rcx, QWORD PTR s$[rsp]
  003f0	48 8b 89 d0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+208]
  003f7	48 89 88 a0 00
	00 00		 mov	 QWORD PTR [rax+160], rcx

; 1603 :             s->cur_file_info.uncompressed_size ;
; 1604 : 
; 1605 : 
; 1606 :     pfile_in_zip_read_info->pos_in_zipfile =

  003fe	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  00403	48 8b 80 08 01
	00 00		 mov	 rax, QWORD PTR [rax+264]
  0040a	8b 4c 24 34	 mov	 ecx, DWORD PTR iSizeVar$[rsp]
  0040e	48 8d 44 08 1e	 lea	 rax, QWORD PTR [rax+rcx+30]
  00413	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00418	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax

; 1607 :             s->cur_file_info_internal.offset_curfile + SIZEZIPLOCALHEADER +
; 1608 :               iSizeVar;
; 1609 : 
; 1610 :     pfile_in_zip_read_info->stream.avail_in = (uInt)0;

  0041c	48 8b 44 24 50	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00421	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [rax+16], 0

; 1611 : 
; 1612 :     s->pfile_in_zip_read = pfile_in_zip_read_info;

  00428	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  0042d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00432	48 89 88 10 01
	00 00		 mov	 QWORD PTR [rax+272], rcx

; 1613 :                 s->encrypted = 0;

  00439	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  0043e	c7 80 18 01 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+280], 0

; 1614 : 
; 1615 : #    ifndef NOUNCRYPT
; 1616 :     if (password != NULL)
; 1617 :     {
; 1618 :         int i;
; 1619 :         s->pcrc_32_tab = get_crc_table();
; 1620 :         init_keys(password,s->keys,s->pcrc_32_tab);
; 1621 :         if (ZSEEK64(s->z_filefunc, s->filestream,
; 1622 :                   s->pfile_in_zip_read->pos_in_zipfile +
; 1623 :                      s->pfile_in_zip_read->byte_before_the_zipfile,
; 1624 :                   SEEK_SET)!=0)
; 1625 :             return UNZ_INTERNALERROR;
; 1626 :         if(ZREAD64(s->z_filefunc, s->filestream,source, 12)<12)
; 1627 :             return UNZ_INTERNALERROR;
; 1628 : 
; 1629 :         for (i = 0; i<12; i++)
; 1630 :             zdecode(s->keys,s->pcrc_32_tab,source[i]);
; 1631 : 
; 1632 :         s->pfile_in_zip_read->pos_in_zipfile+=12;
; 1633 :         s->encrypted=1;
; 1634 :     }
; 1635 : #    endif
; 1636 : 
; 1637 : 
; 1638 :     return UNZ_OK;

  00448	33 c0		 xor	 eax, eax
$LN1@unzOpenCur:

; 1639 : }

  0044a	48 8b f8	 mov	 rdi, rax
  0044d	48 8b cc	 mov	 rcx, rsp
  00450	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:unzOpenCurrentFile3$rtcFrameData
  00457	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0045c	48 8b c7	 mov	 rax, rdi
  0045f	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00466	5f		 pop	 rdi
  00467	5e		 pop	 rsi
  00468	c3		 ret	 0
unzOpenCurrentFile3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unzOpenCurrentFile
_TEXT	SEGMENT
file$ = 64
unzOpenCurrentFile PROC					; COMDAT

; 1642 : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1643 :     return unzOpenCurrentFile3(file, NULL, NULL, 0, NULL);

  0002a	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00033	45 33 c9	 xor	 r9d, r9d
  00036	45 33 c0	 xor	 r8d, r8d
  00039	33 d2		 xor	 edx, edx
  0003b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR file$[rsp]
  00040	e8 00 00 00 00	 call	 unzOpenCurrentFile3

; 1644 : }

  00045	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00049	5f		 pop	 rdi
  0004a	c3		 ret	 0
unzOpenCurrentFile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unzOpenCurrentFilePassword
_TEXT	SEGMENT
file$ = 64
password$ = 72
unzOpenCurrentFilePassword PROC				; COMDAT

; 1647 : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1648 :     return unzOpenCurrentFile3(file, NULL, NULL, 0, password);

  0002f	48 8b 44 24 48	 mov	 rax, QWORD PTR password$[rsp]
  00034	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00039	45 33 c9	 xor	 r9d, r9d
  0003c	45 33 c0	 xor	 r8d, r8d
  0003f	33 d2		 xor	 edx, edx
  00041	48 8b 4c 24 40	 mov	 rcx, QWORD PTR file$[rsp]
  00046	e8 00 00 00 00	 call	 unzOpenCurrentFile3

; 1649 : }

  0004b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0004f	5f		 pop	 rdi
  00050	c3		 ret	 0
unzOpenCurrentFilePassword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unzOpenCurrentFile2
_TEXT	SEGMENT
file$ = 64
method$ = 72
level$ = 80
raw$ = 88
unzOpenCurrentFile2 PROC				; COMDAT

; 1652 : {

$LN4:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 0c 00 00 00	 mov	 ecx, 12
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00034	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1653 :     return unzOpenCurrentFile3(file, method, level, raw, NULL);

  00039	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00042	44 8b 4c 24 58	 mov	 r9d, DWORD PTR raw$[rsp]
  00047	4c 8b 44 24 50	 mov	 r8, QWORD PTR level$[rsp]
  0004c	48 8b 54 24 48	 mov	 rdx, QWORD PTR method$[rsp]
  00051	48 8b 4c 24 40	 mov	 rcx, QWORD PTR file$[rsp]
  00056	e8 00 00 00 00	 call	 unzOpenCurrentFile3

; 1654 : }

  0005b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005f	5f		 pop	 rdi
  00060	c3		 ret	 0
unzOpenCurrentFile2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unzGetCurrentFileZStreamPos64
_TEXT	SEGMENT
s$ = 32
pfile_in_zip_read_info$ = 40
file$ = 64
unzGetCurrentFileZStreamPos64 PROC			; COMDAT

; 1659 : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1660 :     unz64_s* s;
; 1661 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1662 :     s=(unz64_s*)file;

  0002a	48 8b 44 24 40	 mov	 rax, QWORD PTR file$[rsp]
  0002f	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax

; 1663 :     if (file==NULL)

  00034	48 83 7c 24 40
	00		 cmp	 QWORD PTR file$[rsp], 0
  0003a	75 04		 jne	 SHORT $LN2@unzGetCurr

; 1664 :         return 0; //UNZ_PARAMERROR;

  0003c	33 c0		 xor	 eax, eax
  0003e	eb 32		 jmp	 SHORT $LN1@unzGetCurr
$LN2@unzGetCurr:

; 1665 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00040	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00045	48 8b 80 10 01
	00 00		 mov	 rax, QWORD PTR [rax+272]
  0004c	48 89 44 24 28	 mov	 QWORD PTR pfile_in_zip_read_info$[rsp], rax

; 1666 :     if (pfile_in_zip_read_info==NULL)

  00051	48 83 7c 24 28
	00		 cmp	 QWORD PTR pfile_in_zip_read_info$[rsp], 0
  00057	75 04		 jne	 SHORT $LN3@unzGetCurr

; 1667 :         return 0; //UNZ_PARAMERROR;

  00059	33 c0		 xor	 eax, eax
  0005b	eb 15		 jmp	 SHORT $LN1@unzGetCurr
$LN3@unzGetCurr:

; 1668 :     return pfile_in_zip_read_info->pos_in_zipfile +

  0005d	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00062	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00066	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  0006b	48 03 81 10 01
	00 00		 add	 rax, QWORD PTR [rcx+272]
$LN1@unzGetCurr:

; 1669 :                          pfile_in_zip_read_info->byte_before_the_zipfile;
; 1670 : }

  00072	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00076	5f		 pop	 rdi
  00077	c3		 ret	 0
unzGetCurrentFileZStreamPos64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unzReadCurrentFile
_TEXT	SEGMENT
err$ = 32
iRead$ = 36
s$ = 40
pfile_in_zip_read_info$ = 48
uReadThis$1 = 56
uDoCopy$2 = 60
i$3 = 64
uTotalOutBefore$4 = 72
uTotalOutAfter$5 = 80
bufBefore$6 = 88
uOutThis$7 = 96
flush$8 = 104
tv175 = 108
tv254 = 112
file$ = 144
buf$ = 152
len$ = 160
unzReadCurrentFile PROC					; COMDAT

; 1685 : {

$LN36:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR [rsp+144]
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00035	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1686 :     int err=UNZ_OK;

  0003a	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 1687 :     uInt iRead = 0;

  00042	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR iRead$[rsp], 0

; 1688 :     unz64_s* s;
; 1689 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1690 :     if (file==NULL)

  0004a	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR file$[rsp], 0
  00053	75 0a		 jne	 SHORT $LN7@unzReadCur

; 1691 :         return UNZ_PARAMERROR;

  00055	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  0005a	e9 39 05 00 00	 jmp	 $LN1@unzReadCur
$LN7@unzReadCur:

; 1692 :     s=(unz64_s*)file;

  0005f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR file$[rsp]
  00067	48 89 44 24 28	 mov	 QWORD PTR s$[rsp], rax

; 1693 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  0006c	48 8b 44 24 28	 mov	 rax, QWORD PTR s$[rsp]
  00071	48 8b 80 10 01
	00 00		 mov	 rax, QWORD PTR [rax+272]
  00078	48 89 44 24 30	 mov	 QWORD PTR pfile_in_zip_read_info$[rsp], rax

; 1694 : 
; 1695 :     if (pfile_in_zip_read_info==NULL)

  0007d	48 83 7c 24 30
	00		 cmp	 QWORD PTR pfile_in_zip_read_info$[rsp], 0
  00083	75 0a		 jne	 SHORT $LN8@unzReadCur

; 1696 :         return UNZ_PARAMERROR;

  00085	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  0008a	e9 09 05 00 00	 jmp	 $LN1@unzReadCur
$LN8@unzReadCur:

; 1697 : 
; 1698 : 
; 1699 :     if (pfile_in_zip_read_info->read_buffer == NULL)

  0008f	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00094	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00098	75 0a		 jne	 SHORT $LN9@unzReadCur

; 1700 :         return UNZ_END_OF_LIST_OF_FILE;

  0009a	b8 9c ff ff ff	 mov	 eax, -100		; ffffffffffffff9cH
  0009f	e9 f4 04 00 00	 jmp	 $LN1@unzReadCur
$LN9@unzReadCur:

; 1701 :     if (len==0)

  000a4	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR len$[rsp], 0
  000ac	75 07		 jne	 SHORT $LN10@unzReadCur

; 1702 :         return 0;

  000ae	33 c0		 xor	 eax, eax
  000b0	e9 e3 04 00 00	 jmp	 $LN1@unzReadCur
$LN10@unzReadCur:

; 1703 : 
; 1704 :     pfile_in_zip_read_info->stream.next_out = (Bytef*)buf;

  000b5	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  000ba	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  000c2	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 1705 : 
; 1706 :     pfile_in_zip_read_info->stream.avail_out = (uInt)len;

  000c6	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  000cb	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR len$[rsp]
  000d2	89 48 20	 mov	 DWORD PTR [rax+32], ecx

; 1707 : 
; 1708 :     if ((len>pfile_in_zip_read_info->rest_read_uncompressed) &&

  000d5	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  000dc	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  000e1	48 3b 81 a0 00
	00 00		 cmp	 rax, QWORD PTR [rcx+160]
  000e8	76 21		 jbe	 SHORT $LN11@unzReadCur
  000ea	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  000ef	83 b8 18 01 00
	00 00		 cmp	 DWORD PTR [rax+280], 0
  000f6	75 13		 jne	 SHORT $LN11@unzReadCur

; 1709 :         (!(pfile_in_zip_read_info->raw)))
; 1710 :         pfile_in_zip_read_info->stream.avail_out =

  000f8	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  000fd	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00102	8b 89 a0 00 00
	00		 mov	 ecx, DWORD PTR [rcx+160]
  00108	89 48 20	 mov	 DWORD PTR [rax+32], ecx
$LN11@unzReadCur:

; 1711 :             (uInt)pfile_in_zip_read_info->rest_read_uncompressed;
; 1712 : 
; 1713 :     if ((len>pfile_in_zip_read_info->rest_read_compressed+
; 1714 :            pfile_in_zip_read_info->stream.avail_in) &&

  0010b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  00112	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00117	8b 49 10	 mov	 ecx, DWORD PTR [rcx+16]
  0011a	48 8b 54 24 30	 mov	 rdx, QWORD PTR pfile_in_zip_read_info$[rsp]
  0011f	48 03 8a 98 00
	00 00		 add	 rcx, QWORD PTR [rdx+152]
  00126	48 3b c1	 cmp	 rax, rcx
  00129	76 29		 jbe	 SHORT $LN12@unzReadCur
  0012b	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00130	83 b8 18 01 00
	00 00		 cmp	 DWORD PTR [rax+280], 0
  00137	74 1b		 je	 SHORT $LN12@unzReadCur

; 1715 :          (pfile_in_zip_read_info->raw))
; 1716 :         pfile_in_zip_read_info->stream.avail_out =

  00139	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0013e	8b 80 98 00 00
	00		 mov	 eax, DWORD PTR [rax+152]
  00144	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00149	03 41 10	 add	 eax, DWORD PTR [rcx+16]
  0014c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00151	89 41 20	 mov	 DWORD PTR [rcx+32], eax
$LN12@unzReadCur:
$LN2@unzReadCur:

; 1717 :             (uInt)pfile_in_zip_read_info->rest_read_compressed+
; 1718 :             pfile_in_zip_read_info->stream.avail_in;
; 1719 : 
; 1720 :     while (pfile_in_zip_read_info->stream.avail_out>0)

  00154	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00159	83 78 20 00	 cmp	 DWORD PTR [rax+32], 0
  0015d	0f 86 24 04 00
	00		 jbe	 $LN3@unzReadCur

; 1721 :     {
; 1722 :         if ((pfile_in_zip_read_info->stream.avail_in==0) &&

  00163	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00168	83 78 10 00	 cmp	 DWORD PTR [rax+16], 0
  0016c	0f 85 25 01 00
	00		 jne	 $LN13@unzReadCur
  00172	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00177	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  0017f	0f 86 12 01 00
	00		 jbe	 $LN13@unzReadCur

; 1723 :             (pfile_in_zip_read_info->rest_read_compressed>0))
; 1724 :         {
; 1725 :             uInt uReadThis = UNZ_BUFSIZE;

  00185	c7 44 24 38 00
	40 00 00	 mov	 DWORD PTR uReadThis$1[rsp], 16384 ; 00004000H

; 1726 :             if (pfile_in_zip_read_info->rest_read_compressed<uReadThis)

  0018d	8b 44 24 38	 mov	 eax, DWORD PTR uReadThis$1[rsp]
  00191	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00196	48 39 81 98 00
	00 00		 cmp	 QWORD PTR [rcx+152], rax
  0019d	73 0f		 jae	 SHORT $LN14@unzReadCur

; 1727 :                 uReadThis = (uInt)pfile_in_zip_read_info->rest_read_compressed;

  0019f	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  001a4	8b 80 98 00 00
	00		 mov	 eax, DWORD PTR [rax+152]
  001aa	89 44 24 38	 mov	 DWORD PTR uReadThis$1[rsp], eax
$LN14@unzReadCur:

; 1728 :             if (uReadThis == 0)

  001ae	83 7c 24 38 00	 cmp	 DWORD PTR uReadThis$1[rsp], 0
  001b3	75 07		 jne	 SHORT $LN15@unzReadCur

; 1729 :                 return UNZ_EOF;

  001b5	33 c0		 xor	 eax, eax
  001b7	e9 dc 03 00 00	 jmp	 $LN1@unzReadCur
$LN15@unzReadCur:

; 1730 :             if (ZSEEK64(pfile_in_zip_read_info->z_filefunc,
; 1731 :                       pfile_in_zip_read_info->filestream,
; 1732 :                       pfile_in_zip_read_info->pos_in_zipfile +
; 1733 :                          pfile_in_zip_read_info->byte_before_the_zipfile,
; 1734 :                          ZLIB_FILEFUNC_SEEK_SET)!=0)

  001bc	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  001c1	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  001c5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  001ca	48 03 81 10 01
	00 00		 add	 rax, QWORD PTR [rcx+272]
  001d1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  001d6	48 81 c1 a8 00
	00 00		 add	 rcx, 168		; 000000a8H
  001dd	45 33 c9	 xor	 r9d, r9d
  001e0	4c 8b c0	 mov	 r8, rax
  001e3	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  001e8	48 8b 90 00 01
	00 00		 mov	 rdx, QWORD PTR [rax+256]
  001ef	e8 00 00 00 00	 call	 call_zseek64
  001f4	85 c0		 test	 eax, eax
  001f6	74 0a		 je	 SHORT $LN16@unzReadCur

; 1735 :                 return UNZ_ERRNO;

  001f8	b8 ff ff ff ff	 mov	 eax, -1
  001fd	e9 96 03 00 00	 jmp	 $LN1@unzReadCur
$LN16@unzReadCur:

; 1736 :             if (ZREAD64(pfile_in_zip_read_info->z_filefunc,
; 1737 :                       pfile_in_zip_read_info->filestream,
; 1738 :                       pfile_in_zip_read_info->read_buffer,
; 1739 :                       uReadThis)!=uReadThis)

  00202	44 8b 4c 24 38	 mov	 r9d, DWORD PTR uReadThis$1[rsp]
  00207	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0020c	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  0020f	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00214	48 8b 90 00 01
	00 00		 mov	 rdx, QWORD PTR [rax+256]
  0021b	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00220	48 8b 88 e0 00
	00 00		 mov	 rcx, QWORD PTR [rax+224]
  00227	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0022c	ff 90 b0 00 00
	00		 call	 QWORD PTR [rax+176]
  00232	3b 44 24 38	 cmp	 eax, DWORD PTR uReadThis$1[rsp]
  00236	74 0a		 je	 SHORT $LN17@unzReadCur

; 1740 :                 return UNZ_ERRNO;

  00238	b8 ff ff ff ff	 mov	 eax, -1
  0023d	e9 56 03 00 00	 jmp	 $LN1@unzReadCur
$LN17@unzReadCur:

; 1741 : 
; 1742 : 
; 1743 : #            ifndef NOUNCRYPT
; 1744 :             if(s->encrypted)
; 1745 :             {
; 1746 :                 uInt i;
; 1747 :                 for(i=0;i<uReadThis;i++)
; 1748 :                   pfile_in_zip_read_info->read_buffer[i] =
; 1749 :                       zdecode(s->keys,s->pcrc_32_tab,
; 1750 :                               pfile_in_zip_read_info->read_buffer[i]);
; 1751 :             }
; 1752 : #            endif
; 1753 : 
; 1754 : 
; 1755 :             pfile_in_zip_read_info->pos_in_zipfile += uReadThis;

  00242	8b 44 24 38	 mov	 eax, DWORD PTR uReadThis$1[rsp]
  00246	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  0024b	48 03 41 60	 add	 rax, QWORD PTR [rcx+96]
  0024f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00254	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax

; 1756 : 
; 1757 :             pfile_in_zip_read_info->rest_read_compressed-=uReadThis;

  00258	8b 44 24 38	 mov	 eax, DWORD PTR uReadThis$1[rsp]
  0025c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00261	48 8b 89 98 00
	00 00		 mov	 rcx, QWORD PTR [rcx+152]
  00268	48 2b c8	 sub	 rcx, rax
  0026b	48 8b c1	 mov	 rax, rcx
  0026e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00273	48 89 81 98 00
	00 00		 mov	 QWORD PTR [rcx+152], rax

; 1758 : 
; 1759 :             pfile_in_zip_read_info->stream.next_in =

  0027a	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0027f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00284	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00287	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1760 :                 (Bytef*)pfile_in_zip_read_info->read_buffer;
; 1761 :             pfile_in_zip_read_info->stream.avail_in = (uInt)uReadThis;

  0028b	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00290	8b 4c 24 38	 mov	 ecx, DWORD PTR uReadThis$1[rsp]
  00294	89 48 10	 mov	 DWORD PTR [rax+16], ecx
$LN13@unzReadCur:

; 1762 :         }
; 1763 : 
; 1764 :         if ((pfile_in_zip_read_info->compression_method==0) || (pfile_in_zip_read_info->raw))

  00297	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0029c	83 b8 08 01 00
	00 00		 cmp	 DWORD PTR [rax+264], 0
  002a3	74 12		 je	 SHORT $LN20@unzReadCur
  002a5	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  002aa	83 b8 18 01 00
	00 00		 cmp	 DWORD PTR [rax+280], 0
  002b1	0f 84 92 01 00
	00		 je	 $LN18@unzReadCur
$LN20@unzReadCur:

; 1765 :         {
; 1766 :             uInt uDoCopy,i ;
; 1767 : 
; 1768 :             if ((pfile_in_zip_read_info->stream.avail_in == 0) &&

  002b7	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  002bc	83 78 10 00	 cmp	 DWORD PTR [rax+16], 0
  002c0	75 31		 jne	 SHORT $LN21@unzReadCur
  002c2	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  002c7	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  002cf	75 22		 jne	 SHORT $LN21@unzReadCur

; 1769 :                 (pfile_in_zip_read_info->rest_read_compressed == 0))
; 1770 :                 return (iRead==0) ? UNZ_EOF : iRead;

  002d1	83 7c 24 24 00	 cmp	 DWORD PTR iRead$[rsp], 0
  002d6	75 0a		 jne	 SHORT $LN31@unzReadCur
  002d8	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR tv175[rsp], 0
  002e0	eb 08		 jmp	 SHORT $LN32@unzReadCur
$LN31@unzReadCur:
  002e2	8b 44 24 24	 mov	 eax, DWORD PTR iRead$[rsp]
  002e6	89 44 24 6c	 mov	 DWORD PTR tv175[rsp], eax
$LN32@unzReadCur:
  002ea	8b 44 24 6c	 mov	 eax, DWORD PTR tv175[rsp]
  002ee	e9 a5 02 00 00	 jmp	 $LN1@unzReadCur
$LN21@unzReadCur:

; 1771 : 
; 1772 :             if (pfile_in_zip_read_info->stream.avail_out <

  002f3	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  002f8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  002fd	8b 49 10	 mov	 ecx, DWORD PTR [rcx+16]
  00300	39 48 20	 cmp	 DWORD PTR [rax+32], ecx
  00303	73 0e		 jae	 SHORT $LN22@unzReadCur

; 1773 :                             pfile_in_zip_read_info->stream.avail_in)
; 1774 :                 uDoCopy = pfile_in_zip_read_info->stream.avail_out ;

  00305	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0030a	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  0030d	89 44 24 3c	 mov	 DWORD PTR uDoCopy$2[rsp], eax
  00311	eb 0c		 jmp	 SHORT $LN23@unzReadCur
$LN22@unzReadCur:

; 1775 :             else
; 1776 :                 uDoCopy = pfile_in_zip_read_info->stream.avail_in ;

  00313	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00318	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0031b	89 44 24 3c	 mov	 DWORD PTR uDoCopy$2[rsp], eax
$LN23@unzReadCur:

; 1777 : 
; 1778 :             for (i=0;i<uDoCopy;i++)

  0031f	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR i$3[rsp], 0
  00327	eb 0a		 jmp	 SHORT $LN6@unzReadCur
$LN4@unzReadCur:
  00329	8b 44 24 40	 mov	 eax, DWORD PTR i$3[rsp]
  0032d	ff c0		 inc	 eax
  0032f	89 44 24 40	 mov	 DWORD PTR i$3[rsp], eax
$LN6@unzReadCur:
  00333	8b 44 24 3c	 mov	 eax, DWORD PTR uDoCopy$2[rsp]
  00337	39 44 24 40	 cmp	 DWORD PTR i$3[rsp], eax
  0033b	73 24		 jae	 SHORT $LN5@unzReadCur

; 1779 :                 *(pfile_in_zip_read_info->stream.next_out+i) =

  0033d	8b 44 24 40	 mov	 eax, DWORD PTR i$3[rsp]
  00341	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00346	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0034a	8b 54 24 40	 mov	 edx, DWORD PTR i$3[rsp]
  0034e	4c 8b 44 24 30	 mov	 r8, QWORD PTR pfile_in_zip_read_info$[rsp]
  00353	4d 8b 40 18	 mov	 r8, QWORD PTR [r8+24]
  00357	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0035b	42 88 04 02	 mov	 BYTE PTR [rdx+r8], al
  0035f	eb c8		 jmp	 SHORT $LN4@unzReadCur
$LN5@unzReadCur:

; 1780 :                         *(pfile_in_zip_read_info->stream.next_in+i);
; 1781 : 
; 1782 :             pfile_in_zip_read_info->total_out_64 = pfile_in_zip_read_info->total_out_64 + uDoCopy;

  00361	8b 44 24 3c	 mov	 eax, DWORD PTR uDoCopy$2[rsp]
  00365	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  0036a	48 03 81 88 00
	00 00		 add	 rax, QWORD PTR [rcx+136]
  00371	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00376	48 89 81 88 00
	00 00		 mov	 QWORD PTR [rcx+136], rax

; 1783 : 
; 1784 :             pfile_in_zip_read_info->crc32 = crc32(pfile_in_zip_read_info->crc32,

  0037d	44 8b 44 24 3c	 mov	 r8d, DWORD PTR uDoCopy$2[rsp]
  00382	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00387	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  0038b	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00390	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [rax+144]
  00396	e8 00 00 00 00	 call	 crc32
  0039b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  003a0	89 81 90 00 00
	00		 mov	 DWORD PTR [rcx+144], eax

; 1785 :                                 pfile_in_zip_read_info->stream.next_out,
; 1786 :                                 uDoCopy);
; 1787 :             pfile_in_zip_read_info->rest_read_uncompressed-=uDoCopy;

  003a6	8b 44 24 3c	 mov	 eax, DWORD PTR uDoCopy$2[rsp]
  003aa	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  003af	48 8b 89 a0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+160]
  003b6	48 2b c8	 sub	 rcx, rax
  003b9	48 8b c1	 mov	 rax, rcx
  003bc	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  003c1	48 89 81 a0 00
	00 00		 mov	 QWORD PTR [rcx+160], rax

; 1788 :             pfile_in_zip_read_info->stream.avail_in -= uDoCopy;

  003c8	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  003cd	8b 4c 24 3c	 mov	 ecx, DWORD PTR uDoCopy$2[rsp]
  003d1	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  003d4	2b c1		 sub	 eax, ecx
  003d6	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  003db	89 41 10	 mov	 DWORD PTR [rcx+16], eax

; 1789 :             pfile_in_zip_read_info->stream.avail_out -= uDoCopy;

  003de	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  003e3	8b 4c 24 3c	 mov	 ecx, DWORD PTR uDoCopy$2[rsp]
  003e7	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  003ea	2b c1		 sub	 eax, ecx
  003ec	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  003f1	89 41 20	 mov	 DWORD PTR [rcx+32], eax

; 1790 :             pfile_in_zip_read_info->stream.next_out += uDoCopy;

  003f4	8b 44 24 3c	 mov	 eax, DWORD PTR uDoCopy$2[rsp]
  003f8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  003fd	48 03 41 18	 add	 rax, QWORD PTR [rcx+24]
  00401	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00406	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 1791 :             pfile_in_zip_read_info->stream.next_in += uDoCopy;

  0040a	8b 44 24 3c	 mov	 eax, DWORD PTR uDoCopy$2[rsp]
  0040e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00413	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  00417	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  0041c	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 1792 :             pfile_in_zip_read_info->stream.total_out += uDoCopy;

  00420	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00425	8b 40 24	 mov	 eax, DWORD PTR [rax+36]
  00428	03 44 24 3c	 add	 eax, DWORD PTR uDoCopy$2[rsp]
  0042c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00431	89 41 24	 mov	 DWORD PTR [rcx+36], eax

; 1793 :             iRead += uDoCopy;

  00434	8b 44 24 3c	 mov	 eax, DWORD PTR uDoCopy$2[rsp]
  00438	8b 4c 24 24	 mov	 ecx, DWORD PTR iRead$[rsp]
  0043c	03 c8		 add	 ecx, eax
  0043e	8b c1		 mov	 eax, ecx
  00440	89 44 24 24	 mov	 DWORD PTR iRead$[rsp], eax

; 1794 :         }

  00444	e9 39 01 00 00	 jmp	 $LN19@unzReadCur
$LN18@unzReadCur:

; 1795 :         else if (pfile_in_zip_read_info->compression_method==Z_BZIP2ED)

  00449	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0044e	83 b8 08 01 00
	00 0c		 cmp	 DWORD PTR [rax+264], 12
  00455	75 05		 jne	 SHORT $LN24@unzReadCur

; 1796 :         {
; 1797 : #ifdef HAVE_BZIP2
; 1798 :             uLong uTotalOutBefore,uTotalOutAfter;
; 1799 :             const Bytef *bufBefore;
; 1800 :             uLong uOutThis;
; 1801 : 
; 1802 :             pfile_in_zip_read_info->bstream.next_in        = (char*)pfile_in_zip_read_info->stream.next_in;
; 1803 :             pfile_in_zip_read_info->bstream.avail_in       = pfile_in_zip_read_info->stream.avail_in;
; 1804 :             pfile_in_zip_read_info->bstream.total_in_lo32  = pfile_in_zip_read_info->stream.total_in;
; 1805 :             pfile_in_zip_read_info->bstream.total_in_hi32  = 0;
; 1806 :             pfile_in_zip_read_info->bstream.next_out       = (char*)pfile_in_zip_read_info->stream.next_out;
; 1807 :             pfile_in_zip_read_info->bstream.avail_out      = pfile_in_zip_read_info->stream.avail_out;
; 1808 :             pfile_in_zip_read_info->bstream.total_out_lo32 = pfile_in_zip_read_info->stream.total_out;
; 1809 :             pfile_in_zip_read_info->bstream.total_out_hi32 = 0;
; 1810 : 
; 1811 :             uTotalOutBefore = pfile_in_zip_read_info->bstream.total_out_lo32;
; 1812 :             bufBefore = (const Bytef *)pfile_in_zip_read_info->bstream.next_out;
; 1813 : 
; 1814 :             err=BZ2_bzDecompress(&pfile_in_zip_read_info->bstream);
; 1815 : 
; 1816 :             uTotalOutAfter = pfile_in_zip_read_info->bstream.total_out_lo32;
; 1817 :             uOutThis = uTotalOutAfter-uTotalOutBefore;
; 1818 : 
; 1819 :             pfile_in_zip_read_info->total_out_64 = pfile_in_zip_read_info->total_out_64 + uOutThis;
; 1820 : 
; 1821 :             pfile_in_zip_read_info->crc32 = crc32(pfile_in_zip_read_info->crc32,bufBefore, (uInt)(uOutThis));
; 1822 :             pfile_in_zip_read_info->rest_read_uncompressed -= uOutThis;
; 1823 :             iRead += (uInt)(uTotalOutAfter - uTotalOutBefore);
; 1824 : 
; 1825 :             pfile_in_zip_read_info->stream.next_in   = (Bytef*)pfile_in_zip_read_info->bstream.next_in;
; 1826 :             pfile_in_zip_read_info->stream.avail_in  = pfile_in_zip_read_info->bstream.avail_in;
; 1827 :             pfile_in_zip_read_info->stream.total_in  = pfile_in_zip_read_info->bstream.total_in_lo32;
; 1828 :             pfile_in_zip_read_info->stream.next_out  = (Bytef*)pfile_in_zip_read_info->bstream.next_out;
; 1829 :             pfile_in_zip_read_info->stream.avail_out = pfile_in_zip_read_info->bstream.avail_out;
; 1830 :             pfile_in_zip_read_info->stream.total_out = pfile_in_zip_read_info->bstream.total_out_lo32;
; 1831 : 
; 1832 :             if (err==BZ_STREAM_END)
; 1833 :               return (iRead==0) ? UNZ_EOF : iRead;
; 1834 :             if (err!=BZ_OK)
; 1835 :               break;
; 1836 : #endif
; 1837 :         } // end Z_BZIP2ED

  00457	e9 26 01 00 00	 jmp	 $LN25@unzReadCur
$LN24@unzReadCur:

; 1838 :         else
; 1839 :         {
; 1840 :             ZPOS64_T uTotalOutBefore,uTotalOutAfter;
; 1841 :             const Bytef *bufBefore;
; 1842 :             ZPOS64_T uOutThis;
; 1843 :             int flush=Z_SYNC_FLUSH;

  0045c	c7 44 24 68 02
	00 00 00	 mov	 DWORD PTR flush$8[rsp], 2

; 1844 : 
; 1845 :             uTotalOutBefore = pfile_in_zip_read_info->stream.total_out;

  00464	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00469	8b 40 24	 mov	 eax, DWORD PTR [rax+36]
  0046c	48 89 44 24 48	 mov	 QWORD PTR uTotalOutBefore$4[rsp], rax

; 1846 :             bufBefore = pfile_in_zip_read_info->stream.next_out;

  00471	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00476	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0047a	48 89 44 24 58	 mov	 QWORD PTR bufBefore$6[rsp], rax

; 1847 : 
; 1848 :             /*
; 1849 :             if ((pfile_in_zip_read_info->rest_read_uncompressed ==
; 1850 :                      pfile_in_zip_read_info->stream.avail_out) &&
; 1851 :                 (pfile_in_zip_read_info->rest_read_compressed == 0))
; 1852 :                 flush = Z_FINISH;
; 1853 :             */
; 1854 :             err=inflate(&pfile_in_zip_read_info->stream,flush);

  0047f	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00484	48 83 c0 08	 add	 rax, 8
  00488	8b 54 24 68	 mov	 edx, DWORD PTR flush$8[rsp]
  0048c	48 8b c8	 mov	 rcx, rax
  0048f	e8 00 00 00 00	 call	 inflate
  00494	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax

; 1855 : 
; 1856 :             if ((err>=0) && (pfile_in_zip_read_info->stream.msg!=NULL))

  00498	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  0049d	7c 14		 jl	 SHORT $LN26@unzReadCur
  0049f	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  004a4	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  004a9	74 08		 je	 SHORT $LN26@unzReadCur

; 1857 :               err = Z_DATA_ERROR;

  004ab	c7 44 24 20 fd
	ff ff ff	 mov	 DWORD PTR err$[rsp], -3
$LN26@unzReadCur:

; 1858 : 
; 1859 :             uTotalOutAfter = pfile_in_zip_read_info->stream.total_out;

  004b3	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  004b8	8b 40 24	 mov	 eax, DWORD PTR [rax+36]
  004bb	48 89 44 24 50	 mov	 QWORD PTR uTotalOutAfter$5[rsp], rax

; 1860 :             uOutThis = uTotalOutAfter-uTotalOutBefore;

  004c0	48 8b 44 24 48	 mov	 rax, QWORD PTR uTotalOutBefore$4[rsp]
  004c5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR uTotalOutAfter$5[rsp]
  004ca	48 2b c8	 sub	 rcx, rax
  004cd	48 8b c1	 mov	 rax, rcx
  004d0	48 89 44 24 60	 mov	 QWORD PTR uOutThis$7[rsp], rax

; 1861 : 
; 1862 :             pfile_in_zip_read_info->total_out_64 = pfile_in_zip_read_info->total_out_64 + uOutThis;

  004d5	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  004da	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  004e1	48 03 44 24 60	 add	 rax, QWORD PTR uOutThis$7[rsp]
  004e6	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  004eb	48 89 81 88 00
	00 00		 mov	 QWORD PTR [rcx+136], rax

; 1863 : 
; 1864 :             pfile_in_zip_read_info->crc32 =

  004f2	44 8b 44 24 60	 mov	 r8d, DWORD PTR uOutThis$7[rsp]
  004f7	48 8b 54 24 58	 mov	 rdx, QWORD PTR bufBefore$6[rsp]
  004fc	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00501	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [rax+144]
  00507	e8 00 00 00 00	 call	 crc32
  0050c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00511	89 81 90 00 00
	00		 mov	 DWORD PTR [rcx+144], eax

; 1865 :                 crc32(pfile_in_zip_read_info->crc32,bufBefore,
; 1866 :                         (uInt)(uOutThis));
; 1867 : 
; 1868 :             pfile_in_zip_read_info->rest_read_uncompressed -=

  00517	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0051c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR uOutThis$7[rsp]
  00521	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00528	48 2b c1	 sub	 rax, rcx
  0052b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00530	48 89 81 a0 00
	00 00		 mov	 QWORD PTR [rcx+160], rax

; 1869 :                 uOutThis;
; 1870 : 
; 1871 :             iRead += (uInt)(uTotalOutAfter - uTotalOutBefore);

  00537	48 8b 44 24 48	 mov	 rax, QWORD PTR uTotalOutBefore$4[rsp]
  0053c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR uTotalOutAfter$5[rsp]
  00541	48 2b c8	 sub	 rcx, rax
  00544	48 8b c1	 mov	 rax, rcx
  00547	8b 4c 24 24	 mov	 ecx, DWORD PTR iRead$[rsp]
  0054b	03 c8		 add	 ecx, eax
  0054d	8b c1		 mov	 eax, ecx
  0054f	89 44 24 24	 mov	 DWORD PTR iRead$[rsp], eax

; 1872 : 
; 1873 :             if (err==Z_STREAM_END)

  00553	83 7c 24 20 01	 cmp	 DWORD PTR err$[rsp], 1
  00558	75 1f		 jne	 SHORT $LN27@unzReadCur

; 1874 :                 return (iRead==0) ? UNZ_EOF : iRead;

  0055a	83 7c 24 24 00	 cmp	 DWORD PTR iRead$[rsp], 0
  0055f	75 0a		 jne	 SHORT $LN33@unzReadCur
  00561	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR tv254[rsp], 0
  00569	eb 08		 jmp	 SHORT $LN34@unzReadCur
$LN33@unzReadCur:
  0056b	8b 44 24 24	 mov	 eax, DWORD PTR iRead$[rsp]
  0056f	89 44 24 70	 mov	 DWORD PTR tv254[rsp], eax
$LN34@unzReadCur:
  00573	8b 44 24 70	 mov	 eax, DWORD PTR tv254[rsp]
  00577	eb 1f		 jmp	 SHORT $LN1@unzReadCur
$LN27@unzReadCur:

; 1875 :             if (err!=Z_OK)

  00579	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  0057e	74 02		 je	 SHORT $LN28@unzReadCur

; 1876 :                 break;

  00580	eb 05		 jmp	 SHORT $LN3@unzReadCur
$LN28@unzReadCur:
$LN25@unzReadCur:
$LN19@unzReadCur:

; 1877 :         }
; 1878 :     }

  00582	e9 cd fb ff ff	 jmp	 $LN2@unzReadCur
$LN3@unzReadCur:

; 1879 : 
; 1880 :     if (err==Z_OK)

  00587	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  0058c	75 06		 jne	 SHORT $LN29@unzReadCur

; 1881 :         return iRead;

  0058e	8b 44 24 24	 mov	 eax, DWORD PTR iRead$[rsp]
  00592	eb 04		 jmp	 SHORT $LN1@unzReadCur
$LN29@unzReadCur:

; 1882 :     return err;

  00594	8b 44 24 20	 mov	 eax, DWORD PTR err$[rsp]
$LN1@unzReadCur:

; 1883 : }

  00598	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  0059f	5f		 pop	 rdi
  005a0	c3		 ret	 0
unzReadCurrentFile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unztell
_TEXT	SEGMENT
s$ = 32
pfile_in_zip_read_info$ = 40
file$ = 64
unztell	PROC						; COMDAT

; 1890 : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1891 :     unz64_s* s;
; 1892 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1893 :     if (file==NULL)

  0002a	48 83 7c 24 40
	00		 cmp	 QWORD PTR file$[rsp], 0
  00030	75 07		 jne	 SHORT $LN2@unztell

; 1894 :         return UNZ_PARAMERROR;

  00032	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00037	eb 32		 jmp	 SHORT $LN1@unztell
$LN2@unztell:

; 1895 :     s=(unz64_s*)file;

  00039	48 8b 44 24 40	 mov	 rax, QWORD PTR file$[rsp]
  0003e	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax

; 1896 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00043	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00048	48 8b 80 10 01
	00 00		 mov	 rax, QWORD PTR [rax+272]
  0004f	48 89 44 24 28	 mov	 QWORD PTR pfile_in_zip_read_info$[rsp], rax

; 1897 : 
; 1898 :     if (pfile_in_zip_read_info==NULL)

  00054	48 83 7c 24 28
	00		 cmp	 QWORD PTR pfile_in_zip_read_info$[rsp], 0
  0005a	75 07		 jne	 SHORT $LN3@unztell

; 1899 :         return UNZ_PARAMERROR;

  0005c	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00061	eb 08		 jmp	 SHORT $LN1@unztell
$LN3@unztell:

; 1900 : 
; 1901 :     return (z_off_t)pfile_in_zip_read_info->stream.total_out;

  00063	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00068	8b 40 24	 mov	 eax, DWORD PTR [rax+36]
$LN1@unztell:

; 1902 : }

  0006b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0006f	5f		 pop	 rdi
  00070	c3		 ret	 0
unztell	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unztell64
_TEXT	SEGMENT
s$ = 32
pfile_in_zip_read_info$ = 40
file$ = 64
unztell64 PROC						; COMDAT

; 1905 : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1906 : 
; 1907 :     unz64_s* s;
; 1908 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1909 :     if (file==NULL)

  0002a	48 83 7c 24 40
	00		 cmp	 QWORD PTR file$[rsp], 0
  00030	75 09		 jne	 SHORT $LN2@unztell64

; 1910 :         return (ZPOS64_T)-1;

  00032	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  00039	eb 38		 jmp	 SHORT $LN1@unztell64
$LN2@unztell64:

; 1911 :     s=(unz64_s*)file;

  0003b	48 8b 44 24 40	 mov	 rax, QWORD PTR file$[rsp]
  00040	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax

; 1912 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00045	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0004a	48 8b 80 10 01
	00 00		 mov	 rax, QWORD PTR [rax+272]
  00051	48 89 44 24 28	 mov	 QWORD PTR pfile_in_zip_read_info$[rsp], rax

; 1913 : 
; 1914 :     if (pfile_in_zip_read_info==NULL)

  00056	48 83 7c 24 28
	00		 cmp	 QWORD PTR pfile_in_zip_read_info$[rsp], 0
  0005c	75 09		 jne	 SHORT $LN3@unztell64

; 1915 :         return (ZPOS64_T)-1;

  0005e	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  00065	eb 0c		 jmp	 SHORT $LN1@unztell64
$LN3@unztell64:

; 1916 : 
; 1917 :     return pfile_in_zip_read_info->total_out_64;

  00067	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0006c	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
$LN1@unztell64:

; 1918 : }

  00073	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00077	5f		 pop	 rdi
  00078	c3		 ret	 0
unztell64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unzeof
_TEXT	SEGMENT
s$ = 32
pfile_in_zip_read_info$ = 40
file$ = 64
unzeof	PROC						; COMDAT

; 1925 : {

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1926 :     unz64_s* s;
; 1927 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1928 :     if (file==NULL)

  0002a	48 83 7c 24 40
	00		 cmp	 QWORD PTR file$[rsp], 0
  00030	75 07		 jne	 SHORT $LN2@unzeof

; 1929 :         return UNZ_PARAMERROR;

  00032	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00037	eb 44		 jmp	 SHORT $LN1@unzeof
$LN2@unzeof:

; 1930 :     s=(unz64_s*)file;

  00039	48 8b 44 24 40	 mov	 rax, QWORD PTR file$[rsp]
  0003e	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax

; 1931 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00043	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00048	48 8b 80 10 01
	00 00		 mov	 rax, QWORD PTR [rax+272]
  0004f	48 89 44 24 28	 mov	 QWORD PTR pfile_in_zip_read_info$[rsp], rax

; 1932 : 
; 1933 :     if (pfile_in_zip_read_info==NULL)

  00054	48 83 7c 24 28
	00		 cmp	 QWORD PTR pfile_in_zip_read_info$[rsp], 0
  0005a	75 07		 jne	 SHORT $LN3@unzeof

; 1934 :         return UNZ_PARAMERROR;

  0005c	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00061	eb 1a		 jmp	 SHORT $LN1@unzeof
$LN3@unzeof:

; 1935 : 
; 1936 :     if (pfile_in_zip_read_info->rest_read_uncompressed == 0)

  00063	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00068	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00070	75 09		 jne	 SHORT $LN4@unzeof

; 1937 :         return 1;

  00072	b8 01 00 00 00	 mov	 eax, 1
  00077	eb 04		 jmp	 SHORT $LN1@unzeof
  00079	eb 02		 jmp	 SHORT $LN5@unzeof
$LN4@unzeof:

; 1938 :     else
; 1939 :         return 0;

  0007b	33 c0		 xor	 eax, eax
$LN5@unzeof:
$LN1@unzeof:

; 1940 : }

  0007d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00081	5f		 pop	 rdi
  00082	c3		 ret	 0
unzeof	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unzGetLocalExtrafield
_TEXT	SEGMENT
s$ = 32
pfile_in_zip_read_info$ = 40
read_now$ = 48
size_to_read$ = 56
file$ = 80
buf$ = 88
len$ = 96
unzGetLocalExtrafield PROC				; COMDAT

; 1957 : {

$LN12:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 10 00 00 00	 mov	 ecx, 16
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1958 :     unz64_s* s;
; 1959 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1960 :     uInt read_now;
; 1961 :     ZPOS64_T size_to_read;
; 1962 : 
; 1963 :     if (file==NULL)

  00034	48 83 7c 24 50
	00		 cmp	 QWORD PTR file$[rsp], 0
  0003a	75 0a		 jne	 SHORT $LN2@unzGetLoca

; 1964 :         return UNZ_PARAMERROR;

  0003c	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00041	e9 03 01 00 00	 jmp	 $LN1@unzGetLoca
$LN2@unzGetLoca:

; 1965 :     s=(unz64_s*)file;

  00046	48 8b 44 24 50	 mov	 rax, QWORD PTR file$[rsp]
  0004b	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax

; 1966 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00050	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00055	48 8b 80 10 01
	00 00		 mov	 rax, QWORD PTR [rax+272]
  0005c	48 89 44 24 28	 mov	 QWORD PTR pfile_in_zip_read_info$[rsp], rax

; 1967 : 
; 1968 :     if (pfile_in_zip_read_info==NULL)

  00061	48 83 7c 24 28
	00		 cmp	 QWORD PTR pfile_in_zip_read_info$[rsp], 0
  00067	75 0a		 jne	 SHORT $LN3@unzGetLoca

; 1969 :         return UNZ_PARAMERROR;

  00069	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  0006e	e9 d6 00 00 00	 jmp	 $LN1@unzGetLoca
$LN3@unzGetLoca:

; 1970 : 
; 1971 :     size_to_read = (pfile_in_zip_read_info->size_local_extrafield -

  00073	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00078	8b 40 78	 mov	 eax, DWORD PTR [rax+120]
  0007b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00080	48 2b 81 80 00
	00 00		 sub	 rax, QWORD PTR [rcx+128]
  00087	48 89 44 24 38	 mov	 QWORD PTR size_to_read$[rsp], rax

; 1972 :                 pfile_in_zip_read_info->pos_local_extrafield);
; 1973 : 
; 1974 :     if (buf==NULL)

  0008c	48 83 7c 24 58
	00		 cmp	 QWORD PTR buf$[rsp], 0
  00092	75 09		 jne	 SHORT $LN4@unzGetLoca

; 1975 :         return (int)size_to_read;

  00094	8b 44 24 38	 mov	 eax, DWORD PTR size_to_read$[rsp]
  00098	e9 ac 00 00 00	 jmp	 $LN1@unzGetLoca
$LN4@unzGetLoca:

; 1976 : 
; 1977 :     if (len>size_to_read)

  0009d	8b 44 24 60	 mov	 eax, DWORD PTR len$[rsp]
  000a1	48 3b 44 24 38	 cmp	 rax, QWORD PTR size_to_read$[rsp]
  000a6	76 0a		 jbe	 SHORT $LN5@unzGetLoca

; 1978 :         read_now = (uInt)size_to_read;

  000a8	8b 44 24 38	 mov	 eax, DWORD PTR size_to_read$[rsp]
  000ac	89 44 24 30	 mov	 DWORD PTR read_now$[rsp], eax
  000b0	eb 08		 jmp	 SHORT $LN6@unzGetLoca
$LN5@unzGetLoca:

; 1979 :     else
; 1980 :         read_now = (uInt)len ;

  000b2	8b 44 24 60	 mov	 eax, DWORD PTR len$[rsp]
  000b6	89 44 24 30	 mov	 DWORD PTR read_now$[rsp], eax
$LN6@unzGetLoca:

; 1981 : 
; 1982 :     if (read_now==0)

  000ba	83 7c 24 30 00	 cmp	 DWORD PTR read_now$[rsp], 0
  000bf	75 07		 jne	 SHORT $LN7@unzGetLoca

; 1983 :         return 0;

  000c1	33 c0		 xor	 eax, eax
  000c3	e9 81 00 00 00	 jmp	 $LN1@unzGetLoca
$LN7@unzGetLoca:

; 1984 : 
; 1985 :     if (ZSEEK64(pfile_in_zip_read_info->z_filefunc,
; 1986 :               pfile_in_zip_read_info->filestream,
; 1987 :               pfile_in_zip_read_info->offset_local_extrafield +
; 1988 :               pfile_in_zip_read_info->pos_local_extrafield,
; 1989 :               ZLIB_FILEFUNC_SEEK_SET)!=0)

  000c8	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  000cd	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000d1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  000d6	48 03 81 80 00
	00 00		 add	 rax, QWORD PTR [rcx+128]
  000dd	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  000e2	48 81 c1 a8 00
	00 00		 add	 rcx, 168		; 000000a8H
  000e9	45 33 c9	 xor	 r9d, r9d
  000ec	4c 8b c0	 mov	 r8, rax
  000ef	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  000f4	48 8b 90 00 01
	00 00		 mov	 rdx, QWORD PTR [rax+256]
  000fb	e8 00 00 00 00	 call	 call_zseek64
  00100	85 c0		 test	 eax, eax
  00102	74 07		 je	 SHORT $LN8@unzGetLoca

; 1990 :         return UNZ_ERRNO;

  00104	b8 ff ff ff ff	 mov	 eax, -1
  00109	eb 3e		 jmp	 SHORT $LN1@unzGetLoca
$LN8@unzGetLoca:

; 1991 : 
; 1992 :     if (ZREAD64(pfile_in_zip_read_info->z_filefunc,
; 1993 :               pfile_in_zip_read_info->filestream,
; 1994 :               buf,read_now)!=read_now)

  0010b	44 8b 4c 24 30	 mov	 r9d, DWORD PTR read_now$[rsp]
  00110	4c 8b 44 24 58	 mov	 r8, QWORD PTR buf$[rsp]
  00115	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0011a	48 8b 90 00 01
	00 00		 mov	 rdx, QWORD PTR [rax+256]
  00121	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00126	48 8b 88 e0 00
	00 00		 mov	 rcx, QWORD PTR [rax+224]
  0012d	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00132	ff 90 b0 00 00
	00		 call	 QWORD PTR [rax+176]
  00138	3b 44 24 30	 cmp	 eax, DWORD PTR read_now$[rsp]
  0013c	74 07		 je	 SHORT $LN9@unzGetLoca

; 1995 :         return UNZ_ERRNO;

  0013e	b8 ff ff ff ff	 mov	 eax, -1
  00143	eb 04		 jmp	 SHORT $LN1@unzGetLoca
$LN9@unzGetLoca:

; 1996 : 
; 1997 :     return (int)read_now;

  00145	8b 44 24 30	 mov	 eax, DWORD PTR read_now$[rsp]
$LN1@unzGetLoca:

; 1998 : }

  00149	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0014d	5f		 pop	 rdi
  0014e	c3		 ret	 0
unzGetLocalExtrafield ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unzCloseCurrentFile
_TEXT	SEGMENT
err$ = 32
s$ = 40
pfile_in_zip_read_info$ = 48
file$ = 80
unzCloseCurrentFile PROC				; COMDAT

; 2005 : {

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 10 00 00 00	 mov	 ecx, 16
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2006 :     int err=UNZ_OK;

  0002a	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 2007 : 
; 2008 :     unz64_s* s;
; 2009 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 2010 :     if (file==NULL)

  00032	48 83 7c 24 50
	00		 cmp	 QWORD PTR file$[rsp], 0
  00038	75 0a		 jne	 SHORT $LN2@unzCloseCu

; 2011 :         return UNZ_PARAMERROR;

  0003a	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  0003f	e9 de 00 00 00	 jmp	 $LN1@unzCloseCu
$LN2@unzCloseCu:

; 2012 :     s=(unz64_s*)file;

  00044	48 8b 44 24 50	 mov	 rax, QWORD PTR file$[rsp]
  00049	48 89 44 24 28	 mov	 QWORD PTR s$[rsp], rax

; 2013 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  0004e	48 8b 44 24 28	 mov	 rax, QWORD PTR s$[rsp]
  00053	48 8b 80 10 01
	00 00		 mov	 rax, QWORD PTR [rax+272]
  0005a	48 89 44 24 30	 mov	 QWORD PTR pfile_in_zip_read_info$[rsp], rax

; 2014 : 
; 2015 :     if (pfile_in_zip_read_info==NULL)

  0005f	48 83 7c 24 30
	00		 cmp	 QWORD PTR pfile_in_zip_read_info$[rsp], 0
  00065	75 0a		 jne	 SHORT $LN3@unzCloseCu

; 2016 :         return UNZ_PARAMERROR;

  00067	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  0006c	e9 b1 00 00 00	 jmp	 $LN1@unzCloseCu
$LN3@unzCloseCu:

; 2017 : 
; 2018 : 
; 2019 :     if ((pfile_in_zip_read_info->rest_read_uncompressed == 0) &&

  00071	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00076	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  0007e	75 2e		 jne	 SHORT $LN4@unzCloseCu
  00080	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00085	83 b8 18 01 00
	00 00		 cmp	 DWORD PTR [rax+280], 0
  0008c	75 20		 jne	 SHORT $LN4@unzCloseCu

; 2020 :         (!pfile_in_zip_read_info->raw))
; 2021 :     {
; 2022 :         if (pfile_in_zip_read_info->crc32 != pfile_in_zip_read_info->crc32_wait)

  0008e	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00098	8b 89 94 00 00
	00		 mov	 ecx, DWORD PTR [rcx+148]
  0009e	39 88 90 00 00
	00		 cmp	 DWORD PTR [rax+144], ecx
  000a4	74 08		 je	 SHORT $LN5@unzCloseCu

; 2023 :             err=UNZ_CRCERROR;

  000a6	c7 44 24 20 97
	ff ff ff	 mov	 DWORD PTR err$[rsp], -105 ; ffffffffffffff97H
$LN5@unzCloseCu:
$LN4@unzCloseCu:

; 2024 :     }
; 2025 : 
; 2026 : 
; 2027 :     TRYFREE(pfile_in_zip_read_info->read_buffer);

  000ae	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  000b3	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000b7	74 0e		 je	 SHORT $LN6@unzCloseCu
  000b9	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  000be	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN6@unzCloseCu:

; 2028 :     pfile_in_zip_read_info->read_buffer = NULL;

  000c7	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  000cc	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 2029 :     if (pfile_in_zip_read_info->stream_initialised == Z_DEFLATED)

  000d3	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  000d8	83 78 68 08	 cmp	 DWORD PTR [rax+104], 8
  000dc	75 11		 jne	 SHORT $LN7@unzCloseCu

; 2030 :         inflateEnd(&pfile_in_zip_read_info->stream);

  000de	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  000e3	48 83 c0 08	 add	 rax, 8
  000e7	48 8b c8	 mov	 rcx, rax
  000ea	e8 00 00 00 00	 call	 inflateEnd
$LN7@unzCloseCu:

; 2031 : #ifdef HAVE_BZIP2
; 2032 :     else if (pfile_in_zip_read_info->stream_initialised == Z_BZIP2ED)
; 2033 :         BZ2_bzDecompressEnd(&pfile_in_zip_read_info->bstream);
; 2034 : #endif
; 2035 : 
; 2036 : 
; 2037 :     pfile_in_zip_read_info->stream_initialised = 0;

  000ef	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  000f4	c7 40 68 00 00
	00 00		 mov	 DWORD PTR [rax+104], 0

; 2038 :     TRYFREE(pfile_in_zip_read_info);

  000fb	48 83 7c 24 30
	00		 cmp	 QWORD PTR pfile_in_zip_read_info$[rsp], 0
  00101	74 0b		 je	 SHORT $LN8@unzCloseCu
  00103	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00108	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN8@unzCloseCu:

; 2039 : 
; 2040 :     s->pfile_in_zip_read=NULL;

  0010e	48 8b 44 24 28	 mov	 rax, QWORD PTR s$[rsp]
  00113	48 c7 80 10 01
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+272], 0

; 2041 : 
; 2042 :     return err;

  0011e	8b 44 24 20	 mov	 eax, DWORD PTR err$[rsp]
$LN1@unzCloseCu:

; 2043 : }

  00122	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00126	5f		 pop	 rdi
  00127	c3		 ret	 0
unzCloseCurrentFile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT unzGetGlobalComment
_TEXT	SEGMENT
s$ = 32
uReadThis$ = 40
file$ = 64
szComment$ = 72
uSizeBuf$ = 80
unzGetGlobalComment PROC				; COMDAT

; 2052 : {

$LN10:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 0c 00 00 00	 mov	 ecx, 12
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2053 :     unz64_s* s;
; 2054 :     uLong uReadThis ;
; 2055 :     if (file==NULL)

  00034	48 83 7c 24 40
	00		 cmp	 QWORD PTR file$[rsp], 0
  0003a	75 0a		 jne	 SHORT $LN2@unzGetGlob

; 2056 :         return (int)UNZ_PARAMERROR;

  0003c	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00041	e9 ce 00 00 00	 jmp	 $LN1@unzGetGlob
$LN2@unzGetGlob:

; 2057 :     s=(unz64_s*)file;

  00046	48 8b 44 24 40	 mov	 rax, QWORD PTR file$[rsp]
  0004b	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax

; 2058 : 
; 2059 :     uReadThis = uSizeBuf;

  00050	8b 44 24 50	 mov	 eax, DWORD PTR uSizeBuf$[rsp]
  00054	89 44 24 28	 mov	 DWORD PTR uReadThis$[rsp], eax

; 2060 :     if (uReadThis>s->gi.size_comment)

  00058	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0005d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00060	39 44 24 28	 cmp	 DWORD PTR uReadThis$[rsp], eax
  00064	76 0c		 jbe	 SHORT $LN3@unzGetGlob

; 2061 :         uReadThis = s->gi.size_comment;

  00066	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0006b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0006e	89 44 24 28	 mov	 DWORD PTR uReadThis$[rsp], eax
$LN3@unzGetGlob:

; 2062 : 
; 2063 :     if (ZSEEK64(s->z_filefunc,s->filestream,s->central_pos+22,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00072	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00077	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  0007e	48 83 c0 16	 add	 rax, 22
  00082	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00087	45 33 c9	 xor	 r9d, r9d
  0008a	4c 8b c0	 mov	 r8, rax
  0008d	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00092	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  00096	e8 00 00 00 00	 call	 call_zseek64
  0009b	85 c0		 test	 eax, eax
  0009d	74 07		 je	 SHORT $LN4@unzGetGlob

; 2064 :         return UNZ_ERRNO;

  0009f	b8 ff ff ff ff	 mov	 eax, -1
  000a4	eb 6e		 jmp	 SHORT $LN1@unzGetGlob
$LN4@unzGetGlob:

; 2065 : 
; 2066 :     if (uReadThis>0)

  000a6	83 7c 24 28 00	 cmp	 DWORD PTR uReadThis$[rsp], 0
  000ab	76 3c		 jbe	 SHORT $LN5@unzGetGlob

; 2067 :     {
; 2068 :       *szComment='\0';

  000ad	0f ae e8	 lfence
  000b0	48 8b 44 24 48	 mov	 rax, QWORD PTR szComment$[rsp]
  000b5	c6 00 00	 mov	 BYTE PTR [rax], 0

; 2069 :       if (ZREAD64(s->z_filefunc,s->filestream,szComment,uReadThis)!=uReadThis)

  000b8	44 8b 4c 24 28	 mov	 r9d, DWORD PTR uReadThis$[rsp]
  000bd	4c 8b 44 24 48	 mov	 r8, QWORD PTR szComment$[rsp]
  000c2	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000c7	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  000cb	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000d0	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  000d4	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000d9	ff 50 08	 call	 QWORD PTR [rax+8]
  000dc	3b 44 24 28	 cmp	 eax, DWORD PTR uReadThis$[rsp]
  000e0	74 07		 je	 SHORT $LN6@unzGetGlob

; 2070 :         return UNZ_ERRNO;

  000e2	b8 ff ff ff ff	 mov	 eax, -1
  000e7	eb 2b		 jmp	 SHORT $LN1@unzGetGlob
$LN6@unzGetGlob:
$LN5@unzGetGlob:

; 2071 :     }
; 2072 : 
; 2073 :     if ((szComment != NULL) && (uSizeBuf > s->gi.size_comment))

  000e9	48 83 7c 24 48
	00		 cmp	 QWORD PTR szComment$[rsp], 0
  000ef	74 1f		 je	 SHORT $LN7@unzGetGlob
  000f1	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000f6	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000f9	39 44 24 50	 cmp	 DWORD PTR uSizeBuf$[rsp], eax
  000fd	76 11		 jbe	 SHORT $LN7@unzGetGlob

; 2074 :         *(szComment+s->gi.size_comment)='\0';

  000ff	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00104	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR szComment$[rsp]
  0010c	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0
$LN7@unzGetGlob:

; 2075 :     return (int)uReadThis;

  00110	8b 44 24 28	 mov	 eax, DWORD PTR uReadThis$[rsp]
$LN1@unzGetGlob:

; 2076 : }

  00114	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00118	5f		 pop	 rdi
  00119	c3		 ret	 0
unzGetGlobalComment ENDP
_TEXT	ENDS
END

; Listing generated by Microsoft (R) Optimizing Compiler Version 19.20.27525.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_03HMFOOINA@r?$CLb@			; `string'
PUBLIC	??_C@_02GMLFBBN@wb@				; `string'
EXTRN	__imp__fseeki64:PROC
EXTRN	__imp_fread:PROC
EXTRN	__imp__ftelli64:PROC
EXTRN	__imp_fwrite:PROC
EXTRN	__imp_fseek:PROC
EXTRN	__imp_fclose:PROC
EXTRN	__imp_fopen:PROC
EXTRN	__imp_ferror:PROC
EXTRN	__imp_ftell:PROC
;	COMDAT ??_C@_02GMLFBBN@wb@
CONST	SEGMENT
??_C@_02GMLFBBN@wb@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03HMFOOINA@r?$CLb@
CONST	SEGMENT
??_C@_03HMFOOINA@r?$CLb@ DB 'r+b', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
__DB664BEB_corecrt_stdio_config@h DB 01H
__E28BBA23_corecrt_wstdio@h DB 01H
__4A1C29A8_stdio@h DB 01H
__95347B96_ctype@h DB 01H
__149DB6BE_basetsd@h DB 01H
__9CFFAB73_corecrt_memcpy_s@h DB 01H
__55B7CB8D_corecrt_wstring@h DB 01H
__2F7506B6_string@h DB 01H
__5BA8817F_winnt@h DB 01H
__8421AFE7_processthreadsapi@h DB 01H
__F192E00B_memoryapi@h DB 01H
__0DF854E2_winerror@h DB 01H
__940BF1C4_winbase@h DB 01H
__78A3E64A_stralign@h DB 01H
__925E5E46_ioapi@c DB 01H
PUBLIC	fill_fopen64_filefunc
PUBLIC	fill_zlib_filefunc64_32_def_from_filefunc32
PUBLIC	call_ztell64
PUBLIC	call_zseek64
PUBLIC	call_zopen64
;	COMDAT pdata
pdata	SEGMENT
$pdata$fill_fopen64_filefunc DD imagerel $LN3
	DD	imagerel $LN3+172
	DD	imagerel $unwind$fill_fopen64_filefunc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ferror_file_func DD imagerel ferror_file_func
	DD	imagerel ferror_file_func+72
	DD	imagerel $unwind$ferror_file_func
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fclose_file_func DD imagerel fclose_file_func
	DD	imagerel fclose_file_func+72
	DD	imagerel $unwind$fclose_file_func
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fseek64_file_func DD imagerel fseek64_file_func
	DD	imagerel fseek64_file_func+184
	DD	imagerel $unwind$fseek64_file_func
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fseek_file_func DD imagerel fseek_file_func
	DD	imagerel fseek_file_func+183
	DD	imagerel $unwind$fseek_file_func
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ftell64_file_func DD imagerel ftell64_file_func
	DD	imagerel ftell64_file_func+74
	DD	imagerel $unwind$ftell64_file_func
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ftell_file_func DD imagerel ftell_file_func
	DD	imagerel ftell_file_func+72
	DD	imagerel $unwind$ftell_file_func
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fwrite_file_func DD imagerel fwrite_file_func
	DD	imagerel fwrite_file_func+99
	DD	imagerel $unwind$fwrite_file_func
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fread_file_func DD imagerel fread_file_func
	DD	imagerel fread_file_func+99
	DD	imagerel $unwind$fread_file_func
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fopen64_file_func DD imagerel fopen64_file_func
	DD	imagerel fopen64_file_func+192
	DD	imagerel $unwind$fopen64_file_func
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fopen_file_func DD imagerel fopen_file_func
	DD	imagerel fopen_file_func+192
	DD	imagerel $unwind$fopen_file_func
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fill_zlib_filefunc64_32_def_from_filefunc32 DD imagerel $LN3
	DD	imagerel $LN3+252
	DD	imagerel $unwind$fill_zlib_filefunc64_32_def_from_filefunc32
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$call_ztell64 DD imagerel $LN9
	DD	imagerel $LN9+139
	DD	imagerel $unwind$call_ztell64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$call_zseek64 DD imagerel $LN9
	DD	imagerel $LN9+171
	DD	imagerel $unwind$call_zseek64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$call_zopen64 DD imagerel $LN7
	DD	imagerel $LN7+126
	DD	imagerel $unwind$call_zopen64
;	COMDAT xdata
xdata	SEGMENT
$unwind$call_zopen64 DD 022801H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$call_zseek64 DD 022d01H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$call_ztell64 DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fill_zlib_filefunc64_32_def_from_filefunc32 DD 022301H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fopen_file_func DD 022801H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fopen64_file_func DD 022801H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fread_file_func DD 022d01H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fwrite_file_func DD 022d01H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ftell_file_func DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ftell64_file_func DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fseek_file_func DD 022d01H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fseek64_file_func DD 022d01H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fclose_file_func DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ferror_file_func DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fill_fopen64_filefunc DD 021e01H
	DD	07006320aH
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\ioapi.c
;	COMDAT call_zopen64
_TEXT	SEGMENT
pfilefunc$ = 48
filename$ = 56
mode$ = 64
call_zopen64 PROC					; COMDAT

; 32   : {

$LN7:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 33   :     if (pfilefunc->zfile_func64.zopen64_file != NULL)

  00034	48 8b 44 24 30	 mov	 rax, QWORD PTR pfilefunc$[rsp]
  00039	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0003d	74 1e		 je	 SHORT $LN2@call_zopen

; 34   :         return (*(pfilefunc->zfile_func64.zopen64_file)) (pfilefunc->zfile_func64.opaque,filename,mode);

  0003f	44 8b 44 24 40	 mov	 r8d, DWORD PTR mode$[rsp]
  00044	48 8b 54 24 38	 mov	 rdx, QWORD PTR filename$[rsp]
  00049	48 8b 44 24 30	 mov	 rax, QWORD PTR pfilefunc$[rsp]
  0004e	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  00052	48 8b 44 24 30	 mov	 rax, QWORD PTR pfilefunc$[rsp]
  00057	ff 10		 call	 QWORD PTR [rax]
  00059	eb 1d		 jmp	 SHORT $LN1@call_zopen
  0005b	eb 1b		 jmp	 SHORT $LN3@call_zopen
$LN2@call_zopen:

; 35   :     else
; 36   :     {
; 37   :         return (*(pfilefunc->zopen32_file))(pfilefunc->zfile_func64.opaque,(const char*)filename,mode);

  0005d	44 8b 44 24 40	 mov	 r8d, DWORD PTR mode$[rsp]
  00062	48 8b 54 24 38	 mov	 rdx, QWORD PTR filename$[rsp]
  00067	48 8b 44 24 30	 mov	 rax, QWORD PTR pfilefunc$[rsp]
  0006c	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  00070	48 8b 44 24 30	 mov	 rax, QWORD PTR pfilefunc$[rsp]
  00075	ff 50 40	 call	 QWORD PTR [rax+64]
$LN3@call_zopen:
$LN1@call_zopen:

; 38   :     }
; 39   : }

  00078	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007c	5f		 pop	 rdi
  0007d	c3		 ret	 0
call_zopen64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\ioapi.c
;	COMDAT call_zseek64
_TEXT	SEGMENT
offsetTruncated$1 = 32
pfilefunc$ = 64
filestream$ = 72
offset$ = 80
origin$ = 88
call_zseek64 PROC					; COMDAT

; 42   : {

$LN9:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 0c 00 00 00	 mov	 ecx, 12
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00034	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 43   :     if (pfilefunc->zfile_func64.zseek64_file != NULL)

  00039	48 8b 44 24 40	 mov	 rax, QWORD PTR pfilefunc$[rsp]
  0003e	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  00043	74 24		 je	 SHORT $LN2@call_zseek

; 44   :         return (*(pfilefunc->zfile_func64.zseek64_file)) (pfilefunc->zfile_func64.opaque,filestream,offset,origin);

  00045	44 8b 4c 24 58	 mov	 r9d, DWORD PTR origin$[rsp]
  0004a	4c 8b 44 24 50	 mov	 r8, QWORD PTR offset$[rsp]
  0004f	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  00054	48 8b 44 24 40	 mov	 rax, QWORD PTR pfilefunc$[rsp]
  00059	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  0005d	48 8b 44 24 40	 mov	 rax, QWORD PTR pfilefunc$[rsp]
  00062	ff 50 20	 call	 QWORD PTR [rax+32]
  00065	eb 3e		 jmp	 SHORT $LN1@call_zseek
  00067	eb 3c		 jmp	 SHORT $LN3@call_zseek
$LN2@call_zseek:

; 45   :     else
; 46   :     {
; 47   :         uLong offsetTruncated = (uLong)offset;

  00069	8b 44 24 50	 mov	 eax, DWORD PTR offset$[rsp]
  0006d	89 44 24 20	 mov	 DWORD PTR offsetTruncated$1[rsp], eax

; 48   :         if (offsetTruncated != offset)

  00071	8b 44 24 20	 mov	 eax, DWORD PTR offsetTruncated$1[rsp]
  00075	48 3b 44 24 50	 cmp	 rax, QWORD PTR offset$[rsp]
  0007a	74 09		 je	 SHORT $LN4@call_zseek

; 49   :             return -1;

  0007c	b8 ff ff ff ff	 mov	 eax, -1
  00081	eb 22		 jmp	 SHORT $LN1@call_zseek
  00083	eb 20		 jmp	 SHORT $LN5@call_zseek
$LN4@call_zseek:

; 50   :         else
; 51   :             return (*(pfilefunc->zseek32_file))(pfilefunc->zfile_func64.opaque,filestream,offsetTruncated,origin);

  00085	44 8b 4c 24 58	 mov	 r9d, DWORD PTR origin$[rsp]
  0008a	44 8b 44 24 20	 mov	 r8d, DWORD PTR offsetTruncated$1[rsp]
  0008f	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  00094	48 8b 44 24 40	 mov	 rax, QWORD PTR pfilefunc$[rsp]
  00099	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  0009d	48 8b 44 24 40	 mov	 rax, QWORD PTR pfilefunc$[rsp]
  000a2	ff 50 50	 call	 QWORD PTR [rax+80]
$LN5@call_zseek:
$LN3@call_zseek:
$LN1@call_zseek:

; 52   :     }
; 53   : }

  000a5	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a9	5f		 pop	 rdi
  000aa	c3		 ret	 0
call_zseek64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\ioapi.c
;	COMDAT call_ztell64
_TEXT	SEGMENT
tell_uLong$1 = 32
pfilefunc$ = 64
filestream$ = 72
call_ztell64 PROC					; COMDAT

; 56   : {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 57   :     if (pfilefunc->zfile_func64.zseek64_file != NULL)

  0002f	48 8b 44 24 40	 mov	 rax, QWORD PTR pfilefunc$[rsp]
  00034	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  00039	74 1a		 je	 SHORT $LN2@call_ztell

; 58   :         return (*(pfilefunc->zfile_func64.ztell64_file)) (pfilefunc->zfile_func64.opaque,filestream);

  0003b	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  00040	48 8b 44 24 40	 mov	 rax, QWORD PTR pfilefunc$[rsp]
  00045	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR pfilefunc$[rsp]
  0004e	ff 50 18	 call	 QWORD PTR [rax+24]
  00051	eb 32		 jmp	 SHORT $LN1@call_ztell
  00053	eb 30		 jmp	 SHORT $LN3@call_ztell
$LN2@call_ztell:

; 59   :     else
; 60   :     {
; 61   :         uLong tell_uLong = (*(pfilefunc->ztell32_file))(pfilefunc->zfile_func64.opaque,filestream);

  00055	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  0005a	48 8b 44 24 40	 mov	 rax, QWORD PTR pfilefunc$[rsp]
  0005f	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  00063	48 8b 44 24 40	 mov	 rax, QWORD PTR pfilefunc$[rsp]
  00068	ff 50 48	 call	 QWORD PTR [rax+72]
  0006b	89 44 24 20	 mov	 DWORD PTR tell_uLong$1[rsp], eax

; 62   :         if ((tell_uLong) == MAXU32)

  0006f	83 7c 24 20 ff	 cmp	 DWORD PTR tell_uLong$1[rsp], -1 ; ffffffffH
  00074	75 0b		 jne	 SHORT $LN4@call_ztell

; 63   :             return (ZPOS64_T)-1;

  00076	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  0007d	eb 06		 jmp	 SHORT $LN1@call_ztell
  0007f	eb 04		 jmp	 SHORT $LN5@call_ztell
$LN4@call_ztell:

; 64   :         else
; 65   :             return tell_uLong;

  00081	8b 44 24 20	 mov	 eax, DWORD PTR tell_uLong$1[rsp]
$LN5@call_ztell:
$LN3@call_ztell:
$LN1@call_ztell:

; 66   :     }
; 67   : }

  00085	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00089	5f		 pop	 rdi
  0008a	c3		 ret	 0
call_ztell64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\ioapi.c
;	COMDAT fill_zlib_filefunc64_32_def_from_filefunc32
_TEXT	SEGMENT
p_filefunc64_32$ = 48
p_filefunc32$ = 56
fill_zlib_filefunc64_32_def_from_filefunc32 PROC	; COMDAT

; 70   : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 71   :     p_filefunc64_32->zfile_func64.zopen64_file = NULL;

  0002f	48 8b 44 24 30	 mov	 rax, QWORD PTR p_filefunc64_32$[rsp]
  00034	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 72   :     p_filefunc64_32->zopen32_file = p_filefunc32->zopen_file;

  0003b	48 8b 44 24 30	 mov	 rax, QWORD PTR p_filefunc64_32$[rsp]
  00040	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p_filefunc32$[rsp]
  00045	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00048	48 89 48 40	 mov	 QWORD PTR [rax+64], rcx

; 73   :     p_filefunc64_32->zfile_func64.zerror_file = p_filefunc32->zerror_file;

  0004c	48 8b 44 24 30	 mov	 rax, QWORD PTR p_filefunc64_32$[rsp]
  00051	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p_filefunc32$[rsp]
  00056	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  0005a	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx

; 74   :     p_filefunc64_32->zfile_func64.zread_file = p_filefunc32->zread_file;

  0005e	48 8b 44 24 30	 mov	 rax, QWORD PTR p_filefunc64_32$[rsp]
  00063	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p_filefunc32$[rsp]
  00068	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0006c	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 75   :     p_filefunc64_32->zfile_func64.zwrite_file = p_filefunc32->zwrite_file;

  00070	48 8b 44 24 30	 mov	 rax, QWORD PTR p_filefunc64_32$[rsp]
  00075	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p_filefunc32$[rsp]
  0007a	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0007e	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 76   :     p_filefunc64_32->zfile_func64.ztell64_file = NULL;

  00082	48 8b 44 24 30	 mov	 rax, QWORD PTR p_filefunc64_32$[rsp]
  00087	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 77   :     p_filefunc64_32->zfile_func64.zseek64_file = NULL;

  0008f	48 8b 44 24 30	 mov	 rax, QWORD PTR p_filefunc64_32$[rsp]
  00094	48 c7 40 20 00
	00 00 00	 mov	 QWORD PTR [rax+32], 0

; 78   :     p_filefunc64_32->zfile_func64.zclose_file = p_filefunc32->zclose_file;

  0009c	48 8b 44 24 30	 mov	 rax, QWORD PTR p_filefunc64_32$[rsp]
  000a1	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p_filefunc32$[rsp]
  000a6	48 8b 49 28	 mov	 rcx, QWORD PTR [rcx+40]
  000aa	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 79   :     p_filefunc64_32->zfile_func64.zerror_file = p_filefunc32->zerror_file;

  000ae	48 8b 44 24 30	 mov	 rax, QWORD PTR p_filefunc64_32$[rsp]
  000b3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p_filefunc32$[rsp]
  000b8	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  000bc	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx

; 80   :     p_filefunc64_32->zfile_func64.opaque = p_filefunc32->opaque;

  000c0	48 8b 44 24 30	 mov	 rax, QWORD PTR p_filefunc64_32$[rsp]
  000c5	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p_filefunc32$[rsp]
  000ca	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  000ce	48 89 48 38	 mov	 QWORD PTR [rax+56], rcx

; 81   :     p_filefunc64_32->zseek32_file = p_filefunc32->zseek_file;

  000d2	48 8b 44 24 30	 mov	 rax, QWORD PTR p_filefunc64_32$[rsp]
  000d7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p_filefunc32$[rsp]
  000dc	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  000e0	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx

; 82   :     p_filefunc64_32->ztell32_file = p_filefunc32->ztell_file;

  000e4	48 8b 44 24 30	 mov	 rax, QWORD PTR p_filefunc64_32$[rsp]
  000e9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p_filefunc32$[rsp]
  000ee	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  000f2	48 89 48 48	 mov	 QWORD PTR [rax+72], rcx

; 83   : }

  000f6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000fa	5f		 pop	 rdi
  000fb	c3		 ret	 0
fill_zlib_filefunc64_32_def_from_filefunc32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\ioapi.c
;	COMDAT fopen_file_func
_TEXT	SEGMENT
file$ = 32
mode_fopen$ = 40
opaque$ = 64
filename$ = 72
mode$ = 80
fopen_file_func PROC					; COMDAT

; 96   : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 0c 00 00 00	 mov	 ecx, 12
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 97   :     FILE* file = NULL;

  00034	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR file$[rsp], 0

; 98   :     const char* mode_fopen = NULL;

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR mode_fopen$[rsp], 0

; 99   :     if ((mode & ZLIB_FILEFUNC_MODE_READWRITEFILTER)==ZLIB_FILEFUNC_MODE_READ)

  00046	8b 44 24 50	 mov	 eax, DWORD PTR mode$[rsp]
  0004a	83 e0 03	 and	 eax, 3
  0004d	83 f8 01	 cmp	 eax, 1
  00050	75 0e		 jne	 SHORT $LN2@fopen_file

; 100  :         mode_fopen = "rb";

  00052	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02JDPG@rb@
  00059	48 89 44 24 28	 mov	 QWORD PTR mode_fopen$[rsp], rax
  0005e	eb 30		 jmp	 SHORT $LN3@fopen_file
$LN2@fopen_file:

; 101  :     else
; 102  :     if (mode & ZLIB_FILEFUNC_MODE_EXISTING)

  00060	8b 44 24 50	 mov	 eax, DWORD PTR mode$[rsp]
  00064	83 e0 04	 and	 eax, 4
  00067	85 c0		 test	 eax, eax
  00069	74 0e		 je	 SHORT $LN4@fopen_file

; 103  :         mode_fopen = "r+b";

  0006b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_03HMFOOINA@r?$CLb@
  00072	48 89 44 24 28	 mov	 QWORD PTR mode_fopen$[rsp], rax
  00077	eb 17		 jmp	 SHORT $LN5@fopen_file
$LN4@fopen_file:

; 104  :     else
; 105  :     if (mode & ZLIB_FILEFUNC_MODE_CREATE)

  00079	8b 44 24 50	 mov	 eax, DWORD PTR mode$[rsp]
  0007d	83 e0 08	 and	 eax, 8
  00080	85 c0		 test	 eax, eax
  00082	74 0c		 je	 SHORT $LN6@fopen_file

; 106  :         mode_fopen = "wb";

  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02GMLFBBN@wb@
  0008b	48 89 44 24 28	 mov	 QWORD PTR mode_fopen$[rsp], rax
$LN6@fopen_file:
$LN5@fopen_file:
$LN3@fopen_file:

; 107  : 
; 108  :     if ((filename!=NULL) && (mode_fopen != NULL))

  00090	48 83 7c 24 48
	00		 cmp	 QWORD PTR filename$[rsp], 0
  00096	74 1d		 je	 SHORT $LN7@fopen_file
  00098	48 83 7c 24 28
	00		 cmp	 QWORD PTR mode_fopen$[rsp], 0
  0009e	74 15		 je	 SHORT $LN7@fopen_file

; 109  :         file = fopen(filename, mode_fopen);

  000a0	48 8b 54 24 28	 mov	 rdx, QWORD PTR mode_fopen$[rsp]
  000a5	48 8b 4c 24 48	 mov	 rcx, QWORD PTR filename$[rsp]
  000aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fopen
  000b0	48 89 44 24 20	 mov	 QWORD PTR file$[rsp], rax
$LN7@fopen_file:

; 110  :     return file;

  000b5	48 8b 44 24 20	 mov	 rax, QWORD PTR file$[rsp]

; 111  : }

  000ba	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000be	5f		 pop	 rdi
  000bf	c3		 ret	 0
fopen_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\ioapi.c
;	COMDAT fopen64_file_func
_TEXT	SEGMENT
file$ = 32
mode_fopen$ = 40
opaque$ = 64
filename$ = 72
mode$ = 80
fopen64_file_func PROC					; COMDAT

; 114  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 0c 00 00 00	 mov	 ecx, 12
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 115  :     FILE* file = NULL;

  00034	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR file$[rsp], 0

; 116  :     const char* mode_fopen = NULL;

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR mode_fopen$[rsp], 0

; 117  :     if ((mode & ZLIB_FILEFUNC_MODE_READWRITEFILTER)==ZLIB_FILEFUNC_MODE_READ)

  00046	8b 44 24 50	 mov	 eax, DWORD PTR mode$[rsp]
  0004a	83 e0 03	 and	 eax, 3
  0004d	83 f8 01	 cmp	 eax, 1
  00050	75 0e		 jne	 SHORT $LN2@fopen64_fi

; 118  :         mode_fopen = "rb";

  00052	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02JDPG@rb@
  00059	48 89 44 24 28	 mov	 QWORD PTR mode_fopen$[rsp], rax
  0005e	eb 30		 jmp	 SHORT $LN3@fopen64_fi
$LN2@fopen64_fi:

; 119  :     else
; 120  :     if (mode & ZLIB_FILEFUNC_MODE_EXISTING)

  00060	8b 44 24 50	 mov	 eax, DWORD PTR mode$[rsp]
  00064	83 e0 04	 and	 eax, 4
  00067	85 c0		 test	 eax, eax
  00069	74 0e		 je	 SHORT $LN4@fopen64_fi

; 121  :         mode_fopen = "r+b";

  0006b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_03HMFOOINA@r?$CLb@
  00072	48 89 44 24 28	 mov	 QWORD PTR mode_fopen$[rsp], rax
  00077	eb 17		 jmp	 SHORT $LN5@fopen64_fi
$LN4@fopen64_fi:

; 122  :     else
; 123  :     if (mode & ZLIB_FILEFUNC_MODE_CREATE)

  00079	8b 44 24 50	 mov	 eax, DWORD PTR mode$[rsp]
  0007d	83 e0 08	 and	 eax, 8
  00080	85 c0		 test	 eax, eax
  00082	74 0c		 je	 SHORT $LN6@fopen64_fi

; 124  :         mode_fopen = "wb";

  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02GMLFBBN@wb@
  0008b	48 89 44 24 28	 mov	 QWORD PTR mode_fopen$[rsp], rax
$LN6@fopen64_fi:
$LN5@fopen64_fi:
$LN3@fopen64_fi:

; 125  : 
; 126  :     if ((filename!=NULL) && (mode_fopen != NULL))

  00090	48 83 7c 24 48
	00		 cmp	 QWORD PTR filename$[rsp], 0
  00096	74 1d		 je	 SHORT $LN7@fopen64_fi
  00098	48 83 7c 24 28
	00		 cmp	 QWORD PTR mode_fopen$[rsp], 0
  0009e	74 15		 je	 SHORT $LN7@fopen64_fi

; 127  :         file = FOPEN_FUNC((const char*)filename, mode_fopen);

  000a0	48 8b 54 24 28	 mov	 rdx, QWORD PTR mode_fopen$[rsp]
  000a5	48 8b 4c 24 48	 mov	 rcx, QWORD PTR filename$[rsp]
  000aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fopen
  000b0	48 89 44 24 20	 mov	 QWORD PTR file$[rsp], rax
$LN7@fopen64_fi:

; 128  :     return file;

  000b5	48 8b 44 24 20	 mov	 rax, QWORD PTR file$[rsp]

; 129  : }

  000ba	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000be	5f		 pop	 rdi
  000bf	c3		 ret	 0
fopen64_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\ioapi.c
;	COMDAT fread_file_func
_TEXT	SEGMENT
ret$ = 32
opaque$ = 64
stream$ = 72
buf$ = 80
size$ = 88
fread_file_func PROC					; COMDAT

; 133  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 0c 00 00 00	 mov	 ecx, 12
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00034	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 134  :     uLong ret;
; 135  :     ret = (uLong)fread(buf, 1, (size_t)size, (FILE *)stream);

  00039	8b 44 24 58	 mov	 eax, DWORD PTR size$[rsp]
  0003d	4c 8b 4c 24 48	 mov	 r9, QWORD PTR stream$[rsp]
  00042	44 8b c0	 mov	 r8d, eax
  00045	ba 01 00 00 00	 mov	 edx, 1
  0004a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR buf$[rsp]
  0004f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fread
  00055	89 44 24 20	 mov	 DWORD PTR ret$[rsp], eax

; 136  :     return ret;

  00059	8b 44 24 20	 mov	 eax, DWORD PTR ret$[rsp]

; 137  : }

  0005d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00061	5f		 pop	 rdi
  00062	c3		 ret	 0
fread_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\ioapi.c
;	COMDAT fwrite_file_func
_TEXT	SEGMENT
ret$ = 32
opaque$ = 64
stream$ = 72
buf$ = 80
size$ = 88
fwrite_file_func PROC					; COMDAT

; 140  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 0c 00 00 00	 mov	 ecx, 12
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00034	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 141  :     uLong ret;
; 142  :     ret = (uLong)fwrite(buf, 1, (size_t)size, (FILE *)stream);

  00039	8b 44 24 58	 mov	 eax, DWORD PTR size$[rsp]
  0003d	4c 8b 4c 24 48	 mov	 r9, QWORD PTR stream$[rsp]
  00042	44 8b c0	 mov	 r8d, eax
  00045	ba 01 00 00 00	 mov	 edx, 1
  0004a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR buf$[rsp]
  0004f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwrite
  00055	89 44 24 20	 mov	 DWORD PTR ret$[rsp], eax

; 143  :     return ret;

  00059	8b 44 24 20	 mov	 eax, DWORD PTR ret$[rsp]

; 144  : }

  0005d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00061	5f		 pop	 rdi
  00062	c3		 ret	 0
fwrite_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\ioapi.c
;	COMDAT ftell_file_func
_TEXT	SEGMENT
ret$ = 32
opaque$ = 64
stream$ = 72
ftell_file_func PROC					; COMDAT

; 147  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 148  :     long ret;
; 149  :     ret = ftell((FILE *)stream);

  0002f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR stream$[rsp]
  00034	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ftell
  0003a	89 44 24 20	 mov	 DWORD PTR ret$[rsp], eax

; 150  :     return ret;

  0003e	8b 44 24 20	 mov	 eax, DWORD PTR ret$[rsp]

; 151  : }

  00042	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00046	5f		 pop	 rdi
  00047	c3		 ret	 0
ftell_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\ioapi.c
;	COMDAT ftell64_file_func
_TEXT	SEGMENT
ret$ = 32
opaque$ = 64
stream$ = 72
ftell64_file_func PROC					; COMDAT

; 155  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 156  :     ZPOS64_T ret;
; 157  :     ret = FTELLO_FUNC((FILE *)stream);

  0002f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR stream$[rsp]
  00034	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__ftelli64
  0003a	48 89 44 24 20	 mov	 QWORD PTR ret$[rsp], rax

; 158  :     return ret;

  0003f	48 8b 44 24 20	 mov	 rax, QWORD PTR ret$[rsp]

; 159  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5f		 pop	 rdi
  00049	c3		 ret	 0
ftell64_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\ioapi.c
;	COMDAT fseek_file_func
_TEXT	SEGMENT
fseek_origin$ = 32
ret$ = 36
tv64 = 40
opaque$ = 64
stream$ = 72
offset$ = 80
origin$ = 88
fseek_file_func PROC					; COMDAT

; 162  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 0c 00 00 00	 mov	 ecx, 12
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00034	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 163  :     int fseek_origin=0;

  00039	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR fseek_origin$[rsp], 0

; 164  :     long ret;
; 165  :     switch (origin)

  00041	8b 44 24 58	 mov	 eax, DWORD PTR origin$[rsp]
  00045	89 44 24 28	 mov	 DWORD PTR tv64[rsp], eax
  00049	83 7c 24 28 00	 cmp	 DWORD PTR tv64[rsp], 0
  0004e	74 24		 je	 SHORT $LN6@fseek_file
  00050	83 7c 24 28 01	 cmp	 DWORD PTR tv64[rsp], 1
  00055	74 09		 je	 SHORT $LN4@fseek_file
  00057	83 7c 24 28 02	 cmp	 DWORD PTR tv64[rsp], 2
  0005c	74 0c		 je	 SHORT $LN5@fseek_file
  0005e	eb 1e		 jmp	 SHORT $LN7@fseek_file
$LN4@fseek_file:

; 166  :     {
; 167  :     case ZLIB_FILEFUNC_SEEK_CUR :
; 168  :         fseek_origin = SEEK_CUR;

  00060	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR fseek_origin$[rsp], 1

; 169  :         break;

  00068	eb 1b		 jmp	 SHORT $LN2@fseek_file
$LN5@fseek_file:

; 170  :     case ZLIB_FILEFUNC_SEEK_END :
; 171  :         fseek_origin = SEEK_END;

  0006a	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR fseek_origin$[rsp], 2

; 172  :         break;

  00072	eb 11		 jmp	 SHORT $LN2@fseek_file
$LN6@fseek_file:

; 173  :     case ZLIB_FILEFUNC_SEEK_SET :
; 174  :         fseek_origin = SEEK_SET;

  00074	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR fseek_origin$[rsp], 0

; 175  :         break;

  0007c	eb 07		 jmp	 SHORT $LN2@fseek_file
$LN7@fseek_file:

; 176  :     default: return -1;

  0007e	b8 ff ff ff ff	 mov	 eax, -1
  00083	eb 2c		 jmp	 SHORT $LN1@fseek_file
$LN2@fseek_file:

; 177  :     }
; 178  :     ret = 0;

  00085	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR ret$[rsp], 0

; 179  :     if (fseek((FILE *)stream, offset, fseek_origin) != 0)

  0008d	44 8b 44 24 20	 mov	 r8d, DWORD PTR fseek_origin$[rsp]
  00092	8b 54 24 50	 mov	 edx, DWORD PTR offset$[rsp]
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR stream$[rsp]
  0009b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fseek
  000a1	85 c0		 test	 eax, eax
  000a3	74 08		 je	 SHORT $LN8@fseek_file

; 180  :         ret = -1;

  000a5	c7 44 24 24 ff
	ff ff ff	 mov	 DWORD PTR ret$[rsp], -1
$LN8@fseek_file:

; 181  :     return ret;

  000ad	8b 44 24 24	 mov	 eax, DWORD PTR ret$[rsp]
$LN1@fseek_file:

; 182  : }

  000b1	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b5	5f		 pop	 rdi
  000b6	c3		 ret	 0
fseek_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\ioapi.c
;	COMDAT fseek64_file_func
_TEXT	SEGMENT
fseek_origin$ = 32
ret$ = 36
tv64 = 40
opaque$ = 64
stream$ = 72
offset$ = 80
origin$ = 88
fseek64_file_func PROC					; COMDAT

; 185  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 0c 00 00 00	 mov	 ecx, 12
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00034	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 186  :     int fseek_origin=0;

  00039	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR fseek_origin$[rsp], 0

; 187  :     long ret;
; 188  :     switch (origin)

  00041	8b 44 24 58	 mov	 eax, DWORD PTR origin$[rsp]
  00045	89 44 24 28	 mov	 DWORD PTR tv64[rsp], eax
  00049	83 7c 24 28 00	 cmp	 DWORD PTR tv64[rsp], 0
  0004e	74 24		 je	 SHORT $LN6@fseek64_fi
  00050	83 7c 24 28 01	 cmp	 DWORD PTR tv64[rsp], 1
  00055	74 09		 je	 SHORT $LN4@fseek64_fi
  00057	83 7c 24 28 02	 cmp	 DWORD PTR tv64[rsp], 2
  0005c	74 0c		 je	 SHORT $LN5@fseek64_fi
  0005e	eb 1e		 jmp	 SHORT $LN7@fseek64_fi
$LN4@fseek64_fi:

; 189  :     {
; 190  :     case ZLIB_FILEFUNC_SEEK_CUR :
; 191  :         fseek_origin = SEEK_CUR;

  00060	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR fseek_origin$[rsp], 1

; 192  :         break;

  00068	eb 1b		 jmp	 SHORT $LN2@fseek64_fi
$LN5@fseek64_fi:

; 193  :     case ZLIB_FILEFUNC_SEEK_END :
; 194  :         fseek_origin = SEEK_END;

  0006a	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR fseek_origin$[rsp], 2

; 195  :         break;

  00072	eb 11		 jmp	 SHORT $LN2@fseek64_fi
$LN6@fseek64_fi:

; 196  :     case ZLIB_FILEFUNC_SEEK_SET :
; 197  :         fseek_origin = SEEK_SET;

  00074	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR fseek_origin$[rsp], 0

; 198  :         break;

  0007c	eb 07		 jmp	 SHORT $LN2@fseek64_fi
$LN7@fseek64_fi:

; 199  :     default: return -1;

  0007e	b8 ff ff ff ff	 mov	 eax, -1
  00083	eb 2d		 jmp	 SHORT $LN1@fseek64_fi
$LN2@fseek64_fi:

; 200  :     }
; 201  :     ret = 0;

  00085	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR ret$[rsp], 0

; 202  : 
; 203  :     if(FSEEKO_FUNC((FILE *)stream, offset, fseek_origin) != 0)

  0008d	44 8b 44 24 20	 mov	 r8d, DWORD PTR fseek_origin$[rsp]
  00092	48 8b 54 24 50	 mov	 rdx, QWORD PTR offset$[rsp]
  00097	48 8b 4c 24 48	 mov	 rcx, QWORD PTR stream$[rsp]
  0009c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__fseeki64
  000a2	85 c0		 test	 eax, eax
  000a4	74 08		 je	 SHORT $LN8@fseek64_fi

; 204  :                         ret = -1;

  000a6	c7 44 24 24 ff
	ff ff ff	 mov	 DWORD PTR ret$[rsp], -1
$LN8@fseek64_fi:

; 205  : 
; 206  :     return ret;

  000ae	8b 44 24 24	 mov	 eax, DWORD PTR ret$[rsp]
$LN1@fseek64_fi:

; 207  : }

  000b2	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b6	5f		 pop	 rdi
  000b7	c3		 ret	 0
fseek64_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\ioapi.c
;	COMDAT fclose_file_func
_TEXT	SEGMENT
ret$ = 32
opaque$ = 64
stream$ = 72
fclose_file_func PROC					; COMDAT

; 211  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 212  :     int ret;
; 213  :     ret = fclose((FILE *)stream);

  0002f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR stream$[rsp]
  00034	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose
  0003a	89 44 24 20	 mov	 DWORD PTR ret$[rsp], eax

; 214  :     return ret;

  0003e	8b 44 24 20	 mov	 eax, DWORD PTR ret$[rsp]

; 215  : }

  00042	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00046	5f		 pop	 rdi
  00047	c3		 ret	 0
fclose_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\ioapi.c
;	COMDAT ferror_file_func
_TEXT	SEGMENT
ret$ = 32
opaque$ = 64
stream$ = 72
ferror_file_func PROC					; COMDAT

; 218  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 219  :     int ret;
; 220  :     ret = ferror((FILE *)stream);

  0002f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR stream$[rsp]
  00034	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ferror
  0003a	89 44 24 20	 mov	 DWORD PTR ret$[rsp], eax

; 221  :     return ret;

  0003e	8b 44 24 20	 mov	 eax, DWORD PTR ret$[rsp]

; 222  : }

  00042	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00046	5f		 pop	 rdi
  00047	c3		 ret	 0
ferror_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\ioapi.c
;	COMDAT fill_fopen64_filefunc
_TEXT	SEGMENT
pzlib_filefunc_def$ = 48
fill_fopen64_filefunc PROC				; COMDAT

; 238  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 239  :     pzlib_filefunc_def->zopen64_file = fopen64_file_func;

  0002a	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:fopen64_file_func
  00036	48 89 08	 mov	 QWORD PTR [rax], rcx

; 240  :     pzlib_filefunc_def->zread_file = fread_file_func;

  00039	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:fread_file_func
  00045	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 241  :     pzlib_filefunc_def->zwrite_file = fwrite_file_func;

  00049	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:fwrite_file_func
  00055	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 242  :     pzlib_filefunc_def->ztell64_file = ftell64_file_func;

  00059	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0005e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:ftell64_file_func
  00065	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 243  :     pzlib_filefunc_def->zseek64_file = fseek64_file_func;

  00069	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0006e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:fseek64_file_func
  00075	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 244  :     pzlib_filefunc_def->zclose_file = fclose_file_func;

  00079	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0007e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:fclose_file_func
  00085	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 245  :     pzlib_filefunc_def->zerror_file = ferror_file_func;

  00089	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0008e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:ferror_file_func
  00095	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx

; 246  :     pzlib_filefunc_def->opaque = NULL;

  00099	48 8b 44 24 30	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0009e	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0

; 247  : }

  000a6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000aa	5f		 pop	 rdi
  000ab	c3		 ret	 0
fill_fopen64_filefunc ENDP
_TEXT	ENDS
END

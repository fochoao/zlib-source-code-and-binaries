; Listing generated by Microsoft (R) Optimizing Compiler Version 19.20.27525.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_01JOAMLHOP@?9@				; `string'
EXTRN	__imp__time64:PROC
EXTRN	__imp_rand:PROC
EXTRN	__imp_srand:PROC
;	COMDAT ??_C@_01JOAMLHOP@?9@
CONST	SEGMENT
??_C@_01JOAMLHOP@?9@ DB '-', 00H			; `string'
__DB664BEB_corecrt_stdio_config@h DB 01H
__E28BBA23_corecrt_wstdio@h DB 01H
__4A1C29A8_stdio@h DB 01H
__9CFFAB73_corecrt_memcpy_s@h DB 01H
__55B7CB8D_corecrt_wstring@h DB 01H
__2F7506B6_string@h DB 01H
__B47A7825_corecrt_wtime@h DB 01H
__4436A688_time@h DB 01H
__95347B96_ctype@h DB 01H
__149DB6BE_basetsd@h DB 01H
__5BA8817F_winnt@h DB 01H
__8421AFE7_processthreadsapi@h DB 01H
__F192E00B_memoryapi@h DB 01H
__0DF854E2_winerror@h DB 01H
__940BF1C4_winbase@h DB 01H
__78A3E64A_stralign@h DB 01H
__5ADA25A5_crypt@h DB 01H
__D883BE7D_zip@c DB 01H
PUBLIC	zipClose
PUBLIC	Write_GlobalComment
PUBLIC	Write_EndOfCentralDirectoryRecord
PUBLIC	Write_Zip64EndOfCentralDirectoryRecord
PUBLIC	Write_Zip64EndOfCentralDirectoryLocator
PUBLIC	zipCloseFileInZip
PUBLIC	zipCloseFileInZipRaw64
PUBLIC	zipCloseFileInZipRaw
PUBLIC	zipWriteInFileInZip
PUBLIC	zipOpenNewFileInZip
PUBLIC	zipOpenNewFileInZip64
PUBLIC	zipOpenNewFileInZip2_64
PUBLIC	zipOpenNewFileInZip2
PUBLIC	zipOpenNewFileInZip3_64
PUBLIC	zipOpenNewFileInZip3
PUBLIC	zipOpenNewFileInZip4_64
PUBLIC	Write_LocalFileHeader
PUBLIC	zipOpen64
PUBLIC	zipOpen
PUBLIC	zipOpen2_64
PUBLIC	zipOpen2
PUBLIC	zipOpen3
PUBLIC	LoadCentralDirectoryRecord
?calls@?1??crypthead@@9@9 DD 01H DUP (?)		; `crypthead'::`2'::calls
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipClose DD imagerel $LN20
	DD	imagerel $LN20+618
	DD	imagerel $unwind$zipClose
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Write_GlobalComment DD imagerel $LN7
	DD	imagerel $LN7+199
	DD	imagerel $unwind$Write_GlobalComment
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Write_EndOfCentralDirectoryRecord DD imagerel $LN16
	DD	imagerel $LN16+601
	DD	imagerel $unwind$Write_EndOfCentralDirectoryRecord
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Write_Zip64EndOfCentralDirectoryRecord DD imagerel $LN13
	DD	imagerel $LN13+549
	DD	imagerel $unwind$Write_Zip64EndOfCentralDirectoryRecord
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Write_Zip64EndOfCentralDirectoryLocator DD imagerel $LN7
	DD	imagerel $LN7+262
	DD	imagerel $unwind$Write_Zip64EndOfCentralDirectoryLocator
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipCloseFileInZip DD imagerel $LN4
	DD	imagerel $LN4+63
	DD	imagerel $unwind$zipCloseFileInZip
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipCloseFileInZipRaw64 DD imagerel $LN50
	DD	imagerel $LN50+2093
	DD	imagerel $unwind$zipCloseFileInZipRaw64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipCloseFileInZipRaw DD imagerel $LN4
	DD	imagerel $LN4+78
	DD	imagerel $unwind$zipCloseFileInZipRaw
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipWriteInFileInZip DD imagerel $LN19
	DD	imagerel $LN19+764
	DD	imagerel $unwind$zipWriteInFileInZip
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64FlushWriteBuffer DD imagerel zip64FlushWriteBuffer
	DD	imagerel zip64FlushWriteBuffer+425
	DD	imagerel $unwind$zip64FlushWriteBuffer
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip DD imagerel $LN4
	DD	imagerel $LN4+261
	DD	imagerel $unwind$zipOpenNewFileInZip
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip64 DD imagerel $LN4
	DD	imagerel $LN4+264
	DD	imagerel $unwind$zipOpenNewFileInZip64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip2_64 DD imagerel $LN4
	DD	imagerel $LN4+267
	DD	imagerel $unwind$zipOpenNewFileInZip2_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip2 DD imagerel $LN4
	DD	imagerel $LN4+264
	DD	imagerel $unwind$zipOpenNewFileInZip2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip3_64 DD imagerel $LN4
	DD	imagerel $LN4+283
	DD	imagerel $unwind$zipOpenNewFileInZip3_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip3 DD imagerel $LN4
	DD	imagerel $LN4+280
	DD	imagerel $unwind$zipOpenNewFileInZip3
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip4_64 DD imagerel $LN45
	DD	imagerel $LN45+2480
	DD	imagerel $unwind$zipOpenNewFileInZip4_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Write_LocalFileHeader DD imagerel $LN25
	DD	imagerel $LN25+1107
	DD	imagerel $unwind$Write_LocalFileHeader
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpen64 DD imagerel $LN4
	DD	imagerel $LN4+72
	DD	imagerel $unwind$zipOpen64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpen DD imagerel $LN4
	DD	imagerel $LN4+72
	DD	imagerel $unwind$zipOpen
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpen2_64 DD imagerel $LN6
	DD	imagerel $LN6+217
	DD	imagerel $unwind$zipOpen2_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpen2 DD imagerel $LN6
	DD	imagerel $LN6+189
	DD	imagerel $unwind$zipOpen2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpen3 DD imagerel $LN19
	DD	imagerel $LN19+606
	DD	imagerel $unwind$zipOpen3
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$LoadCentralDirectoryRecord DD imagerel $LN50
	DD	imagerel $LN50+2106
	DD	imagerel $unwind$LoadCentralDirectoryRecord
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_SearchCentralDir64 DD imagerel zip64local_SearchCentralDir64
	DD	imagerel zip64local_SearchCentralDir64+1066
	DD	imagerel $unwind$zip64local_SearchCentralDir64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_SearchCentralDir DD imagerel zip64local_SearchCentralDir
	DD	imagerel zip64local_SearchCentralDir+651
	DD	imagerel $unwind$zip64local_SearchCentralDir
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_getLong64 DD imagerel zip64local_getLong64
	DD	imagerel zip64local_getLong64+549
	DD	imagerel $unwind$zip64local_getLong64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_getLong DD imagerel zip64local_getLong
	DD	imagerel zip64local_getLong+302
	DD	imagerel $unwind$zip64local_getLong
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_getShort DD imagerel zip64local_getShort
	DD	imagerel zip64local_getShort+202
	DD	imagerel $unwind$zip64local_getShort
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_getByte DD imagerel zip64local_getByte
	DD	imagerel zip64local_getByte+178
	DD	imagerel $unwind$zip64local_getByte
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_TmzDateToDosDate DD imagerel zip64local_TmzDateToDosDate
	DD	imagerel zip64local_TmzDateToDosDate+194
	DD	imagerel $unwind$zip64local_TmzDateToDosDate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_putValue_inmemory DD imagerel zip64local_putValue_inmemory
	DD	imagerel zip64local_putValue_inmemory+192
	DD	imagerel $unwind$zip64local_putValue_inmemory
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_putValue DD imagerel zip64local_putValue
	DD	imagerel zip64local_putValue+249
	DD	imagerel $unwind$zip64local_putValue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$add_data_in_datablock DD imagerel add_data_in_datablock
	DD	imagerel add_data_in_datablock+455
	DD	imagerel $unwind$add_data_in_datablock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$free_linkedlist DD imagerel free_linkedlist
	DD	imagerel free_linkedlist+86
	DD	imagerel $unwind$free_linkedlist
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$init_linkedlist DD imagerel init_linkedlist
	DD	imagerel init_linkedlist+73
	DD	imagerel $unwind$init_linkedlist
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$free_datablock DD imagerel free_datablock
	DD	imagerel free_datablock+100
	DD	imagerel $unwind$free_datablock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$allocate_new_datablock DD imagerel allocate_new_datablock
	DD	imagerel allocate_new_datablock+104
	DD	imagerel $unwind$allocate_new_datablock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$crypthead DD imagerel crypthead
	DD	imagerel crypthead+665
	DD	imagerel $unwind$crypthead
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$init_keys DD imagerel init_keys
	DD	imagerel init_keys+146
	DD	imagerel $unwind$init_keys
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$update_keys DD imagerel update_keys
	DD	imagerel update_keys+224
	DD	imagerel $unwind$update_keys
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$decrypt_byte DD imagerel decrypt_byte
	DD	imagerel decrypt_byte+97
	DD	imagerel $unwind$decrypt_byte
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$time DD	imagerel time
	DD	imagerel time+59
	DD	imagerel $unwind$time
;	COMDAT xdata
xdata	SEGMENT
$unwind$time DD	021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$decrypt_byte DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$update_keys DD 022801H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$init_keys DD 022801H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$crypthead DD 022d01H
	DD	07015b219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
crypthead$rtcName$0 DB 068H
	DB	065H
	DB	061H
	DB	064H
	DB	065H
	DB	072H
	DB	00H
	ORG $+9
crypthead$rtcVarDesc DD 038H
	DD	0aH
	DQ	FLAT:crypthead$rtcName$0
	ORG $+48
crypthead$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:crypthead$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$allocate_new_datablock DD 021501H
	DD	070025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$free_datablock DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$init_linkedlist DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$free_linkedlist DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$add_data_in_datablock DD 022801H
	DD	070109214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_putValue DD 022d01H
	DD	070157219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
zip64local_putValue$rtcName$0 DB 062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+12
zip64local_putValue$rtcVarDesc DD 028H
	DD	08H
	DQ	FLAT:zip64local_putValue$rtcName$0
	ORG $+48
zip64local_putValue$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:zip64local_putValue$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_putValue_inmemory DD 022801H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_TmzDateToDosDate DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_getByte DD 022801H
	DD	070107214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
zip64local_getByte$rtcName$0 DB 063H
	DB	00H
	ORG $+14
zip64local_getByte$rtcVarDesc DD 024H
	DD	01H
	DQ	FLAT:zip64local_getByte$rtcName$0
	ORG $+48
zip64local_getByte$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:zip64local_getByte$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_getShort DD 022801H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
zip64local_getShort$rtcName$0 DB 069H
	DB	00H
	ORG $+14
zip64local_getShort$rtcVarDesc DD 034H
	DD	04H
	DQ	FLAT:zip64local_getShort$rtcName$0
	ORG $+48
zip64local_getShort$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:zip64local_getShort$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_getLong DD 022801H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
zip64local_getLong$rtcName$0 DB 069H
	DB	00H
	ORG $+14
zip64local_getLong$rtcVarDesc DD 034H
	DD	04H
	DQ	FLAT:zip64local_getLong$rtcName$0
	ORG $+48
zip64local_getLong$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:zip64local_getLong$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_getLong64 DD 022801H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
zip64local_getLong64$rtcName$0 DB 069H
	DB	00H
	ORG $+14
zip64local_getLong64$rtcVarDesc DD 034H
	DD	04H
	DQ	FLAT:zip64local_getLong64$rtcName$0
	ORG $+48
zip64local_getLong64$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:zip64local_getLong64$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_SearchCentralDir DD 022601H
	DD	0700bd20fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_SearchCentralDir64 DD 032901H
	DD	0140112H
	DD	0700bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
zip64local_SearchCentralDir64$rtcName$0 DB 075H
	DB	04cH
	DB	00H
	ORG $+5
zip64local_SearchCentralDir64$rtcName$1 DB 072H
	DB	065H
	DB	06cH
	DB	061H
	DB	074H
	DB	069H
	DB	076H
	DB	065H
	DB	04fH
	DB	066H
	DB	066H
	DB	073H
	DB	065H
	DB	074H
	DB	00H
	ORG $+9
zip64local_SearchCentralDir64$rtcVarDesc DD 078H
	DD	08H
	DQ	FLAT:zip64local_SearchCentralDir64$rtcName$1
	DD	054H
	DD	04H
	DQ	FLAT:zip64local_SearchCentralDir64$rtcName$0
	ORG $+96
zip64local_SearchCentralDir64$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:zip64local_SearchCentralDir64$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$LoadCentralDirectoryRecord DD 032401H
	DD	036010dH
	DD	07006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
LoadCentralDirectoryRecord$rtcName$0 DB 073H
	DB	069H
	DB	07aH
	DB	065H
	DB	05fH
	DB	063H
	DB	065H
	DB	06eH
	DB	074H
	DB	072H
	DB	061H
	DB	06cH
	DB	05fH
	DB	064H
	DB	069H
	DB	072H
	DB	00H
	ORG $+7
LoadCentralDirectoryRecord$rtcName$1 DB 06fH
	DB	066H
	DB	066H
	DB	073H
	DB	065H
	DB	074H
	DB	05fH
	DB	063H
	DB	065H
	DB	06eH
	DB	074H
	DB	072H
	DB	061H
	DB	06cH
	DB	05fH
	DB	064H
	DB	069H
	DB	072H
	DB	00H
	ORG $+1
LoadCentralDirectoryRecord$rtcName$2 DB 075H
	DB	04cH
	DB	00H
	ORG $+1
LoadCentralDirectoryRecord$rtcName$3 DB 06eH
	DB	075H
	DB	06dH
	DB	062H
	DB	065H
	DB	072H
	DB	05fH
	DB	064H
	DB	069H
	DB	073H
	DB	06bH
	DB	00H
	ORG $+4
LoadCentralDirectoryRecord$rtcName$4 DB 06eH
	DB	075H
	DB	06dH
	DB	062H
	DB	065H
	DB	072H
	DB	05fH
	DB	064H
	DB	069H
	DB	073H
	DB	06bH
	DB	05fH
	DB	077H
	DB	069H
	DB	074H
	DB	068H
	DB	05fH
	DB	043H
	DB	044H
	DB	00H
	ORG $+4
LoadCentralDirectoryRecord$rtcName$5 DB 06eH
	DB	075H
	DB	06dH
	DB	062H
	DB	065H
	DB	072H
	DB	05fH
	DB	065H
	DB	06eH
	DB	074H
	DB	072H
	DB	079H
	DB	00H
	ORG $+3
LoadCentralDirectoryRecord$rtcName$6 DB 06eH
	DB	075H
	DB	06dH
	DB	062H
	DB	065H
	DB	072H
	DB	05fH
	DB	065H
	DB	06eH
	DB	074H
	DB	072H
	DB	079H
	DB	05fH
	DB	043H
	DB	044H
	DB	00H
LoadCentralDirectoryRecord$rtcName$7 DB 056H
	DB	065H
	DB	072H
	DB	073H
	DB	069H
	DB	06fH
	DB	06eH
	DB	04dH
	DB	061H
	DB	064H
	DB	065H
	DB	042H
	DB	079H
	DB	00H
	ORG $+2
LoadCentralDirectoryRecord$rtcName$8 DB 056H
	DB	065H
	DB	072H
	DB	073H
	DB	069H
	DB	06fH
	DB	06eH
	DB	04eH
	DB	065H
	DB	065H
	DB	064H
	DB	065H
	DB	064H
	DB	00H
	ORG $+2
LoadCentralDirectoryRecord$rtcName$9 DB 073H
	DB	069H
	DB	07aH
	DB	065H
	DB	05fH
	DB	063H
	DB	06fH
	DB	06dH
	DB	06dH
	DB	065H
	DB	06eH
	DB	074H
	DB	00H
	ORG $+3
LoadCentralDirectoryRecord$rtcName$10 DB 073H
	DB	069H
	DB	07aH
	DB	065H
	DB	045H
	DB	06eH
	DB	064H
	DB	04fH
	DB	066H
	DB	043H
	DB	065H
	DB	06eH
	DB	074H
	DB	072H
	DB	061H
	DB	06cH
	DB	044H
	DB	069H
	DB	072H
	DB	065H
	DB	063H
	DB	074H
	DB	06fH
	DB	072H
	DB	079H
	DB	00H
	ORG $+6
LoadCentralDirectoryRecord$rtcFrameData DD 0bH
	DD	00H
	DQ	FLAT:LoadCentralDirectoryRecord$rtcVarDesc
	ORG $+8
LoadCentralDirectoryRecord$rtcVarDesc DD 0178H
	DD	08H
	DQ	FLAT:LoadCentralDirectoryRecord$rtcName$10
	DD	0154H
	DD	04H
	DQ	FLAT:LoadCentralDirectoryRecord$rtcName$9
	DD	0134H
	DD	04H
	DQ	FLAT:LoadCentralDirectoryRecord$rtcName$8
	DD	0114H
	DD	04H
	DQ	FLAT:LoadCentralDirectoryRecord$rtcName$7
	DD	0f8H
	DD	08H
	DQ	FLAT:LoadCentralDirectoryRecord$rtcName$6
	DD	0d8H
	DD	08H
	DQ	FLAT:LoadCentralDirectoryRecord$rtcName$5
	DD	0b4H
	DD	04H
	DQ	FLAT:LoadCentralDirectoryRecord$rtcName$4
	DD	094H
	DD	04H
	DQ	FLAT:LoadCentralDirectoryRecord$rtcName$3
	DD	074H
	DD	04H
	DQ	FLAT:LoadCentralDirectoryRecord$rtcName$2
	DD	058H
	DD	08H
	DQ	FLAT:LoadCentralDirectoryRecord$rtcName$1
	DD	038H
	DD	08H
	DQ	FLAT:LoadCentralDirectoryRecord$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpen3 DD 043901H
	DD	020390122H
	DD	060147015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
zipOpen3$rtcName$0 DB 07aH
	DB	069H
	DB	069H
	DB	06eH
	DB	069H
	DB	074H
	DB	00H
	ORG $+9
zipOpen3$rtcVarDesc DD 030H
	DD	010168H
	DQ	FLAT:zipOpen3$rtcName$0
	ORG $+48
zipOpen3$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:zipOpen3$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpen2 DD 033201H
	DD	014011bH
	DD	07014H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
zipOpen2$rtcName$0 DB 07aH
	DB	06cH
	DB	069H
	DB	062H
	DB	05fH
	DB	066H
	DB	069H
	DB	06cH
	DB	065H
	DB	066H
	DB	075H
	DB	06eH
	DB	063H
	DB	036H
	DB	034H
	DB	05fH
	DB	033H
	DB	032H
	DB	05fH
	DB	064H
	DB	065H
	DB	066H
	DB	05fH
	DB	066H
	DB	069H
	DB	06cH
	DB	06cH
	DB	00H
	ORG $+4
zipOpen2$rtcVarDesc DD 030H
	DD	058H
	DQ	FLAT:zipOpen2$rtcName$0
	ORG $+48
zipOpen2$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:zipOpen2$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpen2_64 DD 043301H
	DD	015011cH
	DD	060147015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
zipOpen2_64$rtcName$0 DB 07aH
	DB	06cH
	DB	069H
	DB	062H
	DB	05fH
	DB	066H
	DB	069H
	DB	06cH
	DB	065H
	DB	066H
	DB	075H
	DB	06eH
	DB	063H
	DB	036H
	DB	034H
	DB	05fH
	DB	033H
	DB	032H
	DB	05fH
	DB	064H
	DB	065H
	DB	066H
	DB	05fH
	DB	066H
	DB	069H
	DB	06cH
	DB	06cH
	DB	00H
	ORG $+4
zipOpen2_64$rtcVarDesc DD 030H
	DD	058H
	DQ	FLAT:zipOpen2_64$rtcName$0
	ORG $+48
zipOpen2_64$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:zipOpen2_64$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpen DD 022201H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpen64 DD 022201H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Write_LocalFileHeader DD 022d01H
	DD	070159219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip4_64 DD 033301H
	DD	012011cH
	DD	07015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
zipOpenNewFileInZip4_64$rtcName$0 DB 062H
	DB	075H
	DB	066H
	DB	048H
	DB	065H
	DB	061H
	DB	064H
	DB	00H
	ORG $+8
zipOpenNewFileInZip4_64$rtcVarDesc DD 068H
	DD	0cH
	DQ	FLAT:zipOpenNewFileInZip4_64$rtcName$0
	ORG $+48
zipOpenNewFileInZip4_64$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:zipOpenNewFileInZip4_64$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip3 DD 033301H
	DD	014011cH
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip3_64 DD 033301H
	DD	014011cH
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip2 DD 033301H
	DD	014011cH
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip2_64 DD 033301H
	DD	014011cH
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip64 DD 033301H
	DD	014011cH
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip DD 033301H
	DD	014011cH
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64FlushWriteBuffer DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipWriteInFileInZip DD 022801H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipCloseFileInZipRaw DD 022701H
	DD	0700f3213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipCloseFileInZipRaw64 DD 022801H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipCloseFileInZip DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Write_Zip64EndOfCentralDirectoryLocator DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Write_Zip64EndOfCentralDirectoryRecord DD 022701H
	DD	0700f5213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Write_EndOfCentralDirectoryRecord DD 022701H
	DD	0700f5213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Write_GlobalComment DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipClose DD 022301H
	DD	0700b920fH
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\time.h
;	COMDAT time
_TEXT	SEGMENT
_Time$ = 48
time	PROC						; COMDAT

; 534  :         {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__4436A688_time@h
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 535  :             return _time64(_Time);

  0002a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Time$[rsp]
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__time64

; 536  :         }

  00035	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00039	5f		 pop	 rdi
  0003a	c3		 ret	 0
time	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\crypt.h
;	COMDAT decrypt_byte
_TEXT	SEGMENT
temp$ = 32
pkeys$ = 64
pcrc_32_tab$ = 72
decrypt_byte PROC					; COMDAT

; 36   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__5ADA25A5_crypt@h
  0002a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 37   :     unsigned temp;  /* POTENTIAL BUG:  temp*(temp^1) may overflow in an
; 38   :                      * unpredictable manner on 16-bit systems; not a problem
; 39   :                      * with any known compiler so far, though */
; 40   : 
; 41   :     temp = ((unsigned)(*(pkeys+2)) & 0xffff) | 2;

  0002f	48 8b 44 24 40	 mov	 rax, QWORD PTR pkeys$[rsp]
  00034	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00037	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0003c	83 c8 02	 or	 eax, 2
  0003f	89 44 24 20	 mov	 DWORD PTR temp$[rsp], eax

; 42   :     return (int)(((temp * (temp ^ 1)) >> 8) & 0xff);

  00043	8b 44 24 20	 mov	 eax, DWORD PTR temp$[rsp]
  00047	83 f0 01	 xor	 eax, 1
  0004a	8b 4c 24 20	 mov	 ecx, DWORD PTR temp$[rsp]
  0004e	0f af c8	 imul	 ecx, eax
  00051	8b c1		 mov	 eax, ecx
  00053	c1 e8 08	 shr	 eax, 8
  00056	25 ff 00 00 00	 and	 eax, 255		; 000000ffH

; 43   : }

  0005b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005f	5f		 pop	 rdi
  00060	c3		 ret	 0
decrypt_byte ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\crypt.h
;	COMDAT update_keys
_TEXT	SEGMENT
keyshift$1 = 32
pkeys$ = 64
pcrc_32_tab$ = 72
c$ = 80
update_keys PROC					; COMDAT

; 49   : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 0c 00 00 00	 mov	 ecx, 12
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__5ADA25A5_crypt@h
  0002f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 50   :     (*(pkeys+0)) = CRC32((*(pkeys+0)), c);

  00034	48 8b 44 24 40	 mov	 rax, QWORD PTR pkeys$[rsp]
  00039	8b 4c 24 50	 mov	 ecx, DWORD PTR c$[rsp]
  0003d	8b 00		 mov	 eax, DWORD PTR [rax]
  0003f	33 c1		 xor	 eax, ecx
  00041	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00046	48 98		 cdqe
  00048	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pkeys$[rsp]
  0004d	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0004f	c1 e9 08	 shr	 ecx, 8
  00052	48 8b 54 24 48	 mov	 rdx, QWORD PTR pcrc_32_tab$[rsp]
  00057	8b 04 82	 mov	 eax, DWORD PTR [rdx+rax*4]
  0005a	33 c1		 xor	 eax, ecx
  0005c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pkeys$[rsp]
  00061	89 01		 mov	 DWORD PTR [rcx], eax

; 51   :     (*(pkeys+1)) += (*(pkeys+0)) & 0xff;

  00063	48 8b 44 24 40	 mov	 rax, QWORD PTR pkeys$[rsp]
  00068	8b 00		 mov	 eax, DWORD PTR [rax]
  0006a	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0006f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pkeys$[rsp]
  00074	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00077	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pkeys$[rsp]
  0007c	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 52   :     (*(pkeys+1)) = (*(pkeys+1)) * 134775813L + 1;

  0007f	48 8b 44 24 40	 mov	 rax, QWORD PTR pkeys$[rsp]
  00084	69 40 04 05 84
	08 08		 imul	 eax, DWORD PTR [rax+4], 134775813 ; 08088405H
  0008b	ff c0		 inc	 eax
  0008d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pkeys$[rsp]
  00092	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 53   :     {
; 54   :       register int keyshift = (int)((*(pkeys+1)) >> 24);

  00095	48 8b 44 24 40	 mov	 rax, QWORD PTR pkeys$[rsp]
  0009a	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0009d	c1 e8 18	 shr	 eax, 24
  000a0	89 44 24 20	 mov	 DWORD PTR keyshift$1[rsp], eax

; 55   :       (*(pkeys+2)) = CRC32((*(pkeys+2)), keyshift);

  000a4	48 8b 44 24 40	 mov	 rax, QWORD PTR pkeys$[rsp]
  000a9	8b 4c 24 20	 mov	 ecx, DWORD PTR keyshift$1[rsp]
  000ad	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  000b0	33 c1		 xor	 eax, ecx
  000b2	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000b7	48 98		 cdqe
  000b9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pkeys$[rsp]
  000be	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  000c1	c1 e9 08	 shr	 ecx, 8
  000c4	48 8b 54 24 48	 mov	 rdx, QWORD PTR pcrc_32_tab$[rsp]
  000c9	8b 04 82	 mov	 eax, DWORD PTR [rdx+rax*4]
  000cc	33 c1		 xor	 eax, ecx
  000ce	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pkeys$[rsp]
  000d3	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 56   :     }
; 57   :     return c;

  000d6	8b 44 24 50	 mov	 eax, DWORD PTR c$[rsp]

; 58   : }

  000da	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000de	5f		 pop	 rdi
  000df	c3		 ret	 0
update_keys ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\crypt.h
;	COMDAT init_keys
_TEXT	SEGMENT
passwd$ = 48
pkeys$ = 56
pcrc_32_tab$ = 64
init_keys PROC						; COMDAT

; 66   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__5ADA25A5_crypt@h
  0002f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 67   :     *(pkeys+0) = 305419896L;

  00034	48 8b 44 24 38	 mov	 rax, QWORD PTR pkeys$[rsp]
  00039	c7 00 78 56 34
	12		 mov	 DWORD PTR [rax], 305419896 ; 12345678H

; 68   :     *(pkeys+1) = 591751049L;

  0003f	48 8b 44 24 38	 mov	 rax, QWORD PTR pkeys$[rsp]
  00044	c7 40 04 89 67
	45 23		 mov	 DWORD PTR [rax+4], 591751049 ; 23456789H

; 69   :     *(pkeys+2) = 878082192L;

  0004b	48 8b 44 24 38	 mov	 rax, QWORD PTR pkeys$[rsp]
  00050	c7 40 08 90 78
	56 34		 mov	 DWORD PTR [rax+8], 878082192 ; 34567890H
$LN2@init_keys:

; 70   :     while (*passwd != '\0') {

  00057	48 8b 44 24 30	 mov	 rax, QWORD PTR passwd$[rsp]
  0005c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0005f	85 c0		 test	 eax, eax
  00061	74 29		 je	 SHORT $LN3@init_keys

; 71   :         update_keys(pkeys,pcrc_32_tab,(int)*passwd);

  00063	48 8b 44 24 30	 mov	 rax, QWORD PTR passwd$[rsp]
  00068	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0006b	44 8b c0	 mov	 r8d, eax
  0006e	48 8b 54 24 40	 mov	 rdx, QWORD PTR pcrc_32_tab$[rsp]
  00073	48 8b 4c 24 38	 mov	 rcx, QWORD PTR pkeys$[rsp]
  00078	e8 00 00 00 00	 call	 update_keys

; 72   :         passwd++;

  0007d	48 8b 44 24 30	 mov	 rax, QWORD PTR passwd$[rsp]
  00082	48 ff c0	 inc	 rax
  00085	48 89 44 24 30	 mov	 QWORD PTR passwd$[rsp], rax

; 73   :     }

  0008a	eb cb		 jmp	 SHORT $LN2@init_keys
$LN3@init_keys:

; 74   : }

  0008c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00090	5f		 pop	 rdi
  00091	c3		 ret	 0
init_keys ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\crypt.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\time.h
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\crypt.h
;	COMDAT crypthead
_TEXT	SEGMENT
n$ = 32
t$ = 36
c$ = 40
header$ = 56
passwd$ = 112
buf$ = 120
bufSize$ = 128
pkeys$ = 136
pcrc_32_tab$ = 144
crcForCrypting$ = 152
crypthead PROC						; COMDAT

; 96   : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__5ADA25A5_crypt@h
  00034	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 97   :     int n;                       /* index in random header */
; 98   :     int t;                       /* temporary */
; 99   :     int c;                       /* random byte */
; 100  :     unsigned char header[RAND_HEAD_LEN-2]; /* random header */
; 101  :     static unsigned calls = 0;   /* ensure different random header each time */
; 102  : 
; 103  :     if (bufSize<RAND_HEAD_LEN)

  00039	83 bc 24 80 00
	00 00 0c	 cmp	 DWORD PTR bufSize$[rsp], 12
  00041	7d 07		 jge	 SHORT $LN8@crypthead

; 104  :       return 0;

  00043	33 c0		 xor	 eax, eax
  00045	e9 34 02 00 00	 jmp	 $LN1@crypthead
$LN8@crypthead:

; 105  : 
; 106  :     /* First generate RAND_HEAD_LEN-2 random bytes. We encrypt the
; 107  :      * output of rand() to get less predictability, since rand() is
; 108  :      * often poorly implemented.
; 109  :      */
; 110  :     if (++calls == 1)

  0004a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?calls@?1??crypthead@@9@9
  00050	ff c0		 inc	 eax
  00052	89 05 00 00 00
	00		 mov	 DWORD PTR ?calls@?1??crypthead@@9@9, eax
  00058	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?calls@?1??crypthead@@9@9, 1
  0005f	75 18		 jne	 SHORT $LN9@crypthead
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\time.h

; 535  :             return _time64(_Time);

  00061	33 c9		 xor	 ecx, ecx
  00063	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__time64
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\crypt.h

; 112  :         srand((unsigned)(time(NULL) ^ ZCR_SEED2));

  00069	b9 4e e6 40 bb	 mov	 ecx, -1153374642	; ffffffffbb40e64eH
  0006e	48 33 c1	 xor	 rax, rcx
  00071	8b c8		 mov	 ecx, eax
  00073	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_srand
$LN9@crypthead:

; 113  :     }
; 114  :     init_keys(passwd, pkeys, pcrc_32_tab);

  00079	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR pcrc_32_tab$[rsp]
  00081	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR pkeys$[rsp]
  00089	48 8b 4c 24 70	 mov	 rcx, QWORD PTR passwd$[rsp]
  0008e	e8 00 00 00 00	 call	 init_keys

; 115  :     for (n = 0; n < RAND_HEAD_LEN-2; n++)

  00093	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0
  0009b	eb 0a		 jmp	 SHORT $LN4@crypthead
$LN2@crypthead:
  0009d	8b 44 24 20	 mov	 eax, DWORD PTR n$[rsp]
  000a1	ff c0		 inc	 eax
  000a3	89 44 24 20	 mov	 DWORD PTR n$[rsp], eax
$LN4@crypthead:
  000a7	83 7c 24 20 0a	 cmp	 DWORD PTR n$[rsp], 10
  000ac	7d 5c		 jge	 SHORT $LN3@crypthead

; 116  :     {
; 117  :         c = (rand() >> 7) & 0xff;

  000ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rand
  000b4	c1 f8 07	 sar	 eax, 7
  000b7	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000bc	89 44 24 28	 mov	 DWORD PTR c$[rsp], eax

; 118  :         header[n] = (unsigned char)zencode(pkeys, pcrc_32_tab, c, t);

  000c0	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR pcrc_32_tab$[rsp]
  000c8	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pkeys$[rsp]
  000d0	e8 00 00 00 00	 call	 decrypt_byte
  000d5	89 44 24 24	 mov	 DWORD PTR t$[rsp], eax
  000d9	44 8b 44 24 28	 mov	 r8d, DWORD PTR c$[rsp]
  000de	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR pcrc_32_tab$[rsp]
  000e6	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pkeys$[rsp]
  000ee	e8 00 00 00 00	 call	 update_keys
  000f3	8b 44 24 28	 mov	 eax, DWORD PTR c$[rsp]
  000f7	8b 4c 24 24	 mov	 ecx, DWORD PTR t$[rsp]
  000fb	33 c8		 xor	 ecx, eax
  000fd	8b c1		 mov	 eax, ecx
  000ff	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR n$[rsp]
  00104	88 44 0c 38	 mov	 BYTE PTR header$[rsp+rcx], al

; 119  :     }

  00108	eb 93		 jmp	 SHORT $LN2@crypthead
$LN3@crypthead:

; 120  :     /* Encrypt random header (last two bytes is high word of crc) */
; 121  :     init_keys(passwd, pkeys, pcrc_32_tab);

  0010a	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR pcrc_32_tab$[rsp]
  00112	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR pkeys$[rsp]
  0011a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR passwd$[rsp]
  0011f	e8 00 00 00 00	 call	 init_keys

; 122  :     for (n = 0; n < RAND_HEAD_LEN-2; n++)

  00124	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0
  0012c	eb 0a		 jmp	 SHORT $LN7@crypthead
$LN5@crypthead:
  0012e	8b 44 24 20	 mov	 eax, DWORD PTR n$[rsp]
  00132	ff c0		 inc	 eax
  00134	89 44 24 20	 mov	 DWORD PTR n$[rsp], eax
$LN7@crypthead:
  00138	83 7c 24 20 0a	 cmp	 DWORD PTR n$[rsp], 10
  0013d	7d 5f		 jge	 SHORT $LN6@crypthead

; 123  :     {
; 124  :         buf[n] = (unsigned char)zencode(pkeys, pcrc_32_tab, header[n], t);

  0013f	0f ae e8	 lfence
  00142	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR pcrc_32_tab$[rsp]
  0014a	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pkeys$[rsp]
  00152	e8 00 00 00 00	 call	 decrypt_byte
  00157	89 44 24 24	 mov	 DWORD PTR t$[rsp], eax
  0015b	48 63 44 24 20	 movsxd	 rax, DWORD PTR n$[rsp]
  00160	0f b6 44 04 38	 movzx	 eax, BYTE PTR header$[rsp+rax]
  00165	44 8b c0	 mov	 r8d, eax
  00168	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR pcrc_32_tab$[rsp]
  00170	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pkeys$[rsp]
  00178	e8 00 00 00 00	 call	 update_keys
  0017d	48 63 44 24 20	 movsxd	 rax, DWORD PTR n$[rsp]
  00182	0f b6 44 04 38	 movzx	 eax, BYTE PTR header$[rsp+rax]
  00187	8b 4c 24 24	 mov	 ecx, DWORD PTR t$[rsp]
  0018b	33 c8		 xor	 ecx, eax
  0018d	8b c1		 mov	 eax, ecx
  0018f	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR n$[rsp]
  00194	48 8b 54 24 78	 mov	 rdx, QWORD PTR buf$[rsp]
  00199	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 125  :     }

  0019c	eb 90		 jmp	 SHORT $LN5@crypthead
$LN6@crypthead:

; 126  :     buf[n++] = (unsigned char)zencode(pkeys, pcrc_32_tab, (int)(crcForCrypting >> 16) & 0xff, t);

  0019e	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR pcrc_32_tab$[rsp]
  001a6	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pkeys$[rsp]
  001ae	e8 00 00 00 00	 call	 decrypt_byte
  001b3	89 44 24 24	 mov	 DWORD PTR t$[rsp], eax
  001b7	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR crcForCrypting$[rsp]
  001be	c1 e8 10	 shr	 eax, 16
  001c1	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001c6	44 8b c0	 mov	 r8d, eax
  001c9	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR pcrc_32_tab$[rsp]
  001d1	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pkeys$[rsp]
  001d9	e8 00 00 00 00	 call	 update_keys
  001de	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR crcForCrypting$[rsp]
  001e5	c1 e8 10	 shr	 eax, 16
  001e8	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001ed	8b 4c 24 24	 mov	 ecx, DWORD PTR t$[rsp]
  001f1	33 c8		 xor	 ecx, eax
  001f3	8b c1		 mov	 eax, ecx
  001f5	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR n$[rsp]
  001fa	48 8b 54 24 78	 mov	 rdx, QWORD PTR buf$[rsp]
  001ff	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00202	8b 44 24 20	 mov	 eax, DWORD PTR n$[rsp]
  00206	ff c0		 inc	 eax
  00208	89 44 24 20	 mov	 DWORD PTR n$[rsp], eax

; 127  :     buf[n++] = (unsigned char)zencode(pkeys, pcrc_32_tab, (int)(crcForCrypting >> 24) & 0xff, t);

  0020c	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR pcrc_32_tab$[rsp]
  00214	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pkeys$[rsp]
  0021c	e8 00 00 00 00	 call	 decrypt_byte
  00221	89 44 24 24	 mov	 DWORD PTR t$[rsp], eax
  00225	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR crcForCrypting$[rsp]
  0022c	c1 e8 18	 shr	 eax, 24
  0022f	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00234	44 8b c0	 mov	 r8d, eax
  00237	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR pcrc_32_tab$[rsp]
  0023f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pkeys$[rsp]
  00247	e8 00 00 00 00	 call	 update_keys
  0024c	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR crcForCrypting$[rsp]
  00253	c1 e8 18	 shr	 eax, 24
  00256	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0025b	8b 4c 24 24	 mov	 ecx, DWORD PTR t$[rsp]
  0025f	33 c8		 xor	 ecx, eax
  00261	8b c1		 mov	 eax, ecx
  00263	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR n$[rsp]
  00268	48 8b 54 24 78	 mov	 rdx, QWORD PTR buf$[rsp]
  0026d	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00270	8b 44 24 20	 mov	 eax, DWORD PTR n$[rsp]
  00274	ff c0		 inc	 eax
  00276	89 44 24 20	 mov	 DWORD PTR n$[rsp], eax

; 128  :     return n;

  0027a	8b 44 24 20	 mov	 eax, DWORD PTR n$[rsp]
$LN1@crypthead:

; 129  : }

  0027e	48 8b f8	 mov	 rdi, rax
  00281	48 8b cc	 mov	 rcx, rsp
  00284	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:crypthead$rtcFrameData
  0028b	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00290	48 8b c7	 mov	 rax, rdi
  00293	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00297	5f		 pop	 rdi
  00298	c3		 ret	 0
crypthead ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT allocate_new_datablock
_TEXT	SEGMENT
ldi$ = 32
allocate_new_datablock PROC				; COMDAT

; 190  : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b fc	 mov	 rdi, rsp
  00009	b9 0c 00 00 00	 mov	 ecx, 12
  0000e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00013	f3 ab		 rep stosd
  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0001c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 191  :     linkedlist_datablock_internal* ldi;
; 192  :     ldi = (linkedlist_datablock_internal*)

  00021	b9 08 10 00 00	 mov	 ecx, 4104		; 00001008H
  00026	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0002c	48 89 44 24 20	 mov	 QWORD PTR ldi$[rsp], rax

; 193  :                  ALLOC(sizeof(linkedlist_datablock_internal));
; 194  :     if (ldi!=NULL)

  00031	48 83 7c 24 20
	00		 cmp	 QWORD PTR ldi$[rsp], 0
  00037	74 24		 je	 SHORT $LN2@allocate_n

; 195  :     {
; 196  :         ldi->next_datablock = NULL ;

  00039	48 8b 44 24 20	 mov	 rax, QWORD PTR ldi$[rsp]
  0003e	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 197  :         ldi->filled_in_this_block = 0 ;

  00045	48 8b 44 24 20	 mov	 rax, QWORD PTR ldi$[rsp]
  0004a	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [rax+12], 0

; 198  :         ldi->avail_in_this_block = SIZEDATA_INDATABLOCK ;

  00051	48 8b 44 24 20	 mov	 rax, QWORD PTR ldi$[rsp]
  00056	c7 40 08 f0 0f
	00 00		 mov	 DWORD PTR [rax+8], 4080	; 00000ff0H
$LN2@allocate_n:

; 199  :     }
; 200  :     return ldi;

  0005d	48 8b 44 24 20	 mov	 rax, QWORD PTR ldi$[rsp]

; 201  : }

  00062	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00066	5f		 pop	 rdi
  00067	c3		 ret	 0
allocate_new_datablock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT free_datablock
_TEXT	SEGMENT
ldinext$1 = 32
ldi$ = 64
free_datablock PROC					; COMDAT

; 204  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
$LN2@free_datab:

; 205  :     while (ldi!=NULL)

  0002a	48 83 7c 24 40
	00		 cmp	 QWORD PTR ldi$[rsp], 0
  00030	74 2c		 je	 SHORT $LN3@free_datab

; 206  :     {
; 207  :         linkedlist_datablock_internal* ldinext = ldi->next_datablock;

  00032	48 8b 44 24 40	 mov	 rax, QWORD PTR ldi$[rsp]
  00037	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003a	48 89 44 24 20	 mov	 QWORD PTR ldinext$1[rsp], rax

; 208  :         TRYFREE(ldi);

  0003f	48 83 7c 24 40
	00		 cmp	 QWORD PTR ldi$[rsp], 0
  00045	74 0b		 je	 SHORT $LN4@free_datab
  00047	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ldi$[rsp]
  0004c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN4@free_datab:

; 209  :         ldi = ldinext;

  00052	48 8b 44 24 20	 mov	 rax, QWORD PTR ldinext$1[rsp]
  00057	48 89 44 24 40	 mov	 QWORD PTR ldi$[rsp], rax

; 210  :     }

  0005c	eb cc		 jmp	 SHORT $LN2@free_datab
$LN3@free_datab:

; 211  : }

  0005e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00062	5f		 pop	 rdi
  00063	c3		 ret	 0
free_datablock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT init_linkedlist
_TEXT	SEGMENT
ll$ = 48
init_linkedlist PROC					; COMDAT

; 214  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 215  :     ll->first_block = ll->last_block = NULL;

  0002a	48 8b 44 24 30	 mov	 rax, QWORD PTR ll$[rsp]
  0002f	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00037	48 8b 44 24 30	 mov	 rax, QWORD PTR ll$[rsp]
  0003c	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 216  : }

  00043	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00047	5f		 pop	 rdi
  00048	c3		 ret	 0
init_linkedlist ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT free_linkedlist
_TEXT	SEGMENT
ll$ = 48
free_linkedlist PROC					; COMDAT

; 219  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 220  :     free_datablock(ll->first_block);

  0002a	48 8b 44 24 30	 mov	 rax, QWORD PTR ll$[rsp]
  0002f	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00032	e8 00 00 00 00	 call	 free_datablock

; 221  :     ll->first_block = ll->last_block = NULL;

  00037	48 8b 44 24 30	 mov	 rax, QWORD PTR ll$[rsp]
  0003c	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00044	48 8b 44 24 30	 mov	 rax, QWORD PTR ll$[rsp]
  00049	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 222  : }

  00050	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00054	5f		 pop	 rdi
  00055	c3		 ret	 0
free_linkedlist ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT add_data_in_datablock
_TEXT	SEGMENT
ldi$ = 32
from_copy$ = 40
copy_this$1 = 48
i$2 = 52
to_copy$3 = 56
tv69 = 64
ll$ = 96
buf$ = 104
len$ = 112
add_data_in_datablock PROC				; COMDAT

; 226  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 14 00 00 00	 mov	 ecx, 20
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 227  :     linkedlist_datablock_internal* ldi;
; 228  :     const unsigned char* from_copy;
; 229  : 
; 230  :     if (ll==NULL)

  00034	48 83 7c 24 60
	00		 cmp	 QWORD PTR ll$[rsp], 0
  0003a	75 0a		 jne	 SHORT $LN7@add_data_i

; 231  :         return ZIP_INTERNALERROR;

  0003c	b8 98 ff ff ff	 mov	 eax, -104		; ffffffffffffff98H
  00041	e9 7b 01 00 00	 jmp	 $LN1@add_data_i
$LN7@add_data_i:

; 232  : 
; 233  :     if (ll->last_block == NULL)

  00046	48 8b 44 24 60	 mov	 rax, QWORD PTR ll$[rsp]
  0004b	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00050	75 3a		 jne	 SHORT $LN8@add_data_i

; 234  :     {
; 235  :         ll->first_block = ll->last_block = allocate_new_datablock();

  00052	e8 00 00 00 00	 call	 allocate_new_datablock
  00057	48 89 44 24 40	 mov	 QWORD PTR tv69[rsp], rax
  0005c	48 8b 44 24 60	 mov	 rax, QWORD PTR ll$[rsp]
  00061	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv69[rsp]
  00066	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  0006a	48 8b 44 24 60	 mov	 rax, QWORD PTR ll$[rsp]
  0006f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv69[rsp]
  00074	48 89 08	 mov	 QWORD PTR [rax], rcx

; 236  :         if (ll->first_block == NULL)

  00077	48 8b 44 24 60	 mov	 rax, QWORD PTR ll$[rsp]
  0007c	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00080	75 0a		 jne	 SHORT $LN9@add_data_i

; 237  :             return ZIP_INTERNALERROR;

  00082	b8 98 ff ff ff	 mov	 eax, -104		; ffffffffffffff98H
  00087	e9 35 01 00 00	 jmp	 $LN1@add_data_i
$LN9@add_data_i:
$LN8@add_data_i:

; 238  :     }
; 239  : 
; 240  :     ldi = ll->last_block;

  0008c	48 8b 44 24 60	 mov	 rax, QWORD PTR ll$[rsp]
  00091	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00095	48 89 44 24 20	 mov	 QWORD PTR ldi$[rsp], rax

; 241  :     from_copy = (unsigned char*)buf;

  0009a	48 8b 44 24 68	 mov	 rax, QWORD PTR buf$[rsp]
  0009f	48 89 44 24 28	 mov	 QWORD PTR from_copy$[rsp], rax
$LN2@add_data_i:

; 242  : 
; 243  :     while (len>0)

  000a4	83 7c 24 70 00	 cmp	 DWORD PTR len$[rsp], 0
  000a9	0f 86 10 01 00
	00		 jbe	 $LN3@add_data_i

; 244  :     {
; 245  :         uInt copy_this;
; 246  :         uInt i;
; 247  :         unsigned char* to_copy;
; 248  : 
; 249  :         if (ldi->avail_in_this_block==0)

  000af	48 8b 44 24 20	 mov	 rax, QWORD PTR ldi$[rsp]
  000b4	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  000b8	75 3d		 jne	 SHORT $LN10@add_data_i

; 250  :         {
; 251  :             ldi->next_datablock = allocate_new_datablock();

  000ba	e8 00 00 00 00	 call	 allocate_new_datablock
  000bf	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ldi$[rsp]
  000c4	48 89 01	 mov	 QWORD PTR [rcx], rax

; 252  :             if (ldi->next_datablock == NULL)

  000c7	48 8b 44 24 20	 mov	 rax, QWORD PTR ldi$[rsp]
  000cc	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000d0	75 0a		 jne	 SHORT $LN11@add_data_i

; 253  :                 return ZIP_INTERNALERROR;

  000d2	b8 98 ff ff ff	 mov	 eax, -104		; ffffffffffffff98H
  000d7	e9 e5 00 00 00	 jmp	 $LN1@add_data_i
$LN11@add_data_i:

; 254  :             ldi = ldi->next_datablock ;

  000dc	48 8b 44 24 20	 mov	 rax, QWORD PTR ldi$[rsp]
  000e1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000e4	48 89 44 24 20	 mov	 QWORD PTR ldi$[rsp], rax

; 255  :             ll->last_block = ldi;

  000e9	48 8b 44 24 60	 mov	 rax, QWORD PTR ll$[rsp]
  000ee	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ldi$[rsp]
  000f3	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
$LN10@add_data_i:

; 256  :         }
; 257  : 
; 258  :         if (ldi->avail_in_this_block < len)

  000f7	48 8b 44 24 20	 mov	 rax, QWORD PTR ldi$[rsp]
  000fc	8b 4c 24 70	 mov	 ecx, DWORD PTR len$[rsp]
  00100	39 48 08	 cmp	 DWORD PTR [rax+8], ecx
  00103	73 0e		 jae	 SHORT $LN12@add_data_i

; 259  :             copy_this = (uInt)ldi->avail_in_this_block;

  00105	48 8b 44 24 20	 mov	 rax, QWORD PTR ldi$[rsp]
  0010a	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0010d	89 44 24 30	 mov	 DWORD PTR copy_this$1[rsp], eax
  00111	eb 08		 jmp	 SHORT $LN13@add_data_i
$LN12@add_data_i:

; 260  :         else
; 261  :             copy_this = (uInt)len;

  00113	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  00117	89 44 24 30	 mov	 DWORD PTR copy_this$1[rsp], eax
$LN13@add_data_i:

; 262  : 
; 263  :         to_copy = &(ldi->data[ldi->filled_in_this_block]);

  0011b	48 8b 44 24 20	 mov	 rax, QWORD PTR ldi$[rsp]
  00120	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  00123	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ldi$[rsp]
  00128	48 8d 44 01 14	 lea	 rax, QWORD PTR [rcx+rax+20]
  0012d	48 89 44 24 38	 mov	 QWORD PTR to_copy$3[rsp], rax

; 264  : 
; 265  :         for (i=0;i<copy_this;i++)

  00132	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR i$2[rsp], 0
  0013a	eb 0a		 jmp	 SHORT $LN6@add_data_i
$LN4@add_data_i:
  0013c	8b 44 24 34	 mov	 eax, DWORD PTR i$2[rsp]
  00140	ff c0		 inc	 eax
  00142	89 44 24 34	 mov	 DWORD PTR i$2[rsp], eax
$LN6@add_data_i:
  00146	8b 44 24 30	 mov	 eax, DWORD PTR copy_this$1[rsp]
  0014a	39 44 24 34	 cmp	 DWORD PTR i$2[rsp], eax
  0014e	73 1c		 jae	 SHORT $LN5@add_data_i

; 266  :             *(to_copy+i)=*(from_copy+i);

  00150	8b 44 24 34	 mov	 eax, DWORD PTR i$2[rsp]
  00154	8b 4c 24 34	 mov	 ecx, DWORD PTR i$2[rsp]
  00158	48 8b 54 24 38	 mov	 rdx, QWORD PTR to_copy$3[rsp]
  0015d	4c 8b 44 24 28	 mov	 r8, QWORD PTR from_copy$[rsp]
  00162	41 0f b6 04 00	 movzx	 eax, BYTE PTR [r8+rax]
  00167	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0016a	eb d0		 jmp	 SHORT $LN4@add_data_i
$LN5@add_data_i:

; 267  : 
; 268  :         ldi->filled_in_this_block += copy_this;

  0016c	48 8b 44 24 20	 mov	 rax, QWORD PTR ldi$[rsp]
  00171	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  00174	03 44 24 30	 add	 eax, DWORD PTR copy_this$1[rsp]
  00178	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ldi$[rsp]
  0017d	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 269  :         ldi->avail_in_this_block -= copy_this;

  00180	48 8b 44 24 20	 mov	 rax, QWORD PTR ldi$[rsp]
  00185	8b 4c 24 30	 mov	 ecx, DWORD PTR copy_this$1[rsp]
  00189	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0018c	2b c1		 sub	 eax, ecx
  0018e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ldi$[rsp]
  00193	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 270  :         from_copy += copy_this ;

  00196	8b 44 24 30	 mov	 eax, DWORD PTR copy_this$1[rsp]
  0019a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR from_copy$[rsp]
  0019f	48 03 c8	 add	 rcx, rax
  001a2	48 8b c1	 mov	 rax, rcx
  001a5	48 89 44 24 28	 mov	 QWORD PTR from_copy$[rsp], rax

; 271  :         len -= copy_this;

  001aa	8b 44 24 30	 mov	 eax, DWORD PTR copy_this$1[rsp]
  001ae	8b 4c 24 70	 mov	 ecx, DWORD PTR len$[rsp]
  001b2	2b c8		 sub	 ecx, eax
  001b4	8b c1		 mov	 eax, ecx
  001b6	89 44 24 70	 mov	 DWORD PTR len$[rsp], eax

; 272  :     }

  001ba	e9 e5 fe ff ff	 jmp	 $LN2@add_data_i
$LN3@add_data_i:

; 273  :     return ZIP_OK;

  001bf	33 c0		 xor	 eax, eax
$LN1@add_data_i:

; 274  : }

  001c1	48 83 c4 50	 add	 rsp, 80			; 00000050H
  001c5	5f		 pop	 rdi
  001c6	c3		 ret	 0
add_data_in_datablock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zip64local_putValue
_TEXT	SEGMENT
buf$ = 40
n$ = 52
pzlib_filefunc_def$ = 80
filestream$ = 88
x$ = 96
nbByte$ = 104
zip64local_putValue PROC				; COMDAT

; 288  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 10 00 00 00	 mov	 ecx, 16
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00034	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 289  :     unsigned char buf[8];
; 290  :     int n;
; 291  :     for (n = 0; n < nbByte; n++)

  00039	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0
  00041	eb 0a		 jmp	 SHORT $LN4@zip64local
$LN2@zip64local:
  00043	8b 44 24 34	 mov	 eax, DWORD PTR n$[rsp]
  00047	ff c0		 inc	 eax
  00049	89 44 24 34	 mov	 DWORD PTR n$[rsp], eax
$LN4@zip64local:
  0004d	8b 44 24 68	 mov	 eax, DWORD PTR nbByte$[rsp]
  00051	39 44 24 34	 cmp	 DWORD PTR n$[rsp], eax
  00055	7d 24		 jge	 SHORT $LN3@zip64local

; 292  :     {
; 293  :         buf[n] = (unsigned char)(x & 0xff);

  00057	48 8b 44 24 60	 mov	 rax, QWORD PTR x$[rsp]
  0005c	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  00062	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR n$[rsp]
  00067	88 44 0c 28	 mov	 BYTE PTR buf$[rsp+rcx], al

; 294  :         x >>= 8;

  0006b	48 8b 44 24 60	 mov	 rax, QWORD PTR x$[rsp]
  00070	48 c1 e8 08	 shr	 rax, 8
  00074	48 89 44 24 60	 mov	 QWORD PTR x$[rsp], rax

; 295  :     }

  00079	eb c8		 jmp	 SHORT $LN2@zip64local
$LN3@zip64local:

; 296  :     if (x != 0)

  0007b	48 83 7c 24 60
	00		 cmp	 QWORD PTR x$[rsp], 0
  00081	74 2a		 je	 SHORT $LN8@zip64local

; 297  :       {     /* data overflow - hack for ZIP64 (X Roche) */
; 298  :       for (n = 0; n < nbByte; n++)

  00083	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0
  0008b	eb 0a		 jmp	 SHORT $LN7@zip64local
$LN5@zip64local:
  0008d	8b 44 24 34	 mov	 eax, DWORD PTR n$[rsp]
  00091	ff c0		 inc	 eax
  00093	89 44 24 34	 mov	 DWORD PTR n$[rsp], eax
$LN7@zip64local:
  00097	8b 44 24 68	 mov	 eax, DWORD PTR nbByte$[rsp]
  0009b	39 44 24 34	 cmp	 DWORD PTR n$[rsp], eax
  0009f	7d 0c		 jge	 SHORT $LN6@zip64local

; 299  :         {
; 300  :           buf[n] = 0xff;

  000a1	48 63 44 24 34	 movsxd	 rax, DWORD PTR n$[rsp]
  000a6	c6 44 04 28 ff	 mov	 BYTE PTR buf$[rsp+rax], 255 ; 000000ffH

; 301  :         }

  000ab	eb e0		 jmp	 SHORT $LN5@zip64local
$LN6@zip64local:
$LN8@zip64local:

; 302  :       }
; 303  : 
; 304  :     if (ZWRITE64(*pzlib_filefunc_def,filestream,buf,nbByte)!=(uLong)nbByte)

  000ad	44 8b 4c 24 68	 mov	 r9d, DWORD PTR nbByte$[rsp]
  000b2	4c 8d 44 24 28	 lea	 r8, QWORD PTR buf$[rsp]
  000b7	48 8b 54 24 58	 mov	 rdx, QWORD PTR filestream$[rsp]
  000bc	48 8b 44 24 50	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  000c1	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  000c5	48 8b 44 24 50	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  000ca	ff 50 10	 call	 QWORD PTR [rax+16]
  000cd	3b 44 24 68	 cmp	 eax, DWORD PTR nbByte$[rsp]
  000d1	74 09		 je	 SHORT $LN9@zip64local

; 305  :         return ZIP_ERRNO;

  000d3	b8 ff ff ff ff	 mov	 eax, -1
  000d8	eb 04		 jmp	 SHORT $LN1@zip64local
  000da	eb 02		 jmp	 SHORT $LN10@zip64local
$LN9@zip64local:

; 306  :     else
; 307  :         return ZIP_OK;

  000dc	33 c0		 xor	 eax, eax
$LN10@zip64local:
$LN1@zip64local:

; 308  : }

  000de	48 8b f8	 mov	 rdi, rax
  000e1	48 8b cc	 mov	 rcx, rsp
  000e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:zip64local_putValue$rtcFrameData
  000eb	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000f0	48 8b c7	 mov	 rax, rdi
  000f3	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000f7	5f		 pop	 rdi
  000f8	c3		 ret	 0
zip64local_putValue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zip64local_putValue_inmemory
_TEXT	SEGMENT
buf$ = 32
n$ = 40
dest$ = 64
x$ = 72
nbByte$ = 80
zip64local_putValue_inmemory PROC			; COMDAT

; 312  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 0c 00 00 00	 mov	 ecx, 12
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 313  :     unsigned char* buf=(unsigned char*)dest;

  00034	48 8b 44 24 40	 mov	 rax, QWORD PTR dest$[rsp]
  00039	48 89 44 24 20	 mov	 QWORD PTR buf$[rsp], rax

; 314  :     int n;
; 315  :     for (n = 0; n < nbByte; n++) {

  0003e	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0
  00046	eb 0a		 jmp	 SHORT $LN4@zip64local
$LN2@zip64local:
  00048	8b 44 24 28	 mov	 eax, DWORD PTR n$[rsp]
  0004c	ff c0		 inc	 eax
  0004e	89 44 24 28	 mov	 DWORD PTR n$[rsp], eax
$LN4@zip64local:
  00052	8b 44 24 50	 mov	 eax, DWORD PTR nbByte$[rsp]
  00056	39 44 24 28	 cmp	 DWORD PTR n$[rsp], eax
  0005a	7d 28		 jge	 SHORT $LN3@zip64local

; 316  :         buf[n] = (unsigned char)(x & 0xff);

  0005c	48 8b 44 24 48	 mov	 rax, QWORD PTR x$[rsp]
  00061	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  00067	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR n$[rsp]
  0006c	48 8b 54 24 20	 mov	 rdx, QWORD PTR buf$[rsp]
  00071	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 317  :         x >>= 8;

  00074	48 8b 44 24 48	 mov	 rax, QWORD PTR x$[rsp]
  00079	48 c1 e8 08	 shr	 rax, 8
  0007d	48 89 44 24 48	 mov	 QWORD PTR x$[rsp], rax

; 318  :     }

  00082	eb c4		 jmp	 SHORT $LN2@zip64local
$LN3@zip64local:

; 319  : 
; 320  :     if (x != 0)

  00084	48 83 7c 24 48
	00		 cmp	 QWORD PTR x$[rsp], 0
  0008a	74 2e		 je	 SHORT $LN8@zip64local

; 321  :     {     /* data overflow - hack for ZIP64 */
; 322  :        for (n = 0; n < nbByte; n++)

  0008c	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0
  00094	eb 0a		 jmp	 SHORT $LN7@zip64local
$LN5@zip64local:
  00096	8b 44 24 28	 mov	 eax, DWORD PTR n$[rsp]
  0009a	ff c0		 inc	 eax
  0009c	89 44 24 28	 mov	 DWORD PTR n$[rsp], eax
$LN7@zip64local:
  000a0	8b 44 24 50	 mov	 eax, DWORD PTR nbByte$[rsp]
  000a4	39 44 24 28	 cmp	 DWORD PTR n$[rsp], eax
  000a8	7d 10		 jge	 SHORT $LN6@zip64local

; 323  :        {
; 324  :           buf[n] = 0xff;

  000aa	48 63 44 24 28	 movsxd	 rax, DWORD PTR n$[rsp]
  000af	48 8b 4c 24 20	 mov	 rcx, QWORD PTR buf$[rsp]
  000b4	c6 04 01 ff	 mov	 BYTE PTR [rcx+rax], 255	; 000000ffH

; 325  :        }

  000b8	eb dc		 jmp	 SHORT $LN5@zip64local
$LN6@zip64local:
$LN8@zip64local:

; 326  :     }
; 327  : }

  000ba	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000be	5f		 pop	 rdi
  000bf	c3		 ret	 0
zip64local_putValue_inmemory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zip64local_TmzDateToDosDate
_TEXT	SEGMENT
year$ = 32
tv76 = 36
ptm$ = 64
zip64local_TmzDateToDosDate PROC			; COMDAT

; 333  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 334  :     uLong year = (uLong)ptm->tm_year;

  0002a	48 8b 44 24 40	 mov	 rax, QWORD PTR ptm$[rsp]
  0002f	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00032	89 44 24 20	 mov	 DWORD PTR year$[rsp], eax

; 335  :     if (year>=1980)

  00036	81 7c 24 20 bc
	07 00 00	 cmp	 DWORD PTR year$[rsp], 1980 ; 000007bcH
  0003e	72 0f		 jb	 SHORT $LN2@zip64local

; 336  :         year-=1980;

  00040	8b 44 24 20	 mov	 eax, DWORD PTR year$[rsp]
  00044	2d bc 07 00 00	 sub	 eax, 1980		; 000007bcH
  00049	89 44 24 20	 mov	 DWORD PTR year$[rsp], eax
  0004d	eb 12		 jmp	 SHORT $LN3@zip64local
$LN2@zip64local:

; 337  :     else if (year>=80)

  0004f	83 7c 24 20 50	 cmp	 DWORD PTR year$[rsp], 80 ; 00000050H
  00054	72 0b		 jb	 SHORT $LN4@zip64local

; 338  :         year-=80;

  00056	8b 44 24 20	 mov	 eax, DWORD PTR year$[rsp]
  0005a	83 e8 50	 sub	 eax, 80			; 00000050H
  0005d	89 44 24 20	 mov	 DWORD PTR year$[rsp], eax
$LN4@zip64local:
$LN3@zip64local:

; 339  :     return

  00061	48 8b 44 24 40	 mov	 rax, QWORD PTR ptm$[rsp]
  00066	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00069	ff c0		 inc	 eax
  0006b	6b c0 20	 imul	 eax, eax, 32		; 00000020H
  0006e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ptm$[rsp]
  00073	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  00076	03 c8		 add	 ecx, eax
  00078	8b c1		 mov	 eax, ecx
  0007a	69 4c 24 20 00
	02 00 00	 imul	 ecx, DWORD PTR year$[rsp], 512 ; 00000200H
  00082	03 c1		 add	 eax, ecx
  00084	c1 e0 10	 shl	 eax, 16
  00087	89 44 24 24	 mov	 DWORD PTR tv76[rsp], eax
  0008b	33 d2		 xor	 edx, edx
  0008d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ptm$[rsp]
  00092	8b 01		 mov	 eax, DWORD PTR [rcx]
  00094	b9 02 00 00 00	 mov	 ecx, 2
  00099	f7 f1		 div	 ecx
  0009b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ptm$[rsp]
  000a0	6b 49 04 20	 imul	 ecx, DWORD PTR [rcx+4], 32 ; 00000020H
  000a4	03 c1		 add	 eax, ecx
  000a6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ptm$[rsp]
  000ab	69 49 08 00 08
	00 00		 imul	 ecx, DWORD PTR [rcx+8], 2048 ; 00000800H
  000b2	03 c1		 add	 eax, ecx
  000b4	8b 4c 24 24	 mov	 ecx, DWORD PTR tv76[rsp]
  000b8	0b c8		 or	 ecx, eax
  000ba	8b c1		 mov	 eax, ecx

; 340  :       (uLong) (((ptm->tm_mday) + (32 * (ptm->tm_mon+1)) + (512 * year)) << 16) |
; 341  :         ((ptm->tm_sec/2) + (32* ptm->tm_min) + (2048 * (uLong)ptm->tm_hour));
; 342  : }

  000bc	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c0	5f		 pop	 rdi
  000c1	c3		 ret	 0
zip64local_TmzDateToDosDate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zip64local_getByte
_TEXT	SEGMENT
c$ = 36
err$ = 52
pzlib_filefunc_def$ = 80
filestream$ = 88
pi$ = 96
zip64local_getByte PROC					; COMDAT

; 350  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 10 00 00 00	 mov	 ecx, 16
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 351  :     unsigned char c;
; 352  :     int err = (int)ZREAD64(*pzlib_filefunc_def,filestream,&c,1);

  00034	41 b9 01 00 00
	00		 mov	 r9d, 1
  0003a	4c 8d 44 24 24	 lea	 r8, QWORD PTR c$[rsp]
  0003f	48 8b 54 24 58	 mov	 rdx, QWORD PTR filestream$[rsp]
  00044	48 8b 44 24 50	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  00049	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  0004d	48 8b 44 24 50	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  00052	ff 50 08	 call	 QWORD PTR [rax+8]
  00055	89 44 24 34	 mov	 DWORD PTR err$[rsp], eax

; 353  :     if (err==1)

  00059	83 7c 24 34 01	 cmp	 DWORD PTR err$[rsp], 1
  0005e	75 12		 jne	 SHORT $LN2@zip64local

; 354  :     {
; 355  :         *pi = (int)c;

  00060	0f b6 44 24 24	 movzx	 eax, BYTE PTR c$[rsp]
  00065	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pi$[rsp]
  0006a	89 01		 mov	 DWORD PTR [rcx], eax

; 356  :         return ZIP_OK;

  0006c	33 c0		 xor	 eax, eax
  0006e	eb 27		 jmp	 SHORT $LN1@zip64local

; 357  :     }

  00070	eb 25		 jmp	 SHORT $LN3@zip64local
$LN2@zip64local:

; 358  :     else
; 359  :     {
; 360  :         if (ZERROR64(*pzlib_filefunc_def,filestream))

  00072	48 8b 54 24 58	 mov	 rdx, QWORD PTR filestream$[rsp]
  00077	48 8b 44 24 50	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0007c	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  00080	48 8b 44 24 50	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  00085	ff 50 30	 call	 QWORD PTR [rax+48]
  00088	85 c0		 test	 eax, eax
  0008a	74 09		 je	 SHORT $LN4@zip64local

; 361  :             return ZIP_ERRNO;

  0008c	b8 ff ff ff ff	 mov	 eax, -1
  00091	eb 04		 jmp	 SHORT $LN1@zip64local
  00093	eb 02		 jmp	 SHORT $LN5@zip64local
$LN4@zip64local:

; 362  :         else
; 363  :             return ZIP_EOF;

  00095	33 c0		 xor	 eax, eax
$LN5@zip64local:
$LN3@zip64local:
$LN1@zip64local:

; 364  :     }
; 365  : }

  00097	48 8b f8	 mov	 rdi, rax
  0009a	48 8b cc	 mov	 rcx, rsp
  0009d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:zip64local_getByte$rtcFrameData
  000a4	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000a9	48 8b c7	 mov	 rax, rdi
  000ac	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000b0	5f		 pop	 rdi
  000b1	c3		 ret	 0
zip64local_getByte ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zip64local_getShort
_TEXT	SEGMENT
x$ = 32
i$ = 52
err$ = 68
pzlib_filefunc_def$ = 96
filestream$ = 104
pX$ = 112
zip64local_getShort PROC				; COMDAT

; 374  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 14 00 00 00	 mov	 ecx, 20
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 375  :     uLong x ;
; 376  :     int i = 0;

  00034	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0

; 377  :     int err;
; 378  : 
; 379  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0003c	4c 8d 44 24 34	 lea	 r8, QWORD PTR i$[rsp]
  00041	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  00046	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0004b	e8 00 00 00 00	 call	 zip64local_getByte
  00050	89 44 24 44	 mov	 DWORD PTR err$[rsp], eax

; 380  :     x = (uLong)i;

  00054	8b 44 24 34	 mov	 eax, DWORD PTR i$[rsp]
  00058	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax

; 381  : 
; 382  :     if (err==ZIP_OK)

  0005c	83 7c 24 44 00	 cmp	 DWORD PTR err$[rsp], 0
  00061	75 18		 jne	 SHORT $LN2@zip64local

; 383  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00063	4c 8d 44 24 34	 lea	 r8, QWORD PTR i$[rsp]
  00068	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  0006d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00072	e8 00 00 00 00	 call	 zip64local_getByte
  00077	89 44 24 44	 mov	 DWORD PTR err$[rsp], eax
$LN2@zip64local:

; 384  :     x += ((uLong)i)<<8;

  0007b	8b 44 24 34	 mov	 eax, DWORD PTR i$[rsp]
  0007f	c1 e0 08	 shl	 eax, 8
  00082	8b 4c 24 20	 mov	 ecx, DWORD PTR x$[rsp]
  00086	03 c8		 add	 ecx, eax
  00088	8b c1		 mov	 eax, ecx
  0008a	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax

; 385  : 
; 386  :     if (err==ZIP_OK)

  0008e	83 7c 24 44 00	 cmp	 DWORD PTR err$[rsp], 0
  00093	75 0d		 jne	 SHORT $LN3@zip64local

; 387  :         *pX = x;

  00095	48 8b 44 24 70	 mov	 rax, QWORD PTR pX$[rsp]
  0009a	8b 4c 24 20	 mov	 ecx, DWORD PTR x$[rsp]
  0009e	89 08		 mov	 DWORD PTR [rax], ecx
  000a0	eb 0b		 jmp	 SHORT $LN4@zip64local
$LN3@zip64local:

; 388  :     else
; 389  :         *pX = 0;

  000a2	48 8b 44 24 70	 mov	 rax, QWORD PTR pX$[rsp]
  000a7	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
$LN4@zip64local:

; 390  :     return err;

  000ad	8b 44 24 44	 mov	 eax, DWORD PTR err$[rsp]

; 391  : }

  000b1	8b f8		 mov	 edi, eax
  000b3	48 8b cc	 mov	 rcx, rsp
  000b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:zip64local_getShort$rtcFrameData
  000bd	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000c2	8b c7		 mov	 eax, edi
  000c4	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000c8	5f		 pop	 rdi
  000c9	c3		 ret	 0
zip64local_getShort ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zip64local_getLong
_TEXT	SEGMENT
x$ = 32
i$ = 52
err$ = 68
pzlib_filefunc_def$ = 96
filestream$ = 104
pX$ = 112
zip64local_getLong PROC					; COMDAT

; 396  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 14 00 00 00	 mov	 ecx, 20
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 397  :     uLong x ;
; 398  :     int i = 0;

  00034	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0

; 399  :     int err;
; 400  : 
; 401  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0003c	4c 8d 44 24 34	 lea	 r8, QWORD PTR i$[rsp]
  00041	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  00046	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0004b	e8 00 00 00 00	 call	 zip64local_getByte
  00050	89 44 24 44	 mov	 DWORD PTR err$[rsp], eax

; 402  :     x = (uLong)i;

  00054	8b 44 24 34	 mov	 eax, DWORD PTR i$[rsp]
  00058	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax

; 403  : 
; 404  :     if (err==ZIP_OK)

  0005c	83 7c 24 44 00	 cmp	 DWORD PTR err$[rsp], 0
  00061	75 18		 jne	 SHORT $LN2@zip64local

; 405  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00063	4c 8d 44 24 34	 lea	 r8, QWORD PTR i$[rsp]
  00068	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  0006d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00072	e8 00 00 00 00	 call	 zip64local_getByte
  00077	89 44 24 44	 mov	 DWORD PTR err$[rsp], eax
$LN2@zip64local:

; 406  :     x += ((uLong)i)<<8;

  0007b	8b 44 24 34	 mov	 eax, DWORD PTR i$[rsp]
  0007f	c1 e0 08	 shl	 eax, 8
  00082	8b 4c 24 20	 mov	 ecx, DWORD PTR x$[rsp]
  00086	03 c8		 add	 ecx, eax
  00088	8b c1		 mov	 eax, ecx
  0008a	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax

; 407  : 
; 408  :     if (err==ZIP_OK)

  0008e	83 7c 24 44 00	 cmp	 DWORD PTR err$[rsp], 0
  00093	75 18		 jne	 SHORT $LN3@zip64local

; 409  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00095	4c 8d 44 24 34	 lea	 r8, QWORD PTR i$[rsp]
  0009a	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  0009f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  000a4	e8 00 00 00 00	 call	 zip64local_getByte
  000a9	89 44 24 44	 mov	 DWORD PTR err$[rsp], eax
$LN3@zip64local:

; 410  :     x += ((uLong)i)<<16;

  000ad	8b 44 24 34	 mov	 eax, DWORD PTR i$[rsp]
  000b1	c1 e0 10	 shl	 eax, 16
  000b4	8b 4c 24 20	 mov	 ecx, DWORD PTR x$[rsp]
  000b8	03 c8		 add	 ecx, eax
  000ba	8b c1		 mov	 eax, ecx
  000bc	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax

; 411  : 
; 412  :     if (err==ZIP_OK)

  000c0	83 7c 24 44 00	 cmp	 DWORD PTR err$[rsp], 0
  000c5	75 18		 jne	 SHORT $LN4@zip64local

; 413  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  000c7	4c 8d 44 24 34	 lea	 r8, QWORD PTR i$[rsp]
  000cc	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  000d1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  000d6	e8 00 00 00 00	 call	 zip64local_getByte
  000db	89 44 24 44	 mov	 DWORD PTR err$[rsp], eax
$LN4@zip64local:

; 414  :     x += ((uLong)i)<<24;

  000df	8b 44 24 34	 mov	 eax, DWORD PTR i$[rsp]
  000e3	c1 e0 18	 shl	 eax, 24
  000e6	8b 4c 24 20	 mov	 ecx, DWORD PTR x$[rsp]
  000ea	03 c8		 add	 ecx, eax
  000ec	8b c1		 mov	 eax, ecx
  000ee	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax

; 415  : 
; 416  :     if (err==ZIP_OK)

  000f2	83 7c 24 44 00	 cmp	 DWORD PTR err$[rsp], 0
  000f7	75 0d		 jne	 SHORT $LN5@zip64local

; 417  :         *pX = x;

  000f9	48 8b 44 24 70	 mov	 rax, QWORD PTR pX$[rsp]
  000fe	8b 4c 24 20	 mov	 ecx, DWORD PTR x$[rsp]
  00102	89 08		 mov	 DWORD PTR [rax], ecx
  00104	eb 0b		 jmp	 SHORT $LN6@zip64local
$LN5@zip64local:

; 418  :     else
; 419  :         *pX = 0;

  00106	48 8b 44 24 70	 mov	 rax, QWORD PTR pX$[rsp]
  0010b	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
$LN6@zip64local:

; 420  :     return err;

  00111	8b 44 24 44	 mov	 eax, DWORD PTR err$[rsp]

; 421  : }

  00115	8b f8		 mov	 edi, eax
  00117	48 8b cc	 mov	 rcx, rsp
  0011a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:zip64local_getLong$rtcFrameData
  00121	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00126	8b c7		 mov	 eax, edi
  00128	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0012c	5f		 pop	 rdi
  0012d	c3		 ret	 0
zip64local_getLong ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zip64local_getLong64
_TEXT	SEGMENT
x$ = 32
i$ = 52
err$ = 68
pzlib_filefunc_def$ = 96
filestream$ = 104
pX$ = 112
zip64local_getLong64 PROC				; COMDAT

; 427  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 14 00 00 00	 mov	 ecx, 20
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 428  :   ZPOS64_T x;
; 429  :   int i = 0;

  00034	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0

; 430  :   int err;
; 431  : 
; 432  :   err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0003c	4c 8d 44 24 34	 lea	 r8, QWORD PTR i$[rsp]
  00041	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  00046	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0004b	e8 00 00 00 00	 call	 zip64local_getByte
  00050	89 44 24 44	 mov	 DWORD PTR err$[rsp], eax

; 433  :   x = (ZPOS64_T)i;

  00054	48 63 44 24 34	 movsxd	 rax, DWORD PTR i$[rsp]
  00059	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 434  : 
; 435  :   if (err==ZIP_OK)

  0005e	83 7c 24 44 00	 cmp	 DWORD PTR err$[rsp], 0
  00063	75 18		 jne	 SHORT $LN2@zip64local

; 436  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00065	4c 8d 44 24 34	 lea	 r8, QWORD PTR i$[rsp]
  0006a	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  0006f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00074	e8 00 00 00 00	 call	 zip64local_getByte
  00079	89 44 24 44	 mov	 DWORD PTR err$[rsp], eax
$LN2@zip64local:

; 437  :   x += ((ZPOS64_T)i)<<8;

  0007d	48 63 44 24 34	 movsxd	 rax, DWORD PTR i$[rsp]
  00082	48 c1 e0 08	 shl	 rax, 8
  00086	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  0008b	48 03 c8	 add	 rcx, rax
  0008e	48 8b c1	 mov	 rax, rcx
  00091	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 438  : 
; 439  :   if (err==ZIP_OK)

  00096	83 7c 24 44 00	 cmp	 DWORD PTR err$[rsp], 0
  0009b	75 18		 jne	 SHORT $LN3@zip64local

; 440  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0009d	4c 8d 44 24 34	 lea	 r8, QWORD PTR i$[rsp]
  000a2	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  000a7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  000ac	e8 00 00 00 00	 call	 zip64local_getByte
  000b1	89 44 24 44	 mov	 DWORD PTR err$[rsp], eax
$LN3@zip64local:

; 441  :   x += ((ZPOS64_T)i)<<16;

  000b5	48 63 44 24 34	 movsxd	 rax, DWORD PTR i$[rsp]
  000ba	48 c1 e0 10	 shl	 rax, 16
  000be	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  000c3	48 03 c8	 add	 rcx, rax
  000c6	48 8b c1	 mov	 rax, rcx
  000c9	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 442  : 
; 443  :   if (err==ZIP_OK)

  000ce	83 7c 24 44 00	 cmp	 DWORD PTR err$[rsp], 0
  000d3	75 18		 jne	 SHORT $LN4@zip64local

; 444  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  000d5	4c 8d 44 24 34	 lea	 r8, QWORD PTR i$[rsp]
  000da	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  000df	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  000e4	e8 00 00 00 00	 call	 zip64local_getByte
  000e9	89 44 24 44	 mov	 DWORD PTR err$[rsp], eax
$LN4@zip64local:

; 445  :   x += ((ZPOS64_T)i)<<24;

  000ed	48 63 44 24 34	 movsxd	 rax, DWORD PTR i$[rsp]
  000f2	48 c1 e0 18	 shl	 rax, 24
  000f6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  000fb	48 03 c8	 add	 rcx, rax
  000fe	48 8b c1	 mov	 rax, rcx
  00101	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 446  : 
; 447  :   if (err==ZIP_OK)

  00106	83 7c 24 44 00	 cmp	 DWORD PTR err$[rsp], 0
  0010b	75 18		 jne	 SHORT $LN5@zip64local

; 448  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0010d	4c 8d 44 24 34	 lea	 r8, QWORD PTR i$[rsp]
  00112	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  00117	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0011c	e8 00 00 00 00	 call	 zip64local_getByte
  00121	89 44 24 44	 mov	 DWORD PTR err$[rsp], eax
$LN5@zip64local:

; 449  :   x += ((ZPOS64_T)i)<<32;

  00125	48 63 44 24 34	 movsxd	 rax, DWORD PTR i$[rsp]
  0012a	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  0012e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00133	48 03 c8	 add	 rcx, rax
  00136	48 8b c1	 mov	 rax, rcx
  00139	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 450  : 
; 451  :   if (err==ZIP_OK)

  0013e	83 7c 24 44 00	 cmp	 DWORD PTR err$[rsp], 0
  00143	75 18		 jne	 SHORT $LN6@zip64local

; 452  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00145	4c 8d 44 24 34	 lea	 r8, QWORD PTR i$[rsp]
  0014a	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  0014f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00154	e8 00 00 00 00	 call	 zip64local_getByte
  00159	89 44 24 44	 mov	 DWORD PTR err$[rsp], eax
$LN6@zip64local:

; 453  :   x += ((ZPOS64_T)i)<<40;

  0015d	48 63 44 24 34	 movsxd	 rax, DWORD PTR i$[rsp]
  00162	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  00166	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  0016b	48 03 c8	 add	 rcx, rax
  0016e	48 8b c1	 mov	 rax, rcx
  00171	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 454  : 
; 455  :   if (err==ZIP_OK)

  00176	83 7c 24 44 00	 cmp	 DWORD PTR err$[rsp], 0
  0017b	75 18		 jne	 SHORT $LN7@zip64local

; 456  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0017d	4c 8d 44 24 34	 lea	 r8, QWORD PTR i$[rsp]
  00182	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  00187	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0018c	e8 00 00 00 00	 call	 zip64local_getByte
  00191	89 44 24 44	 mov	 DWORD PTR err$[rsp], eax
$LN7@zip64local:

; 457  :   x += ((ZPOS64_T)i)<<48;

  00195	48 63 44 24 34	 movsxd	 rax, DWORD PTR i$[rsp]
  0019a	48 c1 e0 30	 shl	 rax, 48			; 00000030H
  0019e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  001a3	48 03 c8	 add	 rcx, rax
  001a6	48 8b c1	 mov	 rax, rcx
  001a9	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 458  : 
; 459  :   if (err==ZIP_OK)

  001ae	83 7c 24 44 00	 cmp	 DWORD PTR err$[rsp], 0
  001b3	75 18		 jne	 SHORT $LN8@zip64local

; 460  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  001b5	4c 8d 44 24 34	 lea	 r8, QWORD PTR i$[rsp]
  001ba	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  001bf	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  001c4	e8 00 00 00 00	 call	 zip64local_getByte
  001c9	89 44 24 44	 mov	 DWORD PTR err$[rsp], eax
$LN8@zip64local:

; 461  :   x += ((ZPOS64_T)i)<<56;

  001cd	48 63 44 24 34	 movsxd	 rax, DWORD PTR i$[rsp]
  001d2	48 c1 e0 38	 shl	 rax, 56			; 00000038H
  001d6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  001db	48 03 c8	 add	 rcx, rax
  001de	48 8b c1	 mov	 rax, rcx
  001e1	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 462  : 
; 463  :   if (err==ZIP_OK)

  001e6	83 7c 24 44 00	 cmp	 DWORD PTR err$[rsp], 0
  001eb	75 0f		 jne	 SHORT $LN9@zip64local

; 464  :     *pX = x;

  001ed	48 8b 44 24 70	 mov	 rax, QWORD PTR pX$[rsp]
  001f2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  001f7	48 89 08	 mov	 QWORD PTR [rax], rcx
  001fa	eb 0c		 jmp	 SHORT $LN10@zip64local
$LN9@zip64local:

; 465  :   else
; 466  :     *pX = 0;

  001fc	48 8b 44 24 70	 mov	 rax, QWORD PTR pX$[rsp]
  00201	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
$LN10@zip64local:

; 467  : 
; 468  :   return err;

  00208	8b 44 24 44	 mov	 eax, DWORD PTR err$[rsp]

; 469  : }

  0020c	8b f8		 mov	 edi, eax
  0020e	48 8b cc	 mov	 rcx, rsp
  00211	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:zip64local_getLong64$rtcFrameData
  00218	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0021d	8b c7		 mov	 eax, edi
  0021f	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00223	5f		 pop	 rdi
  00224	c3		 ret	 0
zip64local_getLong64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zip64local_SearchCentralDir
_TEXT	SEGMENT
buf$ = 32
uSizeFile$ = 40
uBackRead$ = 48
uMaxBack$ = 56
uPosFound$ = 64
uReadSize$1 = 72
uReadPos$2 = 80
i$3 = 88
tv89 = 92
tv139 = 96
tv140 = 100
pzlib_filefunc_def$ = 128
filestream$ = 136
zip64local_SearchCentralDir PROC			; COMDAT

; 481  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 1c 00 00 00	 mov	 ecx, 28
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR [rsp+128]
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 482  :   unsigned char* buf;
; 483  :   ZPOS64_T uSizeFile;
; 484  :   ZPOS64_T uBackRead;
; 485  :   ZPOS64_T uMaxBack=0xffff; /* maximum size of global comment */

  00032	48 c7 44 24 38
	ff ff 00 00	 mov	 QWORD PTR uMaxBack$[rsp], 65535 ; 0000ffffH

; 486  :   ZPOS64_T uPosFound=0;

  0003b	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR uPosFound$[rsp], 0

; 487  : 
; 488  :   if (ZSEEK64(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  00044	41 b9 02 00 00
	00		 mov	 r9d, 2
  0004a	45 33 c0	 xor	 r8d, r8d
  0004d	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  00055	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0005d	e8 00 00 00 00	 call	 call_zseek64
  00062	85 c0		 test	 eax, eax
  00064	74 07		 je	 SHORT $LN7@zip64local

; 489  :     return 0;

  00066	33 c0		 xor	 eax, eax
  00068	e9 18 02 00 00	 jmp	 $LN1@zip64local
$LN7@zip64local:

; 490  : 
; 491  : 
; 492  :   uSizeFile = ZTELL64(*pzlib_filefunc_def,filestream);

  0006d	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  00075	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0007d	e8 00 00 00 00	 call	 call_ztell64
  00082	48 89 44 24 28	 mov	 QWORD PTR uSizeFile$[rsp], rax

; 493  : 
; 494  :   if (uMaxBack>uSizeFile)

  00087	48 8b 44 24 28	 mov	 rax, QWORD PTR uSizeFile$[rsp]
  0008c	48 39 44 24 38	 cmp	 QWORD PTR uMaxBack$[rsp], rax
  00091	76 0a		 jbe	 SHORT $LN8@zip64local

; 495  :     uMaxBack = uSizeFile;

  00093	48 8b 44 24 28	 mov	 rax, QWORD PTR uSizeFile$[rsp]
  00098	48 89 44 24 38	 mov	 QWORD PTR uMaxBack$[rsp], rax
$LN8@zip64local:

; 496  : 
; 497  :   buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  0009d	b9 04 04 00 00	 mov	 ecx, 1028		; 00000404H
  000a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  000a8	48 89 44 24 20	 mov	 QWORD PTR buf$[rsp], rax

; 498  :   if (buf==NULL)

  000ad	48 83 7c 24 20
	00		 cmp	 QWORD PTR buf$[rsp], 0
  000b3	75 07		 jne	 SHORT $LN9@zip64local

; 499  :     return 0;

  000b5	33 c0		 xor	 eax, eax
  000b7	e9 c9 01 00 00	 jmp	 $LN1@zip64local
$LN9@zip64local:

; 500  : 
; 501  :   uBackRead = 4;

  000bc	48 c7 44 24 30
	04 00 00 00	 mov	 QWORD PTR uBackRead$[rsp], 4
$LN2@zip64local:

; 502  :   while (uBackRead<uMaxBack)

  000c5	48 8b 44 24 38	 mov	 rax, QWORD PTR uMaxBack$[rsp]
  000ca	48 39 44 24 30	 cmp	 QWORD PTR uBackRead$[rsp], rax
  000cf	0f 83 98 01 00
	00		 jae	 $LN3@zip64local

; 503  :   {
; 504  :     uLong uReadSize;
; 505  :     ZPOS64_T uReadPos ;
; 506  :     int i;
; 507  :     if (uBackRead+BUFREADCOMMENT>uMaxBack)

  000d5	0f ae e8	 lfence
  000d8	48 8b 44 24 30	 mov	 rax, QWORD PTR uBackRead$[rsp]
  000dd	48 05 00 04 00
	00		 add	 rax, 1024		; 00000400H
  000e3	48 3b 44 24 38	 cmp	 rax, QWORD PTR uMaxBack$[rsp]
  000e8	76 0c		 jbe	 SHORT $LN10@zip64local

; 508  :       uBackRead = uMaxBack;

  000ea	48 8b 44 24 38	 mov	 rax, QWORD PTR uMaxBack$[rsp]
  000ef	48 89 44 24 30	 mov	 QWORD PTR uBackRead$[rsp], rax
  000f4	eb 10		 jmp	 SHORT $LN11@zip64local
$LN10@zip64local:

; 509  :     else
; 510  :       uBackRead+=BUFREADCOMMENT;

  000f6	48 8b 44 24 30	 mov	 rax, QWORD PTR uBackRead$[rsp]
  000fb	48 05 00 04 00
	00		 add	 rax, 1024		; 00000400H
  00101	48 89 44 24 30	 mov	 QWORD PTR uBackRead$[rsp], rax
$LN11@zip64local:

; 511  :     uReadPos = uSizeFile-uBackRead ;

  00106	48 8b 44 24 30	 mov	 rax, QWORD PTR uBackRead$[rsp]
  0010b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR uSizeFile$[rsp]
  00110	48 2b c8	 sub	 rcx, rax
  00113	48 8b c1	 mov	 rax, rcx
  00116	48 89 44 24 50	 mov	 QWORD PTR uReadPos$2[rsp], rax

; 512  : 
; 513  :     uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?

  0011b	48 8b 44 24 50	 mov	 rax, QWORD PTR uReadPos$2[rsp]
  00120	48 8b 4c 24 28	 mov	 rcx, QWORD PTR uSizeFile$[rsp]
  00125	48 2b c8	 sub	 rcx, rax
  00128	48 8b c1	 mov	 rax, rcx
  0012b	48 3d 04 04 00
	00		 cmp	 rax, 1028		; 00000404H
  00131	76 0a		 jbe	 SHORT $LN18@zip64local
  00133	c7 44 24 5c 04
	04 00 00	 mov	 DWORD PTR tv89[rsp], 1028 ; 00000404H
  0013b	eb 14		 jmp	 SHORT $LN19@zip64local
$LN18@zip64local:
  0013d	48 8b 44 24 50	 mov	 rax, QWORD PTR uReadPos$2[rsp]
  00142	48 8b 4c 24 28	 mov	 rcx, QWORD PTR uSizeFile$[rsp]
  00147	48 2b c8	 sub	 rcx, rax
  0014a	48 8b c1	 mov	 rax, rcx
  0014d	89 44 24 5c	 mov	 DWORD PTR tv89[rsp], eax
$LN19@zip64local:
  00151	8b 44 24 5c	 mov	 eax, DWORD PTR tv89[rsp]
  00155	89 44 24 48	 mov	 DWORD PTR uReadSize$1[rsp], eax

; 514  :       (BUFREADCOMMENT+4) : (uLong)(uSizeFile-uReadPos);
; 515  :     if (ZSEEK64(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00159	45 33 c9	 xor	 r9d, r9d
  0015c	4c 8b 44 24 50	 mov	 r8, QWORD PTR uReadPos$2[rsp]
  00161	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  00169	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00171	e8 00 00 00 00	 call	 call_zseek64
  00176	85 c0		 test	 eax, eax
  00178	74 05		 je	 SHORT $LN12@zip64local

; 516  :       break;

  0017a	e9 ee 00 00 00	 jmp	 $LN3@zip64local
$LN12@zip64local:

; 517  : 
; 518  :     if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  0017f	0f ae e8	 lfence
  00182	44 8b 4c 24 48	 mov	 r9d, DWORD PTR uReadSize$1[rsp]
  00187	4c 8b 44 24 20	 mov	 r8, QWORD PTR buf$[rsp]
  0018c	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  00194	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0019c	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  001a0	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  001a8	ff 50 08	 call	 QWORD PTR [rax+8]
  001ab	3b 44 24 48	 cmp	 eax, DWORD PTR uReadSize$1[rsp]
  001af	74 05		 je	 SHORT $LN13@zip64local

; 519  :       break;

  001b1	e9 b7 00 00 00	 jmp	 $LN3@zip64local
$LN13@zip64local:

; 520  : 
; 521  :     for (i=(int)uReadSize-3; (i--)>0;)

  001b6	8b 44 24 48	 mov	 eax, DWORD PTR uReadSize$1[rsp]
  001ba	83 e8 03	 sub	 eax, 3
  001bd	89 44 24 58	 mov	 DWORD PTR i$3[rsp], eax
$LN4@zip64local:
  001c1	8b 44 24 58	 mov	 eax, DWORD PTR i$3[rsp]
  001c5	89 44 24 60	 mov	 DWORD PTR tv139[rsp], eax
  001c9	8b 44 24 58	 mov	 eax, DWORD PTR i$3[rsp]
  001cd	ff c8		 dec	 eax
  001cf	89 44 24 58	 mov	 DWORD PTR i$3[rsp], eax
  001d3	83 7c 24 60 00	 cmp	 DWORD PTR tv139[rsp], 0
  001d8	7e 0a		 jle	 SHORT $LN20@zip64local
  001da	c7 44 24 64 01
	00 00 00	 mov	 DWORD PTR tv140[rsp], 1
  001e2	eb 08		 jmp	 SHORT $LN21@zip64local
$LN20@zip64local:
  001e4	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tv140[rsp], 0
$LN21@zip64local:
  001ec	83 7c 24 64 00	 cmp	 DWORD PTR tv140[rsp], 0
  001f1	74 6b		 je	 SHORT $LN5@zip64local

; 522  :       if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) &&
; 523  :         ((*(buf+i+2))==0x05) && ((*(buf+i+3))==0x06))

  001f3	48 63 44 24 58	 movsxd	 rax, DWORD PTR i$3[rsp]
  001f8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR buf$[rsp]
  001fd	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00201	83 f8 50	 cmp	 eax, 80			; 00000050H
  00204	75 53		 jne	 SHORT $LN14@zip64local
  00206	48 63 44 24 58	 movsxd	 rax, DWORD PTR i$3[rsp]
  0020b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR buf$[rsp]
  00210	0f b6 44 01 01	 movzx	 eax, BYTE PTR [rcx+rax+1]
  00215	83 f8 4b	 cmp	 eax, 75			; 0000004bH
  00218	75 3f		 jne	 SHORT $LN14@zip64local
  0021a	48 63 44 24 58	 movsxd	 rax, DWORD PTR i$3[rsp]
  0021f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR buf$[rsp]
  00224	0f b6 44 01 02	 movzx	 eax, BYTE PTR [rcx+rax+2]
  00229	83 f8 05	 cmp	 eax, 5
  0022c	75 2b		 jne	 SHORT $LN14@zip64local
  0022e	48 63 44 24 58	 movsxd	 rax, DWORD PTR i$3[rsp]
  00233	48 8b 4c 24 20	 mov	 rcx, QWORD PTR buf$[rsp]
  00238	0f b6 44 01 03	 movzx	 eax, BYTE PTR [rcx+rax+3]
  0023d	83 f8 06	 cmp	 eax, 6
  00240	75 17		 jne	 SHORT $LN14@zip64local

; 524  :       {
; 525  :         uPosFound = uReadPos+i;

  00242	48 63 44 24 58	 movsxd	 rax, DWORD PTR i$3[rsp]
  00247	48 8b 4c 24 50	 mov	 rcx, QWORD PTR uReadPos$2[rsp]
  0024c	48 03 c8	 add	 rcx, rax
  0024f	48 8b c1	 mov	 rax, rcx
  00252	48 89 44 24 40	 mov	 QWORD PTR uPosFound$[rsp], rax

; 526  :         break;

  00257	eb 05		 jmp	 SHORT $LN5@zip64local
$LN14@zip64local:

; 527  :       }

  00259	e9 63 ff ff ff	 jmp	 $LN4@zip64local
$LN5@zip64local:

; 528  : 
; 529  :       if (uPosFound!=0)

  0025e	48 83 7c 24 40
	00		 cmp	 QWORD PTR uPosFound$[rsp], 0
  00264	74 02		 je	 SHORT $LN15@zip64local

; 530  :         break;

  00266	eb 05		 jmp	 SHORT $LN3@zip64local
$LN15@zip64local:

; 531  :   }

  00268	e9 58 fe ff ff	 jmp	 $LN2@zip64local
$LN3@zip64local:

; 532  :   TRYFREE(buf);

  0026d	48 83 7c 24 20
	00		 cmp	 QWORD PTR buf$[rsp], 0
  00273	74 0b		 je	 SHORT $LN16@zip64local
  00275	48 8b 4c 24 20	 mov	 rcx, QWORD PTR buf$[rsp]
  0027a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN16@zip64local:

; 533  :   return uPosFound;

  00280	48 8b 44 24 40	 mov	 rax, QWORD PTR uPosFound$[rsp]
$LN1@zip64local:

; 534  : }

  00285	48 83 c4 70	 add	 rsp, 112		; 00000070H
  00289	5f		 pop	 rdi
  0028a	c3		 ret	 0
zip64local_SearchCentralDir ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zip64local_SearchCentralDir64
_TEXT	SEGMENT
buf$ = 32
uSizeFile$ = 40
uBackRead$ = 48
uMaxBack$ = 56
uPosFound$ = 64
uL$ = 84
relativeOffset$ = 120
uReadSize$5 = 132
uReadPos$6 = 136
i$7 = 144
tv89 = 148
tv139 = 152
tv140 = 156
pzlib_filefunc_def$ = 176
filestream$ = 184
zip64local_SearchCentralDir64 PROC			; COMDAT

; 543  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  00012	48 8b fc	 mov	 rdi, rsp
  00015	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+176]
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00030	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 544  :   unsigned char* buf;
; 545  :   ZPOS64_T uSizeFile;
; 546  :   ZPOS64_T uBackRead;
; 547  :   ZPOS64_T uMaxBack=0xffff; /* maximum size of global comment */

  00035	48 c7 44 24 38
	ff ff 00 00	 mov	 QWORD PTR uMaxBack$[rsp], 65535 ; 0000ffffH

; 548  :   ZPOS64_T uPosFound=0;

  0003e	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR uPosFound$[rsp], 0

; 549  :   uLong uL;
; 550  :   ZPOS64_T relativeOffset;
; 551  : 
; 552  :   if (ZSEEK64(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  00047	41 b9 02 00 00
	00		 mov	 r9d, 2
  0004d	45 33 c0	 xor	 r8d, r8d
  00050	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  00058	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00060	e8 00 00 00 00	 call	 call_zseek64
  00065	85 c0		 test	 eax, eax
  00067	74 07		 je	 SHORT $LN7@zip64local

; 553  :     return 0;

  00069	33 c0		 xor	 eax, eax
  0006b	e9 9c 03 00 00	 jmp	 $LN1@zip64local
$LN7@zip64local:

; 554  : 
; 555  :   uSizeFile = ZTELL64(*pzlib_filefunc_def,filestream);

  00070	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  00078	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00080	e8 00 00 00 00	 call	 call_ztell64
  00085	48 89 44 24 28	 mov	 QWORD PTR uSizeFile$[rsp], rax

; 556  : 
; 557  :   if (uMaxBack>uSizeFile)

  0008a	48 8b 44 24 28	 mov	 rax, QWORD PTR uSizeFile$[rsp]
  0008f	48 39 44 24 38	 cmp	 QWORD PTR uMaxBack$[rsp], rax
  00094	76 0a		 jbe	 SHORT $LN8@zip64local

; 558  :     uMaxBack = uSizeFile;

  00096	48 8b 44 24 28	 mov	 rax, QWORD PTR uSizeFile$[rsp]
  0009b	48 89 44 24 38	 mov	 QWORD PTR uMaxBack$[rsp], rax
$LN8@zip64local:

; 559  : 
; 560  :   buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  000a0	b9 04 04 00 00	 mov	 ecx, 1028		; 00000404H
  000a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  000ab	48 89 44 24 20	 mov	 QWORD PTR buf$[rsp], rax

; 561  :   if (buf==NULL)

  000b0	48 83 7c 24 20
	00		 cmp	 QWORD PTR buf$[rsp], 0
  000b6	75 07		 jne	 SHORT $LN9@zip64local

; 562  :     return 0;

  000b8	33 c0		 xor	 eax, eax
  000ba	e9 4d 03 00 00	 jmp	 $LN1@zip64local
$LN9@zip64local:

; 563  : 
; 564  :   uBackRead = 4;

  000bf	48 c7 44 24 30
	04 00 00 00	 mov	 QWORD PTR uBackRead$[rsp], 4
$LN2@zip64local:

; 565  :   while (uBackRead<uMaxBack)

  000c8	48 8b 44 24 38	 mov	 rax, QWORD PTR uMaxBack$[rsp]
  000cd	48 39 44 24 30	 cmp	 QWORD PTR uBackRead$[rsp], rax
  000d2	0f 83 e6 01 00
	00		 jae	 $LN3@zip64local

; 566  :   {
; 567  :     uLong uReadSize;
; 568  :     ZPOS64_T uReadPos;
; 569  :     int i;
; 570  :     if (uBackRead+BUFREADCOMMENT>uMaxBack)

  000d8	0f ae e8	 lfence
  000db	48 8b 44 24 30	 mov	 rax, QWORD PTR uBackRead$[rsp]
  000e0	48 05 00 04 00
	00		 add	 rax, 1024		; 00000400H
  000e6	48 3b 44 24 38	 cmp	 rax, QWORD PTR uMaxBack$[rsp]
  000eb	76 0c		 jbe	 SHORT $LN10@zip64local

; 571  :       uBackRead = uMaxBack;

  000ed	48 8b 44 24 38	 mov	 rax, QWORD PTR uMaxBack$[rsp]
  000f2	48 89 44 24 30	 mov	 QWORD PTR uBackRead$[rsp], rax
  000f7	eb 10		 jmp	 SHORT $LN11@zip64local
$LN10@zip64local:

; 572  :     else
; 573  :       uBackRead+=BUFREADCOMMENT;

  000f9	48 8b 44 24 30	 mov	 rax, QWORD PTR uBackRead$[rsp]
  000fe	48 05 00 04 00
	00		 add	 rax, 1024		; 00000400H
  00104	48 89 44 24 30	 mov	 QWORD PTR uBackRead$[rsp], rax
$LN11@zip64local:

; 574  :     uReadPos = uSizeFile-uBackRead ;

  00109	48 8b 44 24 30	 mov	 rax, QWORD PTR uBackRead$[rsp]
  0010e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR uSizeFile$[rsp]
  00113	48 2b c8	 sub	 rcx, rax
  00116	48 8b c1	 mov	 rax, rcx
  00119	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR uReadPos$6[rsp], rax

; 575  : 
; 576  :     uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?

  00121	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR uReadPos$6[rsp]
  00129	48 8b 4c 24 28	 mov	 rcx, QWORD PTR uSizeFile$[rsp]
  0012e	48 2b c8	 sub	 rcx, rax
  00131	48 8b c1	 mov	 rax, rcx
  00134	48 3d 04 04 00
	00		 cmp	 rax, 1028		; 00000404H
  0013a	76 0d		 jbe	 SHORT $LN29@zip64local
  0013c	c7 84 24 94 00
	00 00 04 04 00
	00		 mov	 DWORD PTR tv89[rsp], 1028 ; 00000404H
  00147	eb 1a		 jmp	 SHORT $LN30@zip64local
$LN29@zip64local:
  00149	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR uReadPos$6[rsp]
  00151	48 8b 4c 24 28	 mov	 rcx, QWORD PTR uSizeFile$[rsp]
  00156	48 2b c8	 sub	 rcx, rax
  00159	48 8b c1	 mov	 rax, rcx
  0015c	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv89[rsp], eax
$LN30@zip64local:
  00163	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR tv89[rsp]
  0016a	89 84 24 84 00
	00 00		 mov	 DWORD PTR uReadSize$5[rsp], eax

; 577  :       (BUFREADCOMMENT+4) : (uLong)(uSizeFile-uReadPos);
; 578  :     if (ZSEEK64(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00171	45 33 c9	 xor	 r9d, r9d
  00174	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR uReadPos$6[rsp]
  0017c	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  00184	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0018c	e8 00 00 00 00	 call	 call_zseek64
  00191	85 c0		 test	 eax, eax
  00193	74 05		 je	 SHORT $LN12@zip64local

; 579  :       break;

  00195	e9 24 01 00 00	 jmp	 $LN3@zip64local
$LN12@zip64local:

; 580  : 
; 581  :     if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  0019a	0f ae e8	 lfence
  0019d	44 8b 8c 24 84
	00 00 00	 mov	 r9d, DWORD PTR uReadSize$5[rsp]
  001a5	4c 8b 44 24 20	 mov	 r8, QWORD PTR buf$[rsp]
  001aa	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  001b2	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  001ba	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  001be	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  001c6	ff 50 08	 call	 QWORD PTR [rax+8]
  001c9	3b 84 24 84 00
	00 00		 cmp	 eax, DWORD PTR uReadSize$5[rsp]
  001d0	74 05		 je	 SHORT $LN13@zip64local

; 582  :       break;

  001d2	e9 e7 00 00 00	 jmp	 $LN3@zip64local
$LN13@zip64local:

; 583  : 
; 584  :     for (i=(int)uReadSize-3; (i--)>0;)

  001d7	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR uReadSize$5[rsp]
  001de	83 e8 03	 sub	 eax, 3
  001e1	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$7[rsp], eax
$LN4@zip64local:
  001e8	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$7[rsp]
  001ef	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv139[rsp], eax
  001f6	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$7[rsp]
  001fd	ff c8		 dec	 eax
  001ff	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$7[rsp], eax
  00206	83 bc 24 98 00
	00 00 00	 cmp	 DWORD PTR tv139[rsp], 0
  0020e	7e 0d		 jle	 SHORT $LN31@zip64local
  00210	c7 84 24 9c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv140[rsp], 1
  0021b	eb 0b		 jmp	 SHORT $LN32@zip64local
$LN31@zip64local:
  0021d	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv140[rsp], 0
$LN32@zip64local:
  00228	83 bc 24 9c 00
	00 00 00	 cmp	 DWORD PTR tv140[rsp], 0
  00230	74 7d		 je	 SHORT $LN5@zip64local

; 585  :     {
; 586  :       // Signature "0x07064b50" Zip64 end of central directory locater
; 587  :       if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) && ((*(buf+i+2))==0x06) && ((*(buf+i+3))==0x07))

  00232	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$7[rsp]
  0023a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR buf$[rsp]
  0023f	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00243	83 f8 50	 cmp	 eax, 80			; 00000050H
  00246	75 62		 jne	 SHORT $LN14@zip64local
  00248	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$7[rsp]
  00250	48 8b 4c 24 20	 mov	 rcx, QWORD PTR buf$[rsp]
  00255	0f b6 44 01 01	 movzx	 eax, BYTE PTR [rcx+rax+1]
  0025a	83 f8 4b	 cmp	 eax, 75			; 0000004bH
  0025d	75 4b		 jne	 SHORT $LN14@zip64local
  0025f	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$7[rsp]
  00267	48 8b 4c 24 20	 mov	 rcx, QWORD PTR buf$[rsp]
  0026c	0f b6 44 01 02	 movzx	 eax, BYTE PTR [rcx+rax+2]
  00271	83 f8 06	 cmp	 eax, 6
  00274	75 34		 jne	 SHORT $LN14@zip64local
  00276	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$7[rsp]
  0027e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR buf$[rsp]
  00283	0f b6 44 01 03	 movzx	 eax, BYTE PTR [rcx+rax+3]
  00288	83 f8 07	 cmp	 eax, 7
  0028b	75 1d		 jne	 SHORT $LN14@zip64local

; 588  :       {
; 589  :         uPosFound = uReadPos+i;

  0028d	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$7[rsp]
  00295	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR uReadPos$6[rsp]
  0029d	48 03 c8	 add	 rcx, rax
  002a0	48 8b c1	 mov	 rax, rcx
  002a3	48 89 44 24 40	 mov	 QWORD PTR uPosFound$[rsp], rax

; 590  :         break;

  002a8	eb 05		 jmp	 SHORT $LN5@zip64local
$LN14@zip64local:

; 591  :       }
; 592  :     }

  002aa	e9 39 ff ff ff	 jmp	 $LN4@zip64local
$LN5@zip64local:

; 593  : 
; 594  :       if (uPosFound!=0)

  002af	48 83 7c 24 40
	00		 cmp	 QWORD PTR uPosFound$[rsp], 0
  002b5	74 02		 je	 SHORT $LN15@zip64local

; 595  :         break;

  002b7	eb 05		 jmp	 SHORT $LN3@zip64local
$LN15@zip64local:

; 596  :   }

  002b9	e9 0a fe ff ff	 jmp	 $LN2@zip64local
$LN3@zip64local:

; 597  : 
; 598  :   TRYFREE(buf);

  002be	48 83 7c 24 20
	00		 cmp	 QWORD PTR buf$[rsp], 0
  002c4	74 0b		 je	 SHORT $LN16@zip64local
  002c6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR buf$[rsp]
  002cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN16@zip64local:

; 599  :   if (uPosFound == 0)

  002d1	48 83 7c 24 40
	00		 cmp	 QWORD PTR uPosFound$[rsp], 0
  002d7	75 07		 jne	 SHORT $LN17@zip64local

; 600  :     return 0;

  002d9	33 c0		 xor	 eax, eax
  002db	e9 2c 01 00 00	 jmp	 $LN1@zip64local
$LN17@zip64local:

; 601  : 
; 602  :   /* Zip64 end of central directory locator */
; 603  :   if (ZSEEK64(*pzlib_filefunc_def,filestream, uPosFound,ZLIB_FILEFUNC_SEEK_SET)!=0)

  002e0	45 33 c9	 xor	 r9d, r9d
  002e3	4c 8b 44 24 40	 mov	 r8, QWORD PTR uPosFound$[rsp]
  002e8	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  002f0	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  002f8	e8 00 00 00 00	 call	 call_zseek64
  002fd	85 c0		 test	 eax, eax
  002ff	74 07		 je	 SHORT $LN18@zip64local

; 604  :     return 0;

  00301	33 c0		 xor	 eax, eax
  00303	e9 04 01 00 00	 jmp	 $LN1@zip64local
$LN18@zip64local:

; 605  : 
; 606  :   /* the signature, already checked */
; 607  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  00308	4c 8d 44 24 54	 lea	 r8, QWORD PTR uL$[rsp]
  0030d	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  00315	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0031d	e8 00 00 00 00	 call	 zip64local_getLong
  00322	85 c0		 test	 eax, eax
  00324	74 07		 je	 SHORT $LN19@zip64local

; 608  :     return 0;

  00326	33 c0		 xor	 eax, eax
  00328	e9 df 00 00 00	 jmp	 $LN1@zip64local
$LN19@zip64local:

; 609  : 
; 610  :   /* number of the disk with the start of the zip64 end of  central directory */
; 611  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  0032d	4c 8d 44 24 54	 lea	 r8, QWORD PTR uL$[rsp]
  00332	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  0033a	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00342	e8 00 00 00 00	 call	 zip64local_getLong
  00347	85 c0		 test	 eax, eax
  00349	74 07		 je	 SHORT $LN20@zip64local

; 612  :     return 0;

  0034b	33 c0		 xor	 eax, eax
  0034d	e9 ba 00 00 00	 jmp	 $LN1@zip64local
$LN20@zip64local:

; 613  :   if (uL != 0)

  00352	83 7c 24 54 00	 cmp	 DWORD PTR uL$[rsp], 0
  00357	74 07		 je	 SHORT $LN21@zip64local

; 614  :     return 0;

  00359	33 c0		 xor	 eax, eax
  0035b	e9 ac 00 00 00	 jmp	 $LN1@zip64local
$LN21@zip64local:

; 615  : 
; 616  :   /* relative offset of the zip64 end of central directory record */
; 617  :   if (zip64local_getLong64(pzlib_filefunc_def,filestream,&relativeOffset)!=ZIP_OK)

  00360	4c 8d 44 24 78	 lea	 r8, QWORD PTR relativeOffset$[rsp]
  00365	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  0036d	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00375	e8 00 00 00 00	 call	 zip64local_getLong64
  0037a	85 c0		 test	 eax, eax
  0037c	74 07		 je	 SHORT $LN22@zip64local

; 618  :     return 0;

  0037e	33 c0		 xor	 eax, eax
  00380	e9 87 00 00 00	 jmp	 $LN1@zip64local
$LN22@zip64local:

; 619  : 
; 620  :   /* total number of disks */
; 621  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  00385	4c 8d 44 24 54	 lea	 r8, QWORD PTR uL$[rsp]
  0038a	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  00392	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0039a	e8 00 00 00 00	 call	 zip64local_getLong
  0039f	85 c0		 test	 eax, eax
  003a1	74 04		 je	 SHORT $LN23@zip64local

; 622  :     return 0;

  003a3	33 c0		 xor	 eax, eax
  003a5	eb 65		 jmp	 SHORT $LN1@zip64local
$LN23@zip64local:

; 623  :   if (uL != 1)

  003a7	83 7c 24 54 01	 cmp	 DWORD PTR uL$[rsp], 1
  003ac	74 04		 je	 SHORT $LN24@zip64local

; 624  :     return 0;

  003ae	33 c0		 xor	 eax, eax
  003b0	eb 5a		 jmp	 SHORT $LN1@zip64local
$LN24@zip64local:

; 625  : 
; 626  :   /* Goto Zip64 end of central directory record */
; 627  :   if (ZSEEK64(*pzlib_filefunc_def,filestream, relativeOffset,ZLIB_FILEFUNC_SEEK_SET)!=0)

  003b2	45 33 c9	 xor	 r9d, r9d
  003b5	4c 8b 44 24 78	 mov	 r8, QWORD PTR relativeOffset$[rsp]
  003ba	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  003c2	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  003ca	e8 00 00 00 00	 call	 call_zseek64
  003cf	85 c0		 test	 eax, eax
  003d1	74 04		 je	 SHORT $LN25@zip64local

; 628  :     return 0;

  003d3	33 c0		 xor	 eax, eax
  003d5	eb 35		 jmp	 SHORT $LN1@zip64local
$LN25@zip64local:

; 629  : 
; 630  :   /* the signature */
; 631  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  003d7	4c 8d 44 24 54	 lea	 r8, QWORD PTR uL$[rsp]
  003dc	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  003e4	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  003ec	e8 00 00 00 00	 call	 zip64local_getLong
  003f1	85 c0		 test	 eax, eax
  003f3	74 04		 je	 SHORT $LN26@zip64local

; 632  :     return 0;

  003f5	33 c0		 xor	 eax, eax
  003f7	eb 13		 jmp	 SHORT $LN1@zip64local
$LN26@zip64local:

; 633  : 
; 634  :   if (uL != 0x06064b50) // signature of 'Zip64 end of central directory'

  003f9	81 7c 24 54 50
	4b 06 06	 cmp	 DWORD PTR uL$[rsp], 101075792 ; 06064b50H
  00401	74 04		 je	 SHORT $LN27@zip64local

; 635  :     return 0;

  00403	33 c0		 xor	 eax, eax
  00405	eb 05		 jmp	 SHORT $LN1@zip64local
$LN27@zip64local:

; 636  : 
; 637  :   return relativeOffset;

  00407	48 8b 44 24 78	 mov	 rax, QWORD PTR relativeOffset$[rsp]
$LN1@zip64local:

; 638  : }

  0040c	48 8b f8	 mov	 rdi, rax
  0040f	48 8b cc	 mov	 rcx, rsp
  00412	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:zip64local_SearchCentralDir64$rtcFrameData
  00419	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0041e	48 8b c7	 mov	 rax, rdi
  00421	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  00428	5f		 pop	 rdi
  00429	c3		 ret	 0
zip64local_SearchCentralDir64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT LoadCentralDirectoryRecord
_TEXT	SEGMENT
err$ = 32
byte_before_the_zipfile$ = 40
size_central_dir$ = 56
offset_central_dir$ = 88
central_pos$ = 104
uL$ = 116
number_disk$ = 148
number_disk_with_CD$ = 180
number_entry$ = 216
number_entry_CD$ = 248
VersionMadeBy$ = 276
VersionNeeded$ = 308
size_comment$ = 340
hasZIP64Record$ = 356
sizeEndOfCentralDirectory$14 = 376
size_central_dir_to_read$15 = 392
buf_size$16 = 400
buf_read$17 = 408
read_this$18 = 416
pziinit$ = 448
LoadCentralDirectoryRecord PROC				; COMDAT

; 641  : {

$LN50:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec b0 01
	00 00		 sub	 rsp, 432		; 000001b0H
  0000d	48 8b fc	 mov	 rdi, rsp
  00010	b9 6c 00 00 00	 mov	 ecx, 108		; 0000006cH
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+448]
  00024	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 642  :   int err=ZIP_OK;

  00030	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 643  :   ZPOS64_T byte_before_the_zipfile;/* byte before the zipfile, (>0 for sfx)*/
; 644  : 
; 645  :   ZPOS64_T size_central_dir;     /* size of the central directory  */
; 646  :   ZPOS64_T offset_central_dir;   /* offset of start of central directory */
; 647  :   ZPOS64_T central_pos;
; 648  :   uLong uL;
; 649  : 
; 650  :   uLong number_disk;          /* number of the current dist, used for
; 651  :                               spaning ZIP, unsupported, always 0*/
; 652  :   uLong number_disk_with_CD;  /* number the the disk with central dir, used
; 653  :                               for spaning ZIP, unsupported, always 0*/
; 654  :   ZPOS64_T number_entry;
; 655  :   ZPOS64_T number_entry_CD;      /* total number of entries in
; 656  :                                 the central dir
; 657  :                                 (same than number_entry on nospan) */
; 658  :   uLong VersionMadeBy;
; 659  :   uLong VersionNeeded;
; 660  :   uLong size_comment;
; 661  : 
; 662  :   int hasZIP64Record = 0;

  00038	c7 84 24 64 01
	00 00 00 00 00
	00		 mov	 DWORD PTR hasZIP64Record$[rsp], 0

; 663  : 
; 664  :   // check first if we find a ZIP64 record
; 665  :   central_pos = zip64local_SearchCentralDir64(&pziinit->z_filefunc,pziinit->filestream);

  00043	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  0004b	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  00053	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00057	48 8b c8	 mov	 rcx, rax
  0005a	e8 00 00 00 00	 call	 zip64local_SearchCentralDir64
  0005f	48 89 44 24 68	 mov	 QWORD PTR central_pos$[rsp], rax

; 666  :   if(central_pos > 0)

  00064	48 83 7c 24 68
	00		 cmp	 QWORD PTR central_pos$[rsp], 0
  0006a	76 0d		 jbe	 SHORT $LN4@LoadCentra

; 667  :   {
; 668  :     hasZIP64Record = 1;

  0006c	c7 84 24 64 01
	00 00 01 00 00
	00		 mov	 DWORD PTR hasZIP64Record$[rsp], 1

; 669  :   }

  00077	eb 2c		 jmp	 SHORT $LN5@LoadCentra
$LN4@LoadCentra:

; 670  :   else if(central_pos == 0)

  00079	48 83 7c 24 68
	00		 cmp	 QWORD PTR central_pos$[rsp], 0
  0007f	75 24		 jne	 SHORT $LN6@LoadCentra

; 671  :   {
; 672  :     central_pos = zip64local_SearchCentralDir(&pziinit->z_filefunc,pziinit->filestream);

  00081	0f ae e8	 lfence
  00084	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  0008c	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  00094	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00098	48 8b c8	 mov	 rcx, rax
  0009b	e8 00 00 00 00	 call	 zip64local_SearchCentralDir
  000a0	48 89 44 24 68	 mov	 QWORD PTR central_pos$[rsp], rax
$LN6@LoadCentra:
$LN5@LoadCentra:

; 673  :   }
; 674  : 
; 675  : /* disable to allow appending to empty ZIP archive
; 676  :         if (central_pos==0)
; 677  :             err=ZIP_ERRNO;
; 678  : */
; 679  : 
; 680  :   if(hasZIP64Record)

  000a5	83 bc 24 64 01
	00 00 00	 cmp	 DWORD PTR hasZIP64Record$[rsp], 0
  000ad	0f 84 45 02 00
	00		 je	 $LN7@LoadCentra

; 681  :   {
; 682  :     ZPOS64_T sizeEndOfCentralDirectory;
; 683  :     if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, central_pos, ZLIB_FILEFUNC_SEEK_SET) != 0)

  000b3	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  000bb	45 33 c9	 xor	 r9d, r9d
  000be	4c 8b 44 24 68	 mov	 r8, QWORD PTR central_pos$[rsp]
  000c3	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  000cb	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  000cf	48 8b c8	 mov	 rcx, rax
  000d2	e8 00 00 00 00	 call	 call_zseek64
  000d7	85 c0		 test	 eax, eax
  000d9	74 08		 je	 SHORT $LN9@LoadCentra

; 684  :       err=ZIP_ERRNO;

  000db	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN9@LoadCentra:

; 685  : 
; 686  :     /* the signature, already checked */
; 687  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&uL)!=ZIP_OK)

  000e3	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  000eb	4c 8d 44 24 74	 lea	 r8, QWORD PTR uL$[rsp]
  000f0	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  000f8	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  000fc	48 8b c8	 mov	 rcx, rax
  000ff	e8 00 00 00 00	 call	 zip64local_getLong
  00104	85 c0		 test	 eax, eax
  00106	74 08		 je	 SHORT $LN10@LoadCentra

; 688  :       err=ZIP_ERRNO;

  00108	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN10@LoadCentra:

; 689  : 
; 690  :     /* size of zip64 end of central directory record */
; 691  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream, &sizeEndOfCentralDirectory)!=ZIP_OK)

  00110	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  00118	4c 8d 84 24 78
	01 00 00	 lea	 r8, QWORD PTR sizeEndOfCentralDirectory$14[rsp]
  00120	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  00128	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0012c	48 8b c8	 mov	 rcx, rax
  0012f	e8 00 00 00 00	 call	 zip64local_getLong64
  00134	85 c0		 test	 eax, eax
  00136	74 08		 je	 SHORT $LN11@LoadCentra

; 692  :       err=ZIP_ERRNO;

  00138	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN11@LoadCentra:

; 693  : 
; 694  :     /* version made by */
; 695  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &VersionMadeBy)!=ZIP_OK)

  00140	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  00148	4c 8d 84 24 14
	01 00 00	 lea	 r8, QWORD PTR VersionMadeBy$[rsp]
  00150	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  00158	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0015c	48 8b c8	 mov	 rcx, rax
  0015f	e8 00 00 00 00	 call	 zip64local_getShort
  00164	85 c0		 test	 eax, eax
  00166	74 08		 je	 SHORT $LN12@LoadCentra

; 696  :       err=ZIP_ERRNO;

  00168	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN12@LoadCentra:

; 697  : 
; 698  :     /* version needed to extract */
; 699  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &VersionNeeded)!=ZIP_OK)

  00170	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  00178	4c 8d 84 24 34
	01 00 00	 lea	 r8, QWORD PTR VersionNeeded$[rsp]
  00180	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  00188	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0018c	48 8b c8	 mov	 rcx, rax
  0018f	e8 00 00 00 00	 call	 zip64local_getShort
  00194	85 c0		 test	 eax, eax
  00196	74 08		 je	 SHORT $LN13@LoadCentra

; 700  :       err=ZIP_ERRNO;

  00198	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN13@LoadCentra:

; 701  : 
; 702  :     /* number of this disk */
; 703  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&number_disk)!=ZIP_OK)

  001a0	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  001a8	4c 8d 84 24 94
	00 00 00	 lea	 r8, QWORD PTR number_disk$[rsp]
  001b0	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  001b8	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  001bc	48 8b c8	 mov	 rcx, rax
  001bf	e8 00 00 00 00	 call	 zip64local_getLong
  001c4	85 c0		 test	 eax, eax
  001c6	74 08		 je	 SHORT $LN14@LoadCentra

; 704  :       err=ZIP_ERRNO;

  001c8	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN14@LoadCentra:

; 705  : 
; 706  :     /* number of the disk with the start of the central directory */
; 707  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&number_disk_with_CD)!=ZIP_OK)

  001d0	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  001d8	4c 8d 84 24 b4
	00 00 00	 lea	 r8, QWORD PTR number_disk_with_CD$[rsp]
  001e0	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  001e8	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  001ec	48 8b c8	 mov	 rcx, rax
  001ef	e8 00 00 00 00	 call	 zip64local_getLong
  001f4	85 c0		 test	 eax, eax
  001f6	74 08		 je	 SHORT $LN15@LoadCentra

; 708  :       err=ZIP_ERRNO;

  001f8	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN15@LoadCentra:

; 709  : 
; 710  :     /* total number of entries in the central directory on this disk */
; 711  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream, &number_entry)!=ZIP_OK)

  00200	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  00208	4c 8d 84 24 d8
	00 00 00	 lea	 r8, QWORD PTR number_entry$[rsp]
  00210	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  00218	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0021c	48 8b c8	 mov	 rcx, rax
  0021f	e8 00 00 00 00	 call	 zip64local_getLong64
  00224	85 c0		 test	 eax, eax
  00226	74 08		 je	 SHORT $LN16@LoadCentra

; 712  :       err=ZIP_ERRNO;

  00228	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN16@LoadCentra:

; 713  : 
; 714  :     /* total number of entries in the central directory */
; 715  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream,&number_entry_CD)!=ZIP_OK)

  00230	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  00238	4c 8d 84 24 f8
	00 00 00	 lea	 r8, QWORD PTR number_entry_CD$[rsp]
  00240	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  00248	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0024c	48 8b c8	 mov	 rcx, rax
  0024f	e8 00 00 00 00	 call	 zip64local_getLong64
  00254	85 c0		 test	 eax, eax
  00256	74 08		 je	 SHORT $LN17@LoadCentra

; 716  :       err=ZIP_ERRNO;

  00258	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN17@LoadCentra:

; 717  : 
; 718  :     if ((number_entry_CD!=number_entry) || (number_disk_with_CD!=0) || (number_disk!=0))

  00260	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR number_entry$[rsp]
  00268	48 39 84 24 f8
	00 00 00	 cmp	 QWORD PTR number_entry_CD$[rsp], rax
  00270	75 14		 jne	 SHORT $LN19@LoadCentra
  00272	83 bc 24 b4 00
	00 00 00	 cmp	 DWORD PTR number_disk_with_CD$[rsp], 0
  0027a	75 0a		 jne	 SHORT $LN19@LoadCentra
  0027c	83 bc 24 94 00
	00 00 00	 cmp	 DWORD PTR number_disk$[rsp], 0
  00284	74 08		 je	 SHORT $LN18@LoadCentra
$LN19@LoadCentra:

; 719  :       err=ZIP_BADZIPFILE;

  00286	c7 44 24 20 99
	ff ff ff	 mov	 DWORD PTR err$[rsp], -103 ; ffffffffffffff99H
$LN18@LoadCentra:

; 720  : 
; 721  :     /* size of the central directory */
; 722  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream,&size_central_dir)!=ZIP_OK)

  0028e	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  00296	4c 8d 44 24 38	 lea	 r8, QWORD PTR size_central_dir$[rsp]
  0029b	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  002a3	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  002a7	48 8b c8	 mov	 rcx, rax
  002aa	e8 00 00 00 00	 call	 zip64local_getLong64
  002af	85 c0		 test	 eax, eax
  002b1	74 08		 je	 SHORT $LN20@LoadCentra

; 723  :       err=ZIP_ERRNO;

  002b3	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN20@LoadCentra:

; 724  : 
; 725  :     /* offset of start of central directory with respect to the
; 726  :     starting disk number */
; 727  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream,&offset_central_dir)!=ZIP_OK)

  002bb	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  002c3	4c 8d 44 24 58	 lea	 r8, QWORD PTR offset_central_dir$[rsp]
  002c8	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  002d0	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  002d4	48 8b c8	 mov	 rcx, rax
  002d7	e8 00 00 00 00	 call	 zip64local_getLong64
  002dc	85 c0		 test	 eax, eax
  002de	74 08		 je	 SHORT $LN21@LoadCentra

; 728  :       err=ZIP_ERRNO;

  002e0	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN21@LoadCentra:

; 729  : 
; 730  :     // TODO..
; 731  :     // read the comment from the standard central header.
; 732  :     size_comment = 0;

  002e8	c7 84 24 54 01
	00 00 00 00 00
	00		 mov	 DWORD PTR size_comment$[rsp], 0

; 733  :   }

  002f3	e9 2b 02 00 00	 jmp	 $LN8@LoadCentra
$LN7@LoadCentra:

; 734  :   else
; 735  :   {
; 736  :     // Read End of central Directory info
; 737  :     if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, central_pos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  002f8	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  00300	45 33 c9	 xor	 r9d, r9d
  00303	4c 8b 44 24 68	 mov	 r8, QWORD PTR central_pos$[rsp]
  00308	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  00310	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00314	48 8b c8	 mov	 rcx, rax
  00317	e8 00 00 00 00	 call	 call_zseek64
  0031c	85 c0		 test	 eax, eax
  0031e	74 08		 je	 SHORT $LN22@LoadCentra

; 738  :       err=ZIP_ERRNO;

  00320	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN22@LoadCentra:

; 739  : 
; 740  :     /* the signature, already checked */
; 741  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&uL)!=ZIP_OK)

  00328	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  00330	4c 8d 44 24 74	 lea	 r8, QWORD PTR uL$[rsp]
  00335	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  0033d	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00341	48 8b c8	 mov	 rcx, rax
  00344	e8 00 00 00 00	 call	 zip64local_getLong
  00349	85 c0		 test	 eax, eax
  0034b	74 08		 je	 SHORT $LN23@LoadCentra

; 742  :       err=ZIP_ERRNO;

  0034d	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN23@LoadCentra:

; 743  : 
; 744  :     /* number of this disk */
; 745  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream,&number_disk)!=ZIP_OK)

  00355	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  0035d	4c 8d 84 24 94
	00 00 00	 lea	 r8, QWORD PTR number_disk$[rsp]
  00365	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  0036d	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00371	48 8b c8	 mov	 rcx, rax
  00374	e8 00 00 00 00	 call	 zip64local_getShort
  00379	85 c0		 test	 eax, eax
  0037b	74 08		 je	 SHORT $LN24@LoadCentra

; 746  :       err=ZIP_ERRNO;

  0037d	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN24@LoadCentra:

; 747  : 
; 748  :     /* number of the disk with the start of the central directory */
; 749  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream,&number_disk_with_CD)!=ZIP_OK)

  00385	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  0038d	4c 8d 84 24 b4
	00 00 00	 lea	 r8, QWORD PTR number_disk_with_CD$[rsp]
  00395	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  0039d	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  003a1	48 8b c8	 mov	 rcx, rax
  003a4	e8 00 00 00 00	 call	 zip64local_getShort
  003a9	85 c0		 test	 eax, eax
  003ab	74 08		 je	 SHORT $LN25@LoadCentra

; 750  :       err=ZIP_ERRNO;

  003ad	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN25@LoadCentra:

; 751  : 
; 752  :     /* total number of entries in the central dir on this disk */
; 753  :     number_entry = 0;

  003b5	48 c7 84 24 d8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR number_entry$[rsp], 0

; 754  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  003c1	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  003c9	4c 8d 44 24 74	 lea	 r8, QWORD PTR uL$[rsp]
  003ce	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  003d6	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  003da	48 8b c8	 mov	 rcx, rax
  003dd	e8 00 00 00 00	 call	 zip64local_getShort
  003e2	85 c0		 test	 eax, eax
  003e4	74 0a		 je	 SHORT $LN26@LoadCentra

; 755  :       err=ZIP_ERRNO;

  003e6	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
  003ee	eb 0c		 jmp	 SHORT $LN27@LoadCentra
$LN26@LoadCentra:

; 756  :     else
; 757  :       number_entry = uL;

  003f0	8b 44 24 74	 mov	 eax, DWORD PTR uL$[rsp]
  003f4	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR number_entry$[rsp], rax
$LN27@LoadCentra:

; 758  : 
; 759  :     /* total number of entries in the central dir */
; 760  :     number_entry_CD = 0;

  003fc	48 c7 84 24 f8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR number_entry_CD$[rsp], 0

; 761  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  00408	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  00410	4c 8d 44 24 74	 lea	 r8, QWORD PTR uL$[rsp]
  00415	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  0041d	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00421	48 8b c8	 mov	 rcx, rax
  00424	e8 00 00 00 00	 call	 zip64local_getShort
  00429	85 c0		 test	 eax, eax
  0042b	74 0a		 je	 SHORT $LN28@LoadCentra

; 762  :       err=ZIP_ERRNO;

  0042d	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
  00435	eb 0c		 jmp	 SHORT $LN29@LoadCentra
$LN28@LoadCentra:

; 763  :     else
; 764  :       number_entry_CD = uL;

  00437	8b 44 24 74	 mov	 eax, DWORD PTR uL$[rsp]
  0043b	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR number_entry_CD$[rsp], rax
$LN29@LoadCentra:

; 765  : 
; 766  :     if ((number_entry_CD!=number_entry) || (number_disk_with_CD!=0) || (number_disk!=0))

  00443	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR number_entry$[rsp]
  0044b	48 39 84 24 f8
	00 00 00	 cmp	 QWORD PTR number_entry_CD$[rsp], rax
  00453	75 14		 jne	 SHORT $LN31@LoadCentra
  00455	83 bc 24 b4 00
	00 00 00	 cmp	 DWORD PTR number_disk_with_CD$[rsp], 0
  0045d	75 0a		 jne	 SHORT $LN31@LoadCentra
  0045f	83 bc 24 94 00
	00 00 00	 cmp	 DWORD PTR number_disk$[rsp], 0
  00467	74 08		 je	 SHORT $LN30@LoadCentra
$LN31@LoadCentra:

; 767  :       err=ZIP_BADZIPFILE;

  00469	c7 44 24 20 99
	ff ff ff	 mov	 DWORD PTR err$[rsp], -103 ; ffffffffffffff99H
$LN30@LoadCentra:

; 768  : 
; 769  :     /* size of the central directory */
; 770  :     size_central_dir = 0;

  00471	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR size_central_dir$[rsp], 0

; 771  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  0047a	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  00482	4c 8d 44 24 74	 lea	 r8, QWORD PTR uL$[rsp]
  00487	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  0048f	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00493	48 8b c8	 mov	 rcx, rax
  00496	e8 00 00 00 00	 call	 zip64local_getLong
  0049b	85 c0		 test	 eax, eax
  0049d	74 0a		 je	 SHORT $LN32@LoadCentra

; 772  :       err=ZIP_ERRNO;

  0049f	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
  004a7	eb 09		 jmp	 SHORT $LN33@LoadCentra
$LN32@LoadCentra:

; 773  :     else
; 774  :       size_central_dir = uL;

  004a9	8b 44 24 74	 mov	 eax, DWORD PTR uL$[rsp]
  004ad	48 89 44 24 38	 mov	 QWORD PTR size_central_dir$[rsp], rax
$LN33@LoadCentra:

; 775  : 
; 776  :     /* offset of start of central directory with respect to the starting disk number */
; 777  :     offset_central_dir = 0;

  004b2	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR offset_central_dir$[rsp], 0

; 778  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  004bb	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  004c3	4c 8d 44 24 74	 lea	 r8, QWORD PTR uL$[rsp]
  004c8	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  004d0	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  004d4	48 8b c8	 mov	 rcx, rax
  004d7	e8 00 00 00 00	 call	 zip64local_getLong
  004dc	85 c0		 test	 eax, eax
  004de	74 0a		 je	 SHORT $LN34@LoadCentra

; 779  :       err=ZIP_ERRNO;

  004e0	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
  004e8	eb 09		 jmp	 SHORT $LN35@LoadCentra
$LN34@LoadCentra:

; 780  :     else
; 781  :       offset_central_dir = uL;

  004ea	8b 44 24 74	 mov	 eax, DWORD PTR uL$[rsp]
  004ee	48 89 44 24 58	 mov	 QWORD PTR offset_central_dir$[rsp], rax
$LN35@LoadCentra:

; 782  : 
; 783  : 
; 784  :     /* zipfile global comment length */
; 785  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &size_comment)!=ZIP_OK)

  004f3	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  004fb	4c 8d 84 24 54
	01 00 00	 lea	 r8, QWORD PTR size_comment$[rsp]
  00503	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  0050b	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0050f	48 8b c8	 mov	 rcx, rax
  00512	e8 00 00 00 00	 call	 zip64local_getShort
  00517	85 c0		 test	 eax, eax
  00519	74 08		 je	 SHORT $LN36@LoadCentra

; 786  :       err=ZIP_ERRNO;

  0051b	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN36@LoadCentra:
$LN8@LoadCentra:

; 787  :   }
; 788  : 
; 789  :   if ((central_pos<offset_central_dir+size_central_dir) &&

  00523	48 8b 44 24 38	 mov	 rax, QWORD PTR size_central_dir$[rsp]
  00528	48 8b 4c 24 58	 mov	 rcx, QWORD PTR offset_central_dir$[rsp]
  0052d	48 03 c8	 add	 rcx, rax
  00530	48 8b c1	 mov	 rax, rcx
  00533	48 39 44 24 68	 cmp	 QWORD PTR central_pos$[rsp], rax
  00538	73 0f		 jae	 SHORT $LN37@LoadCentra
  0053a	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  0053f	75 08		 jne	 SHORT $LN37@LoadCentra

; 790  :     (err==ZIP_OK))
; 791  :     err=ZIP_BADZIPFILE;

  00541	c7 44 24 20 99
	ff ff ff	 mov	 DWORD PTR err$[rsp], -103 ; ffffffffffffff99H
$LN37@LoadCentra:

; 792  : 
; 793  :   if (err!=ZIP_OK)

  00549	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  0054e	74 2d		 je	 SHORT $LN38@LoadCentra

; 794  :   {
; 795  :     ZCLOSE64(pziinit->z_filefunc, pziinit->filestream);

  00550	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  00558	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  0055c	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  00564	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  00568	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  00570	ff 50 28	 call	 QWORD PTR [rax+40]

; 796  :     return ZIP_ERRNO;

  00573	b8 ff ff ff ff	 mov	 eax, -1
  00578	e9 9f 02 00 00	 jmp	 $LN1@LoadCentra
$LN38@LoadCentra:

; 797  :   }
; 798  : 
; 799  :   if (size_comment>0)

  0057d	83 bc 24 54 01
	00 00 00	 cmp	 DWORD PTR size_comment$[rsp], 0
  00585	0f 86 8f 00 00
	00		 jbe	 $LN39@LoadCentra

; 800  :   {
; 801  :     pziinit->globalcomment = (char*)ALLOC(size_comment+1);

  0058b	8b 84 24 54 01
	00 00		 mov	 eax, DWORD PTR size_comment$[rsp]
  00592	ff c0		 inc	 eax
  00594	8b c0		 mov	 eax, eax
  00596	8b c8		 mov	 ecx, eax
  00598	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0059e	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  005a6	48 89 81 60 01
	01 00		 mov	 QWORD PTR [rcx+65888], rax

; 802  :     if (pziinit->globalcomment)

  005ad	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  005b5	48 83 b8 60 01
	01 00 00	 cmp	 QWORD PTR [rax+65888], 0
  005bd	74 5b		 je	 SHORT $LN40@LoadCentra

; 803  :     {
; 804  :       size_comment = ZREAD64(pziinit->z_filefunc, pziinit->filestream, pziinit->globalcomment,size_comment);

  005bf	44 8b 8c 24 54
	01 00 00	 mov	 r9d, DWORD PTR size_comment$[rsp]
  005c7	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  005cf	4c 8b 80 60 01
	01 00		 mov	 r8, QWORD PTR [rax+65888]
  005d6	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  005de	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  005e2	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  005ea	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  005ee	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  005f6	ff 50 08	 call	 QWORD PTR [rax+8]
  005f9	89 84 24 54 01
	00 00		 mov	 DWORD PTR size_comment$[rsp], eax

; 805  :       pziinit->globalcomment[size_comment]=0;

  00600	8b 84 24 54 01
	00 00		 mov	 eax, DWORD PTR size_comment$[rsp]
  00607	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  0060f	48 8b 89 60 01
	01 00		 mov	 rcx, QWORD PTR [rcx+65888]
  00616	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0
$LN40@LoadCentra:
$LN39@LoadCentra:

; 806  :     }
; 807  :   }
; 808  : 
; 809  :   byte_before_the_zipfile = central_pos - (offset_central_dir+size_central_dir);

  0061a	48 8b 44 24 38	 mov	 rax, QWORD PTR size_central_dir$[rsp]
  0061f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR offset_central_dir$[rsp]
  00624	48 03 c8	 add	 rcx, rax
  00627	48 8b c1	 mov	 rax, rcx
  0062a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR central_pos$[rsp]
  0062f	48 2b c8	 sub	 rcx, rax
  00632	48 8b c1	 mov	 rax, rcx
  00635	48 89 44 24 28	 mov	 QWORD PTR byte_before_the_zipfile$[rsp], rax

; 810  :   pziinit->add_position_when_writing_offset = byte_before_the_zipfile;

  0063a	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  00642	48 8b 4c 24 28	 mov	 rcx, QWORD PTR byte_before_the_zipfile$[rsp]
  00647	48 89 88 50 01
	01 00		 mov	 QWORD PTR [rax+65872], rcx

; 811  : 
; 812  :   {
; 813  :     ZPOS64_T size_central_dir_to_read = size_central_dir;

  0064e	48 8b 44 24 38	 mov	 rax, QWORD PTR size_central_dir$[rsp]
  00653	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR size_central_dir_to_read$15[rsp], rax

; 814  :     size_t buf_size = SIZEDATA_INDATABLOCK;

  0065b	48 c7 84 24 90
	01 00 00 f0 0f
	00 00		 mov	 QWORD PTR buf_size$16[rsp], 4080 ; 00000ff0H

; 815  :     void* buf_read = (void*)ALLOC(buf_size);

  00667	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR buf_size$16[rsp]
  0066f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00675	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR buf_read$17[rsp], rax

; 816  :     if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, offset_central_dir + byte_before_the_zipfile, ZLIB_FILEFUNC_SEEK_SET) != 0)

  0067d	48 8b 44 24 28	 mov	 rax, QWORD PTR byte_before_the_zipfile$[rsp]
  00682	48 8b 4c 24 58	 mov	 rcx, QWORD PTR offset_central_dir$[rsp]
  00687	48 03 c8	 add	 rcx, rax
  0068a	48 8b c1	 mov	 rax, rcx
  0068d	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  00695	45 33 c9	 xor	 r9d, r9d
  00698	4c 8b c0	 mov	 r8, rax
  0069b	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  006a3	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  006a7	e8 00 00 00 00	 call	 call_zseek64
  006ac	85 c0		 test	 eax, eax
  006ae	74 08		 je	 SHORT $LN41@LoadCentra

; 817  :       err=ZIP_ERRNO;

  006b0	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN41@LoadCentra:
$LN2@LoadCentra:

; 818  : 
; 819  :     while ((size_central_dir_to_read>0) && (err==ZIP_OK))

  006b8	48 83 bc 24 88
	01 00 00 00	 cmp	 QWORD PTR size_central_dir_to_read$15[rsp], 0
  006c1	0f 86 d2 00 00
	00		 jbe	 $LN3@LoadCentra
  006c7	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  006cc	0f 85 c7 00 00
	00		 jne	 $LN3@LoadCentra

; 820  :     {
; 821  :       ZPOS64_T read_this = SIZEDATA_INDATABLOCK;

  006d2	48 c7 84 24 a0
	01 00 00 f0 0f
	00 00		 mov	 QWORD PTR read_this$18[rsp], 4080 ; 00000ff0H

; 822  :       if (read_this > size_central_dir_to_read)

  006de	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR size_central_dir_to_read$15[rsp]
  006e6	48 39 84 24 a0
	01 00 00	 cmp	 QWORD PTR read_this$18[rsp], rax
  006ee	76 10		 jbe	 SHORT $LN42@LoadCentra

; 823  :         read_this = size_central_dir_to_read;

  006f0	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR size_central_dir_to_read$15[rsp]
  006f8	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR read_this$18[rsp], rax
$LN42@LoadCentra:

; 824  : 
; 825  :       if (ZREAD64(pziinit->z_filefunc, pziinit->filestream,buf_read,(uLong)read_this) != read_this)

  00700	44 8b 8c 24 a0
	01 00 00	 mov	 r9d, DWORD PTR read_this$18[rsp]
  00708	4c 8b 84 24 98
	01 00 00	 mov	 r8, QWORD PTR buf_read$17[rsp]
  00710	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  00718	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  0071c	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  00724	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  00728	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  00730	ff 50 08	 call	 QWORD PTR [rax+8]
  00733	8b c0		 mov	 eax, eax
  00735	48 3b 84 24 a0
	01 00 00	 cmp	 rax, QWORD PTR read_this$18[rsp]
  0073d	74 08		 je	 SHORT $LN43@LoadCentra

; 826  :         err=ZIP_ERRNO;

  0073f	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN43@LoadCentra:

; 827  : 
; 828  :       if (err==ZIP_OK)

  00747	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  0074c	75 28		 jne	 SHORT $LN44@LoadCentra

; 829  :         err = add_data_in_datablock(&pziinit->central_dir,buf_read, (uLong)read_this);

  0074e	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  00756	48 83 c0 60	 add	 rax, 96			; 00000060H
  0075a	44 8b 84 24 a0
	01 00 00	 mov	 r8d, DWORD PTR read_this$18[rsp]
  00762	48 8b 94 24 98
	01 00 00	 mov	 rdx, QWORD PTR buf_read$17[rsp]
  0076a	48 8b c8	 mov	 rcx, rax
  0076d	e8 00 00 00 00	 call	 add_data_in_datablock
  00772	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN44@LoadCentra:

; 830  : 
; 831  :       size_central_dir_to_read-=read_this;

  00776	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR read_this$18[rsp]
  0077e	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR size_central_dir_to_read$15[rsp]
  00786	48 2b c8	 sub	 rcx, rax
  00789	48 8b c1	 mov	 rax, rcx
  0078c	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR size_central_dir_to_read$15[rsp], rax

; 832  :     }

  00794	e9 1f ff ff ff	 jmp	 $LN2@LoadCentra
$LN3@LoadCentra:

; 833  :     TRYFREE(buf_read);

  00799	48 83 bc 24 98
	01 00 00 00	 cmp	 QWORD PTR buf_read$17[rsp], 0
  007a2	74 0e		 je	 SHORT $LN45@LoadCentra
  007a4	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR buf_read$17[rsp]
  007ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN45@LoadCentra:

; 834  :   }
; 835  :   pziinit->begin_pos = byte_before_the_zipfile;

  007b2	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  007ba	48 8b 4c 24 28	 mov	 rcx, QWORD PTR byte_before_the_zipfile$[rsp]
  007bf	48 89 88 48 01
	01 00		 mov	 QWORD PTR [rax+65864], rcx

; 836  :   pziinit->number_entry = number_entry_CD;

  007c6	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  007ce	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR number_entry_CD$[rsp]
  007d6	48 89 88 58 01
	01 00		 mov	 QWORD PTR [rax+65880], rcx

; 837  : 
; 838  :   if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, offset_central_dir+byte_before_the_zipfile,ZLIB_FILEFUNC_SEEK_SET) != 0)

  007dd	48 8b 44 24 28	 mov	 rax, QWORD PTR byte_before_the_zipfile$[rsp]
  007e2	48 8b 4c 24 58	 mov	 rcx, QWORD PTR offset_central_dir$[rsp]
  007e7	48 03 c8	 add	 rcx, rax
  007ea	48 8b c1	 mov	 rax, rcx
  007ed	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  007f5	45 33 c9	 xor	 r9d, r9d
  007f8	4c 8b c0	 mov	 r8, rax
  007fb	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  00803	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  00807	e8 00 00 00 00	 call	 call_zseek64
  0080c	85 c0		 test	 eax, eax
  0080e	74 08		 je	 SHORT $LN46@LoadCentra

; 839  :     err=ZIP_ERRNO;

  00810	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN46@LoadCentra:

; 840  : 
; 841  :   return err;

  00818	8b 44 24 20	 mov	 eax, DWORD PTR err$[rsp]
$LN1@LoadCentra:

; 842  : }

  0081c	48 8b f8	 mov	 rdi, rax
  0081f	48 8b cc	 mov	 rcx, rsp
  00822	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:LoadCentralDirectoryRecord$rtcFrameData
  00829	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0082e	48 8b c7	 mov	 rax, rdi
  00831	48 81 c4 b0 01
	00 00		 add	 rsp, 432		; 000001b0H
  00838	5f		 pop	 rdi
  00839	c3		 ret	 0
LoadCentralDirectoryRecord ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zipOpen3
_TEXT	SEGMENT
ziinit$ = 48
zi$ = 65960
err$ = 65968
tv69 = 65972
pathname$ = 66016
append$ = 66024
globalcomment$ = 66032
pzlib_filefunc64_32_def$ = 66040
zipOpen3 PROC						; COMDAT

; 850  : {

$LN19:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	56		 push	 rsi
  00014	57		 push	 rdi
  00015	b8 c8 01 01 00	 mov	 eax, 65992		; 000101c8H
  0001a	e8 00 00 00 00	 call	 __chkstk
  0001f	48 2b e0	 sub	 rsp, rax
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 72 40 00 00	 mov	 ecx, 16498		; 00004072H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 e0
	01 01 00	 mov	 rcx, QWORD PTR [rsp+66016]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 851  :     zip64_internal ziinit;
; 852  :     zip64_internal* zi;
; 853  :     int err=ZIP_OK;

  00045	c7 84 24 b0 01
	01 00 00 00 00
	00		 mov	 DWORD PTR err$[rsp], 0

; 854  : 
; 855  :     ziinit.z_filefunc.zseek32_file = NULL;

  00050	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR ziinit$[rsp+80], 0

; 856  :     ziinit.z_filefunc.ztell32_file = NULL;

  0005c	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR ziinit$[rsp+72], 0

; 857  :     if (pzlib_filefunc64_32_def==NULL)

  00065	48 83 bc 24 f8
	01 01 00 00	 cmp	 QWORD PTR pzlib_filefunc64_32_def$[rsp], 0
  0006e	75 0c		 jne	 SHORT $LN2@zipOpen3

; 858  :         fill_fopen64_filefunc(&ziinit.z_filefunc.zfile_func64);

  00070	48 8d 4c 24 30	 lea	 rcx, QWORD PTR ziinit$[rsp]
  00075	e8 00 00 00 00	 call	 fill_fopen64_filefunc
  0007a	eb 17		 jmp	 SHORT $LN3@zipOpen3
$LN2@zipOpen3:

; 859  :     else
; 860  :         ziinit.z_filefunc = *pzlib_filefunc64_32_def;

  0007c	48 8d 44 24 30	 lea	 rax, QWORD PTR ziinit$[rsp]
  00081	48 8b f8	 mov	 rdi, rax
  00084	48 8b b4 24 f8
	01 01 00	 mov	 rsi, QWORD PTR pzlib_filefunc64_32_def$[rsp]
  0008c	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  00091	f3 a4		 rep movsb
$LN3@zipOpen3:

; 861  : 
; 862  :     ziinit.filestream = ZOPEN64(ziinit.z_filefunc,

  00093	83 bc 24 e8 01
	01 00 00	 cmp	 DWORD PTR append$[rsp], 0
  0009b	75 0d		 jne	 SHORT $LN14@zipOpen3
  0009d	c7 84 24 b4 01
	01 00 0b 00 00
	00		 mov	 DWORD PTR tv69[rsp], 11
  000a8	eb 0b		 jmp	 SHORT $LN15@zipOpen3
$LN14@zipOpen3:
  000aa	c7 84 24 b4 01
	01 00 07 00 00
	00		 mov	 DWORD PTR tv69[rsp], 7
$LN15@zipOpen3:
  000b5	44 8b 84 24 b4
	01 01 00	 mov	 r8d, DWORD PTR tv69[rsp]
  000bd	48 8b 94 24 e0
	01 01 00	 mov	 rdx, QWORD PTR pathname$[rsp]
  000c5	48 8d 4c 24 30	 lea	 rcx, QWORD PTR ziinit$[rsp]
  000ca	e8 00 00 00 00	 call	 call_zopen64
  000cf	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR ziinit$[rsp+88], rax

; 863  :                   pathname,
; 864  :                   (append == APPEND_STATUS_CREATE) ?
; 865  :                   (ZLIB_FILEFUNC_MODE_READ | ZLIB_FILEFUNC_MODE_WRITE | ZLIB_FILEFUNC_MODE_CREATE) :
; 866  :                     (ZLIB_FILEFUNC_MODE_READ | ZLIB_FILEFUNC_MODE_WRITE | ZLIB_FILEFUNC_MODE_EXISTING));
; 867  : 
; 868  :     if (ziinit.filestream == NULL)

  000d7	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR ziinit$[rsp+88], 0
  000e0	75 07		 jne	 SHORT $LN4@zipOpen3

; 869  :         return NULL;

  000e2	33 c0		 xor	 eax, eax
  000e4	e9 56 01 00 00	 jmp	 $LN1@zipOpen3
$LN4@zipOpen3:

; 870  : 
; 871  :     if (append == APPEND_STATUS_CREATEAFTER)

  000e9	83 bc 24 e8 01
	01 00 01	 cmp	 DWORD PTR append$[rsp], 1
  000f1	75 1b		 jne	 SHORT $LN5@zipOpen3

; 872  :         ZSEEK64(ziinit.z_filefunc,ziinit.filestream,0,SEEK_END);

  000f3	41 b9 02 00 00
	00		 mov	 r9d, 2
  000f9	45 33 c0	 xor	 r8d, r8d
  000fc	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR ziinit$[rsp+88]
  00104	48 8d 4c 24 30	 lea	 rcx, QWORD PTR ziinit$[rsp]
  00109	e8 00 00 00 00	 call	 call_zseek64
$LN5@zipOpen3:

; 873  : 
; 874  :     ziinit.begin_pos = ZTELL64(ziinit.z_filefunc,ziinit.filestream);

  0010e	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR ziinit$[rsp+88]
  00116	48 8d 4c 24 30	 lea	 rcx, QWORD PTR ziinit$[rsp]
  0011b	e8 00 00 00 00	 call	 call_ztell64
  00120	48 89 84 24 78
	01 01 00	 mov	 QWORD PTR ziinit$[rsp+65864], rax

; 875  :     ziinit.in_opened_file_inzip = 0;

  00128	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ziinit$[rsp+112], 0

; 876  :     ziinit.ci.stream_initialised = 0;

  00133	c7 84 24 00 01
	00 00 00 00 00
	00		 mov	 DWORD PTR ziinit$[rsp+208], 0

; 877  :     ziinit.number_entry = 0;

  0013e	48 c7 84 24 88
	01 01 00 00 00
	00 00		 mov	 QWORD PTR ziinit$[rsp+65880], 0

; 878  :     ziinit.add_position_when_writing_offset = 0;

  0014a	48 c7 84 24 80
	01 01 00 00 00
	00 00		 mov	 QWORD PTR ziinit$[rsp+65872], 0

; 879  :     init_linkedlist(&(ziinit.central_dir));

  00156	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR ziinit$[rsp+96]
  0015e	e8 00 00 00 00	 call	 init_linkedlist

; 880  : 
; 881  : 
; 882  : 
; 883  :     zi = (zip64_internal*)ALLOC(sizeof(zip64_internal));

  00163	b9 68 01 01 00	 mov	 ecx, 65896		; 00010168H
  00168	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0016e	48 89 84 24 a8
	01 01 00	 mov	 QWORD PTR zi$[rsp], rax

; 884  :     if (zi==NULL)

  00176	48 83 bc 24 a8
	01 01 00 00	 cmp	 QWORD PTR zi$[rsp], 0
  0017f	75 18		 jne	 SHORT $LN6@zipOpen3

; 885  :     {
; 886  :         ZCLOSE64(ziinit.z_filefunc,ziinit.filestream);

  00181	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR ziinit$[rsp+88]
  00189	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ziinit$[rsp+56]
  0018e	ff 54 24 58	 call	 QWORD PTR ziinit$[rsp+40]

; 887  :         return NULL;

  00192	33 c0		 xor	 eax, eax
  00194	e9 a6 00 00 00	 jmp	 $LN1@zipOpen3
$LN6@zipOpen3:

; 888  :     }
; 889  : 
; 890  :     /* now we add file in a zipfile */
; 891  : #    ifndef NO_ADDFILEINEXISTINGZIP
; 892  :     ziinit.globalcomment = NULL;

  00199	48 c7 84 24 90
	01 01 00 00 00
	00 00		 mov	 QWORD PTR ziinit$[rsp+65888], 0

; 893  :     if (append == APPEND_STATUS_ADDINZIP)

  001a5	83 bc 24 e8 01
	01 00 02	 cmp	 DWORD PTR append$[rsp], 2
  001ad	75 11		 jne	 SHORT $LN7@zipOpen3

; 894  :     {
; 895  :       // Read and Cache Central Directory Records
; 896  :       err = LoadCentralDirectoryRecord(&ziinit);

  001af	48 8d 4c 24 30	 lea	 rcx, QWORD PTR ziinit$[rsp]
  001b4	e8 00 00 00 00	 call	 LoadCentralDirectoryRecord
  001b9	89 84 24 b0 01
	01 00		 mov	 DWORD PTR err$[rsp], eax
$LN7@zipOpen3:

; 897  :     }
; 898  : 
; 899  :     if (globalcomment)

  001c0	48 83 bc 24 f0
	01 01 00 00	 cmp	 QWORD PTR globalcomment$[rsp], 0
  001c9	74 13		 je	 SHORT $LN8@zipOpen3

; 900  :     {
; 901  :       *globalcomment = ziinit.globalcomment;

  001cb	48 8b 84 24 f0
	01 01 00	 mov	 rax, QWORD PTR globalcomment$[rsp]
  001d3	48 8b 8c 24 90
	01 01 00	 mov	 rcx, QWORD PTR ziinit$[rsp+65888]
  001db	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN8@zipOpen3:

; 902  :     }
; 903  : #    endif /* !NO_ADDFILEINEXISTINGZIP*/
; 904  : 
; 905  :     if (err != ZIP_OK)

  001de	83 bc 24 b0 01
	01 00 00	 cmp	 DWORD PTR err$[rsp], 0
  001e6	74 38		 je	 SHORT $LN9@zipOpen3

; 906  :     {
; 907  : #    ifndef NO_ADDFILEINEXISTINGZIP
; 908  :         TRYFREE(ziinit.globalcomment);

  001e8	48 83 bc 24 90
	01 01 00 00	 cmp	 QWORD PTR ziinit$[rsp+65888], 0
  001f1	74 0e		 je	 SHORT $LN11@zipOpen3
  001f3	48 8b 8c 24 90
	01 01 00	 mov	 rcx, QWORD PTR ziinit$[rsp+65888]
  001fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN11@zipOpen3:

; 909  : #    endif /* !NO_ADDFILEINEXISTINGZIP*/
; 910  :         TRYFREE(zi);

  00201	48 83 bc 24 a8
	01 01 00 00	 cmp	 QWORD PTR zi$[rsp], 0
  0020a	74 0e		 je	 SHORT $LN12@zipOpen3
  0020c	48 8b 8c 24 a8
	01 01 00	 mov	 rcx, QWORD PTR zi$[rsp]
  00214	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN12@zipOpen3:

; 911  :         return NULL;

  0021a	33 c0		 xor	 eax, eax
  0021c	eb 21		 jmp	 SHORT $LN1@zipOpen3

; 912  :     }

  0021e	eb 1f		 jmp	 SHORT $LN10@zipOpen3
$LN9@zipOpen3:

; 913  :     else
; 914  :     {
; 915  :         *zi = ziinit;

  00220	48 8d 44 24 30	 lea	 rax, QWORD PTR ziinit$[rsp]
  00225	48 8b bc 24 a8
	01 01 00	 mov	 rdi, QWORD PTR zi$[rsp]
  0022d	48 8b f0	 mov	 rsi, rax
  00230	b9 68 01 01 00	 mov	 ecx, 65896		; 00010168H
  00235	f3 a4		 rep movsb

; 916  :         return (zipFile)zi;

  00237	48 8b 84 24 a8
	01 01 00	 mov	 rax, QWORD PTR zi$[rsp]
$LN10@zipOpen3:
$LN1@zipOpen3:

; 917  :     }
; 918  : }

  0023f	48 8b f8	 mov	 rdi, rax
  00242	48 8b cc	 mov	 rcx, rsp
  00245	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:zipOpen3$rtcFrameData
  0024c	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00251	48 8b c7	 mov	 rax, rdi
  00254	48 81 c4 c8 01
	01 00		 add	 rsp, 65992		; 000101c8H
  0025b	5f		 pop	 rdi
  0025c	5e		 pop	 rsi
  0025d	c3		 ret	 0
zipOpen3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zipOpen2
_TEXT	SEGMENT
zlib_filefunc64_32_def_fill$4 = 48
pathname$ = 176
append$ = 184
globalcomment$ = 192
pzlib_filefunc32_def$ = 200
zipOpen2 PROC						; COMDAT

; 921  : {

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	57		 push	 rdi
  00014	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  0001b	48 8b fc	 mov	 rdi, rsp
  0001e	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+176]
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00039	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 922  :     if (pzlib_filefunc32_def != NULL)

  0003e	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR pzlib_filefunc32_def$[rsp], 0
  00047	74 37		 je	 SHORT $LN2@zipOpen2

; 923  :     {
; 924  :         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
; 925  :         fill_zlib_filefunc64_32_def_from_filefunc32(&zlib_filefunc64_32_def_fill,pzlib_filefunc32_def);

  00049	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR pzlib_filefunc32_def$[rsp]
  00051	48 8d 4c 24 30	 lea	 rcx, QWORD PTR zlib_filefunc64_32_def_fill$4[rsp]
  00056	e8 00 00 00 00	 call	 fill_zlib_filefunc64_32_def_from_filefunc32

; 926  :         return zipOpen3(pathname, append, globalcomment, &zlib_filefunc64_32_def_fill);

  0005b	4c 8d 4c 24 30	 lea	 r9, QWORD PTR zlib_filefunc64_32_def_fill$4[rsp]
  00060	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR globalcomment$[rsp]
  00068	8b 94 24 b8 00
	00 00		 mov	 edx, DWORD PTR append$[rsp]
  0006f	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pathname$[rsp]
  00077	e8 00 00 00 00	 call	 zipOpen3
  0007c	eb 21		 jmp	 SHORT $LN1@zipOpen2

; 927  :     }

  0007e	eb 1f		 jmp	 SHORT $LN3@zipOpen2
$LN2@zipOpen2:

; 928  :     else
; 929  :         return zipOpen3(pathname, append, globalcomment, NULL);

  00080	45 33 c9	 xor	 r9d, r9d
  00083	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR globalcomment$[rsp]
  0008b	8b 94 24 b8 00
	00 00		 mov	 edx, DWORD PTR append$[rsp]
  00092	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pathname$[rsp]
  0009a	e8 00 00 00 00	 call	 zipOpen3
$LN3@zipOpen2:
$LN1@zipOpen2:

; 930  : }

  0009f	48 8b f8	 mov	 rdi, rax
  000a2	48 8b cc	 mov	 rcx, rsp
  000a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:zipOpen2$rtcFrameData
  000ac	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000b1	48 8b c7	 mov	 rax, rdi
  000b4	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  000bb	5f		 pop	 rdi
  000bc	c3		 ret	 0
zipOpen2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zipOpen2_64
_TEXT	SEGMENT
zlib_filefunc64_32_def_fill$4 = 48
pathname$ = 192
append$ = 200
globalcomment$ = 208
pzlib_filefunc_def$ = 216
zipOpen2_64 PROC					; COMDAT

; 933  : {

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	56		 push	 rsi
  00014	57		 push	 rdi
  00015	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 2a 00 00 00	 mov	 ecx, 42			; 0000002aH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+192]
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0003a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 934  :     if (pzlib_filefunc_def != NULL)

  0003f	48 83 bc 24 d8
	00 00 00 00	 cmp	 QWORD PTR pzlib_filefunc_def$[rsp], 0
  00048	74 51		 je	 SHORT $LN2@zipOpen2_6

; 935  :     {
; 936  :         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
; 937  :         zlib_filefunc64_32_def_fill.zfile_func64 = *pzlib_filefunc_def;

  0004a	48 8d 44 24 30	 lea	 rax, QWORD PTR zlib_filefunc64_32_def_fill$4[rsp]
  0004f	48 8b f8	 mov	 rdi, rax
  00052	48 8b b4 24 d8
	00 00 00	 mov	 rsi, QWORD PTR pzlib_filefunc_def$[rsp]
  0005a	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0005f	f3 a4		 rep movsb

; 938  :         zlib_filefunc64_32_def_fill.ztell32_file = NULL;

  00061	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR zlib_filefunc64_32_def_fill$4[rsp+72], 0

; 939  :         zlib_filefunc64_32_def_fill.zseek32_file = NULL;

  0006a	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR zlib_filefunc64_32_def_fill$4[rsp+80], 0

; 940  :         return zipOpen3(pathname, append, globalcomment, &zlib_filefunc64_32_def_fill);

  00076	4c 8d 4c 24 30	 lea	 r9, QWORD PTR zlib_filefunc64_32_def_fill$4[rsp]
  0007b	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR globalcomment$[rsp]
  00083	8b 94 24 c8 00
	00 00		 mov	 edx, DWORD PTR append$[rsp]
  0008a	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR pathname$[rsp]
  00092	e8 00 00 00 00	 call	 zipOpen3
  00097	eb 21		 jmp	 SHORT $LN1@zipOpen2_6

; 941  :     }

  00099	eb 1f		 jmp	 SHORT $LN3@zipOpen2_6
$LN2@zipOpen2_6:

; 942  :     else
; 943  :         return zipOpen3(pathname, append, globalcomment, NULL);

  0009b	45 33 c9	 xor	 r9d, r9d
  0009e	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR globalcomment$[rsp]
  000a6	8b 94 24 c8 00
	00 00		 mov	 edx, DWORD PTR append$[rsp]
  000ad	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR pathname$[rsp]
  000b5	e8 00 00 00 00	 call	 zipOpen3
$LN3@zipOpen2_6:
$LN1@zipOpen2_6:

; 944  : }

  000ba	48 8b f8	 mov	 rdi, rax
  000bd	48 8b cc	 mov	 rcx, rsp
  000c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:zipOpen2_64$rtcFrameData
  000c7	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000cc	48 8b c7	 mov	 rax, rdi
  000cf	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  000d6	5f		 pop	 rdi
  000d7	5e		 pop	 rsi
  000d8	c3		 ret	 0
zipOpen2_64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zipOpen
_TEXT	SEGMENT
pathname$ = 48
append$ = 56
zipOpen	PROC						; COMDAT

; 949  : {

$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 08 00 00 00	 mov	 ecx, 8
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 950  :     return zipOpen3((const void*)pathname,append,NULL,NULL);

  0002e	45 33 c9	 xor	 r9d, r9d
  00031	45 33 c0	 xor	 r8d, r8d
  00034	8b 54 24 38	 mov	 edx, DWORD PTR append$[rsp]
  00038	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pathname$[rsp]
  0003d	e8 00 00 00 00	 call	 zipOpen3

; 951  : }

  00042	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00046	5f		 pop	 rdi
  00047	c3		 ret	 0
zipOpen	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zipOpen64
_TEXT	SEGMENT
pathname$ = 48
append$ = 56
zipOpen64 PROC						; COMDAT

; 954  : {

$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 08 00 00 00	 mov	 ecx, 8
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 955  :     return zipOpen3(pathname,append,NULL,NULL);

  0002e	45 33 c9	 xor	 r9d, r9d
  00031	45 33 c0	 xor	 r8d, r8d
  00034	8b 54 24 38	 mov	 edx, DWORD PTR append$[rsp]
  00038	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pathname$[rsp]
  0003d	e8 00 00 00 00	 call	 zipOpen3

; 956  : }

  00042	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00046	5f		 pop	 rdi
  00047	c3		 ret	 0
zipOpen64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT Write_LocalFileHeader
_TEXT	SEGMENT
err$ = 32
size_filename$ = 36
size_extrafield$ = 40
HeaderID$1 = 44
DataSize$2 = 48
CompressedSize$3 = 56
UncompressedSize$4 = 64
zi$ = 96
filename$ = 104
size_extrafield_local$ = 112
extrafield_local$ = 120
Write_LocalFileHeader PROC				; COMDAT

; 959  : {

$LN25:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 14 00 00 00	 mov	 ecx, 20
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00034	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 960  :   /* write the local header */
; 961  :   int err;
; 962  :   uInt size_filename = (uInt)strlen(filename);

  00039	48 8b 4c 24 68	 mov	 rcx, QWORD PTR filename$[rsp]
  0003e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlen
  00044	89 44 24 24	 mov	 DWORD PTR size_filename$[rsp], eax

; 963  :   uInt size_extrafield = size_extrafield_local;

  00048	8b 44 24 70	 mov	 eax, DWORD PTR size_extrafield_local$[rsp]
  0004c	89 44 24 28	 mov	 DWORD PTR size_extrafield$[rsp], eax

; 964  : 
; 965  :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)LOCALHEADERMAGIC, 4);

  00050	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  00055	41 b9 04 00 00
	00		 mov	 r9d, 4
  0005b	41 b8 50 4b 03
	04		 mov	 r8d, 67324752		; 04034b50H
  00061	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  00066	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0006a	48 8b c8	 mov	 rcx, rax
  0006d	e8 00 00 00 00	 call	 zip64local_putValue
  00072	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax

; 966  : 
; 967  :   if (err==ZIP_OK)

  00076	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  0007b	75 5c		 jne	 SHORT $LN2@Write_Loca

; 968  :   {
; 969  :     if(zi->ci.zip64)

  0007d	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  00082	83 b8 0c 01 01
	00 00		 cmp	 DWORD PTR [rax+65804], 0
  00089	74 28		 je	 SHORT $LN3@Write_Loca

; 970  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)45,2);/* version needed to extract */

  0008b	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  00090	41 b9 02 00 00
	00		 mov	 r9d, 2
  00096	41 b8 2d 00 00
	00		 mov	 r8d, 45			; 0000002dH
  0009c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  000a1	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  000a5	48 8b c8	 mov	 rcx, rax
  000a8	e8 00 00 00 00	 call	 zip64local_putValue
  000ad	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
  000b1	eb 26		 jmp	 SHORT $LN4@Write_Loca
$LN3@Write_Loca:

; 971  :     else
; 972  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)20,2);/* version needed to extract */

  000b3	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  000b8	41 b9 02 00 00
	00		 mov	 r9d, 2
  000be	41 b8 14 00 00
	00		 mov	 r8d, 20
  000c4	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  000c9	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  000cd	48 8b c8	 mov	 rcx, rax
  000d0	e8 00 00 00 00	 call	 zip64local_putValue
  000d5	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN4@Write_Loca:
$LN2@Write_Loca:

; 973  :   }
; 974  : 
; 975  :   if (err==ZIP_OK)

  000d9	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  000de	75 2b		 jne	 SHORT $LN5@Write_Loca

; 976  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.flag,2);

  000e0	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  000e5	8b 80 f4 00 00
	00		 mov	 eax, DWORD PTR [rax+244]
  000eb	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  000f0	41 b9 02 00 00
	00		 mov	 r9d, 2
  000f6	44 8b c0	 mov	 r8d, eax
  000f9	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  000fe	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  00102	e8 00 00 00 00	 call	 zip64local_putValue
  00107	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN5@Write_Loca:

; 977  : 
; 978  :   if (err==ZIP_OK)

  0010b	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  00110	75 2b		 jne	 SHORT $LN6@Write_Loca

; 979  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.method,2);

  00112	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  00117	8b 80 f8 00 00
	00		 mov	 eax, DWORD PTR [rax+248]
  0011d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  00122	41 b9 02 00 00
	00		 mov	 r9d, 2
  00128	44 8b c0	 mov	 r8d, eax
  0012b	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  00130	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  00134	e8 00 00 00 00	 call	 zip64local_putValue
  00139	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN6@Write_Loca:

; 980  : 
; 981  :   if (err==ZIP_OK)

  0013d	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  00142	75 2b		 jne	 SHORT $LN7@Write_Loca

; 982  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.dosDate,4);

  00144	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  00149	8b 80 00 01 01
	00		 mov	 eax, DWORD PTR [rax+65792]
  0014f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  00154	41 b9 04 00 00
	00		 mov	 r9d, 4
  0015a	44 8b c0	 mov	 r8d, eax
  0015d	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  00162	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  00166	e8 00 00 00 00	 call	 zip64local_putValue
  0016b	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN7@Write_Loca:

; 983  : 
; 984  :   // CRC / Compressed size / Uncompressed size will be filled in later and rewritten later
; 985  :   if (err==ZIP_OK)

  0016f	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  00174	75 23		 jne	 SHORT $LN8@Write_Loca

; 986  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* crc 32, unknown */

  00176	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  0017b	41 b9 04 00 00
	00		 mov	 r9d, 4
  00181	45 33 c0	 xor	 r8d, r8d
  00184	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  00189	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0018d	48 8b c8	 mov	 rcx, rax
  00190	e8 00 00 00 00	 call	 zip64local_putValue
  00195	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN8@Write_Loca:

; 987  :   if (err==ZIP_OK)

  00199	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  0019e	75 59		 jne	 SHORT $LN9@Write_Loca

; 988  :   {
; 989  :     if(zi->ci.zip64)

  001a0	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  001a5	83 b8 0c 01 01
	00 00		 cmp	 DWORD PTR [rax+65804], 0
  001ac	74 28		 je	 SHORT $LN10@Write_Loca

; 990  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xFFFFFFFF,4); /* compressed size, unknown */

  001ae	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  001b3	41 b9 04 00 00
	00		 mov	 r9d, 4
  001b9	41 b8 ff ff ff
	ff		 mov	 r8d, -1			; ffffffffH
  001bf	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  001c4	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  001c8	48 8b c8	 mov	 rcx, rax
  001cb	e8 00 00 00 00	 call	 zip64local_putValue
  001d0	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
  001d4	eb 23		 jmp	 SHORT $LN11@Write_Loca
$LN10@Write_Loca:

; 991  :     else
; 992  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* compressed size, unknown */

  001d6	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  001db	41 b9 04 00 00
	00		 mov	 r9d, 4
  001e1	45 33 c0	 xor	 r8d, r8d
  001e4	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  001e9	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  001ed	48 8b c8	 mov	 rcx, rax
  001f0	e8 00 00 00 00	 call	 zip64local_putValue
  001f5	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN11@Write_Loca:
$LN9@Write_Loca:

; 993  :   }
; 994  :   if (err==ZIP_OK)

  001f9	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  001fe	75 59		 jne	 SHORT $LN12@Write_Loca

; 995  :   {
; 996  :     if(zi->ci.zip64)

  00200	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  00205	83 b8 0c 01 01
	00 00		 cmp	 DWORD PTR [rax+65804], 0
  0020c	74 28		 je	 SHORT $LN13@Write_Loca

; 997  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xFFFFFFFF,4); /* uncompressed size, unknown */

  0020e	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  00213	41 b9 04 00 00
	00		 mov	 r9d, 4
  00219	41 b8 ff ff ff
	ff		 mov	 r8d, -1			; ffffffffH
  0021f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  00224	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00228	48 8b c8	 mov	 rcx, rax
  0022b	e8 00 00 00 00	 call	 zip64local_putValue
  00230	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
  00234	eb 23		 jmp	 SHORT $LN14@Write_Loca
$LN13@Write_Loca:

; 998  :     else
; 999  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* uncompressed size, unknown */

  00236	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  0023b	41 b9 04 00 00
	00		 mov	 r9d, 4
  00241	45 33 c0	 xor	 r8d, r8d
  00244	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  00249	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0024d	48 8b c8	 mov	 rcx, rax
  00250	e8 00 00 00 00	 call	 zip64local_putValue
  00255	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN14@Write_Loca:
$LN12@Write_Loca:

; 1000 :   }
; 1001 : 
; 1002 :   if (err==ZIP_OK)

  00259	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  0025e	75 24		 jne	 SHORT $LN15@Write_Loca

; 1003 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_filename,2);

  00260	8b 44 24 24	 mov	 eax, DWORD PTR size_filename$[rsp]
  00264	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  00269	41 b9 02 00 00
	00		 mov	 r9d, 2
  0026f	44 8b c0	 mov	 r8d, eax
  00272	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  00277	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  0027b	e8 00 00 00 00	 call	 zip64local_putValue
  00280	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN15@Write_Loca:

; 1004 : 
; 1005 :   if(zi->ci.zip64)

  00284	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  00289	83 b8 0c 01 01
	00 00		 cmp	 DWORD PTR [rax+65804], 0
  00290	74 0b		 je	 SHORT $LN16@Write_Loca

; 1006 :   {
; 1007 :     size_extrafield += 20;

  00292	8b 44 24 28	 mov	 eax, DWORD PTR size_extrafield$[rsp]
  00296	83 c0 14	 add	 eax, 20
  00299	89 44 24 28	 mov	 DWORD PTR size_extrafield$[rsp], eax
$LN16@Write_Loca:

; 1008 :   }
; 1009 : 
; 1010 :   if (err==ZIP_OK)

  0029d	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  002a2	75 24		 jne	 SHORT $LN17@Write_Loca

; 1011 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_extrafield,2);

  002a4	8b 44 24 28	 mov	 eax, DWORD PTR size_extrafield$[rsp]
  002a8	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  002ad	41 b9 02 00 00
	00		 mov	 r9d, 2
  002b3	44 8b c0	 mov	 r8d, eax
  002b6	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  002bb	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  002bf	e8 00 00 00 00	 call	 zip64local_putValue
  002c4	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN17@Write_Loca:

; 1012 : 
; 1013 :   if ((err==ZIP_OK) && (size_filename > 0))

  002c8	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  002cd	75 3c		 jne	 SHORT $LN18@Write_Loca
  002cf	83 7c 24 24 00	 cmp	 DWORD PTR size_filename$[rsp], 0
  002d4	76 35		 jbe	 SHORT $LN18@Write_Loca

; 1014 :   {
; 1015 :     if (ZWRITE64(zi->z_filefunc,zi->filestream,filename,size_filename)!=size_filename)

  002d6	0f ae e8	 lfence
  002d9	44 8b 4c 24 24	 mov	 r9d, DWORD PTR size_filename$[rsp]
  002de	4c 8b 44 24 68	 mov	 r8, QWORD PTR filename$[rsp]
  002e3	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  002e8	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  002ec	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  002f1	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  002f5	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  002fa	ff 50 10	 call	 QWORD PTR [rax+16]
  002fd	3b 44 24 24	 cmp	 eax, DWORD PTR size_filename$[rsp]
  00301	74 08		 je	 SHORT $LN19@Write_Loca

; 1016 :       err = ZIP_ERRNO;

  00303	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN19@Write_Loca:
$LN18@Write_Loca:

; 1017 :   }
; 1018 : 
; 1019 :   if ((err==ZIP_OK) && (size_extrafield_local > 0))

  0030b	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  00310	75 3c		 jne	 SHORT $LN20@Write_Loca
  00312	83 7c 24 70 00	 cmp	 DWORD PTR size_extrafield_local$[rsp], 0
  00317	76 35		 jbe	 SHORT $LN20@Write_Loca

; 1020 :   {
; 1021 :     if (ZWRITE64(zi->z_filefunc, zi->filestream, extrafield_local, size_extrafield_local) != size_extrafield_local)

  00319	0f ae e8	 lfence
  0031c	44 8b 4c 24 70	 mov	 r9d, DWORD PTR size_extrafield_local$[rsp]
  00321	4c 8b 44 24 78	 mov	 r8, QWORD PTR extrafield_local$[rsp]
  00326	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  0032b	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  0032f	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  00334	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  00338	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  0033d	ff 50 10	 call	 QWORD PTR [rax+16]
  00340	3b 44 24 70	 cmp	 eax, DWORD PTR size_extrafield_local$[rsp]
  00344	74 08		 je	 SHORT $LN21@Write_Loca

; 1022 :       err = ZIP_ERRNO;

  00346	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN21@Write_Loca:
$LN20@Write_Loca:

; 1023 :   }
; 1024 : 
; 1025 : 
; 1026 :   if ((err==ZIP_OK) && (zi->ci.zip64))

  0034e	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  00353	0f 85 f0 00 00
	00		 jne	 $LN22@Write_Loca
  00359	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  0035e	83 b8 0c 01 01
	00 00		 cmp	 DWORD PTR [rax+65804], 0
  00365	0f 84 de 00 00
	00		 je	 $LN22@Write_Loca

; 1027 :   {
; 1028 :       // write the Zip64 extended info
; 1029 :       short HeaderID = 1;

  0036b	b8 01 00 00 00	 mov	 eax, 1
  00370	66 89 44 24 2c	 mov	 WORD PTR HeaderID$1[rsp], ax

; 1030 :       short DataSize = 16;

  00375	b8 10 00 00 00	 mov	 eax, 16
  0037a	66 89 44 24 30	 mov	 WORD PTR DataSize$2[rsp], ax

; 1031 :       ZPOS64_T CompressedSize = 0;

  0037f	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR CompressedSize$3[rsp], 0

; 1032 :       ZPOS64_T UncompressedSize = 0;

  00388	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR UncompressedSize$4[rsp], 0

; 1033 : 
; 1034 :       // Remember position of Zip64 extended info for the local file header. (needed when we update size after done with file)
; 1035 :       zi->ci.pos_zip64extrainfo = ZTELL64(zi->z_filefunc,zi->filestream);

  00391	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  00396	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  0039b	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0039f	48 8b c8	 mov	 rcx, rax
  003a2	e8 00 00 00 00	 call	 call_ztell64
  003a7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  003ac	48 89 81 10 01
	01 00		 mov	 QWORD PTR [rcx+65808], rax

; 1036 : 
; 1037 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (short)HeaderID,2);

  003b3	48 0f bf 44 24
	2c		 movsx	 rax, WORD PTR HeaderID$1[rsp]
  003b9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  003be	41 b9 02 00 00
	00		 mov	 r9d, 2
  003c4	4c 8b c0	 mov	 r8, rax
  003c7	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  003cc	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  003d0	e8 00 00 00 00	 call	 zip64local_putValue
  003d5	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax

; 1038 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (short)DataSize,2);

  003d9	48 0f bf 44 24
	30		 movsx	 rax, WORD PTR DataSize$2[rsp]
  003df	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  003e4	41 b9 02 00 00
	00		 mov	 r9d, 2
  003ea	4c 8b c0	 mov	 r8, rax
  003ed	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  003f2	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  003f6	e8 00 00 00 00	 call	 zip64local_putValue
  003fb	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax

; 1039 : 
; 1040 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (ZPOS64_T)UncompressedSize,8);

  003ff	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  00404	41 b9 08 00 00
	00		 mov	 r9d, 8
  0040a	4c 8b 44 24 40	 mov	 r8, QWORD PTR UncompressedSize$4[rsp]
  0040f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  00414	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00418	48 8b c8	 mov	 rcx, rax
  0041b	e8 00 00 00 00	 call	 zip64local_putValue
  00420	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax

; 1041 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (ZPOS64_T)CompressedSize,8);

  00424	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  00429	41 b9 08 00 00
	00		 mov	 r9d, 8
  0042f	4c 8b 44 24 38	 mov	 r8, QWORD PTR CompressedSize$3[rsp]
  00434	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  00439	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0043d	48 8b c8	 mov	 rcx, rax
  00440	e8 00 00 00 00	 call	 zip64local_putValue
  00445	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN22@Write_Loca:

; 1042 :   }
; 1043 : 
; 1044 :   return err;

  00449	8b 44 24 20	 mov	 eax, DWORD PTR err$[rsp]

; 1045 : }

  0044d	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00451	5f		 pop	 rdi
  00452	c3		 ret	 0
Write_LocalFileHeader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zipOpenNewFileInZip4_64
_TEXT	SEGMENT
zi$ = 64
size_filename$ = 72
size_comment$ = 76
i$ = 80
err$ = 84
bufHead$4 = 104
sizeHead$5 = 132
file$ = 160
filename$ = 168
zipfi$ = 176
extrafield_local$ = 184
size_extrafield_local$ = 192
extrafield_global$ = 200
size_extrafield_global$ = 208
comment$ = 216
method$ = 224
level$ = 232
raw$ = 240
windowBits$ = 248
memLevel$ = 256
strategy$ = 264
password$ = 272
crcForCrypting$ = 280
versionMadeBy$ = 288
flagBase$ = 296
zip64$ = 304
zipOpenNewFileInZip4_64 PROC				; COMDAT

; 1062 : {

$LN45:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+160]
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0003a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1063 :     zip64_internal* zi;
; 1064 :     uInt size_filename;
; 1065 :     uInt size_comment;
; 1066 :     uInt i;
; 1067 :     int err = ZIP_OK;

  0003f	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 1068 : 
; 1069 : #    ifdef NOCRYPT
; 1070 :     (crcForCrypting);
; 1071 :     if (password != NULL)
; 1072 :         return ZIP_PARAMERROR;
; 1073 : #    endif
; 1074 : 
; 1075 :     if (file == NULL)

  00047	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR file$[rsp], 0
  00050	75 0a		 jne	 SHORT $LN11@zipOpenNew

; 1076 :         return ZIP_PARAMERROR;

  00052	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00057	e9 36 09 00 00	 jmp	 $LN1@zipOpenNew
$LN11@zipOpenNew:

; 1077 : 
; 1078 : #ifdef HAVE_BZIP2
; 1079 :     if ((method!=0) && (method!=Z_DEFLATED) && (method!=Z_BZIP2ED))
; 1080 :       return ZIP_PARAMERROR;
; 1081 : #else
; 1082 :     if ((method!=0) && (method!=Z_DEFLATED))

  0005c	83 bc 24 e0 00
	00 00 00	 cmp	 DWORD PTR method$[rsp], 0
  00064	74 14		 je	 SHORT $LN12@zipOpenNew
  00066	83 bc 24 e0 00
	00 00 08	 cmp	 DWORD PTR method$[rsp], 8
  0006e	74 0a		 je	 SHORT $LN12@zipOpenNew

; 1083 :       return ZIP_PARAMERROR;

  00070	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00075	e9 18 09 00 00	 jmp	 $LN1@zipOpenNew
$LN12@zipOpenNew:

; 1084 : #endif
; 1085 : 
; 1086 :     zi = (zip64_internal*)file;

  0007a	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR file$[rsp]
  00082	48 89 44 24 40	 mov	 QWORD PTR zi$[rsp], rax

; 1087 : 
; 1088 :     if (zi->in_opened_file_inzip == 1)

  00087	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  0008c	83 78 70 01	 cmp	 DWORD PTR [rax+112], 1
  00090	75 21		 jne	 SHORT $LN13@zipOpenNew

; 1089 :     {
; 1090 :         err = zipCloseFileInZip (file);

  00092	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR file$[rsp]
  0009a	e8 00 00 00 00	 call	 zipCloseFileInZip
  0009f	89 44 24 54	 mov	 DWORD PTR err$[rsp], eax

; 1091 :         if (err != ZIP_OK)

  000a3	83 7c 24 54 00	 cmp	 DWORD PTR err$[rsp], 0
  000a8	74 09		 je	 SHORT $LN14@zipOpenNew

; 1092 :             return err;

  000aa	8b 44 24 54	 mov	 eax, DWORD PTR err$[rsp]
  000ae	e9 df 08 00 00	 jmp	 $LN1@zipOpenNew
$LN14@zipOpenNew:
$LN13@zipOpenNew:

; 1093 :     }
; 1094 : 
; 1095 :     if (filename==NULL)

  000b3	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR filename$[rsp], 0
  000bc	75 0f		 jne	 SHORT $LN15@zipOpenNew

; 1096 :         filename="-";

  000be	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_01JOAMLHOP@?9@
  000c5	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR filename$[rsp], rax
$LN15@zipOpenNew:

; 1097 : 
; 1098 :     if (comment==NULL)

  000cd	48 83 bc 24 d8
	00 00 00 00	 cmp	 QWORD PTR comment$[rsp], 0
  000d6	75 0a		 jne	 SHORT $LN16@zipOpenNew

; 1099 :         size_comment = 0;

  000d8	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR size_comment$[rsp], 0
  000e0	eb 12		 jmp	 SHORT $LN17@zipOpenNew
$LN16@zipOpenNew:

; 1100 :     else
; 1101 :         size_comment = (uInt)strlen(comment);

  000e2	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR comment$[rsp]
  000ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlen
  000f0	89 44 24 4c	 mov	 DWORD PTR size_comment$[rsp], eax
$LN17@zipOpenNew:

; 1102 : 
; 1103 :     size_filename = (uInt)strlen(filename);

  000f4	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  000fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlen
  00102	89 44 24 48	 mov	 DWORD PTR size_filename$[rsp], eax

; 1104 : 
; 1105 :     if (zipfi == NULL)

  00106	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR zipfi$[rsp], 0
  0010f	75 11		 jne	 SHORT $LN18@zipOpenNew

; 1106 :         zi->ci.dosDate = 0;

  00111	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00116	c7 80 00 01 01
	00 00 00 00 00	 mov	 DWORD PTR [rax+65792], 0
  00120	eb 41		 jmp	 SHORT $LN19@zipOpenNew
$LN18@zipOpenNew:

; 1107 :     else
; 1108 :     {
; 1109 :         if (zipfi->dosDate != 0)

  00122	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR zipfi$[rsp]
  0012a	83 78 18 00	 cmp	 DWORD PTR [rax+24], 0
  0012e	74 18		 je	 SHORT $LN20@zipOpenNew

; 1110 :             zi->ci.dosDate = zipfi->dosDate;

  00130	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00135	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR zipfi$[rsp]
  0013d	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  00140	89 88 00 01 01
	00		 mov	 DWORD PTR [rax+65792], ecx
  00146	eb 1b		 jmp	 SHORT $LN21@zipOpenNew
$LN20@zipOpenNew:

; 1111 :         else
; 1112 :           zi->ci.dosDate = zip64local_TmzDateToDosDate(&zipfi->tmz_date);

  00148	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR zipfi$[rsp]
  00150	48 8b c8	 mov	 rcx, rax
  00153	e8 00 00 00 00	 call	 zip64local_TmzDateToDosDate
  00158	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  0015d	89 81 00 01 01
	00		 mov	 DWORD PTR [rcx+65792], eax
$LN21@zipOpenNew:
$LN19@zipOpenNew:

; 1113 :     }
; 1114 : 
; 1115 :     zi->ci.flag = flagBase;

  00163	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00168	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR flagBase$[rsp]
  0016f	89 88 f4 00 00
	00		 mov	 DWORD PTR [rax+244], ecx

; 1116 :     if ((level==8) || (level==9))

  00175	83 bc 24 e8 00
	00 00 08	 cmp	 DWORD PTR level$[rsp], 8
  0017d	74 0a		 je	 SHORT $LN23@zipOpenNew
  0017f	83 bc 24 e8 00
	00 00 09	 cmp	 DWORD PTR level$[rsp], 9
  00187	75 19		 jne	 SHORT $LN22@zipOpenNew
$LN23@zipOpenNew:

; 1117 :       zi->ci.flag |= 2;

  00189	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  0018e	8b 80 f4 00 00
	00		 mov	 eax, DWORD PTR [rax+244]
  00194	83 c8 02	 or	 eax, 2
  00197	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  0019c	89 81 f4 00 00
	00		 mov	 DWORD PTR [rcx+244], eax
$LN22@zipOpenNew:

; 1118 :     if (level==2)

  001a2	83 bc 24 e8 00
	00 00 02	 cmp	 DWORD PTR level$[rsp], 2
  001aa	75 19		 jne	 SHORT $LN24@zipOpenNew

; 1119 :       zi->ci.flag |= 4;

  001ac	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  001b1	8b 80 f4 00 00
	00		 mov	 eax, DWORD PTR [rax+244]
  001b7	83 c8 04	 or	 eax, 4
  001ba	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  001bf	89 81 f4 00 00
	00		 mov	 DWORD PTR [rcx+244], eax
$LN24@zipOpenNew:

; 1120 :     if (level==1)

  001c5	83 bc 24 e8 00
	00 00 01	 cmp	 DWORD PTR level$[rsp], 1
  001cd	75 19		 jne	 SHORT $LN25@zipOpenNew

; 1121 :       zi->ci.flag |= 6;

  001cf	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  001d4	8b 80 f4 00 00
	00		 mov	 eax, DWORD PTR [rax+244]
  001da	83 c8 06	 or	 eax, 6
  001dd	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  001e2	89 81 f4 00 00
	00		 mov	 DWORD PTR [rcx+244], eax
$LN25@zipOpenNew:

; 1122 :     if (password != NULL)

  001e8	48 83 bc 24 10
	01 00 00 00	 cmp	 QWORD PTR password$[rsp], 0
  001f1	74 19		 je	 SHORT $LN26@zipOpenNew

; 1123 :       zi->ci.flag |= 1;

  001f3	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  001f8	8b 80 f4 00 00
	00		 mov	 eax, DWORD PTR [rax+244]
  001fe	83 c8 01	 or	 eax, 1
  00201	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00206	89 81 f4 00 00
	00		 mov	 DWORD PTR [rcx+244], eax
$LN26@zipOpenNew:

; 1124 : 
; 1125 :     zi->ci.crc32 = 0;

  0020c	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00211	c7 80 04 01 01
	00 00 00 00 00	 mov	 DWORD PTR [rax+65796], 0

; 1126 :     zi->ci.method = method;

  0021b	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00220	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR method$[rsp]
  00227	89 88 f8 00 00
	00		 mov	 DWORD PTR [rax+248], ecx

; 1127 :     zi->ci.encrypt = 0;

  0022d	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00232	c7 80 08 01 01
	00 00 00 00 00	 mov	 DWORD PTR [rax+65800], 0

; 1128 :     zi->ci.stream_initialised = 0;

  0023c	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00241	c7 80 d0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+208], 0

; 1129 :     zi->ci.pos_in_buffered_data = 0;

  0024b	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00250	c7 80 d4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+212], 0

; 1130 :     zi->ci.raw = raw;

  0025a	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  0025f	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR raw$[rsp]
  00266	89 88 fc 00 00
	00		 mov	 DWORD PTR [rax+252], ecx

; 1131 :     zi->ci.pos_local_header = ZTELL64(zi->z_filefunc,zi->filestream);

  0026c	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00271	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00276	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0027a	48 8b c8	 mov	 rcx, rax
  0027d	e8 00 00 00 00	 call	 call_ztell64
  00282	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00287	48 89 81 d8 00
	00 00		 mov	 QWORD PTR [rcx+216], rax

; 1132 : 
; 1133 :     zi->ci.size_centralheader = SIZECENTRALHEADER + size_filename + size_extrafield_global + size_comment;

  0028e	8b 44 24 48	 mov	 eax, DWORD PTR size_filename$[rsp]
  00292	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR size_extrafield_global$[rsp]
  00299	8d 44 08 2e	 lea	 eax, DWORD PTR [rax+rcx+46]
  0029d	03 44 24 4c	 add	 eax, DWORD PTR size_comment$[rsp]
  002a1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  002a6	89 81 ec 00 00
	00		 mov	 DWORD PTR [rcx+236], eax

; 1134 :     zi->ci.size_centralExtraFree = 32; // Extra space we have reserved in case we need to add ZIP64 extra info data

  002ac	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  002b1	c7 80 f0 00 00
	00 20 00 00 00	 mov	 DWORD PTR [rax+240], 32	; 00000020H

; 1135 : 
; 1136 :     zi->ci.central_header = (char*)ALLOC((uInt)zi->ci.size_centralheader + zi->ci.size_centralExtraFree);

  002bb	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  002c0	8b 80 ec 00 00
	00		 mov	 eax, DWORD PTR [rax+236]
  002c6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  002cb	03 81 f0 00 00
	00		 add	 eax, DWORD PTR [rcx+240]
  002d1	8b c0		 mov	 eax, eax
  002d3	8b c8		 mov	 ecx, eax
  002d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  002db	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  002e0	48 89 81 e0 00
	00 00		 mov	 QWORD PTR [rcx+224], rax

; 1137 : 
; 1138 :     zi->ci.size_centralExtra = size_extrafield_global;

  002e7	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  002ec	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR size_extrafield_global$[rsp]
  002f3	89 88 e8 00 00
	00		 mov	 DWORD PTR [rax+232], ecx

; 1139 :     zip64local_putValue_inmemory(zi->ci.central_header,(uLong)CENTRALHEADERMAGIC,4);

  002f9	41 b8 04 00 00
	00		 mov	 r8d, 4
  002ff	ba 50 4b 01 02	 mov	 edx, 33639248		; 02014b50H
  00304	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00309	48 8b 88 e0 00
	00 00		 mov	 rcx, QWORD PTR [rax+224]
  00310	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1140 :     /* version info */
; 1141 :     zip64local_putValue_inmemory(zi->ci.central_header+4,(uLong)versionMadeBy,2);

  00315	8b 84 24 20 01
	00 00		 mov	 eax, DWORD PTR versionMadeBy$[rsp]
  0031c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00321	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  00328	48 83 c1 04	 add	 rcx, 4
  0032c	41 b8 02 00 00
	00		 mov	 r8d, 2
  00332	8b d0		 mov	 edx, eax
  00334	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1142 :     zip64local_putValue_inmemory(zi->ci.central_header+6,(uLong)20,2);

  00339	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  0033e	48 8b 80 e0 00
	00 00		 mov	 rax, QWORD PTR [rax+224]
  00345	48 83 c0 06	 add	 rax, 6
  00349	41 b8 02 00 00
	00		 mov	 r8d, 2
  0034f	ba 14 00 00 00	 mov	 edx, 20
  00354	48 8b c8	 mov	 rcx, rax
  00357	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1143 :     zip64local_putValue_inmemory(zi->ci.central_header+8,(uLong)zi->ci.flag,2);

  0035c	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00361	8b 80 f4 00 00
	00		 mov	 eax, DWORD PTR [rax+244]
  00367	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  0036c	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  00373	48 83 c1 08	 add	 rcx, 8
  00377	41 b8 02 00 00
	00		 mov	 r8d, 2
  0037d	8b d0		 mov	 edx, eax
  0037f	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1144 :     zip64local_putValue_inmemory(zi->ci.central_header+10,(uLong)zi->ci.method,2);

  00384	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00389	8b 80 f8 00 00
	00		 mov	 eax, DWORD PTR [rax+248]
  0038f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00394	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  0039b	48 83 c1 0a	 add	 rcx, 10
  0039f	41 b8 02 00 00
	00		 mov	 r8d, 2
  003a5	8b d0		 mov	 edx, eax
  003a7	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1145 :     zip64local_putValue_inmemory(zi->ci.central_header+12,(uLong)zi->ci.dosDate,4);

  003ac	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  003b1	8b 80 00 01 01
	00		 mov	 eax, DWORD PTR [rax+65792]
  003b7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  003bc	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  003c3	48 83 c1 0c	 add	 rcx, 12
  003c7	41 b8 04 00 00
	00		 mov	 r8d, 4
  003cd	8b d0		 mov	 edx, eax
  003cf	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1146 :     zip64local_putValue_inmemory(zi->ci.central_header+16,(uLong)0,4); /*crc*/

  003d4	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  003d9	48 8b 80 e0 00
	00 00		 mov	 rax, QWORD PTR [rax+224]
  003e0	48 83 c0 10	 add	 rax, 16
  003e4	41 b8 04 00 00
	00		 mov	 r8d, 4
  003ea	33 d2		 xor	 edx, edx
  003ec	48 8b c8	 mov	 rcx, rax
  003ef	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1147 :     zip64local_putValue_inmemory(zi->ci.central_header+20,(uLong)0,4); /*compr size*/

  003f4	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  003f9	48 8b 80 e0 00
	00 00		 mov	 rax, QWORD PTR [rax+224]
  00400	48 83 c0 14	 add	 rax, 20
  00404	41 b8 04 00 00
	00		 mov	 r8d, 4
  0040a	33 d2		 xor	 edx, edx
  0040c	48 8b c8	 mov	 rcx, rax
  0040f	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1148 :     zip64local_putValue_inmemory(zi->ci.central_header+24,(uLong)0,4); /*uncompr size*/

  00414	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00419	48 8b 80 e0 00
	00 00		 mov	 rax, QWORD PTR [rax+224]
  00420	48 83 c0 18	 add	 rax, 24
  00424	41 b8 04 00 00
	00		 mov	 r8d, 4
  0042a	33 d2		 xor	 edx, edx
  0042c	48 8b c8	 mov	 rcx, rax
  0042f	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1149 :     zip64local_putValue_inmemory(zi->ci.central_header+28,(uLong)size_filename,2);

  00434	8b 44 24 48	 mov	 eax, DWORD PTR size_filename$[rsp]
  00438	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  0043d	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  00444	48 83 c1 1c	 add	 rcx, 28
  00448	41 b8 02 00 00
	00		 mov	 r8d, 2
  0044e	8b d0		 mov	 edx, eax
  00450	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1150 :     zip64local_putValue_inmemory(zi->ci.central_header+30,(uLong)size_extrafield_global,2);

  00455	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  0045c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00461	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  00468	48 83 c1 1e	 add	 rcx, 30
  0046c	41 b8 02 00 00
	00		 mov	 r8d, 2
  00472	8b d0		 mov	 edx, eax
  00474	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1151 :     zip64local_putValue_inmemory(zi->ci.central_header+32,(uLong)size_comment,2);

  00479	8b 44 24 4c	 mov	 eax, DWORD PTR size_comment$[rsp]
  0047d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00482	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  00489	48 83 c1 20	 add	 rcx, 32			; 00000020H
  0048d	41 b8 02 00 00
	00		 mov	 r8d, 2
  00493	8b d0		 mov	 edx, eax
  00495	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1152 :     zip64local_putValue_inmemory(zi->ci.central_header+34,(uLong)0,2); /*disk nm start*/

  0049a	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  0049f	48 8b 80 e0 00
	00 00		 mov	 rax, QWORD PTR [rax+224]
  004a6	48 83 c0 22	 add	 rax, 34			; 00000022H
  004aa	41 b8 02 00 00
	00		 mov	 r8d, 2
  004b0	33 d2		 xor	 edx, edx
  004b2	48 8b c8	 mov	 rcx, rax
  004b5	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1153 : 
; 1154 :     if (zipfi==NULL)

  004ba	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR zipfi$[rsp], 0
  004c3	75 22		 jne	 SHORT $LN27@zipOpenNew

; 1155 :         zip64local_putValue_inmemory(zi->ci.central_header+36,(uLong)0,2);

  004c5	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  004ca	48 8b 80 e0 00
	00 00		 mov	 rax, QWORD PTR [rax+224]
  004d1	48 83 c0 24	 add	 rax, 36			; 00000024H
  004d5	41 b8 02 00 00
	00		 mov	 r8d, 2
  004db	33 d2		 xor	 edx, edx
  004dd	48 8b c8	 mov	 rcx, rax
  004e0	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
  004e5	eb 28		 jmp	 SHORT $LN28@zipOpenNew
$LN27@zipOpenNew:

; 1156 :     else
; 1157 :         zip64local_putValue_inmemory(zi->ci.central_header+36,(uLong)zipfi->internal_fa,2);

  004e7	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR zipfi$[rsp]
  004ef	8b 40 1c	 mov	 eax, DWORD PTR [rax+28]
  004f2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  004f7	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  004fe	48 83 c1 24	 add	 rcx, 36			; 00000024H
  00502	41 b8 02 00 00
	00		 mov	 r8d, 2
  00508	8b d0		 mov	 edx, eax
  0050a	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
$LN28@zipOpenNew:

; 1158 : 
; 1159 :     if (zipfi==NULL)

  0050f	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR zipfi$[rsp], 0
  00518	75 22		 jne	 SHORT $LN29@zipOpenNew

; 1160 :         zip64local_putValue_inmemory(zi->ci.central_header+38,(uLong)0,4);

  0051a	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  0051f	48 8b 80 e0 00
	00 00		 mov	 rax, QWORD PTR [rax+224]
  00526	48 83 c0 26	 add	 rax, 38			; 00000026H
  0052a	41 b8 04 00 00
	00		 mov	 r8d, 4
  00530	33 d2		 xor	 edx, edx
  00532	48 8b c8	 mov	 rcx, rax
  00535	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
  0053a	eb 28		 jmp	 SHORT $LN30@zipOpenNew
$LN29@zipOpenNew:

; 1161 :     else
; 1162 :         zip64local_putValue_inmemory(zi->ci.central_header+38,(uLong)zipfi->external_fa,4);

  0053c	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR zipfi$[rsp]
  00544	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  00547	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  0054c	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  00553	48 83 c1 26	 add	 rcx, 38			; 00000026H
  00557	41 b8 04 00 00
	00		 mov	 r8d, 4
  0055d	8b d0		 mov	 edx, eax
  0055f	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
$LN30@zipOpenNew:

; 1163 : 
; 1164 :     if(zi->ci.pos_local_header >= 0xffffffff)

  00564	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00569	b9 ff ff ff ff	 mov	 ecx, -1			; ffffffffH
  0056e	48 39 88 d8 00
	00 00		 cmp	 QWORD PTR [rax+216], rcx
  00575	72 25		 jb	 SHORT $LN31@zipOpenNew

; 1165 :       zip64local_putValue_inmemory(zi->ci.central_header+42,(uLong)0xffffffff,4);

  00577	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  0057c	48 8b 80 e0 00
	00 00		 mov	 rax, QWORD PTR [rax+224]
  00583	48 83 c0 2a	 add	 rax, 42			; 0000002aH
  00587	41 b8 04 00 00
	00		 mov	 r8d, 4
  0058d	ba ff ff ff ff	 mov	 edx, -1			; ffffffffH
  00592	48 8b c8	 mov	 rcx, rax
  00595	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
  0059a	eb 35		 jmp	 SHORT $LN32@zipOpenNew
$LN31@zipOpenNew:

; 1166 :     else
; 1167 :       zip64local_putValue_inmemory(zi->ci.central_header+42,(uLong)zi->ci.pos_local_header - zi->add_position_when_writing_offset,4);

  0059c	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  005a1	8b 80 d8 00 00
	00		 mov	 eax, DWORD PTR [rax+216]
  005a7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  005ac	48 2b 81 50 01
	01 00		 sub	 rax, QWORD PTR [rcx+65872]
  005b3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  005b8	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  005bf	48 83 c1 2a	 add	 rcx, 42			; 0000002aH
  005c3	41 b8 04 00 00
	00		 mov	 r8d, 4
  005c9	48 8b d0	 mov	 rdx, rax
  005cc	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
$LN32@zipOpenNew:

; 1168 : 
; 1169 :     for (i=0;i<size_filename;i++)

  005d1	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  005d9	eb 0a		 jmp	 SHORT $LN4@zipOpenNew
$LN2@zipOpenNew:
  005db	8b 44 24 50	 mov	 eax, DWORD PTR i$[rsp]
  005df	ff c0		 inc	 eax
  005e1	89 44 24 50	 mov	 DWORD PTR i$[rsp], eax
$LN4@zipOpenNew:
  005e5	8b 44 24 48	 mov	 eax, DWORD PTR size_filename$[rsp]
  005e9	39 44 24 50	 cmp	 DWORD PTR i$[rsp], eax
  005ed	73 27		 jae	 SHORT $LN3@zipOpenNew

; 1170 :         *(zi->ci.central_header+SIZECENTRALHEADER+i) = *(filename+i);

  005ef	8b 44 24 50	 mov	 eax, DWORD PTR i$[rsp]
  005f3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  005f8	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  005ff	8b 54 24 50	 mov	 edx, DWORD PTR i$[rsp]
  00603	4c 8b 84 24 a8
	00 00 00	 mov	 r8, QWORD PTR filename$[rsp]
  0060b	41 0f b6 04 00	 movzx	 eax, BYTE PTR [r8+rax]
  00610	88 44 11 2e	 mov	 BYTE PTR [rcx+rdx+46], al
  00614	eb c5		 jmp	 SHORT $LN2@zipOpenNew
$LN3@zipOpenNew:

; 1171 : 
; 1172 :     for (i=0;i<size_extrafield_global;i++)

  00616	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0061e	eb 0a		 jmp	 SHORT $LN7@zipOpenNew
$LN5@zipOpenNew:
  00620	8b 44 24 50	 mov	 eax, DWORD PTR i$[rsp]
  00624	ff c0		 inc	 eax
  00626	89 44 24 50	 mov	 DWORD PTR i$[rsp], eax
$LN7@zipOpenNew:
  0062a	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  00631	39 44 24 50	 cmp	 DWORD PTR i$[rsp], eax
  00635	73 2f		 jae	 SHORT $LN6@zipOpenNew

; 1173 :         *(zi->ci.central_header+SIZECENTRALHEADER+size_filename+i) =

  00637	8b 44 24 50	 mov	 eax, DWORD PTR i$[rsp]
  0063b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00640	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  00647	8b 54 24 48	 mov	 edx, DWORD PTR size_filename$[rsp]
  0064b	48 8d 4c 11 2e	 lea	 rcx, QWORD PTR [rcx+rdx+46]
  00650	8b 54 24 50	 mov	 edx, DWORD PTR i$[rsp]
  00654	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR extrafield_global$[rsp]
  0065c	41 0f b6 04 00	 movzx	 eax, BYTE PTR [r8+rax]
  00661	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  00664	eb ba		 jmp	 SHORT $LN5@zipOpenNew
$LN6@zipOpenNew:

; 1174 :               *(((const char*)extrafield_global)+i);
; 1175 : 
; 1176 :     for (i=0;i<size_comment;i++)

  00666	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0066e	eb 0a		 jmp	 SHORT $LN10@zipOpenNew
$LN8@zipOpenNew:
  00670	8b 44 24 50	 mov	 eax, DWORD PTR i$[rsp]
  00674	ff c0		 inc	 eax
  00676	89 44 24 50	 mov	 DWORD PTR i$[rsp], eax
$LN10@zipOpenNew:
  0067a	8b 44 24 4c	 mov	 eax, DWORD PTR size_comment$[rsp]
  0067e	39 44 24 50	 cmp	 DWORD PTR i$[rsp], eax
  00682	73 39		 jae	 SHORT $LN9@zipOpenNew

; 1177 :         *(zi->ci.central_header+SIZECENTRALHEADER+size_filename+
; 1178 :               size_extrafield_global+i) = *(comment+i);

  00684	8b 44 24 50	 mov	 eax, DWORD PTR i$[rsp]
  00688	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  0068d	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  00694	8b 54 24 48	 mov	 edx, DWORD PTR size_filename$[rsp]
  00698	48 8d 4c 11 2e	 lea	 rcx, QWORD PTR [rcx+rdx+46]
  0069d	8b 94 24 d0 00
	00 00		 mov	 edx, DWORD PTR size_extrafield_global$[rsp]
  006a4	48 03 ca	 add	 rcx, rdx
  006a7	8b 54 24 50	 mov	 edx, DWORD PTR i$[rsp]
  006ab	4c 8b 84 24 d8
	00 00 00	 mov	 r8, QWORD PTR comment$[rsp]
  006b3	41 0f b6 04 00	 movzx	 eax, BYTE PTR [r8+rax]
  006b8	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  006bb	eb b3		 jmp	 SHORT $LN8@zipOpenNew
$LN9@zipOpenNew:

; 1179 :     if (zi->ci.central_header == NULL)

  006bd	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  006c2	48 83 b8 e0 00
	00 00 00	 cmp	 QWORD PTR [rax+224], 0
  006ca	75 0a		 jne	 SHORT $LN33@zipOpenNew

; 1180 :         return ZIP_INTERNALERROR;

  006cc	b8 98 ff ff ff	 mov	 eax, -104		; ffffffffffffff98H
  006d1	e9 bc 02 00 00	 jmp	 $LN1@zipOpenNew
$LN33@zipOpenNew:

; 1181 : 
; 1182 :     zi->ci.zip64 = zip64;

  006d6	0f ae e8	 lfence
  006d9	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  006de	8b 8c 24 30 01
	00 00		 mov	 ecx, DWORD PTR zip64$[rsp]
  006e5	89 88 0c 01 01
	00		 mov	 DWORD PTR [rax+65804], ecx

; 1183 :     zi->ci.totalCompressedData = 0;

  006eb	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  006f0	48 c7 80 18 01
	01 00 00 00 00
	00		 mov	 QWORD PTR [rax+65816], 0

; 1184 :     zi->ci.totalUncompressedData = 0;

  006fb	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00700	48 c7 80 20 01
	01 00 00 00 00
	00		 mov	 QWORD PTR [rax+65824], 0

; 1185 :     zi->ci.pos_zip64extrainfo = 0;

  0070b	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00710	48 c7 80 10 01
	01 00 00 00 00
	00		 mov	 QWORD PTR [rax+65808], 0

; 1186 : 
; 1187 :     err = Write_LocalFileHeader(zi, filename, size_extrafield_local, extrafield_local);

  0071b	4c 8b 8c 24 b8
	00 00 00	 mov	 r9, QWORD PTR extrafield_local$[rsp]
  00723	44 8b 84 24 c0
	00 00 00	 mov	 r8d, DWORD PTR size_extrafield_local$[rsp]
  0072b	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  00733	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00738	e8 00 00 00 00	 call	 Write_LocalFileHeader
  0073d	89 44 24 54	 mov	 DWORD PTR err$[rsp], eax

; 1188 : 
; 1189 : #ifdef HAVE_BZIP2
; 1190 :     zi->ci.bstream.avail_in = (uInt)0;
; 1191 :     zi->ci.bstream.avail_out = (uInt)Z_BUFSIZE;
; 1192 :     zi->ci.bstream.next_out = (char*)zi->ci.buffered_data;
; 1193 :     zi->ci.bstream.total_in_hi32 = 0;
; 1194 :     zi->ci.bstream.total_in_lo32 = 0;
; 1195 :     zi->ci.bstream.total_out_hi32 = 0;
; 1196 :     zi->ci.bstream.total_out_lo32 = 0;
; 1197 : #endif
; 1198 : 
; 1199 :     zi->ci.stream.avail_in = (uInt)0;

  00741	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00746	c7 80 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+128], 0

; 1200 :     zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;

  00750	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00755	c7 80 90 00 00
	00 00 00 01 00	 mov	 DWORD PTR [rax+144], 65536 ; 00010000H

; 1201 :     zi->ci.stream.next_out = zi->ci.buffered_data;

  0075f	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00764	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  0076a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  0076f	48 89 81 88 00
	00 00		 mov	 QWORD PTR [rcx+136], rax

; 1202 :     zi->ci.stream.total_in = 0;

  00776	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  0077b	c7 80 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+132], 0

; 1203 :     zi->ci.stream.total_out = 0;

  00785	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  0078a	c7 80 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+148], 0

; 1204 :     zi->ci.stream.data_type = Z_BINARY;

  00794	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00799	c7 80 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+192], 0

; 1205 : 
; 1206 : #ifdef HAVE_BZIP2
; 1207 :     if ((err==ZIP_OK) && (zi->ci.method == Z_DEFLATED || zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1208 : #else
; 1209 :     if ((err==ZIP_OK) && (zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  007a3	83 7c 24 54 00	 cmp	 DWORD PTR err$[rsp], 0
  007a8	0f 85 f1 00 00
	00		 jne	 $LN34@zipOpenNew
  007ae	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  007b3	83 b8 f8 00 00
	00 08		 cmp	 DWORD PTR [rax+248], 8
  007ba	0f 85 df 00 00
	00		 jne	 $LN34@zipOpenNew
  007c0	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  007c5	83 b8 fc 00 00
	00 00		 cmp	 DWORD PTR [rax+252], 0
  007cc	0f 85 cd 00 00
	00		 jne	 $LN34@zipOpenNew

; 1210 : #endif
; 1211 :     {
; 1212 :         if(zi->ci.method == Z_DEFLATED)

  007d2	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  007d7	83 b8 f8 00 00
	00 08		 cmp	 DWORD PTR [rax+248], 8
  007de	0f 85 b6 00 00
	00		 jne	 $LN35@zipOpenNew

; 1213 :         {
; 1214 :           zi->ci.stream.zalloc = (alloc_func)0;

  007e4	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  007e9	48 c7 80 a8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+168], 0

; 1215 :           zi->ci.stream.zfree = (free_func)0;

  007f4	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  007f9	48 c7 80 b0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+176], 0

; 1216 :           zi->ci.stream.opaque = (voidpf)0;

  00804	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00809	48 c7 80 b8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+184], 0

; 1217 : 
; 1218 :           if (windowBits>0)

  00814	83 bc 24 f8 00
	00 00 00	 cmp	 DWORD PTR windowBits$[rsp], 0
  0081c	7e 10		 jle	 SHORT $LN37@zipOpenNew

; 1219 :               windowBits = -windowBits;

  0081e	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR windowBits$[rsp]
  00825	f7 d8		 neg	 eax
  00827	89 84 24 f8 00
	00 00		 mov	 DWORD PTR windowBits$[rsp], eax
$LN37@zipOpenNew:

; 1220 : 
; 1221 :           err = deflateInit2(&zi->ci.stream, level, Z_DEFLATED, windowBits, memLevel, strategy);

  0082e	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00833	48 83 c0 78	 add	 rax, 120		; 00000078H
  00837	c7 44 24 38 58
	00 00 00	 mov	 DWORD PTR [rsp+56], 88	; 00000058H
  0083f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06CJNJFBNP@1?42?411@
  00846	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0084b	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR strategy$[rsp]
  00852	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  00856	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR memLevel$[rsp]
  0085d	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  00861	44 8b 8c 24 f8
	00 00 00	 mov	 r9d, DWORD PTR windowBits$[rsp]
  00869	41 b8 08 00 00
	00		 mov	 r8d, 8
  0086f	8b 94 24 e8 00
	00 00		 mov	 edx, DWORD PTR level$[rsp]
  00876	48 8b c8	 mov	 rcx, rax
  00879	e8 00 00 00 00	 call	 deflateInit2_
  0087e	89 44 24 54	 mov	 DWORD PTR err$[rsp], eax

; 1222 : 
; 1223 :           if (err==Z_OK)

  00882	83 7c 24 54 00	 cmp	 DWORD PTR err$[rsp], 0
  00887	75 0f		 jne	 SHORT $LN38@zipOpenNew

; 1224 :               zi->ci.stream_initialised = Z_DEFLATED;

  00889	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  0088e	c7 80 d0 00 00
	00 08 00 00 00	 mov	 DWORD PTR [rax+208], 8
$LN38@zipOpenNew:

; 1225 :         }

  00898	eb 05		 jmp	 SHORT $LN36@zipOpenNew
$LN35@zipOpenNew:

; 1226 :         else if(zi->ci.method == Z_BZIP2ED)

  0089a	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
$LN36@zipOpenNew:
$LN34@zipOpenNew:

; 1227 :         {
; 1228 : #ifdef HAVE_BZIP2
; 1229 :             // Init BZip stuff here
; 1230 :           zi->ci.bstream.bzalloc = 0;
; 1231 :           zi->ci.bstream.bzfree = 0;
; 1232 :           zi->ci.bstream.opaque = (voidpf)0;
; 1233 : 
; 1234 :           err = BZ2_bzCompressInit(&zi->ci.bstream, level, 0,35);
; 1235 :           if(err == BZ_OK)
; 1236 :             zi->ci.stream_initialised = Z_BZIP2ED;
; 1237 : #endif
; 1238 :         }
; 1239 : 
; 1240 :     }
; 1241 : 
; 1242 : #    ifndef NOCRYPT
; 1243 :     zi->ci.crypt_header_size = 0;

  0089f	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  008a4	c7 80 40 01 01
	00 00 00 00 00	 mov	 DWORD PTR [rax+65856], 0

; 1244 :     if ((err==Z_OK) && (password != NULL))

  008ae	83 7c 24 54 00	 cmp	 DWORD PTR err$[rsp], 0
  008b3	0f 85 c2 00 00
	00		 jne	 $LN40@zipOpenNew
  008b9	48 83 bc 24 10
	01 00 00 00	 cmp	 QWORD PTR password$[rsp], 0
  008c2	0f 84 b3 00 00
	00		 je	 $LN40@zipOpenNew

; 1245 :     {
; 1246 :         unsigned char bufHead[RAND_HEAD_LEN];
; 1247 :         unsigned int sizeHead;
; 1248 :         zi->ci.encrypt = 1;

  008c8	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  008cd	c7 80 08 01 01
	00 01 00 00 00	 mov	 DWORD PTR [rax+65800], 1

; 1249 :         zi->ci.pcrc_32_tab = get_crc_table();

  008d7	e8 00 00 00 00	 call	 get_crc_table
  008dc	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  008e1	48 89 81 38 01
	01 00		 mov	 QWORD PTR [rcx+65848], rax

; 1250 :         /*init_keys(password,zi->ci.keys,zi->ci.pcrc_32_tab);*/
; 1251 : 
; 1252 :         sizeHead=crypthead(password,bufHead,RAND_HEAD_LEN,zi->ci.keys,zi->ci.pcrc_32_tab,crcForCrypting);

  008e8	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  008ed	48 05 28 01 01
	00		 add	 rax, 65832		; 00010128H
  008f3	8b 8c 24 18 01
	00 00		 mov	 ecx, DWORD PTR crcForCrypting$[rsp]
  008fa	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  008fe	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00903	48 8b 89 38 01
	01 00		 mov	 rcx, QWORD PTR [rcx+65848]
  0090a	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0090f	4c 8b c8	 mov	 r9, rax
  00912	41 b8 0c 00 00
	00		 mov	 r8d, 12
  00918	48 8d 54 24 68	 lea	 rdx, QWORD PTR bufHead$4[rsp]
  0091d	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR password$[rsp]
  00925	e8 00 00 00 00	 call	 crypthead
  0092a	89 84 24 84 00
	00 00		 mov	 DWORD PTR sizeHead$5[rsp], eax

; 1253 :         zi->ci.crypt_header_size = sizeHead;

  00931	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00936	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR sizeHead$5[rsp]
  0093d	89 88 40 01 01
	00		 mov	 DWORD PTR [rax+65856], ecx

; 1254 : 
; 1255 :         if (ZWRITE64(zi->z_filefunc,zi->filestream,bufHead,sizeHead) != sizeHead)

  00943	44 8b 8c 24 84
	00 00 00	 mov	 r9d, DWORD PTR sizeHead$5[rsp]
  0094b	4c 8d 44 24 68	 lea	 r8, QWORD PTR bufHead$4[rsp]
  00950	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00955	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  00959	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  0095e	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  00962	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00967	ff 50 10	 call	 QWORD PTR [rax+16]
  0096a	3b 84 24 84 00
	00 00		 cmp	 eax, DWORD PTR sizeHead$5[rsp]
  00971	74 08		 je	 SHORT $LN41@zipOpenNew

; 1256 :                 err = ZIP_ERRNO;

  00973	c7 44 24 54 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN41@zipOpenNew:
$LN40@zipOpenNew:

; 1257 :     }
; 1258 : #    endif
; 1259 : 
; 1260 :     if (err==Z_OK)

  0097b	83 7c 24 54 00	 cmp	 DWORD PTR err$[rsp], 0
  00980	75 0c		 jne	 SHORT $LN42@zipOpenNew

; 1261 :         zi->in_opened_file_inzip = 1;

  00982	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00987	c7 40 70 01 00
	00 00		 mov	 DWORD PTR [rax+112], 1
$LN42@zipOpenNew:

; 1262 :     return err;

  0098e	8b 44 24 54	 mov	 eax, DWORD PTR err$[rsp]
$LN1@zipOpenNew:

; 1263 : }

  00992	48 8b f8	 mov	 rdi, rax
  00995	48 8b cc	 mov	 rcx, rsp
  00998	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:zipOpenNewFileInZip4_64$rtcFrameData
  0099f	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  009a4	48 8b c7	 mov	 rax, rdi
  009a7	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  009ae	5f		 pop	 rdi
  009af	c3		 ret	 0
zipOpenNewFileInZip4_64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zipOpenNewFileInZip3
_TEXT	SEGMENT
file$ = 176
filename$ = 184
zipfi$ = 192
extrafield_local$ = 200
size_extrafield_local$ = 208
extrafield_global$ = 216
size_extrafield_global$ = 224
comment$ = 232
method$ = 240
level$ = 248
raw$ = 256
windowBits$ = 264
memLevel$ = 272
strategy$ = 280
password$ = 288
crcForCrypting$ = 296
zipOpenNewFileInZip3 PROC				; COMDAT

; 1287 : {

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+176]
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0003a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1288 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,

  0003f	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [rsp+144], 0
  0004a	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [rsp+136], 0
  00055	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [rsp+128], 0
  00060	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR crcForCrypting$[rsp]
  00067	89 44 24 78	 mov	 DWORD PTR [rsp+120], eax
  0006b	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR password$[rsp]
  00073	48 89 44 24 70	 mov	 QWORD PTR [rsp+112], rax
  00078	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR strategy$[rsp]
  0007f	89 44 24 68	 mov	 DWORD PTR [rsp+104], eax
  00083	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR memLevel$[rsp]
  0008a	89 44 24 60	 mov	 DWORD PTR [rsp+96], eax
  0008e	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR windowBits$[rsp]
  00095	89 44 24 58	 mov	 DWORD PTR [rsp+88], eax
  00099	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR raw$[rsp]
  000a0	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  000a4	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR level$[rsp]
  000ab	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  000af	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR method$[rsp]
  000b6	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  000ba	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR comment$[rsp]
  000c2	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  000c7	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  000ce	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  000d2	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR extrafield_global$[rsp]
  000da	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000df	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_local$[rsp]
  000e6	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000ea	4c 8b 8c 24 c8
	00 00 00	 mov	 r9, QWORD PTR extrafield_local$[rsp]
  000f2	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR zipfi$[rsp]
  000fa	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  00102	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR file$[rsp]
  0010a	e8 00 00 00 00	 call	 zipOpenNewFileInZip4_64

; 1289 :                                  extrafield_local, size_extrafield_local,
; 1290 :                                  extrafield_global, size_extrafield_global,
; 1291 :                                  comment, method, level, raw,
; 1292 :                                  windowBits, memLevel, strategy,
; 1293 :                                  password, crcForCrypting, VERSIONMADEBY, 0, 0);
; 1294 : }

  0010f	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  00116	5f		 pop	 rdi
  00117	c3		 ret	 0
zipOpenNewFileInZip3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zipOpenNewFileInZip3_64
_TEXT	SEGMENT
file$ = 176
filename$ = 184
zipfi$ = 192
extrafield_local$ = 200
size_extrafield_local$ = 208
extrafield_global$ = 216
size_extrafield_global$ = 224
comment$ = 232
method$ = 240
level$ = 248
raw$ = 256
windowBits$ = 264
memLevel$ = 272
strategy$ = 280
password$ = 288
crcForCrypting$ = 296
zip64$ = 304
zipOpenNewFileInZip3_64 PROC				; COMDAT

; 1302 : {

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+176]
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0003a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1303 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,

  0003f	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR zip64$[rsp]
  00046	89 84 24 90 00
	00 00		 mov	 DWORD PTR [rsp+144], eax
  0004d	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [rsp+136], 0
  00058	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [rsp+128], 0
  00063	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR crcForCrypting$[rsp]
  0006a	89 44 24 78	 mov	 DWORD PTR [rsp+120], eax
  0006e	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR password$[rsp]
  00076	48 89 44 24 70	 mov	 QWORD PTR [rsp+112], rax
  0007b	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR strategy$[rsp]
  00082	89 44 24 68	 mov	 DWORD PTR [rsp+104], eax
  00086	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR memLevel$[rsp]
  0008d	89 44 24 60	 mov	 DWORD PTR [rsp+96], eax
  00091	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR windowBits$[rsp]
  00098	89 44 24 58	 mov	 DWORD PTR [rsp+88], eax
  0009c	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR raw$[rsp]
  000a3	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  000a7	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR level$[rsp]
  000ae	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  000b2	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR method$[rsp]
  000b9	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  000bd	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR comment$[rsp]
  000c5	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  000ca	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  000d1	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  000d5	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR extrafield_global$[rsp]
  000dd	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000e2	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_local$[rsp]
  000e9	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000ed	4c 8b 8c 24 c8
	00 00 00	 mov	 r9, QWORD PTR extrafield_local$[rsp]
  000f5	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR zipfi$[rsp]
  000fd	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  00105	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR file$[rsp]
  0010d	e8 00 00 00 00	 call	 zipOpenNewFileInZip4_64

; 1304 :                                  extrafield_local, size_extrafield_local,
; 1305 :                                  extrafield_global, size_extrafield_global,
; 1306 :                                  comment, method, level, raw,
; 1307 :                                  windowBits, memLevel, strategy,
; 1308 :                                  password, crcForCrypting, VERSIONMADEBY, 0, zip64);
; 1309 : }

  00112	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  00119	5f		 pop	 rdi
  0011a	c3		 ret	 0
zipOpenNewFileInZip3_64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zipOpenNewFileInZip2
_TEXT	SEGMENT
file$ = 176
filename$ = 184
zipfi$ = 192
extrafield_local$ = 200
size_extrafield_local$ = 208
extrafield_global$ = 216
size_extrafield_global$ = 224
comment$ = 232
method$ = 240
level$ = 248
raw$ = 256
zipOpenNewFileInZip2 PROC				; COMDAT

; 1315 : {

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+176]
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0003a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1316 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,

  0003f	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [rsp+144], 0
  0004a	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [rsp+136], 0
  00055	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [rsp+128], 0
  00060	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR [rsp+120], 0
  00068	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR [rsp+112], 0
  00071	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR [rsp+104], 0
  00079	c7 44 24 60 08
	00 00 00	 mov	 DWORD PTR [rsp+96], 8
  00081	c7 44 24 58 f1
	ff ff ff	 mov	 DWORD PTR [rsp+88], -15
  00089	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR raw$[rsp]
  00090	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  00094	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR level$[rsp]
  0009b	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  0009f	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR method$[rsp]
  000a6	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  000aa	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR comment$[rsp]
  000b2	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  000b7	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  000be	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  000c2	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR extrafield_global$[rsp]
  000ca	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000cf	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_local$[rsp]
  000d6	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000da	4c 8b 8c 24 c8
	00 00 00	 mov	 r9, QWORD PTR extrafield_local$[rsp]
  000e2	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR zipfi$[rsp]
  000ea	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  000f2	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR file$[rsp]
  000fa	e8 00 00 00 00	 call	 zipOpenNewFileInZip4_64

; 1317 :                                  extrafield_local, size_extrafield_local,
; 1318 :                                  extrafield_global, size_extrafield_global,
; 1319 :                                  comment, method, level, raw,
; 1320 :                                  -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1321 :                                  NULL, 0, VERSIONMADEBY, 0, 0);
; 1322 : }

  000ff	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  00106	5f		 pop	 rdi
  00107	c3		 ret	 0
zipOpenNewFileInZip2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zipOpenNewFileInZip2_64
_TEXT	SEGMENT
file$ = 176
filename$ = 184
zipfi$ = 192
extrafield_local$ = 200
size_extrafield_local$ = 208
extrafield_global$ = 216
size_extrafield_global$ = 224
comment$ = 232
method$ = 240
level$ = 248
raw$ = 256
zip64$ = 264
zipOpenNewFileInZip2_64 PROC				; COMDAT

; 1328 : {

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+176]
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0003a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1329 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,

  0003f	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR zip64$[rsp]
  00046	89 84 24 90 00
	00 00		 mov	 DWORD PTR [rsp+144], eax
  0004d	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [rsp+136], 0
  00058	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [rsp+128], 0
  00063	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR [rsp+120], 0
  0006b	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR [rsp+112], 0
  00074	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR [rsp+104], 0
  0007c	c7 44 24 60 08
	00 00 00	 mov	 DWORD PTR [rsp+96], 8
  00084	c7 44 24 58 f1
	ff ff ff	 mov	 DWORD PTR [rsp+88], -15
  0008c	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR raw$[rsp]
  00093	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  00097	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR level$[rsp]
  0009e	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  000a2	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR method$[rsp]
  000a9	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  000ad	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR comment$[rsp]
  000b5	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  000ba	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  000c1	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  000c5	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR extrafield_global$[rsp]
  000cd	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000d2	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_local$[rsp]
  000d9	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000dd	4c 8b 8c 24 c8
	00 00 00	 mov	 r9, QWORD PTR extrafield_local$[rsp]
  000e5	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR zipfi$[rsp]
  000ed	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  000f5	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR file$[rsp]
  000fd	e8 00 00 00 00	 call	 zipOpenNewFileInZip4_64

; 1330 :                                  extrafield_local, size_extrafield_local,
; 1331 :                                  extrafield_global, size_extrafield_global,
; 1332 :                                  comment, method, level, raw,
; 1333 :                                  -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1334 :                                  NULL, 0, VERSIONMADEBY, 0, zip64);
; 1335 : }

  00102	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  00109	5f		 pop	 rdi
  0010a	c3		 ret	 0
zipOpenNewFileInZip2_64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zipOpenNewFileInZip64
_TEXT	SEGMENT
file$ = 176
filename$ = 184
zipfi$ = 192
extrafield_local$ = 200
size_extrafield_local$ = 208
extrafield_global$ = 216
size_extrafield_global$ = 224
comment$ = 232
method$ = 240
level$ = 248
zip64$ = 256
zipOpenNewFileInZip64 PROC				; COMDAT

; 1341 : {

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+176]
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0003a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1342 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,

  0003f	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR zip64$[rsp]
  00046	89 84 24 90 00
	00 00		 mov	 DWORD PTR [rsp+144], eax
  0004d	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [rsp+136], 0
  00058	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [rsp+128], 0
  00063	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR [rsp+120], 0
  0006b	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR [rsp+112], 0
  00074	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR [rsp+104], 0
  0007c	c7 44 24 60 08
	00 00 00	 mov	 DWORD PTR [rsp+96], 8
  00084	c7 44 24 58 f1
	ff ff ff	 mov	 DWORD PTR [rsp+88], -15
  0008c	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR [rsp+80], 0
  00094	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR level$[rsp]
  0009b	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  0009f	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR method$[rsp]
  000a6	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  000aa	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR comment$[rsp]
  000b2	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  000b7	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  000be	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  000c2	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR extrafield_global$[rsp]
  000ca	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000cf	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_local$[rsp]
  000d6	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000da	4c 8b 8c 24 c8
	00 00 00	 mov	 r9, QWORD PTR extrafield_local$[rsp]
  000e2	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR zipfi$[rsp]
  000ea	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  000f2	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR file$[rsp]
  000fa	e8 00 00 00 00	 call	 zipOpenNewFileInZip4_64

; 1343 :                                  extrafield_local, size_extrafield_local,
; 1344 :                                  extrafield_global, size_extrafield_global,
; 1345 :                                  comment, method, level, 0,
; 1346 :                                  -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1347 :                                  NULL, 0, VERSIONMADEBY, 0, zip64);
; 1348 : }

  000ff	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  00106	5f		 pop	 rdi
  00107	c3		 ret	 0
zipOpenNewFileInZip64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zipOpenNewFileInZip
_TEXT	SEGMENT
file$ = 176
filename$ = 184
zipfi$ = 192
extrafield_local$ = 200
size_extrafield_local$ = 208
extrafield_global$ = 216
size_extrafield_global$ = 224
comment$ = 232
method$ = 240
level$ = 248
zipOpenNewFileInZip PROC				; COMDAT

; 1354 : {

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+176]
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0003a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1355 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,

  0003f	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [rsp+144], 0
  0004a	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [rsp+136], 0
  00055	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [rsp+128], 0
  00060	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR [rsp+120], 0
  00068	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR [rsp+112], 0
  00071	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR [rsp+104], 0
  00079	c7 44 24 60 08
	00 00 00	 mov	 DWORD PTR [rsp+96], 8
  00081	c7 44 24 58 f1
	ff ff ff	 mov	 DWORD PTR [rsp+88], -15
  00089	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR [rsp+80], 0
  00091	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR level$[rsp]
  00098	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  0009c	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR method$[rsp]
  000a3	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  000a7	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR comment$[rsp]
  000af	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  000b4	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  000bb	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  000bf	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR extrafield_global$[rsp]
  000c7	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000cc	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_local$[rsp]
  000d3	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000d7	4c 8b 8c 24 c8
	00 00 00	 mov	 r9, QWORD PTR extrafield_local$[rsp]
  000df	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR zipfi$[rsp]
  000e7	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  000ef	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR file$[rsp]
  000f7	e8 00 00 00 00	 call	 zipOpenNewFileInZip4_64

; 1356 :                                  extrafield_local, size_extrafield_local,
; 1357 :                                  extrafield_global, size_extrafield_global,
; 1358 :                                  comment, method, level, 0,
; 1359 :                                  -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1360 :                                  NULL, 0, VERSIONMADEBY, 0, 0);
; 1361 : }

  000fc	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  00103	5f		 pop	 rdi
  00104	c3		 ret	 0
zipOpenNewFileInZip ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zip64FlushWriteBuffer
_TEXT	SEGMENT
err$ = 32
i$1 = 36
t$2 = 40
zi$ = 64
zip64FlushWriteBuffer PROC				; COMDAT

; 1364 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1365 :     int err=ZIP_OK;

  0002a	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 1366 : 
; 1367 :     if (zi->ci.encrypt != 0)

  00032	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00037	83 b8 08 01 01
	00 00		 cmp	 DWORD PTR [rax+65800], 0
  0003e	0f 84 ae 00 00
	00		 je	 $LN5@zip64Flush

; 1368 :     {
; 1369 : #ifndef NOCRYPT
; 1370 :         uInt i;
; 1371 :         int t;
; 1372 :         for (i=0;i<zi->ci.pos_in_buffered_data;i++)

  00044	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR i$1[rsp], 0
  0004c	eb 0a		 jmp	 SHORT $LN4@zip64Flush
$LN2@zip64Flush:
  0004e	8b 44 24 24	 mov	 eax, DWORD PTR i$1[rsp]
  00052	ff c0		 inc	 eax
  00054	89 44 24 24	 mov	 DWORD PTR i$1[rsp], eax
$LN4@zip64Flush:
  00058	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  0005d	8b 80 d4 00 00
	00		 mov	 eax, DWORD PTR [rax+212]
  00063	39 44 24 24	 cmp	 DWORD PTR i$1[rsp], eax
  00067	0f 83 85 00 00
	00		 jae	 $LN3@zip64Flush

; 1373 :             zi->ci.buffered_data[i] = zencode(zi->ci.keys, zi->ci.pcrc_32_tab, zi->ci.buffered_data[i],t);

  0006d	0f ae e8	 lfence
  00070	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00075	48 05 28 01 01
	00		 add	 rax, 65832		; 00010128H
  0007b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00080	48 8b 91 38 01
	01 00		 mov	 rdx, QWORD PTR [rcx+65848]
  00087	48 8b c8	 mov	 rcx, rax
  0008a	e8 00 00 00 00	 call	 decrypt_byte
  0008f	89 44 24 28	 mov	 DWORD PTR t$2[rsp], eax
  00093	8b 44 24 24	 mov	 eax, DWORD PTR i$1[rsp]
  00097	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  0009c	0f b6 84 01 00
	01 00 00	 movzx	 eax, BYTE PTR [rcx+rax+256]
  000a4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  000a9	48 81 c1 28 01
	01 00		 add	 rcx, 65832		; 00010128H
  000b0	44 8b c0	 mov	 r8d, eax
  000b3	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  000b8	48 8b 90 38 01
	01 00		 mov	 rdx, QWORD PTR [rax+65848]
  000bf	e8 00 00 00 00	 call	 update_keys
  000c4	8b 44 24 24	 mov	 eax, DWORD PTR i$1[rsp]
  000c8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  000cd	0f b6 84 01 00
	01 00 00	 movzx	 eax, BYTE PTR [rcx+rax+256]
  000d5	8b 4c 24 28	 mov	 ecx, DWORD PTR t$2[rsp]
  000d9	33 c8		 xor	 ecx, eax
  000db	8b c1		 mov	 eax, ecx
  000dd	8b 4c 24 24	 mov	 ecx, DWORD PTR i$1[rsp]
  000e1	48 8b 54 24 40	 mov	 rdx, QWORD PTR zi$[rsp]
  000e6	88 84 0a 00 01
	00 00		 mov	 BYTE PTR [rdx+rcx+256], al
  000ed	e9 5c ff ff ff	 jmp	 $LN2@zip64Flush
$LN3@zip64Flush:
$LN5@zip64Flush:

; 1374 : #endif
; 1375 :     }
; 1376 : 
; 1377 :     if (ZWRITE64(zi->z_filefunc,zi->filestream,zi->ci.buffered_data,zi->ci.pos_in_buffered_data) != zi->ci.pos_in_buffered_data)

  000f2	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  000f7	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  000fd	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00102	44 8b 89 d4 00
	00 00		 mov	 r9d, DWORD PTR [rcx+212]
  00109	4c 8b c0	 mov	 r8, rax
  0010c	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00111	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  00115	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  0011a	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  0011e	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00123	ff 50 10	 call	 QWORD PTR [rax+16]
  00126	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  0012b	3b 81 d4 00 00
	00		 cmp	 eax, DWORD PTR [rcx+212]
  00131	74 08		 je	 SHORT $LN6@zip64Flush

; 1378 :       err = ZIP_ERRNO;

  00133	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN6@zip64Flush:

; 1379 : 
; 1380 :     zi->ci.totalCompressedData += zi->ci.pos_in_buffered_data;

  0013b	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00140	8b 80 d4 00 00
	00		 mov	 eax, DWORD PTR [rax+212]
  00146	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  0014b	48 03 81 18 01
	01 00		 add	 rax, QWORD PTR [rcx+65816]
  00152	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00157	48 89 81 18 01
	01 00		 mov	 QWORD PTR [rcx+65816], rax

; 1381 : 
; 1382 : #ifdef HAVE_BZIP2
; 1383 :     if(zi->ci.method == Z_BZIP2ED)
; 1384 :     {
; 1385 :       zi->ci.totalUncompressedData += zi->ci.bstream.total_in_lo32;
; 1386 :       zi->ci.bstream.total_in_lo32 = 0;
; 1387 :       zi->ci.bstream.total_in_hi32 = 0;
; 1388 :     }
; 1389 :     else
; 1390 : #endif
; 1391 :     {
; 1392 :       zi->ci.totalUncompressedData += zi->ci.stream.total_in;

  0015e	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00163	8b 80 84 00 00
	00		 mov	 eax, DWORD PTR [rax+132]
  00169	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  0016e	48 03 81 20 01
	01 00		 add	 rax, QWORD PTR [rcx+65824]
  00175	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  0017a	48 89 81 20 01
	01 00		 mov	 QWORD PTR [rcx+65824], rax

; 1393 :       zi->ci.stream.total_in = 0;

  00181	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00186	c7 80 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+132], 0

; 1394 :     }
; 1395 : 
; 1396 : 
; 1397 :     zi->ci.pos_in_buffered_data = 0;

  00190	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00195	c7 80 d4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+212], 0

; 1398 : 
; 1399 :     return err;

  0019f	8b 44 24 20	 mov	 eax, DWORD PTR err$[rsp]

; 1400 : }

  001a3	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001a7	5f		 pop	 rdi
  001a8	c3		 ret	 0
zip64FlushWriteBuffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zipWriteInFileInZip
_TEXT	SEGMENT
zi$ = 32
err$ = 40
uTotalOutBefore$1 = 44
bBreak$2 = 48
copy_this$3 = 52
i$4 = 56
file$ = 80
buf$ = 88
len$ = 96
zipWriteInFileInZip PROC				; COMDAT

; 1403 : {

$LN19:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 10 00 00 00	 mov	 ecx, 16
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1404 :     zip64_internal* zi;
; 1405 :     int err=ZIP_OK;

  00034	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 1406 : 
; 1407 :     if (file == NULL)

  0003c	48 83 7c 24 50
	00		 cmp	 QWORD PTR file$[rsp], 0
  00042	75 0a		 jne	 SHORT $LN7@zipWriteIn

; 1408 :         return ZIP_PARAMERROR;

  00044	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00049	e9 a8 02 00 00	 jmp	 $LN1@zipWriteIn
$LN7@zipWriteIn:

; 1409 :     zi = (zip64_internal*)file;

  0004e	48 8b 44 24 50	 mov	 rax, QWORD PTR file$[rsp]
  00053	48 89 44 24 20	 mov	 QWORD PTR zi$[rsp], rax

; 1410 : 
; 1411 :     if (zi->in_opened_file_inzip == 0)

  00058	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  0005d	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  00061	75 0a		 jne	 SHORT $LN8@zipWriteIn

; 1412 :         return ZIP_PARAMERROR;

  00063	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00068	e9 89 02 00 00	 jmp	 $LN1@zipWriteIn
$LN8@zipWriteIn:

; 1413 : 
; 1414 :     zi->ci.crc32 = crc32(zi->ci.crc32,buf,(uInt)len);

  0006d	44 8b 44 24 60	 mov	 r8d, DWORD PTR len$[rsp]
  00072	48 8b 54 24 58	 mov	 rdx, QWORD PTR buf$[rsp]
  00077	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  0007c	8b 88 04 01 01
	00		 mov	 ecx, DWORD PTR [rax+65796]
  00082	e8 00 00 00 00	 call	 crc32
  00087	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  0008c	89 81 04 01 01
	00		 mov	 DWORD PTR [rcx+65796], eax

; 1415 : 
; 1416 : #ifdef HAVE_BZIP2
; 1417 :     if(zi->ci.method == Z_BZIP2ED && (!zi->ci.raw))
; 1418 :     {
; 1419 :       zi->ci.bstream.next_in = (void*)buf;
; 1420 :       zi->ci.bstream.avail_in = len;
; 1421 :       err = BZ_RUN_OK;
; 1422 : 
; 1423 :       while ((err==BZ_RUN_OK) && (zi->ci.bstream.avail_in>0))
; 1424 :       {
; 1425 :         if (zi->ci.bstream.avail_out == 0)
; 1426 :         {
; 1427 :           if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)
; 1428 :             err = ZIP_ERRNO;
; 1429 :           zi->ci.bstream.avail_out = (uInt)Z_BUFSIZE;
; 1430 :           zi->ci.bstream.next_out = (char*)zi->ci.buffered_data;
; 1431 :         }
; 1432 : 
; 1433 : 
; 1434 :         if(err != BZ_RUN_OK)
; 1435 :           break;
; 1436 : 
; 1437 :         if ((zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1438 :         {
; 1439 :           uLong uTotalOutBefore_lo = zi->ci.bstream.total_out_lo32;
; 1440 : //          uLong uTotalOutBefore_hi = zi->ci.bstream.total_out_hi32;
; 1441 :           err=BZ2_bzCompress(&zi->ci.bstream,  BZ_RUN);
; 1442 : 
; 1443 :           zi->ci.pos_in_buffered_data += (uInt)(zi->ci.bstream.total_out_lo32 - uTotalOutBefore_lo) ;
; 1444 :         }
; 1445 :       }
; 1446 : 
; 1447 :       if(err == BZ_RUN_OK)
; 1448 :         err = ZIP_OK;
; 1449 :     }
; 1450 :     else
; 1451 : #endif
; 1452 :     {
; 1453 :       zi->ci.stream.next_in = (Bytef*)buf;

  00092	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00097	48 8b 4c 24 58	 mov	 rcx, QWORD PTR buf$[rsp]
  0009c	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 1454 :       zi->ci.stream.avail_in = len;

  000a0	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  000a5	8b 4c 24 60	 mov	 ecx, DWORD PTR len$[rsp]
  000a9	89 88 80 00 00
	00		 mov	 DWORD PTR [rax+128], ecx
$LN2@zipWriteIn:

; 1455 : 
; 1456 :       while ((err==ZIP_OK) && (zi->ci.stream.avail_in>0))

  000af	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  000b4	0f 85 38 02 00
	00		 jne	 $LN3@zipWriteIn
  000ba	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  000bf	83 b8 80 00 00
	00 00		 cmp	 DWORD PTR [rax+128], 0
  000c6	0f 86 26 02 00
	00		 jbe	 $LN3@zipWriteIn

; 1457 :       {
; 1458 :           if (zi->ci.stream.avail_out == 0)

  000cc	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  000d1	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [rax+144], 0
  000d8	75 3d		 jne	 SHORT $LN9@zipWriteIn

; 1459 :           {
; 1460 :               if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)

  000da	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  000df	e8 00 00 00 00	 call	 zip64FlushWriteBuffer
  000e4	83 f8 ff	 cmp	 eax, -1
  000e7	75 08		 jne	 SHORT $LN10@zipWriteIn

; 1461 :                   err = ZIP_ERRNO;

  000e9	c7 44 24 28 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN10@zipWriteIn:

; 1462 :               zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;

  000f1	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  000f6	c7 80 90 00 00
	00 00 00 01 00	 mov	 DWORD PTR [rax+144], 65536 ; 00010000H

; 1463 :               zi->ci.stream.next_out = zi->ci.buffered_data;

  00100	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00105	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  0010b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  00110	48 89 81 88 00
	00 00		 mov	 QWORD PTR [rcx+136], rax
$LN9@zipWriteIn:

; 1464 :           }
; 1465 : 
; 1466 : 
; 1467 :           if(err != ZIP_OK)

  00117	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  0011c	74 05		 je	 SHORT $LN11@zipWriteIn

; 1468 :               break;

  0011e	e9 cf 01 00 00	 jmp	 $LN3@zipWriteIn
$LN11@zipWriteIn:

; 1469 : 
; 1470 :           if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  00123	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00128	83 b8 f8 00 00
	00 08		 cmp	 DWORD PTR [rax+248], 8
  0012f	0f 85 83 00 00
	00		 jne	 $LN12@zipWriteIn
  00135	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  0013a	83 b8 fc 00 00
	00 00		 cmp	 DWORD PTR [rax+252], 0
  00141	75 75		 jne	 SHORT $LN12@zipWriteIn

; 1471 :           {
; 1472 :               uLong uTotalOutBefore = zi->ci.stream.total_out;

  00143	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00148	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  0014e	89 44 24 2c	 mov	 DWORD PTR uTotalOutBefore$1[rsp], eax

; 1473 :               err=deflate(&zi->ci.stream,  Z_NO_FLUSH);

  00152	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00157	48 83 c0 78	 add	 rax, 120		; 00000078H
  0015b	33 d2		 xor	 edx, edx
  0015d	48 8b c8	 mov	 rcx, rax
  00160	e8 00 00 00 00	 call	 deflate
  00165	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax

; 1474 :               if(uTotalOutBefore > zi->ci.stream.total_out)

  00169	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  0016e	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  00174	39 44 24 2c	 cmp	 DWORD PTR uTotalOutBefore$1[rsp], eax
  00178	76 12		 jbe	 SHORT $LN14@zipWriteIn

; 1475 :               {
; 1476 :                 int bBreak = 0;

  0017a	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR bBreak$2[rsp], 0

; 1477 :                 bBreak++;

  00182	8b 44 24 30	 mov	 eax, DWORD PTR bBreak$2[rsp]
  00186	ff c0		 inc	 eax
  00188	89 44 24 30	 mov	 DWORD PTR bBreak$2[rsp], eax
$LN14@zipWriteIn:

; 1478 :               }
; 1479 : 
; 1480 :               zi->ci.pos_in_buffered_data += (uInt)(zi->ci.stream.total_out - uTotalOutBefore) ;

  0018c	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00191	8b 4c 24 2c	 mov	 ecx, DWORD PTR uTotalOutBefore$1[rsp]
  00195	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  0019b	2b c1		 sub	 eax, ecx
  0019d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  001a2	03 81 d4 00 00
	00		 add	 eax, DWORD PTR [rcx+212]
  001a8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  001ad	89 81 d4 00 00
	00		 mov	 DWORD PTR [rcx+212], eax

; 1481 :           }

  001b3	e9 35 01 00 00	 jmp	 $LN13@zipWriteIn
$LN12@zipWriteIn:

; 1482 :           else
; 1483 :           {
; 1484 :               uInt copy_this,i;
; 1485 :               if (zi->ci.stream.avail_in < zi->ci.stream.avail_out)

  001b8	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  001bd	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  001c2	8b 89 90 00 00
	00		 mov	 ecx, DWORD PTR [rcx+144]
  001c8	39 88 80 00 00
	00		 cmp	 DWORD PTR [rax+128], ecx
  001ce	73 11		 jae	 SHORT $LN15@zipWriteIn

; 1486 :                   copy_this = zi->ci.stream.avail_in;

  001d0	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  001d5	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  001db	89 44 24 34	 mov	 DWORD PTR copy_this$3[rsp], eax
  001df	eb 0f		 jmp	 SHORT $LN16@zipWriteIn
$LN15@zipWriteIn:

; 1487 :               else
; 1488 :                   copy_this = zi->ci.stream.avail_out;

  001e1	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  001e6	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  001ec	89 44 24 34	 mov	 DWORD PTR copy_this$3[rsp], eax
$LN16@zipWriteIn:

; 1489 : 
; 1490 :               for (i = 0; i < copy_this; i++)

  001f0	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR i$4[rsp], 0
  001f8	eb 0a		 jmp	 SHORT $LN6@zipWriteIn
$LN4@zipWriteIn:
  001fa	8b 44 24 38	 mov	 eax, DWORD PTR i$4[rsp]
  001fe	ff c0		 inc	 eax
  00200	89 44 24 38	 mov	 DWORD PTR i$4[rsp], eax
$LN6@zipWriteIn:
  00204	8b 44 24 34	 mov	 eax, DWORD PTR copy_this$3[rsp]
  00208	39 44 24 38	 cmp	 DWORD PTR i$4[rsp], eax
  0020c	73 27		 jae	 SHORT $LN5@zipWriteIn

; 1491 :                   *(((char*)zi->ci.stream.next_out)+i) =

  0020e	8b 44 24 38	 mov	 eax, DWORD PTR i$4[rsp]
  00212	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  00217	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  0021b	8b 54 24 38	 mov	 edx, DWORD PTR i$4[rsp]
  0021f	4c 8b 44 24 20	 mov	 r8, QWORD PTR zi$[rsp]
  00224	4d 8b 80 88 00
	00 00		 mov	 r8, QWORD PTR [r8+136]
  0022b	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0022f	42 88 04 02	 mov	 BYTE PTR [rdx+r8], al
  00233	eb c5		 jmp	 SHORT $LN4@zipWriteIn
$LN5@zipWriteIn:

; 1492 :                       *(((const char*)zi->ci.stream.next_in)+i);
; 1493 :               {
; 1494 :                   zi->ci.stream.avail_in -= copy_this;

  00235	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  0023a	8b 4c 24 34	 mov	 ecx, DWORD PTR copy_this$3[rsp]
  0023e	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00244	2b c1		 sub	 eax, ecx
  00246	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  0024b	89 81 80 00 00
	00		 mov	 DWORD PTR [rcx+128], eax

; 1495 :                   zi->ci.stream.avail_out-= copy_this;

  00251	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00256	8b 4c 24 34	 mov	 ecx, DWORD PTR copy_this$3[rsp]
  0025a	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  00260	2b c1		 sub	 eax, ecx
  00262	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  00267	89 81 90 00 00
	00		 mov	 DWORD PTR [rcx+144], eax

; 1496 :                   zi->ci.stream.next_in+= copy_this;

  0026d	8b 44 24 34	 mov	 eax, DWORD PTR copy_this$3[rsp]
  00271	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  00276	48 03 41 78	 add	 rax, QWORD PTR [rcx+120]
  0027a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  0027f	48 89 41 78	 mov	 QWORD PTR [rcx+120], rax

; 1497 :                   zi->ci.stream.next_out+= copy_this;

  00283	8b 44 24 34	 mov	 eax, DWORD PTR copy_this$3[rsp]
  00287	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  0028c	48 03 81 88 00
	00 00		 add	 rax, QWORD PTR [rcx+136]
  00293	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  00298	48 89 81 88 00
	00 00		 mov	 QWORD PTR [rcx+136], rax

; 1498 :                   zi->ci.stream.total_in+= copy_this;

  0029f	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  002a4	8b 80 84 00 00
	00		 mov	 eax, DWORD PTR [rax+132]
  002aa	03 44 24 34	 add	 eax, DWORD PTR copy_this$3[rsp]
  002ae	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  002b3	89 81 84 00 00
	00		 mov	 DWORD PTR [rcx+132], eax

; 1499 :                   zi->ci.stream.total_out+= copy_this;

  002b9	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  002be	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  002c4	03 44 24 34	 add	 eax, DWORD PTR copy_this$3[rsp]
  002c8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  002cd	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax

; 1500 :                   zi->ci.pos_in_buffered_data += copy_this;

  002d3	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  002d8	8b 80 d4 00 00
	00		 mov	 eax, DWORD PTR [rax+212]
  002de	03 44 24 34	 add	 eax, DWORD PTR copy_this$3[rsp]
  002e2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  002e7	89 81 d4 00 00
	00		 mov	 DWORD PTR [rcx+212], eax
$LN13@zipWriteIn:

; 1501 :               }
; 1502 :           }
; 1503 :       }// while(...)

  002ed	e9 bd fd ff ff	 jmp	 $LN2@zipWriteIn
$LN3@zipWriteIn:

; 1504 :     }
; 1505 : 
; 1506 :     return err;

  002f2	8b 44 24 28	 mov	 eax, DWORD PTR err$[rsp]
$LN1@zipWriteIn:

; 1507 : }

  002f6	48 83 c4 40	 add	 rsp, 64			; 00000040H
  002fa	5f		 pop	 rdi
  002fb	c3		 ret	 0
zipWriteInFileInZip ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zipCloseFileInZipRaw
_TEXT	SEGMENT
file$ = 48
uncompressed_size$ = 56
crc32$ = 64
zipCloseFileInZipRaw PROC				; COMDAT

; 1510 : {

$LN4:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	57		 push	 rdi
  0000f	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 08 00 00 00	 mov	 ecx, 8
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1511 :     return zipCloseFileInZipRaw64 (file, uncompressed_size, crc32);

  00033	8b 44 24 38	 mov	 eax, DWORD PTR uncompressed_size$[rsp]
  00037	44 8b 44 24 40	 mov	 r8d, DWORD PTR crc32$[rsp]
  0003c	8b d0		 mov	 edx, eax
  0003e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR file$[rsp]
  00043	e8 00 00 00 00	 call	 zipCloseFileInZipRaw64

; 1512 : }

  00048	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004c	5f		 pop	 rdi
  0004d	c3		 ret	 0
zipCloseFileInZipRaw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zipCloseFileInZipRaw64
_TEXT	SEGMENT
zi$ = 32
compressed_size$ = 40
invalidValue$ = 48
datasize$ = 52
err$ = 56
uTotalOutBefore$1 = 60
tmp_err$2 = 64
p$3 = 72
cur_pos_inzip$4 = 80
file$ = 112
uncompressed_size$ = 120
crc32$ = 128
zipCloseFileInZipRaw64 PROC				; COMDAT

; 1515 : {

$LN50:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 18 00 00 00	 mov	 ecx, 24
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1516 :     zip64_internal* zi;
; 1517 :     ZPOS64_T compressed_size;
; 1518 :     uLong invalidValue = 0xffffffff;

  00034	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR invalidValue$[rsp], -1 ; ffffffffH

; 1519 :     short datasize = 0;

  0003c	33 c0		 xor	 eax, eax
  0003e	66 89 44 24 34	 mov	 WORD PTR datasize$[rsp], ax

; 1520 :     int err=ZIP_OK;

  00043	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 1521 : 
; 1522 :     if (file == NULL)

  0004b	48 83 7c 24 70
	00		 cmp	 QWORD PTR file$[rsp], 0
  00051	75 0a		 jne	 SHORT $LN4@zipCloseFi

; 1523 :         return ZIP_PARAMERROR;

  00053	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00058	e9 ca 07 00 00	 jmp	 $LN1@zipCloseFi
$LN4@zipCloseFi:

; 1524 :     zi = (zip64_internal*)file;

  0005d	48 8b 44 24 70	 mov	 rax, QWORD PTR file$[rsp]
  00062	48 89 44 24 20	 mov	 QWORD PTR zi$[rsp], rax

; 1525 : 
; 1526 :     if (zi->in_opened_file_inzip == 0)

  00067	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  0006c	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  00070	75 0a		 jne	 SHORT $LN5@zipCloseFi

; 1527 :         return ZIP_PARAMERROR;

  00072	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00077	e9 ab 07 00 00	 jmp	 $LN1@zipCloseFi
$LN5@zipCloseFi:

; 1528 :     zi->ci.stream.avail_in = 0;

  0007c	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00081	c7 80 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+128], 0

; 1529 : 
; 1530 :     if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  0008b	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00090	83 b8 f8 00 00
	00 08		 cmp	 DWORD PTR [rax+248], 8
  00097	0f 85 bf 00 00
	00		 jne	 $LN6@zipCloseFi
  0009d	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  000a2	83 b8 fc 00 00
	00 00		 cmp	 DWORD PTR [rax+252], 0
  000a9	0f 85 ad 00 00
	00		 jne	 $LN6@zipCloseFi
$LN2@zipCloseFi:

; 1531 :                 {
; 1532 :                         while (err==ZIP_OK)

  000af	83 7c 24 38 00	 cmp	 DWORD PTR err$[rsp], 0
  000b4	0f 85 a0 00 00
	00		 jne	 $LN3@zipCloseFi

; 1533 :                         {
; 1534 :                                 uLong uTotalOutBefore;
; 1535 :                                 if (zi->ci.stream.avail_out == 0)

  000ba	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  000bf	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [rax+144], 0
  000c6	75 3d		 jne	 SHORT $LN8@zipCloseFi

; 1536 :                                 {
; 1537 :                                         if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)

  000c8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  000cd	e8 00 00 00 00	 call	 zip64FlushWriteBuffer
  000d2	83 f8 ff	 cmp	 eax, -1
  000d5	75 08		 jne	 SHORT $LN9@zipCloseFi

; 1538 :                                                 err = ZIP_ERRNO;

  000d7	c7 44 24 38 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN9@zipCloseFi:

; 1539 :                                         zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;

  000df	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  000e4	c7 80 90 00 00
	00 00 00 01 00	 mov	 DWORD PTR [rax+144], 65536 ; 00010000H

; 1540 :                                         zi->ci.stream.next_out = zi->ci.buffered_data;

  000ee	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  000f3	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  000f9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  000fe	48 89 81 88 00
	00 00		 mov	 QWORD PTR [rcx+136], rax
$LN8@zipCloseFi:

; 1541 :                                 }
; 1542 :                                 uTotalOutBefore = zi->ci.stream.total_out;

  00105	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  0010a	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  00110	89 44 24 3c	 mov	 DWORD PTR uTotalOutBefore$1[rsp], eax

; 1543 :                                 err=deflate(&zi->ci.stream,  Z_FINISH);

  00114	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00119	48 83 c0 78	 add	 rax, 120		; 00000078H
  0011d	ba 04 00 00 00	 mov	 edx, 4
  00122	48 8b c8	 mov	 rcx, rax
  00125	e8 00 00 00 00	 call	 deflate
  0012a	89 44 24 38	 mov	 DWORD PTR err$[rsp], eax

; 1544 :                                 zi->ci.pos_in_buffered_data += (uInt)(zi->ci.stream.total_out - uTotalOutBefore) ;

  0012e	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00133	8b 4c 24 3c	 mov	 ecx, DWORD PTR uTotalOutBefore$1[rsp]
  00137	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  0013d	2b c1		 sub	 eax, ecx
  0013f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  00144	03 81 d4 00 00
	00		 add	 eax, DWORD PTR [rcx+212]
  0014a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  0014f	89 81 d4 00 00
	00		 mov	 DWORD PTR [rcx+212], eax

; 1545 :                         }

  00155	e9 55 ff ff ff	 jmp	 $LN2@zipCloseFi
$LN3@zipCloseFi:

; 1546 :                 }

  0015a	eb 13		 jmp	 SHORT $LN7@zipCloseFi
$LN6@zipCloseFi:

; 1547 :     else if ((zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))

  0015c	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00161	83 b8 f8 00 00
	00 0c		 cmp	 DWORD PTR [rax+248], 12
  00168	75 05		 jne	 SHORT $LN10@zipCloseFi
  0016a	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
$LN10@zipCloseFi:
$LN7@zipCloseFi:

; 1548 :     {
; 1549 : #ifdef HAVE_BZIP2
; 1550 :       err = BZ_FINISH_OK;
; 1551 :       while (err==BZ_FINISH_OK)
; 1552 :       {
; 1553 :         uLong uTotalOutBefore;
; 1554 :         if (zi->ci.bstream.avail_out == 0)
; 1555 :         {
; 1556 :           if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)
; 1557 :             err = ZIP_ERRNO;
; 1558 :           zi->ci.bstream.avail_out = (uInt)Z_BUFSIZE;
; 1559 :           zi->ci.bstream.next_out = (char*)zi->ci.buffered_data;
; 1560 :         }
; 1561 :         uTotalOutBefore = zi->ci.bstream.total_out_lo32;
; 1562 :         err=BZ2_bzCompress(&zi->ci.bstream,  BZ_FINISH);
; 1563 :         if(err == BZ_STREAM_END)
; 1564 :           err = Z_STREAM_END;
; 1565 : 
; 1566 :         zi->ci.pos_in_buffered_data += (uInt)(zi->ci.bstream.total_out_lo32 - uTotalOutBefore);
; 1567 :       }
; 1568 : 
; 1569 :       if(err == BZ_FINISH_OK)
; 1570 :         err = ZIP_OK;
; 1571 : #endif
; 1572 :     }
; 1573 : 
; 1574 :     if (err==Z_STREAM_END)

  0016f	83 7c 24 38 01	 cmp	 DWORD PTR err$[rsp], 1
  00174	75 08		 jne	 SHORT $LN11@zipCloseFi

; 1575 :         err=ZIP_OK; /* this is normal */

  00176	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0
$LN11@zipCloseFi:

; 1576 : 
; 1577 :     if ((zi->ci.pos_in_buffered_data>0) && (err==ZIP_OK))

  0017e	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00183	83 b8 d4 00 00
	00 00		 cmp	 DWORD PTR [rax+212], 0
  0018a	76 1e		 jbe	 SHORT $LN12@zipCloseFi
  0018c	83 7c 24 38 00	 cmp	 DWORD PTR err$[rsp], 0
  00191	75 17		 jne	 SHORT $LN12@zipCloseFi

; 1578 :                 {
; 1579 :         if (zip64FlushWriteBuffer(zi)==ZIP_ERRNO)

  00193	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  00198	e8 00 00 00 00	 call	 zip64FlushWriteBuffer
  0019d	83 f8 ff	 cmp	 eax, -1
  001a0	75 08		 jne	 SHORT $LN13@zipCloseFi

; 1580 :             err = ZIP_ERRNO;

  001a2	c7 44 24 38 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN13@zipCloseFi:
$LN12@zipCloseFi:

; 1581 :                 }
; 1582 : 
; 1583 :     if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  001aa	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  001af	83 b8 f8 00 00
	00 08		 cmp	 DWORD PTR [rax+248], 8
  001b6	75 41		 jne	 SHORT $LN14@zipCloseFi
  001b8	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  001bd	83 b8 fc 00 00
	00 00		 cmp	 DWORD PTR [rax+252], 0
  001c4	75 33		 jne	 SHORT $LN14@zipCloseFi

; 1584 :     {
; 1585 :         int tmp_err = deflateEnd(&zi->ci.stream);

  001c6	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  001cb	48 83 c0 78	 add	 rax, 120		; 00000078H
  001cf	48 8b c8	 mov	 rcx, rax
  001d2	e8 00 00 00 00	 call	 deflateEnd
  001d7	89 44 24 40	 mov	 DWORD PTR tmp_err$2[rsp], eax

; 1586 :         if (err == ZIP_OK)

  001db	83 7c 24 38 00	 cmp	 DWORD PTR err$[rsp], 0
  001e0	75 08		 jne	 SHORT $LN15@zipCloseFi

; 1587 :             err = tmp_err;

  001e2	8b 44 24 40	 mov	 eax, DWORD PTR tmp_err$2[rsp]
  001e6	89 44 24 38	 mov	 DWORD PTR err$[rsp], eax
$LN15@zipCloseFi:

; 1588 :         zi->ci.stream_initialised = 0;

  001ea	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  001ef	c7 80 d0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+208], 0
$LN14@zipCloseFi:

; 1589 :     }
; 1590 : #ifdef HAVE_BZIP2
; 1591 :     else if((zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1592 :     {
; 1593 :       int tmperr = BZ2_bzCompressEnd(&zi->ci.bstream);
; 1594 :                         if (err==ZIP_OK)
; 1595 :                                 err = tmperr;
; 1596 :                         zi->ci.stream_initialised = 0;
; 1597 :     }
; 1598 : #endif
; 1599 : 
; 1600 :     if (!zi->ci.raw)

  001f9	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  001fe	83 b8 fc 00 00
	00 00		 cmp	 DWORD PTR [rax+252], 0
  00205	75 23		 jne	 SHORT $LN16@zipCloseFi

; 1601 :     {
; 1602 :         crc32 = (uLong)zi->ci.crc32;

  00207	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  0020c	8b 80 04 01 01
	00		 mov	 eax, DWORD PTR [rax+65796]
  00212	89 84 24 80 00
	00 00		 mov	 DWORD PTR crc32$[rsp], eax

; 1603 :         uncompressed_size = zi->ci.totalUncompressedData;

  00219	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  0021e	48 8b 80 20 01
	01 00		 mov	 rax, QWORD PTR [rax+65824]
  00225	48 89 44 24 78	 mov	 QWORD PTR uncompressed_size$[rsp], rax
$LN16@zipCloseFi:

; 1604 :     }
; 1605 :     compressed_size = zi->ci.totalCompressedData;

  0022a	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  0022f	48 8b 80 18 01
	01 00		 mov	 rax, QWORD PTR [rax+65816]
  00236	48 89 44 24 28	 mov	 QWORD PTR compressed_size$[rsp], rax

; 1606 : 
; 1607 : #    ifndef NOCRYPT
; 1608 :     compressed_size += zi->ci.crypt_header_size;

  0023b	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00240	48 63 80 40 01
	01 00		 movsxd	 rax, DWORD PTR [rax+65856]
  00247	48 8b 4c 24 28	 mov	 rcx, QWORD PTR compressed_size$[rsp]
  0024c	48 03 c8	 add	 rcx, rax
  0024f	48 8b c1	 mov	 rax, rcx
  00252	48 89 44 24 28	 mov	 QWORD PTR compressed_size$[rsp], rax

; 1609 : #    endif
; 1610 : 
; 1611 :     // update Current Item crc and sizes,
; 1612 :     if(compressed_size >= 0xffffffff || uncompressed_size >= 0xffffffff || zi->ci.pos_local_header >= 0xffffffff)

  00257	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  0025c	48 39 44 24 28	 cmp	 QWORD PTR compressed_size$[rsp], rax
  00261	73 1f		 jae	 SHORT $LN18@zipCloseFi
  00263	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  00268	48 39 44 24 78	 cmp	 QWORD PTR uncompressed_size$[rsp], rax
  0026d	73 13		 jae	 SHORT $LN18@zipCloseFi
  0026f	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00274	b9 ff ff ff ff	 mov	 ecx, -1			; ffffffffH
  00279	48 39 88 d8 00
	00 00		 cmp	 QWORD PTR [rax+216], rcx
  00280	72 46		 jb	 SHORT $LN17@zipCloseFi
$LN18@zipCloseFi:

; 1613 :     {
; 1614 :       /*version Made by*/
; 1615 :       zip64local_putValue_inmemory(zi->ci.central_header+4,(uLong)45,2);

  00282	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00287	48 8b 80 e0 00
	00 00		 mov	 rax, QWORD PTR [rax+224]
  0028e	48 83 c0 04	 add	 rax, 4
  00292	41 b8 02 00 00
	00		 mov	 r8d, 2
  00298	ba 2d 00 00 00	 mov	 edx, 45			; 0000002dH
  0029d	48 8b c8	 mov	 rcx, rax
  002a0	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1616 :       /*version needed*/
; 1617 :       zip64local_putValue_inmemory(zi->ci.central_header+6,(uLong)45,2);

  002a5	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  002aa	48 8b 80 e0 00
	00 00		 mov	 rax, QWORD PTR [rax+224]
  002b1	48 83 c0 06	 add	 rax, 6
  002b5	41 b8 02 00 00
	00		 mov	 r8d, 2
  002bb	ba 2d 00 00 00	 mov	 edx, 45			; 0000002dH
  002c0	48 8b c8	 mov	 rcx, rax
  002c3	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
$LN17@zipCloseFi:

; 1618 : 
; 1619 :     }
; 1620 : 
; 1621 :     zip64local_putValue_inmemory(zi->ci.central_header+16,crc32,4); /*crc*/

  002c8	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR crc32$[rsp]
  002cf	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  002d4	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  002db	48 83 c1 10	 add	 rcx, 16
  002df	41 b8 04 00 00
	00		 mov	 r8d, 4
  002e5	8b d0		 mov	 edx, eax
  002e7	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1622 : 
; 1623 : 
; 1624 :     if(compressed_size >= 0xffffffff)

  002ec	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  002f1	48 39 44 24 28	 cmp	 QWORD PTR compressed_size$[rsp], rax
  002f6	72 23		 jb	 SHORT $LN19@zipCloseFi

; 1625 :       zip64local_putValue_inmemory(zi->ci.central_header+20, invalidValue,4); /*compr size*/

  002f8	8b 44 24 30	 mov	 eax, DWORD PTR invalidValue$[rsp]
  002fc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  00301	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  00308	48 83 c1 14	 add	 rcx, 20
  0030c	41 b8 04 00 00
	00		 mov	 r8d, 4
  00312	8b d0		 mov	 edx, eax
  00314	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
  00319	eb 26		 jmp	 SHORT $LN20@zipCloseFi
$LN19@zipCloseFi:

; 1626 :     else
; 1627 :       zip64local_putValue_inmemory(zi->ci.central_header+20, compressed_size,4); /*compr size*/

  0031b	0f ae e8	 lfence
  0031e	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00323	48 8b 80 e0 00
	00 00		 mov	 rax, QWORD PTR [rax+224]
  0032a	48 83 c0 14	 add	 rax, 20
  0032e	41 b8 04 00 00
	00		 mov	 r8d, 4
  00334	48 8b 54 24 28	 mov	 rdx, QWORD PTR compressed_size$[rsp]
  00339	48 8b c8	 mov	 rcx, rax
  0033c	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
$LN20@zipCloseFi:

; 1628 : 
; 1629 :     /// set internal file attributes field
; 1630 :     if (zi->ci.stream.data_type == Z_ASCII)

  00341	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00346	83 b8 c0 00 00
	00 01		 cmp	 DWORD PTR [rax+192], 1
  0034d	75 23		 jne	 SHORT $LN21@zipCloseFi

; 1631 :         zip64local_putValue_inmemory(zi->ci.central_header+36,(uLong)Z_ASCII,2);

  0034f	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00354	48 8b 80 e0 00
	00 00		 mov	 rax, QWORD PTR [rax+224]
  0035b	48 83 c0 24	 add	 rax, 36			; 00000024H
  0035f	41 b8 02 00 00
	00		 mov	 r8d, 2
  00365	ba 01 00 00 00	 mov	 edx, 1
  0036a	48 8b c8	 mov	 rcx, rax
  0036d	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
$LN21@zipCloseFi:

; 1632 : 
; 1633 :     if(uncompressed_size >= 0xffffffff)

  00372	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  00377	48 39 44 24 78	 cmp	 QWORD PTR uncompressed_size$[rsp], rax
  0037c	72 23		 jb	 SHORT $LN22@zipCloseFi

; 1634 :       zip64local_putValue_inmemory(zi->ci.central_header+24, invalidValue,4); /*uncompr size*/

  0037e	8b 44 24 30	 mov	 eax, DWORD PTR invalidValue$[rsp]
  00382	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  00387	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  0038e	48 83 c1 18	 add	 rcx, 24
  00392	41 b8 04 00 00
	00		 mov	 r8d, 4
  00398	8b d0		 mov	 edx, eax
  0039a	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
  0039f	eb 26		 jmp	 SHORT $LN23@zipCloseFi
$LN22@zipCloseFi:

; 1635 :     else
; 1636 :       zip64local_putValue_inmemory(zi->ci.central_header+24, uncompressed_size,4); /*uncompr size*/

  003a1	0f ae e8	 lfence
  003a4	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  003a9	48 8b 80 e0 00
	00 00		 mov	 rax, QWORD PTR [rax+224]
  003b0	48 83 c0 18	 add	 rax, 24
  003b4	41 b8 04 00 00
	00		 mov	 r8d, 4
  003ba	48 8b 54 24 78	 mov	 rdx, QWORD PTR uncompressed_size$[rsp]
  003bf	48 8b c8	 mov	 rcx, rax
  003c2	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
$LN23@zipCloseFi:

; 1637 : 
; 1638 :     // Add ZIP64 extra info field for uncompressed size
; 1639 :     if(uncompressed_size >= 0xffffffff)

  003c7	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  003cc	48 39 44 24 78	 cmp	 QWORD PTR uncompressed_size$[rsp], rax
  003d1	72 0d		 jb	 SHORT $LN24@zipCloseFi

; 1640 :       datasize += 8;

  003d3	0f bf 44 24 34	 movsx	 eax, WORD PTR datasize$[rsp]
  003d8	83 c0 08	 add	 eax, 8
  003db	66 89 44 24 34	 mov	 WORD PTR datasize$[rsp], ax
$LN24@zipCloseFi:

; 1641 : 
; 1642 :     // Add ZIP64 extra info field for compressed size
; 1643 :     if(compressed_size >= 0xffffffff)

  003e0	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  003e5	48 39 44 24 28	 cmp	 QWORD PTR compressed_size$[rsp], rax
  003ea	72 0d		 jb	 SHORT $LN25@zipCloseFi

; 1644 :       datasize += 8;

  003ec	0f bf 44 24 34	 movsx	 eax, WORD PTR datasize$[rsp]
  003f1	83 c0 08	 add	 eax, 8
  003f4	66 89 44 24 34	 mov	 WORD PTR datasize$[rsp], ax
$LN25@zipCloseFi:

; 1645 : 
; 1646 :     // Add ZIP64 extra info field for relative offset to local file header of current file
; 1647 :     if(zi->ci.pos_local_header >= 0xffffffff)

  003f9	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  003fe	b9 ff ff ff ff	 mov	 ecx, -1			; ffffffffH
  00403	48 39 88 d8 00
	00 00		 cmp	 QWORD PTR [rax+216], rcx
  0040a	72 0d		 jb	 SHORT $LN26@zipCloseFi

; 1648 :       datasize += 8;

  0040c	0f bf 44 24 34	 movsx	 eax, WORD PTR datasize$[rsp]
  00411	83 c0 08	 add	 eax, 8
  00414	66 89 44 24 34	 mov	 WORD PTR datasize$[rsp], ax
$LN26@zipCloseFi:

; 1649 : 
; 1650 :     if(datasize > 0)

  00419	0f bf 44 24 34	 movsx	 eax, WORD PTR datasize$[rsp]
  0041e	85 c0		 test	 eax, eax
  00420	0f 8e b7 01 00
	00		 jle	 $LN27@zipCloseFi

; 1651 :     {
; 1652 :       char* p = NULL;

  00426	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR p$3[rsp], 0

; 1653 : 
; 1654 :       if((uLong)(datasize + 4) > zi->ci.size_centralExtraFree)

  0042f	0f bf 44 24 34	 movsx	 eax, WORD PTR datasize$[rsp]
  00434	83 c0 04	 add	 eax, 4
  00437	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  0043c	3b 81 f0 00 00
	00		 cmp	 eax, DWORD PTR [rcx+240]
  00442	76 0a		 jbe	 SHORT $LN28@zipCloseFi

; 1655 :       {
; 1656 :         // we can not write more data to the buffer that we have room for.
; 1657 :         return ZIP_BADZIPFILE;

  00444	b8 99 ff ff ff	 mov	 eax, -103		; ffffffffffffff99H
  00449	e9 d9 03 00 00	 jmp	 $LN1@zipCloseFi
$LN28@zipCloseFi:

; 1658 :       }
; 1659 : 
; 1660 :       p = zi->ci.central_header + zi->ci.size_centralheader;

  0044e	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00453	8b 80 ec 00 00
	00		 mov	 eax, DWORD PTR [rax+236]
  00459	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  0045e	48 03 81 e0 00
	00 00		 add	 rax, QWORD PTR [rcx+224]
  00465	48 89 44 24 48	 mov	 QWORD PTR p$3[rsp], rax

; 1661 : 
; 1662 :       // Add Extra Information Header for 'ZIP64 information'
; 1663 :       zip64local_putValue_inmemory(p, 0x0001, 2); // HeaderID

  0046a	41 b8 02 00 00
	00		 mov	 r8d, 2
  00470	ba 01 00 00 00	 mov	 edx, 1
  00475	48 8b 4c 24 48	 mov	 rcx, QWORD PTR p$3[rsp]
  0047a	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1664 :       p += 2;

  0047f	48 8b 44 24 48	 mov	 rax, QWORD PTR p$3[rsp]
  00484	48 83 c0 02	 add	 rax, 2
  00488	48 89 44 24 48	 mov	 QWORD PTR p$3[rsp], rax

; 1665 :       zip64local_putValue_inmemory(p, datasize, 2); // DataSize

  0048d	48 0f bf 44 24
	34		 movsx	 rax, WORD PTR datasize$[rsp]
  00493	41 b8 02 00 00
	00		 mov	 r8d, 2
  00499	48 8b d0	 mov	 rdx, rax
  0049c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR p$3[rsp]
  004a1	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1666 :       p += 2;

  004a6	48 8b 44 24 48	 mov	 rax, QWORD PTR p$3[rsp]
  004ab	48 83 c0 02	 add	 rax, 2
  004af	48 89 44 24 48	 mov	 QWORD PTR p$3[rsp], rax

; 1667 : 
; 1668 :       if(uncompressed_size >= 0xffffffff)

  004b4	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  004b9	48 39 44 24 78	 cmp	 QWORD PTR uncompressed_size$[rsp], rax
  004be	72 26		 jb	 SHORT $LN29@zipCloseFi

; 1669 :       {
; 1670 :         zip64local_putValue_inmemory(p, uncompressed_size, 8);

  004c0	0f ae e8	 lfence
  004c3	41 b8 08 00 00
	00		 mov	 r8d, 8
  004c9	48 8b 54 24 78	 mov	 rdx, QWORD PTR uncompressed_size$[rsp]
  004ce	48 8b 4c 24 48	 mov	 rcx, QWORD PTR p$3[rsp]
  004d3	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1671 :         p += 8;

  004d8	48 8b 44 24 48	 mov	 rax, QWORD PTR p$3[rsp]
  004dd	48 83 c0 08	 add	 rax, 8
  004e1	48 89 44 24 48	 mov	 QWORD PTR p$3[rsp], rax
$LN29@zipCloseFi:

; 1672 :       }
; 1673 : 
; 1674 :       if(compressed_size >= 0xffffffff)

  004e6	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  004eb	48 39 44 24 28	 cmp	 QWORD PTR compressed_size$[rsp], rax
  004f0	72 26		 jb	 SHORT $LN30@zipCloseFi

; 1675 :       {
; 1676 :         zip64local_putValue_inmemory(p, compressed_size, 8);

  004f2	0f ae e8	 lfence
  004f5	41 b8 08 00 00
	00		 mov	 r8d, 8
  004fb	48 8b 54 24 28	 mov	 rdx, QWORD PTR compressed_size$[rsp]
  00500	48 8b 4c 24 48	 mov	 rcx, QWORD PTR p$3[rsp]
  00505	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1677 :         p += 8;

  0050a	48 8b 44 24 48	 mov	 rax, QWORD PTR p$3[rsp]
  0050f	48 83 c0 08	 add	 rax, 8
  00513	48 89 44 24 48	 mov	 QWORD PTR p$3[rsp], rax
$LN30@zipCloseFi:

; 1678 :       }
; 1679 : 
; 1680 :       if(zi->ci.pos_local_header >= 0xffffffff)

  00518	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  0051d	b9 ff ff ff ff	 mov	 ecx, -1			; ffffffffH
  00522	48 39 88 d8 00
	00 00		 cmp	 QWORD PTR [rax+216], rcx
  00529	72 2a		 jb	 SHORT $LN31@zipCloseFi

; 1681 :       {
; 1682 :         zip64local_putValue_inmemory(p, zi->ci.pos_local_header, 8);

  0052b	41 b8 08 00 00
	00		 mov	 r8d, 8
  00531	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00536	48 8b 90 d8 00
	00 00		 mov	 rdx, QWORD PTR [rax+216]
  0053d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR p$3[rsp]
  00542	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1683 :         p += 8;

  00547	48 8b 44 24 48	 mov	 rax, QWORD PTR p$3[rsp]
  0054c	48 83 c0 08	 add	 rax, 8
  00550	48 89 44 24 48	 mov	 QWORD PTR p$3[rsp], rax
$LN31@zipCloseFi:

; 1684 :       }
; 1685 : 
; 1686 :       // Update how much extra free space we got in the memory buffer
; 1687 :       // and increase the centralheader size so the new ZIP64 fields are included
; 1688 :       // ( 4 below is the size of HeaderID and DataSize field )
; 1689 :       zi->ci.size_centralExtraFree -= datasize + 4;

  00555	0f bf 44 24 34	 movsx	 eax, WORD PTR datasize$[rsp]
  0055a	83 c0 04	 add	 eax, 4
  0055d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  00562	8b 89 f0 00 00
	00		 mov	 ecx, DWORD PTR [rcx+240]
  00568	2b c8		 sub	 ecx, eax
  0056a	8b c1		 mov	 eax, ecx
  0056c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  00571	89 81 f0 00 00
	00		 mov	 DWORD PTR [rcx+240], eax

; 1690 :       zi->ci.size_centralheader += datasize + 4;

  00577	0f bf 44 24 34	 movsx	 eax, WORD PTR datasize$[rsp]
  0057c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  00581	8b 89 ec 00 00
	00		 mov	 ecx, DWORD PTR [rcx+236]
  00587	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  0058b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  00590	89 81 ec 00 00
	00		 mov	 DWORD PTR [rcx+236], eax

; 1691 : 
; 1692 :       // Update the extra info size field
; 1693 :       zi->ci.size_centralExtra += datasize + 4;

  00596	0f bf 44 24 34	 movsx	 eax, WORD PTR datasize$[rsp]
  0059b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  005a0	8b 89 e8 00 00
	00		 mov	 ecx, DWORD PTR [rcx+232]
  005a6	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  005aa	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  005af	89 81 e8 00 00
	00		 mov	 DWORD PTR [rcx+232], eax

; 1694 :       zip64local_putValue_inmemory(zi->ci.central_header+30,(uLong)zi->ci.size_centralExtra,2);

  005b5	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  005ba	8b 80 e8 00 00
	00		 mov	 eax, DWORD PTR [rax+232]
  005c0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  005c5	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  005cc	48 83 c1 1e	 add	 rcx, 30
  005d0	41 b8 02 00 00
	00		 mov	 r8d, 2
  005d6	8b d0		 mov	 edx, eax
  005d8	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
$LN27@zipCloseFi:

; 1695 :     }
; 1696 : 
; 1697 :     if (err==ZIP_OK)

  005dd	83 7c 24 38 00	 cmp	 DWORD PTR err$[rsp], 0
  005e2	75 2d		 jne	 SHORT $LN32@zipCloseFi

; 1698 :         err = add_data_in_datablock(&zi->central_dir, zi->ci.central_header, (uLong)zi->ci.size_centralheader);

  005e4	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  005e9	48 83 c0 60	 add	 rax, 96			; 00000060H
  005ed	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  005f2	44 8b 81 ec 00
	00 00		 mov	 r8d, DWORD PTR [rcx+236]
  005f9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  005fe	48 8b 91 e0 00
	00 00		 mov	 rdx, QWORD PTR [rcx+224]
  00605	48 8b c8	 mov	 rcx, rax
  00608	e8 00 00 00 00	 call	 add_data_in_datablock
  0060d	89 44 24 38	 mov	 DWORD PTR err$[rsp], eax
$LN32@zipCloseFi:

; 1699 : 
; 1700 :     free(zi->ci.central_header);

  00611	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00616	48 8b 88 e0 00
	00 00		 mov	 rcx, QWORD PTR [rax+224]
  0061d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 1701 : 
; 1702 :     if (err==ZIP_OK)

  00623	83 7c 24 38 00	 cmp	 DWORD PTR err$[rsp], 0
  00628	0f 85 ce 01 00
	00		 jne	 $LN33@zipCloseFi

; 1703 :     {
; 1704 :         // Update the LocalFileHeader with the new values.
; 1705 : 
; 1706 :         ZPOS64_T cur_pos_inzip = ZTELL64(zi->z_filefunc,zi->filestream);

  0062e	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00633	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  00638	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0063c	48 8b c8	 mov	 rcx, rax
  0063f	e8 00 00 00 00	 call	 call_ztell64
  00644	48 89 44 24 50	 mov	 QWORD PTR cur_pos_inzip$4[rsp], rax

; 1707 : 
; 1708 :         if (ZSEEK64(zi->z_filefunc,zi->filestream, zi->ci.pos_local_header + 14,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00649	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  0064e	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  00655	48 83 c0 0e	 add	 rax, 14
  00659	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  0065e	45 33 c9	 xor	 r9d, r9d
  00661	4c 8b c0	 mov	 r8, rax
  00664	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00669	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  0066d	e8 00 00 00 00	 call	 call_zseek64
  00672	85 c0		 test	 eax, eax
  00674	74 08		 je	 SHORT $LN34@zipCloseFi

; 1709 :             err = ZIP_ERRNO;

  00676	c7 44 24 38 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN34@zipCloseFi:

; 1710 : 
; 1711 :         if (err==ZIP_OK)

  0067e	83 7c 24 38 00	 cmp	 DWORD PTR err$[rsp], 0
  00683	75 27		 jne	 SHORT $LN35@zipCloseFi

; 1712 :             err = zip64local_putValue(&zi->z_filefunc,zi->filestream,crc32,4); /* crc 32, unknown */

  00685	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR crc32$[rsp]
  0068c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  00691	41 b9 04 00 00
	00		 mov	 r9d, 4
  00697	44 8b c0	 mov	 r8d, eax
  0069a	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  0069f	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  006a3	e8 00 00 00 00	 call	 zip64local_putValue
  006a8	89 44 24 38	 mov	 DWORD PTR err$[rsp], eax
$LN35@zipCloseFi:

; 1713 : 
; 1714 :         if(uncompressed_size >= 0xffffffff || compressed_size >= 0xffffffff )

  006ac	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  006b1	48 39 44 24 78	 cmp	 QWORD PTR uncompressed_size$[rsp], rax
  006b6	73 10		 jae	 SHORT $LN38@zipCloseFi
  006b8	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  006bd	48 39 44 24 28	 cmp	 QWORD PTR compressed_size$[rsp], rax
  006c2	0f 82 ac 00 00
	00		 jb	 $LN36@zipCloseFi
$LN38@zipCloseFi:

; 1715 :         {
; 1716 :           if(zi->ci.pos_zip64extrainfo > 0)

  006c8	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  006cd	48 83 b8 10 01
	01 00 00	 cmp	 QWORD PTR [rax+65808], 0
  006d5	0f 86 8f 00 00
	00		 jbe	 $LN39@zipCloseFi

; 1717 :           {
; 1718 :             // Update the size in the ZIP64 extended field.
; 1719 :             if (ZSEEK64(zi->z_filefunc,zi->filestream, zi->ci.pos_zip64extrainfo + 4,ZLIB_FILEFUNC_SEEK_SET)!=0)

  006db	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  006e0	48 8b 80 10 01
	01 00		 mov	 rax, QWORD PTR [rax+65808]
  006e7	48 83 c0 04	 add	 rax, 4
  006eb	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  006f0	45 33 c9	 xor	 r9d, r9d
  006f3	4c 8b c0	 mov	 r8, rax
  006f6	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  006fb	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  006ff	e8 00 00 00 00	 call	 call_zseek64
  00704	85 c0		 test	 eax, eax
  00706	74 08		 je	 SHORT $LN41@zipCloseFi

; 1720 :               err = ZIP_ERRNO;

  00708	c7 44 24 38 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN41@zipCloseFi:

; 1721 : 
; 1722 :             if (err==ZIP_OK) /* compressed size, unknown */

  00710	83 7c 24 38 00	 cmp	 DWORD PTR err$[rsp], 0
  00715	75 25		 jne	 SHORT $LN42@zipCloseFi

; 1723 :               err = zip64local_putValue(&zi->z_filefunc, zi->filestream, uncompressed_size, 8);

  00717	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  0071c	41 b9 08 00 00
	00		 mov	 r9d, 8
  00722	4c 8b 44 24 78	 mov	 r8, QWORD PTR uncompressed_size$[rsp]
  00727	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  0072c	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00730	48 8b c8	 mov	 rcx, rax
  00733	e8 00 00 00 00	 call	 zip64local_putValue
  00738	89 44 24 38	 mov	 DWORD PTR err$[rsp], eax
$LN42@zipCloseFi:

; 1724 : 
; 1725 :             if (err==ZIP_OK) /* uncompressed size, unknown */

  0073c	83 7c 24 38 00	 cmp	 DWORD PTR err$[rsp], 0
  00741	75 25		 jne	 SHORT $LN43@zipCloseFi

; 1726 :               err = zip64local_putValue(&zi->z_filefunc, zi->filestream, compressed_size, 8);

  00743	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00748	41 b9 08 00 00
	00		 mov	 r9d, 8
  0074e	4c 8b 44 24 28	 mov	 r8, QWORD PTR compressed_size$[rsp]
  00753	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  00758	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0075c	48 8b c8	 mov	 rcx, rax
  0075f	e8 00 00 00 00	 call	 zip64local_putValue
  00764	89 44 24 38	 mov	 DWORD PTR err$[rsp], eax
$LN43@zipCloseFi:

; 1727 :           }

  00768	eb 08		 jmp	 SHORT $LN40@zipCloseFi
$LN39@zipCloseFi:

; 1728 :           else
; 1729 :               err = ZIP_BADZIPFILE; // Caller passed zip64 = 0, so no room for zip64 info -> fatal

  0076a	c7 44 24 38 99
	ff ff ff	 mov	 DWORD PTR err$[rsp], -103 ; ffffffffffffff99H
$LN40@zipCloseFi:

; 1730 :         }

  00772	eb 5e		 jmp	 SHORT $LN37@zipCloseFi
$LN36@zipCloseFi:

; 1731 :         else
; 1732 :         {
; 1733 :           if (err==ZIP_OK) /* compressed size, unknown */

  00774	83 7c 24 38 00	 cmp	 DWORD PTR err$[rsp], 0
  00779	75 28		 jne	 SHORT $LN44@zipCloseFi

; 1734 :               err = zip64local_putValue(&zi->z_filefunc,zi->filestream,compressed_size,4);

  0077b	0f ae e8	 lfence
  0077e	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00783	41 b9 04 00 00
	00		 mov	 r9d, 4
  00789	4c 8b 44 24 28	 mov	 r8, QWORD PTR compressed_size$[rsp]
  0078e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  00793	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00797	48 8b c8	 mov	 rcx, rax
  0079a	e8 00 00 00 00	 call	 zip64local_putValue
  0079f	89 44 24 38	 mov	 DWORD PTR err$[rsp], eax
$LN44@zipCloseFi:

; 1735 : 
; 1736 :           if (err==ZIP_OK) /* uncompressed size, unknown */

  007a3	83 7c 24 38 00	 cmp	 DWORD PTR err$[rsp], 0
  007a8	75 28		 jne	 SHORT $LN45@zipCloseFi

; 1737 :               err = zip64local_putValue(&zi->z_filefunc,zi->filestream,uncompressed_size,4);

  007aa	0f ae e8	 lfence
  007ad	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  007b2	41 b9 04 00 00
	00		 mov	 r9d, 4
  007b8	4c 8b 44 24 78	 mov	 r8, QWORD PTR uncompressed_size$[rsp]
  007bd	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  007c2	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  007c6	48 8b c8	 mov	 rcx, rax
  007c9	e8 00 00 00 00	 call	 zip64local_putValue
  007ce	89 44 24 38	 mov	 DWORD PTR err$[rsp], eax
$LN45@zipCloseFi:
$LN37@zipCloseFi:

; 1738 :         }
; 1739 : 
; 1740 :         if (ZSEEK64(zi->z_filefunc,zi->filestream, cur_pos_inzip,ZLIB_FILEFUNC_SEEK_SET)!=0)

  007d2	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  007d7	45 33 c9	 xor	 r9d, r9d
  007da	4c 8b 44 24 50	 mov	 r8, QWORD PTR cur_pos_inzip$4[rsp]
  007df	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  007e4	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  007e8	48 8b c8	 mov	 rcx, rax
  007eb	e8 00 00 00 00	 call	 call_zseek64
  007f0	85 c0		 test	 eax, eax
  007f2	74 08		 je	 SHORT $LN46@zipCloseFi

; 1741 :             err = ZIP_ERRNO;

  007f4	c7 44 24 38 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN46@zipCloseFi:
$LN33@zipCloseFi:

; 1742 :     }
; 1743 : 
; 1744 :     zi->number_entry ++;

  007fc	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00801	48 8b 80 58 01
	01 00		 mov	 rax, QWORD PTR [rax+65880]
  00808	48 ff c0	 inc	 rax
  0080b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  00810	48 89 81 58 01
	01 00		 mov	 QWORD PTR [rcx+65880], rax

; 1745 :     zi->in_opened_file_inzip = 0;

  00817	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  0081c	c7 40 70 00 00
	00 00		 mov	 DWORD PTR [rax+112], 0

; 1746 : 
; 1747 :     return err;

  00823	8b 44 24 38	 mov	 eax, DWORD PTR err$[rsp]
$LN1@zipCloseFi:

; 1748 : }

  00827	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0082b	5f		 pop	 rdi
  0082c	c3		 ret	 0
zipCloseFileInZipRaw64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zipCloseFileInZip
_TEXT	SEGMENT
file$ = 48
zipCloseFileInZip PROC					; COMDAT

; 1751 : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1752 :     return zipCloseFileInZipRaw (file,0,0);

  0002a	45 33 c0	 xor	 r8d, r8d
  0002d	33 d2		 xor	 edx, edx
  0002f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR file$[rsp]
  00034	e8 00 00 00 00	 call	 zipCloseFileInZipRaw

; 1753 : }

  00039	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003d	5f		 pop	 rdi
  0003e	c3		 ret	 0
zipCloseFileInZip ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT Write_Zip64EndOfCentralDirectoryLocator
_TEXT	SEGMENT
err$ = 32
pos$ = 40
zi$ = 64
zip64eocd_pos_inzip$ = 72
Write_Zip64EndOfCentralDirectoryLocator PROC		; COMDAT

; 1756 : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1757 :   int err = ZIP_OK;

  0002f	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 1758 :   ZPOS64_T pos = zip64eocd_pos_inzip - zi->add_position_when_writing_offset;

  00037	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  0003c	48 8b 80 50 01
	01 00		 mov	 rax, QWORD PTR [rax+65872]
  00043	48 8b 4c 24 48	 mov	 rcx, QWORD PTR zip64eocd_pos_inzip$[rsp]
  00048	48 2b c8	 sub	 rcx, rax
  0004b	48 8b c1	 mov	 rax, rcx
  0004e	48 89 44 24 28	 mov	 QWORD PTR pos$[rsp], rax

; 1759 : 
; 1760 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)ZIP64ENDLOCHEADERMAGIC,4);

  00053	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00058	41 b9 04 00 00
	00		 mov	 r9d, 4
  0005e	41 b8 50 4b 06
	07		 mov	 r8d, 117853008		; 07064b50H
  00064	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00069	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0006d	48 8b c8	 mov	 rcx, rax
  00070	e8 00 00 00 00	 call	 zip64local_putValue
  00075	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax

; 1761 : 
; 1762 :   /*num disks*/
; 1763 :     if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  00079	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  0007e	75 23		 jne	 SHORT $LN2@Write_Zip6

; 1764 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4);

  00080	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00085	41 b9 04 00 00
	00		 mov	 r9d, 4
  0008b	45 33 c0	 xor	 r8d, r8d
  0008e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00093	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00097	48 8b c8	 mov	 rcx, rax
  0009a	e8 00 00 00 00	 call	 zip64local_putValue
  0009f	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN2@Write_Zip6:

; 1765 : 
; 1766 :   /*relative offset*/
; 1767 :     if (err==ZIP_OK) /* Relative offset to the Zip64EndOfCentralDirectory */

  000a3	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  000a8	75 25		 jne	 SHORT $LN3@Write_Zip6

; 1768 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream, pos,8);

  000aa	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  000af	41 b9 08 00 00
	00		 mov	 r9d, 8
  000b5	4c 8b 44 24 28	 mov	 r8, QWORD PTR pos$[rsp]
  000ba	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  000bf	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  000c3	48 8b c8	 mov	 rcx, rax
  000c6	e8 00 00 00 00	 call	 zip64local_putValue
  000cb	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN3@Write_Zip6:

; 1769 : 
; 1770 :   /*total disks*/ /* Do not support spawning of disk so always say 1 here*/
; 1771 :     if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  000cf	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  000d4	75 26		 jne	 SHORT $LN4@Write_Zip6

; 1772 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)1,4);

  000d6	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  000db	41 b9 04 00 00
	00		 mov	 r9d, 4
  000e1	41 b8 01 00 00
	00		 mov	 r8d, 1
  000e7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  000ec	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  000f0	48 8b c8	 mov	 rcx, rax
  000f3	e8 00 00 00 00	 call	 zip64local_putValue
  000f8	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN4@Write_Zip6:

; 1773 : 
; 1774 :     return err;

  000fc	8b 44 24 20	 mov	 eax, DWORD PTR err$[rsp]

; 1775 : }

  00100	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00104	5f		 pop	 rdi
  00105	c3		 ret	 0
Write_Zip64EndOfCentralDirectoryLocator ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT Write_Zip64EndOfCentralDirectoryRecord
_TEXT	SEGMENT
err$ = 32
Zip64DataSize$ = 36
pos$1 = 40
zi$ = 64
size_centraldir$ = 72
centraldir_pos_inzip$ = 80
Write_Zip64EndOfCentralDirectoryRecord PROC		; COMDAT

; 1778 : {

$LN13:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	57		 push	 rdi
  0000f	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 0c 00 00 00	 mov	 ecx, 12
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1779 :   int err = ZIP_OK;

  00033	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 1780 : 
; 1781 :   uLong Zip64DataSize = 44;

  0003b	c7 44 24 24 2c
	00 00 00	 mov	 DWORD PTR Zip64DataSize$[rsp], 44 ; 0000002cH

; 1782 : 
; 1783 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)ZIP64ENDHEADERMAGIC,4);

  00043	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00048	41 b9 04 00 00
	00		 mov	 r9d, 4
  0004e	41 b8 50 4b 06
	06		 mov	 r8d, 101075792		; 06064b50H
  00054	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00059	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0005d	48 8b c8	 mov	 rcx, rax
  00060	e8 00 00 00 00	 call	 zip64local_putValue
  00065	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax

; 1784 : 
; 1785 :   if (err==ZIP_OK) /* size of this 'zip64 end of central directory' */

  00069	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  0006e	75 24		 jne	 SHORT $LN2@Write_Zip6

; 1786 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(ZPOS64_T)Zip64DataSize,8); // why ZPOS64_T of this ?

  00070	8b 44 24 24	 mov	 eax, DWORD PTR Zip64DataSize$[rsp]
  00074	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00079	41 b9 08 00 00
	00		 mov	 r9d, 8
  0007f	44 8b c0	 mov	 r8d, eax
  00082	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00087	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  0008b	e8 00 00 00 00	 call	 zip64local_putValue
  00090	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN2@Write_Zip6:

; 1787 : 
; 1788 :   if (err==ZIP_OK) /* version made by */

  00094	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  00099	75 26		 jne	 SHORT $LN3@Write_Zip6

; 1789 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)45,2);

  0009b	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  000a0	41 b9 02 00 00
	00		 mov	 r9d, 2
  000a6	41 b8 2d 00 00
	00		 mov	 r8d, 45			; 0000002dH
  000ac	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  000b1	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  000b5	48 8b c8	 mov	 rcx, rax
  000b8	e8 00 00 00 00	 call	 zip64local_putValue
  000bd	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN3@Write_Zip6:

; 1790 : 
; 1791 :   if (err==ZIP_OK) /* version needed */

  000c1	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  000c6	75 26		 jne	 SHORT $LN4@Write_Zip6

; 1792 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)45,2);

  000c8	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  000cd	41 b9 02 00 00
	00		 mov	 r9d, 2
  000d3	41 b8 2d 00 00
	00		 mov	 r8d, 45			; 0000002dH
  000d9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  000de	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  000e2	48 8b c8	 mov	 rcx, rax
  000e5	e8 00 00 00 00	 call	 zip64local_putValue
  000ea	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN4@Write_Zip6:

; 1793 : 
; 1794 :   if (err==ZIP_OK) /* number of this disk */

  000ee	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  000f3	75 23		 jne	 SHORT $LN5@Write_Zip6

; 1795 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4);

  000f5	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  000fa	41 b9 04 00 00
	00		 mov	 r9d, 4
  00100	45 33 c0	 xor	 r8d, r8d
  00103	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00108	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0010c	48 8b c8	 mov	 rcx, rax
  0010f	e8 00 00 00 00	 call	 zip64local_putValue
  00114	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN5@Write_Zip6:

; 1796 : 
; 1797 :   if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  00118	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  0011d	75 23		 jne	 SHORT $LN6@Write_Zip6

; 1798 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4);

  0011f	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00124	41 b9 04 00 00
	00		 mov	 r9d, 4
  0012a	45 33 c0	 xor	 r8d, r8d
  0012d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00132	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00136	48 8b c8	 mov	 rcx, rax
  00139	e8 00 00 00 00	 call	 zip64local_putValue
  0013e	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN6@Write_Zip6:

; 1799 : 
; 1800 :   if (err==ZIP_OK) /* total number of entries in the central dir on this disk */

  00142	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  00147	75 2c		 jne	 SHORT $LN7@Write_Zip6

; 1801 :     err = zip64local_putValue(&zi->z_filefunc, zi->filestream, zi->number_entry, 8);

  00149	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  0014e	41 b9 08 00 00
	00		 mov	 r9d, 8
  00154	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00159	4c 8b 81 58 01
	01 00		 mov	 r8, QWORD PTR [rcx+65880]
  00160	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00165	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00169	48 8b c8	 mov	 rcx, rax
  0016c	e8 00 00 00 00	 call	 zip64local_putValue
  00171	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN7@Write_Zip6:

; 1802 : 
; 1803 :   if (err==ZIP_OK) /* total number of entries in the central dir */

  00175	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  0017a	75 2c		 jne	 SHORT $LN8@Write_Zip6

; 1804 :     err = zip64local_putValue(&zi->z_filefunc, zi->filestream, zi->number_entry, 8);

  0017c	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00181	41 b9 08 00 00
	00		 mov	 r9d, 8
  00187	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  0018c	4c 8b 81 58 01
	01 00		 mov	 r8, QWORD PTR [rcx+65880]
  00193	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00198	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0019c	48 8b c8	 mov	 rcx, rax
  0019f	e8 00 00 00 00	 call	 zip64local_putValue
  001a4	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN8@Write_Zip6:

; 1805 : 
; 1806 :   if (err==ZIP_OK) /* size of the central directory */

  001a8	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  001ad	75 24		 jne	 SHORT $LN9@Write_Zip6

; 1807 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(ZPOS64_T)size_centraldir,8);

  001af	8b 44 24 48	 mov	 eax, DWORD PTR size_centraldir$[rsp]
  001b3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  001b8	41 b9 08 00 00
	00		 mov	 r9d, 8
  001be	44 8b c0	 mov	 r8d, eax
  001c1	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  001c6	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  001ca	e8 00 00 00 00	 call	 zip64local_putValue
  001cf	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN9@Write_Zip6:

; 1808 : 
; 1809 :   if (err==ZIP_OK) /* offset of start of central directory with respect to the starting disk number */

  001d3	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  001d8	75 41		 jne	 SHORT $LN10@Write_Zip6

; 1810 :   {
; 1811 :     ZPOS64_T pos = centraldir_pos_inzip - zi->add_position_when_writing_offset;

  001da	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  001df	48 8b 80 50 01
	01 00		 mov	 rax, QWORD PTR [rax+65872]
  001e6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR centraldir_pos_inzip$[rsp]
  001eb	48 2b c8	 sub	 rcx, rax
  001ee	48 8b c1	 mov	 rax, rcx
  001f1	48 89 44 24 28	 mov	 QWORD PTR pos$1[rsp], rax

; 1812 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream, (ZPOS64_T)pos,8);

  001f6	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  001fb	41 b9 08 00 00
	00		 mov	 r9d, 8
  00201	4c 8b 44 24 28	 mov	 r8, QWORD PTR pos$1[rsp]
  00206	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  0020b	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0020f	48 8b c8	 mov	 rcx, rax
  00212	e8 00 00 00 00	 call	 zip64local_putValue
  00217	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN10@Write_Zip6:

; 1813 :   }
; 1814 :   return err;

  0021b	8b 44 24 20	 mov	 eax, DWORD PTR err$[rsp]

; 1815 : }

  0021f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00223	5f		 pop	 rdi
  00224	c3		 ret	 0
Write_Zip64EndOfCentralDirectoryRecord ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT Write_EndOfCentralDirectoryRecord
_TEXT	SEGMENT
err$ = 32
pos$1 = 40
zi$ = 64
size_centraldir$ = 72
centraldir_pos_inzip$ = 80
Write_EndOfCentralDirectoryRecord PROC			; COMDAT

; 1817 : {

$LN16:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	57		 push	 rdi
  0000f	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 0c 00 00 00	 mov	 ecx, 12
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1818 :   int err = ZIP_OK;

  00033	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 1819 : 
; 1820 :   /*signature*/
; 1821 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)ENDHEADERMAGIC,4);

  0003b	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00040	41 b9 04 00 00
	00		 mov	 r9d, 4
  00046	41 b8 50 4b 05
	06		 mov	 r8d, 101010256		; 06054b50H
  0004c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00051	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00055	48 8b c8	 mov	 rcx, rax
  00058	e8 00 00 00 00	 call	 zip64local_putValue
  0005d	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax

; 1822 : 
; 1823 :   if (err==ZIP_OK) /* number of this disk */

  00061	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  00066	75 23		 jne	 SHORT $LN2@Write_EndO

; 1824 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,2);

  00068	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  0006d	41 b9 02 00 00
	00		 mov	 r9d, 2
  00073	45 33 c0	 xor	 r8d, r8d
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  0007b	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0007f	48 8b c8	 mov	 rcx, rax
  00082	e8 00 00 00 00	 call	 zip64local_putValue
  00087	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN2@Write_EndO:

; 1825 : 
; 1826 :   if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  0008b	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  00090	75 23		 jne	 SHORT $LN3@Write_EndO

; 1827 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,2);

  00092	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00097	41 b9 02 00 00
	00		 mov	 r9d, 2
  0009d	45 33 c0	 xor	 r8d, r8d
  000a0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  000a5	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  000a9	48 8b c8	 mov	 rcx, rax
  000ac	e8 00 00 00 00	 call	 zip64local_putValue
  000b1	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN3@Write_EndO:

; 1828 : 
; 1829 :   if (err==ZIP_OK) /* total number of entries in the central dir on this disk */

  000b5	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  000ba	75 65		 jne	 SHORT $LN4@Write_EndO

; 1830 :   {
; 1831 :     {
; 1832 :       if(zi->number_entry >= 0xFFFF)

  000bc	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  000c1	48 81 b8 58 01
	01 00 ff ff 00
	00		 cmp	 QWORD PTR [rax+65880], 65535 ; 0000ffffH
  000cc	72 28		 jb	 SHORT $LN5@Write_EndO

; 1833 :         err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xffff,2); // use value in ZIP64 record

  000ce	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  000d3	41 b9 02 00 00
	00		 mov	 r9d, 2
  000d9	41 b8 ff ff 00
	00		 mov	 r8d, 65535		; 0000ffffH
  000df	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  000e4	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  000e8	48 8b c8	 mov	 rcx, rax
  000eb	e8 00 00 00 00	 call	 zip64local_putValue
  000f0	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
  000f4	eb 2b		 jmp	 SHORT $LN6@Write_EndO
$LN5@Write_EndO:

; 1834 :       else
; 1835 :         err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->number_entry,2);

  000f6	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  000fb	8b 80 58 01 01
	00		 mov	 eax, DWORD PTR [rax+65880]
  00101	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00106	41 b9 02 00 00
	00		 mov	 r9d, 2
  0010c	44 8b c0	 mov	 r8d, eax
  0010f	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00114	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  00118	e8 00 00 00 00	 call	 zip64local_putValue
  0011d	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN6@Write_EndO:
$LN4@Write_EndO:

; 1836 :     }
; 1837 :   }
; 1838 : 
; 1839 :   if (err==ZIP_OK) /* total number of entries in the central dir */

  00121	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  00126	75 65		 jne	 SHORT $LN7@Write_EndO

; 1840 :   {
; 1841 :     if(zi->number_entry >= 0xFFFF)

  00128	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  0012d	48 81 b8 58 01
	01 00 ff ff 00
	00		 cmp	 QWORD PTR [rax+65880], 65535 ; 0000ffffH
  00138	72 28		 jb	 SHORT $LN8@Write_EndO

; 1842 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xffff,2); // use value in ZIP64 record

  0013a	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  0013f	41 b9 02 00 00
	00		 mov	 r9d, 2
  00145	41 b8 ff ff 00
	00		 mov	 r8d, 65535		; 0000ffffH
  0014b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00150	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00154	48 8b c8	 mov	 rcx, rax
  00157	e8 00 00 00 00	 call	 zip64local_putValue
  0015c	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
  00160	eb 2b		 jmp	 SHORT $LN9@Write_EndO
$LN8@Write_EndO:

; 1843 :     else
; 1844 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->number_entry,2);

  00162	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00167	8b 80 58 01 01
	00		 mov	 eax, DWORD PTR [rax+65880]
  0016d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00172	41 b9 02 00 00
	00		 mov	 r9d, 2
  00178	44 8b c0	 mov	 r8d, eax
  0017b	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00180	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  00184	e8 00 00 00 00	 call	 zip64local_putValue
  00189	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN9@Write_EndO:
$LN7@Write_EndO:

; 1845 :   }
; 1846 : 
; 1847 :   if (err==ZIP_OK) /* size of the central directory */

  0018d	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  00192	75 24		 jne	 SHORT $LN10@Write_EndO

; 1848 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_centraldir,4);

  00194	8b 44 24 48	 mov	 eax, DWORD PTR size_centraldir$[rsp]
  00198	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  0019d	41 b9 04 00 00
	00		 mov	 r9d, 4
  001a3	44 8b c0	 mov	 r8d, eax
  001a6	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  001ab	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  001af	e8 00 00 00 00	 call	 zip64local_putValue
  001b4	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN10@Write_EndO:

; 1849 : 
; 1850 :   if (err==ZIP_OK) /* offset of start of central directory with respect to the starting disk number */

  001b8	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  001bd	0f 85 8c 00 00
	00		 jne	 $LN11@Write_EndO

; 1851 :   {
; 1852 :     ZPOS64_T pos = centraldir_pos_inzip - zi->add_position_when_writing_offset;

  001c3	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  001c8	48 8b 80 50 01
	01 00		 mov	 rax, QWORD PTR [rax+65872]
  001cf	48 8b 4c 24 50	 mov	 rcx, QWORD PTR centraldir_pos_inzip$[rsp]
  001d4	48 2b c8	 sub	 rcx, rax
  001d7	48 8b c1	 mov	 rax, rcx
  001da	48 89 44 24 28	 mov	 QWORD PTR pos$1[rsp], rax

; 1853 :     if(pos >= 0xffffffff)

  001df	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  001e4	48 39 44 24 28	 cmp	 QWORD PTR pos$1[rsp], rax
  001e9	72 28		 jb	 SHORT $LN12@Write_EndO

; 1854 :     {
; 1855 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream, (uLong)0xffffffff,4);

  001eb	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  001f0	41 b9 04 00 00
	00		 mov	 r9d, 4
  001f6	41 b8 ff ff ff
	ff		 mov	 r8d, -1			; ffffffffH
  001fc	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00201	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00205	48 8b c8	 mov	 rcx, rax
  00208	e8 00 00 00 00	 call	 zip64local_putValue
  0020d	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax

; 1856 :     }

  00211	eb 3c		 jmp	 SHORT $LN13@Write_EndO
$LN12@Write_EndO:

; 1857 :     else
; 1858 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream, (uLong)(centraldir_pos_inzip - zi->add_position_when_writing_offset),4);

  00213	0f ae e8	 lfence
  00216	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  0021b	48 8b 80 50 01
	01 00		 mov	 rax, QWORD PTR [rax+65872]
  00222	48 8b 4c 24 50	 mov	 rcx, QWORD PTR centraldir_pos_inzip$[rsp]
  00227	48 2b c8	 sub	 rcx, rax
  0022a	48 8b c1	 mov	 rax, rcx
  0022d	8b c0		 mov	 eax, eax
  0022f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00234	41 b9 04 00 00
	00		 mov	 r9d, 4
  0023a	44 8b c0	 mov	 r8d, eax
  0023d	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00242	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  00246	e8 00 00 00 00	 call	 zip64local_putValue
  0024b	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN13@Write_EndO:
$LN11@Write_EndO:

; 1859 :   }
; 1860 : 
; 1861 :    return err;

  0024f	8b 44 24 20	 mov	 eax, DWORD PTR err$[rsp]

; 1862 : }

  00253	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00257	5f		 pop	 rdi
  00258	c3		 ret	 0
Write_EndOfCentralDirectoryRecord ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT Write_GlobalComment
_TEXT	SEGMENT
err$ = 32
size_global_comment$ = 36
zi$ = 64
global_comment$ = 72
Write_GlobalComment PROC				; COMDAT

; 1865 : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1866 :   int err = ZIP_OK;

  0002f	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 1867 :   uInt size_global_comment = 0;

  00037	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR size_global_comment$[rsp], 0

; 1868 : 
; 1869 :   if(global_comment != NULL)

  0003f	48 83 7c 24 48
	00		 cmp	 QWORD PTR global_comment$[rsp], 0
  00045	74 0f		 je	 SHORT $LN2@Write_Glob

; 1870 :     size_global_comment = (uInt)strlen(global_comment);

  00047	48 8b 4c 24 48	 mov	 rcx, QWORD PTR global_comment$[rsp]
  0004c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlen
  00052	89 44 24 24	 mov	 DWORD PTR size_global_comment$[rsp], eax
$LN2@Write_Glob:

; 1871 : 
; 1872 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_global_comment,2);

  00056	8b 44 24 24	 mov	 eax, DWORD PTR size_global_comment$[rsp]
  0005a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  0005f	41 b9 02 00 00
	00		 mov	 r9d, 2
  00065	44 8b c0	 mov	 r8d, eax
  00068	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  0006d	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  00071	e8 00 00 00 00	 call	 zip64local_putValue
  00076	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax

; 1873 : 
; 1874 :   if (err == ZIP_OK && size_global_comment > 0)

  0007a	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  0007f	75 3c		 jne	 SHORT $LN3@Write_Glob
  00081	83 7c 24 24 00	 cmp	 DWORD PTR size_global_comment$[rsp], 0
  00086	76 35		 jbe	 SHORT $LN3@Write_Glob

; 1875 :   {
; 1876 :     if (ZWRITE64(zi->z_filefunc,zi->filestream, global_comment, size_global_comment) != size_global_comment)

  00088	0f ae e8	 lfence
  0008b	44 8b 4c 24 24	 mov	 r9d, DWORD PTR size_global_comment$[rsp]
  00090	4c 8b 44 24 48	 mov	 r8, QWORD PTR global_comment$[rsp]
  00095	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  0009a	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  0009e	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  000a3	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  000a7	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  000ac	ff 50 10	 call	 QWORD PTR [rax+16]
  000af	3b 44 24 24	 cmp	 eax, DWORD PTR size_global_comment$[rsp]
  000b3	74 08		 je	 SHORT $LN4@Write_Glob

; 1877 :       err = ZIP_ERRNO;

  000b5	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN4@Write_Glob:
$LN3@Write_Glob:

; 1878 :   }
; 1879 :   return err;

  000bd	8b 44 24 20	 mov	 eax, DWORD PTR err$[rsp]

; 1880 : }

  000c1	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c5	5f		 pop	 rdi
  000c6	c3		 ret	 0
Write_GlobalComment ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zipClose
_TEXT	SEGMENT
zi$ = 32
err$ = 40
size_centraldir$ = 44
centraldir_pos_inzip$ = 48
pos$ = 56
ldi$1 = 64
Zip64EOCDpos$2 = 72
file$ = 96
global_comment$ = 104
zipClose PROC						; COMDAT

; 1883 : {

$LN20:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 14 00 00 00	 mov	 ecx, 20
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2B8D9255_zutil@c
  0002a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1884 :     zip64_internal* zi;
; 1885 :     int err = 0;

  0002f	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 1886 :     uLong size_centraldir = 0;

  00037	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR size_centraldir$[rsp], 0

; 1887 :     ZPOS64_T centraldir_pos_inzip;
; 1888 :     ZPOS64_T pos;
; 1889 : 
; 1890 :     if (file == NULL)

  0003f	48 83 7c 24 60
	00		 cmp	 QWORD PTR file$[rsp], 0
  00045	75 0a		 jne	 SHORT $LN4@zipClose

; 1891 :         return ZIP_PARAMERROR;

  00047	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  0004c	e9 13 02 00 00	 jmp	 $LN1@zipClose
$LN4@zipClose:

; 1892 : 
; 1893 :     zi = (zip64_internal*)file;

  00051	48 8b 44 24 60	 mov	 rax, QWORD PTR file$[rsp]
  00056	48 89 44 24 20	 mov	 QWORD PTR zi$[rsp], rax

; 1894 : 
; 1895 :     if (zi->in_opened_file_inzip == 1)

  0005b	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00060	83 78 70 01	 cmp	 DWORD PTR [rax+112], 1
  00064	75 0e		 jne	 SHORT $LN5@zipClose

; 1896 :     {
; 1897 :         err = zipCloseFileInZip (file);

  00066	48 8b 4c 24 60	 mov	 rcx, QWORD PTR file$[rsp]
  0006b	e8 00 00 00 00	 call	 zipCloseFileInZip
  00070	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN5@zipClose:

; 1898 :     }
; 1899 : 
; 1900 : #ifndef NO_ADDFILEINEXISTINGZIP
; 1901 :     if (global_comment==NULL)

  00074	48 83 7c 24 68
	00		 cmp	 QWORD PTR global_comment$[rsp], 0
  0007a	75 11		 jne	 SHORT $LN6@zipClose

; 1902 :         global_comment = zi->globalcomment;

  0007c	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00081	48 8b 80 60 01
	01 00		 mov	 rax, QWORD PTR [rax+65888]
  00088	48 89 44 24 68	 mov	 QWORD PTR global_comment$[rsp], rax
$LN6@zipClose:

; 1903 : #endif
; 1904 : 
; 1905 :     centraldir_pos_inzip = ZTELL64(zi->z_filefunc,zi->filestream);

  0008d	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00092	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  00097	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0009b	48 8b c8	 mov	 rcx, rax
  0009e	e8 00 00 00 00	 call	 call_ztell64
  000a3	48 89 44 24 30	 mov	 QWORD PTR centraldir_pos_inzip$[rsp], rax

; 1906 : 
; 1907 :     if (err==ZIP_OK)

  000a8	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  000ad	0f 85 8c 00 00
	00		 jne	 $LN7@zipClose

; 1908 :     {
; 1909 :         linkedlist_datablock_internal* ldi = zi->central_dir.first_block;

  000b3	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  000b8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000bc	48 89 44 24 40	 mov	 QWORD PTR ldi$1[rsp], rax
$LN2@zipClose:

; 1910 :         while (ldi!=NULL)

  000c1	48 83 7c 24 40
	00		 cmp	 QWORD PTR ldi$1[rsp], 0
  000c7	74 76		 je	 SHORT $LN3@zipClose

; 1911 :         {
; 1912 :             if ((err==ZIP_OK) && (ldi->filled_in_this_block>0))

  000c9	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  000ce	75 4c		 jne	 SHORT $LN8@zipClose
  000d0	48 8b 44 24 40	 mov	 rax, QWORD PTR ldi$1[rsp]
  000d5	83 78 0c 00	 cmp	 DWORD PTR [rax+12], 0
  000d9	76 41		 jbe	 SHORT $LN8@zipClose

; 1913 :             {
; 1914 :                 if (ZWRITE64(zi->z_filefunc,zi->filestream, ldi->data, ldi->filled_in_this_block) != ldi->filled_in_this_block)

  000db	48 8b 44 24 40	 mov	 rax, QWORD PTR ldi$1[rsp]
  000e0	48 83 c0 14	 add	 rax, 20
  000e4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ldi$1[rsp]
  000e9	44 8b 49 0c	 mov	 r9d, DWORD PTR [rcx+12]
  000ed	4c 8b c0	 mov	 r8, rax
  000f0	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  000f5	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  000f9	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  000fe	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  00102	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00107	ff 50 10	 call	 QWORD PTR [rax+16]
  0010a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ldi$1[rsp]
  0010f	3b 41 0c	 cmp	 eax, DWORD PTR [rcx+12]
  00112	74 08		 je	 SHORT $LN9@zipClose

; 1915 :                     err = ZIP_ERRNO;

  00114	c7 44 24 28 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN9@zipClose:
$LN8@zipClose:

; 1916 :             }
; 1917 : 
; 1918 :             size_centraldir += ldi->filled_in_this_block;

  0011c	48 8b 44 24 40	 mov	 rax, QWORD PTR ldi$1[rsp]
  00121	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  00124	8b 4c 24 2c	 mov	 ecx, DWORD PTR size_centraldir$[rsp]
  00128	03 c8		 add	 ecx, eax
  0012a	8b c1		 mov	 eax, ecx
  0012c	89 44 24 2c	 mov	 DWORD PTR size_centraldir$[rsp], eax

; 1919 :             ldi = ldi->next_datablock;

  00130	48 8b 44 24 40	 mov	 rax, QWORD PTR ldi$1[rsp]
  00135	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00138	48 89 44 24 40	 mov	 QWORD PTR ldi$1[rsp], rax

; 1920 :         }

  0013d	eb 82		 jmp	 SHORT $LN2@zipClose
$LN3@zipClose:
$LN7@zipClose:

; 1921 :     }
; 1922 :     free_linkedlist(&(zi->central_dir));

  0013f	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00144	48 83 c0 60	 add	 rax, 96			; 00000060H
  00148	48 8b c8	 mov	 rcx, rax
  0014b	e8 00 00 00 00	 call	 free_linkedlist

; 1923 : 
; 1924 :     pos = centraldir_pos_inzip - zi->add_position_when_writing_offset;

  00150	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00155	48 8b 80 50 01
	01 00		 mov	 rax, QWORD PTR [rax+65872]
  0015c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR centraldir_pos_inzip$[rsp]
  00161	48 2b c8	 sub	 rcx, rax
  00164	48 8b c1	 mov	 rax, rcx
  00167	48 89 44 24 38	 mov	 QWORD PTR pos$[rsp], rax

; 1925 :     if(pos >= 0xffffffff || zi->number_entry > 0xFFFF)

  0016c	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  00171	48 39 44 24 38	 cmp	 QWORD PTR pos$[rsp], rax
  00176	73 12		 jae	 SHORT $LN11@zipClose
  00178	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  0017d	48 81 b8 58 01
	01 00 ff ff 00
	00		 cmp	 QWORD PTR [rax+65880], 65535 ; 0000ffffH
  00188	76 3d		 jbe	 SHORT $LN10@zipClose
$LN11@zipClose:

; 1926 :     {
; 1927 :       ZPOS64_T Zip64EOCDpos = ZTELL64(zi->z_filefunc,zi->filestream);

  0018a	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  0018f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  00194	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00198	48 8b c8	 mov	 rcx, rax
  0019b	e8 00 00 00 00	 call	 call_ztell64
  001a0	48 89 44 24 48	 mov	 QWORD PTR Zip64EOCDpos$2[rsp], rax

; 1928 :       Write_Zip64EndOfCentralDirectoryRecord(zi, size_centraldir, centraldir_pos_inzip);

  001a5	4c 8b 44 24 30	 mov	 r8, QWORD PTR centraldir_pos_inzip$[rsp]
  001aa	8b 54 24 2c	 mov	 edx, DWORD PTR size_centraldir$[rsp]
  001ae	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  001b3	e8 00 00 00 00	 call	 Write_Zip64EndOfCentralDirectoryRecord

; 1929 : 
; 1930 :       Write_Zip64EndOfCentralDirectoryLocator(zi, Zip64EOCDpos);

  001b8	48 8b 54 24 48	 mov	 rdx, QWORD PTR Zip64EOCDpos$2[rsp]
  001bd	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  001c2	e8 00 00 00 00	 call	 Write_Zip64EndOfCentralDirectoryLocator
$LN10@zipClose:

; 1931 :     }
; 1932 : 
; 1933 :     if (err==ZIP_OK)

  001c7	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  001cc	75 17		 jne	 SHORT $LN12@zipClose

; 1934 :       err = Write_EndOfCentralDirectoryRecord(zi, size_centraldir, centraldir_pos_inzip);

  001ce	4c 8b 44 24 30	 mov	 r8, QWORD PTR centraldir_pos_inzip$[rsp]
  001d3	8b 54 24 2c	 mov	 edx, DWORD PTR size_centraldir$[rsp]
  001d7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  001dc	e8 00 00 00 00	 call	 Write_EndOfCentralDirectoryRecord
  001e1	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN12@zipClose:

; 1935 : 
; 1936 :     if(err == ZIP_OK)

  001e5	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  001ea	75 13		 jne	 SHORT $LN13@zipClose

; 1937 :       err = Write_GlobalComment(zi, global_comment);

  001ec	48 8b 54 24 68	 mov	 rdx, QWORD PTR global_comment$[rsp]
  001f1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  001f6	e8 00 00 00 00	 call	 Write_GlobalComment
  001fb	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN13@zipClose:

; 1938 : 
; 1939 :     if (ZCLOSE64(zi->z_filefunc,zi->filestream) != 0)

  001ff	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00204	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  00208	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  0020d	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  00211	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00216	ff 50 28	 call	 QWORD PTR [rax+40]
  00219	85 c0		 test	 eax, eax
  0021b	74 0f		 je	 SHORT $LN14@zipClose

; 1940 :         if (err == ZIP_OK)

  0021d	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  00222	75 08		 jne	 SHORT $LN15@zipClose

; 1941 :             err = ZIP_ERRNO;

  00224	c7 44 24 28 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN15@zipClose:
$LN14@zipClose:

; 1942 : 
; 1943 : #ifndef NO_ADDFILEINEXISTINGZIP
; 1944 :     TRYFREE(zi->globalcomment);

  0022c	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00231	48 83 b8 60 01
	01 00 00	 cmp	 QWORD PTR [rax+65888], 0
  00239	74 12		 je	 SHORT $LN16@zipClose
  0023b	48 8b 44 24 20	 mov	 rax, QWORD PTR zi$[rsp]
  00240	48 8b 88 60 01
	01 00		 mov	 rcx, QWORD PTR [rax+65888]
  00247	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN16@zipClose:

; 1945 : #endif
; 1946 :     TRYFREE(zi);

  0024d	48 83 7c 24 20
	00		 cmp	 QWORD PTR zi$[rsp], 0
  00253	74 0b		 je	 SHORT $LN17@zipClose
  00255	48 8b 4c 24 20	 mov	 rcx, QWORD PTR zi$[rsp]
  0025a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN17@zipClose:

; 1947 : 
; 1948 :     return err;

  00260	8b 44 24 28	 mov	 eax, DWORD PTR err$[rsp]
$LN1@zipClose:

; 1949 : }

  00264	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00268	5f		 pop	 rdi
  00269	c3		 ret	 0
zipClose ENDP
_TEXT	ENDS
END

; Listing generated by Microsoft (R) Optimizing Compiler Version 19.20.27525.0 

	TITLE	e:\cpython\externals\zlib-1.2.11\deflate.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

EXTRN	_longest_match:PROC
EXTRN	_memset:PROC
EXTRN	_match_init:PROC
EXTRN	_memcpy:PROC
?my_version@?1??deflateInit2_@@9@9 DB '1.2.11', 00H	; `deflateInit2_'::`2'::my_version
	ORG $+1
_configuration_table DW 00H
	DW	00H
	DW	00H
	DW	00H
	DD	FLAT:_deflate_stored
	DW	04H
	DW	04H
	DW	08H
	DW	04H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	05H
	DW	010H
	DW	08H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	06H
	DW	020H
	DW	020H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	04H
	DW	010H
	DW	010H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	010H
	DW	020H
	DW	020H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	010H
	DW	080H
	DW	080H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	020H
	DW	080H
	DW	0100H
	DD	FLAT:_deflate_slow
	DW	020H
	DW	080H
	DW	0102H
	DW	0400H
	DD	FLAT:_deflate_slow
	DW	020H
	DW	0102H
	DW	0102H
	DW	01000H
	DD	FLAT:_deflate_slow
__95347B96_ctype@h DB 01H
__149DB6BE_basetsd@h DB 01H
__9CFFAB73_corecrt_memcpy_s@h DB 01H
__55B7CB8D_corecrt_wstring@h DB 01H
__2F7506B6_string@h DB 01H
__5BA8817F_winnt@h DB 01H
__8421AFE7_processthreadsapi@h DB 01H
__F192E00B_memoryapi@h DB 01H
__0DF854E2_winerror@h DB 01H
__940BF1C4_winbase@h DB 01H
__78A3E64A_stralign@h DB 01H
__E6E9AA63_deflate@c DB 01H
PUBLIC	_deflateCopy@8
PUBLIC	_deflateBound@8
PUBLIC	_deflateTune@20
PUBLIC	_deflateParams@12
PUBLIC	_deflatePrime@12
PUBLIC	_deflatePending@12
PUBLIC	_deflateSetHeader@8
PUBLIC	_deflateReset@4
PUBLIC	_deflateResetKeep@4
PUBLIC	_deflateGetDictionary@12
PUBLIC	_deflateSetDictionary@12
PUBLIC	_deflateInit2_@32
PUBLIC	_deflateInit_@16
PUBLIC	_deflateEnd@4
PUBLIC	_deflate@8
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflate@8
_TEXT	SEGMENT
tv865 = -108						; size = 4
tv717 = -104						; size = 4
tv718 = -100						; size = 4
tv719 = -96						; size = 4
tv379 = -92						; size = 4
tv380 = -88						; size = 4
tv316 = -84						; size = 4
tv311 = -80						; size = 4
tv306 = -76						; size = 4
tv301 = -72						; size = 4
tv297 = -68						; size = 4
tv272 = -64						; size = 4
tv273 = -60						; size = 4
tv135 = -56						; size = 4
tv131 = -52						; size = 4
_bstate$1 = -48						; size = 4
_val$2 = -44						; size = 4
_beg$3 = -40						; size = 4
_val$4 = -36						; size = 4
_beg$5 = -32						; size = 4
_copy$6 = -28						; size = 4
_left$7 = -24						; size = 4
_beg$8 = -20						; size = 4
_level_flags$9 = -16					; size = 4
_header$10 = -12					; size = 4
_s$ = -8						; size = 4
_old_flush$ = -4					; size = 4
_strm$ = 8						; size = 4
_flush$ = 12						; size = 4
_deflate@8 PROC						; COMDAT

; 766  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d 94	 lea	 edi, DWORD PTR [ebp-108]
  0000b	b9 1b 00 00 00	 mov	 ecx, 27			; 0000001bH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 767  :     int old_flush; /* value of flush param for previous deflate call */
; 768  :     deflate_state *s;
; 769  : 
; 770  :     if (deflateStateCheck(strm) || flush > Z_BLOCK || flush < 0) {

  00021	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _deflateStateCheck
  0002a	83 c4 04	 add	 esp, 4
  0002d	85 c0		 test	 eax, eax
  0002f	75 0c		 jne	 SHORT $LN29@deflate
  00031	83 7d 0c 05	 cmp	 DWORD PTR _flush$[ebp], 5
  00035	7f 06		 jg	 SHORT $LN29@deflate
  00037	83 7d 0c 00	 cmp	 DWORD PTR _flush$[ebp], 0
  0003b	7d 0a		 jge	 SHORT $LN28@deflate
$LN29@deflate:

; 771  :         return Z_STREAM_ERROR;

  0003d	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00042	e9 0c 10 00 00	 jmp	 $LN1@deflate
$LN28@deflate:

; 772  :     }
; 773  :     s = strm->state;

  00047	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0004a	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0004d	89 55 f8	 mov	 DWORD PTR _s$[ebp], edx

; 774  : 
; 775  :     if (strm->next_out == Z_NULL ||
; 776  :         (strm->avail_in != 0 && strm->next_in == Z_NULL) ||

  00050	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00053	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00057	74 23		 je	 SHORT $LN31@deflate
  00059	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0005c	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00060	74 08		 je	 SHORT $LN32@deflate
  00062	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00065	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00068	74 12		 je	 SHORT $LN31@deflate
$LN32@deflate:
  0006a	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  0006d	81 78 04 9a 02
	00 00		 cmp	 DWORD PTR [eax+4], 666	; 0000029aH
  00074	75 24		 jne	 SHORT $LN30@deflate
  00076	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  0007a	74 1e		 je	 SHORT $LN30@deflate
$LN31@deflate:

; 777  :         (s->status == FINISH_STATE && flush != Z_FINISH)) {
; 778  :         ERR_RETURN(strm, Z_STREAM_ERROR);

  0007c	b9 04 00 00 00	 mov	 ecx, 4
  00081	c1 e1 02	 shl	 ecx, 2
  00084	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00087	8b 81 00 00 00
	00		 mov	 eax, DWORD PTR _z_errmsg[ecx]
  0008d	89 42 18	 mov	 DWORD PTR [edx+24], eax
  00090	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00095	e9 b9 0f 00 00	 jmp	 $LN1@deflate
$LN30@deflate:

; 779  :     }
; 780  :     if (strm->avail_out == 0) ERR_RETURN(strm, Z_BUF_ERROR);

  0009a	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0009d	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  000a1	75 1e		 jne	 SHORT $LN33@deflate
  000a3	ba 04 00 00 00	 mov	 edx, 4
  000a8	6b c2 07	 imul	 eax, edx, 7
  000ab	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  000ae	8b 90 00 00 00
	00		 mov	 edx, DWORD PTR _z_errmsg[eax]
  000b4	89 51 18	 mov	 DWORD PTR [ecx+24], edx
  000b7	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  000bc	e9 92 0f 00 00	 jmp	 $LN1@deflate
$LN33@deflate:

; 781  : 
; 782  :     old_flush = s->last_flush;

  000c1	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  000c4	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  000c7	89 4d fc	 mov	 DWORD PTR _old_flush$[ebp], ecx

; 783  :     s->last_flush = flush;

  000ca	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  000cd	8b 45 0c	 mov	 eax, DWORD PTR _flush$[ebp]
  000d0	89 42 28	 mov	 DWORD PTR [edx+40], eax

; 784  : 
; 785  :     /* Flush as much pending output as possible */
; 786  :     if (s->pending != 0) {

  000d3	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  000d6	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  000da	74 28		 je	 SHORT $LN34@deflate

; 787  :         flush_pending(strm);

  000dc	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  000df	52		 push	 edx
  000e0	e8 00 00 00 00	 call	 _flush_pending
  000e5	83 c4 04	 add	 esp, 4

; 788  :         if (strm->avail_out == 0) {

  000e8	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  000eb	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  000ef	75 11		 jne	 SHORT $LN36@deflate

; 789  :             /* Since avail_out is 0, deflate will be called again with
; 790  :              * more output space, but possibly with both pending and
; 791  :              * avail_in equal to zero. There won't be anything to do,
; 792  :              * but this is not an error situation so make sure we
; 793  :              * return OK instead of BUF_ERROR at next call of deflate:
; 794  :              */
; 795  :             s->last_flush = -1;

  000f1	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  000f4	c7 41 28 ff ff
	ff ff		 mov	 DWORD PTR [ecx+40], -1

; 796  :             return Z_OK;

  000fb	33 c0		 xor	 eax, eax
  000fd	e9 51 0f 00 00	 jmp	 $LN1@deflate
$LN36@deflate:

; 797  :         }

  00102	eb 6d		 jmp	 SHORT $LN35@deflate
$LN34@deflate:

; 798  : 
; 799  :     /* Make sure there is something to do and avoid duplicate consecutive
; 800  :      * flushes. For repeated and useless calls with Z_FINISH, we keep
; 801  :      * returning Z_STREAM_END instead of Z_BUF_ERROR.
; 802  :      */
; 803  :     } else if (strm->avail_in == 0 && RANK(flush) <= RANK(old_flush) &&

  00104	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00107	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0010b	75 64		 jne	 SHORT $LN35@deflate
  0010d	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  00111	7e 09		 jle	 SHORT $LN98@deflate
  00113	c7 45 cc 09 00
	00 00		 mov	 DWORD PTR tv131[ebp], 9
  0011a	eb 07		 jmp	 SHORT $LN99@deflate
$LN98@deflate:
  0011c	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR tv131[ebp], 0
$LN99@deflate:
  00123	83 7d fc 04	 cmp	 DWORD PTR _old_flush$[ebp], 4
  00127	7e 09		 jle	 SHORT $LN100@deflate
  00129	c7 45 c8 09 00
	00 00		 mov	 DWORD PTR tv135[ebp], 9
  00130	eb 07		 jmp	 SHORT $LN101@deflate
$LN100@deflate:
  00132	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR tv135[ebp], 0
$LN101@deflate:
  00139	8b 45 0c	 mov	 eax, DWORD PTR _flush$[ebp]
  0013c	d1 e0		 shl	 eax, 1
  0013e	2b 45 cc	 sub	 eax, DWORD PTR tv131[ebp]
  00141	8b 4d fc	 mov	 ecx, DWORD PTR _old_flush$[ebp]
  00144	d1 e1		 shl	 ecx, 1
  00146	2b 4d c8	 sub	 ecx, DWORD PTR tv135[ebp]
  00149	3b c1		 cmp	 eax, ecx
  0014b	7f 24		 jg	 SHORT $LN35@deflate
  0014d	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  00151	74 1e		 je	 SHORT $LN35@deflate

; 804  :                flush != Z_FINISH) {
; 805  :         ERR_RETURN(strm, Z_BUF_ERROR);

  00153	ba 04 00 00 00	 mov	 edx, 4
  00158	6b c2 07	 imul	 eax, edx, 7
  0015b	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0015e	8b 90 00 00 00
	00		 mov	 edx, DWORD PTR _z_errmsg[eax]
  00164	89 51 18	 mov	 DWORD PTR [ecx+24], edx
  00167	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  0016c	e9 e2 0e 00 00	 jmp	 $LN1@deflate
$LN35@deflate:

; 806  :     }
; 807  : 
; 808  :     /* User must not provide more input after the first FINISH: */
; 809  :     if (s->status == FINISH_STATE && strm->avail_in != 0) {

  00171	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00174	81 78 04 9a 02
	00 00		 cmp	 DWORD PTR [eax+4], 666	; 0000029aH
  0017b	75 27		 jne	 SHORT $LN38@deflate
  0017d	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00180	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00184	74 1e		 je	 SHORT $LN38@deflate

; 810  :         ERR_RETURN(strm, Z_BUF_ERROR);

  00186	ba 04 00 00 00	 mov	 edx, 4
  0018b	6b c2 07	 imul	 eax, edx, 7
  0018e	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00191	8b 90 00 00 00
	00		 mov	 edx, DWORD PTR _z_errmsg[eax]
  00197	89 51 18	 mov	 DWORD PTR [ecx+24], edx
  0019a	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  0019f	e9 af 0e 00 00	 jmp	 $LN1@deflate
$LN38@deflate:

; 811  :     }
; 812  : 
; 813  :     /* Write the header */
; 814  :     if (s->status == INIT_STATE) {

  001a4	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  001a7	83 78 04 2a	 cmp	 DWORD PTR [eax+4], 42	; 0000002aH
  001ab	0f 85 27 01 00
	00		 jne	 $LN39@deflate

; 815  :         /* zlib header */
; 816  :         uInt header = (Z_DEFLATED + ((s->w_bits-8)<<4)) << 8;

  001b1	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  001b4	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  001b7	83 ea 08	 sub	 edx, 8
  001ba	c1 e2 04	 shl	 edx, 4
  001bd	83 c2 08	 add	 edx, 8
  001c0	c1 e2 08	 shl	 edx, 8
  001c3	89 55 f4	 mov	 DWORD PTR _header$10[ebp], edx

; 817  :         uInt level_flags;
; 818  : 
; 819  :         if (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2)

  001c6	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  001c9	83 b8 88 00 00
	00 02		 cmp	 DWORD PTR [eax+136], 2
  001d0	7d 0c		 jge	 SHORT $LN42@deflate
  001d2	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  001d5	83 b9 84 00 00
	00 02		 cmp	 DWORD PTR [ecx+132], 2
  001dc	7d 09		 jge	 SHORT $LN40@deflate
$LN42@deflate:

; 820  :             level_flags = 0;

  001de	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _level_flags$9[ebp], 0
  001e5	eb 31		 jmp	 SHORT $LN41@deflate
$LN40@deflate:

; 821  :         else if (s->level < 6)

  001e7	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  001ea	83 ba 84 00 00
	00 06		 cmp	 DWORD PTR [edx+132], 6
  001f1	7d 09		 jge	 SHORT $LN43@deflate

; 822  :             level_flags = 1;

  001f3	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _level_flags$9[ebp], 1
  001fa	eb 1c		 jmp	 SHORT $LN41@deflate
$LN43@deflate:

; 823  :         else if (s->level == 6)

  001fc	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  001ff	83 b8 84 00 00
	00 06		 cmp	 DWORD PTR [eax+132], 6
  00206	75 09		 jne	 SHORT $LN45@deflate

; 824  :             level_flags = 2;

  00208	c7 45 f0 02 00
	00 00		 mov	 DWORD PTR _level_flags$9[ebp], 2
  0020f	eb 07		 jmp	 SHORT $LN41@deflate
$LN45@deflate:

; 825  :         else
; 826  :             level_flags = 3;

  00211	c7 45 f0 03 00
	00 00		 mov	 DWORD PTR _level_flags$9[ebp], 3
$LN41@deflate:

; 827  :         header |= (level_flags << 6);

  00218	8b 4d f0	 mov	 ecx, DWORD PTR _level_flags$9[ebp]
  0021b	c1 e1 06	 shl	 ecx, 6
  0021e	0b 4d f4	 or	 ecx, DWORD PTR _header$10[ebp]
  00221	89 4d f4	 mov	 DWORD PTR _header$10[ebp], ecx

; 828  :         if (s->strstart != 0) header |= PRESET_DICT;

  00224	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00227	83 7a 6c 00	 cmp	 DWORD PTR [edx+108], 0
  0022b	74 09		 je	 SHORT $LN47@deflate
  0022d	8b 45 f4	 mov	 eax, DWORD PTR _header$10[ebp]
  00230	83 c8 20	 or	 eax, 32			; 00000020H
  00233	89 45 f4	 mov	 DWORD PTR _header$10[ebp], eax
$LN47@deflate:

; 829  :         header += 31 - (header % 31);

  00236	8b 45 f4	 mov	 eax, DWORD PTR _header$10[ebp]
  00239	33 d2		 xor	 edx, edx
  0023b	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  00240	f7 f1		 div	 ecx
  00242	b8 1f 00 00 00	 mov	 eax, 31			; 0000001fH
  00247	2b c2		 sub	 eax, edx
  00249	03 45 f4	 add	 eax, DWORD PTR _header$10[ebp]
  0024c	89 45 f4	 mov	 DWORD PTR _header$10[ebp], eax

; 830  : 
; 831  :         putShortMSB(s, header);

  0024f	8b 4d f4	 mov	 ecx, DWORD PTR _header$10[ebp]
  00252	51		 push	 ecx
  00253	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00256	52		 push	 edx
  00257	e8 00 00 00 00	 call	 _putShortMSB
  0025c	83 c4 08	 add	 esp, 8

; 832  : 
; 833  :         /* Save the adler32 of the preset dictionary: */
; 834  :         if (s->strstart != 0) {

  0025f	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00262	83 78 6c 00	 cmp	 DWORD PTR [eax+108], 0
  00266	74 2f		 je	 SHORT $LN48@deflate

; 835  :             putShortMSB(s, (uInt)(strm->adler >> 16));

  00268	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0026b	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0026e	c1 ea 10	 shr	 edx, 16			; 00000010H
  00271	52		 push	 edx
  00272	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00275	50		 push	 eax
  00276	e8 00 00 00 00	 call	 _putShortMSB
  0027b	83 c4 08	 add	 esp, 8

; 836  :             putShortMSB(s, (uInt)(strm->adler & 0xffff));

  0027e	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00281	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00284	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  0028a	52		 push	 edx
  0028b	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  0028e	50		 push	 eax
  0028f	e8 00 00 00 00	 call	 _putShortMSB
  00294	83 c4 08	 add	 esp, 8
$LN48@deflate:

; 837  :         }
; 838  :         strm->adler = adler32(0L, Z_NULL, 0);

  00297	6a 00		 push	 0
  00299	6a 00		 push	 0
  0029b	6a 00		 push	 0
  0029d	e8 00 00 00 00	 call	 _adler32@12
  002a2	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  002a5	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 839  :         s->status = BUSY_STATE;

  002a8	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  002ab	c7 42 04 71 00
	00 00		 mov	 DWORD PTR [edx+4], 113	; 00000071H

; 840  : 
; 841  :         /* Compression must start with an empty pending buffer */
; 842  :         flush_pending(strm);

  002b2	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  002b5	50		 push	 eax
  002b6	e8 00 00 00 00	 call	 _flush_pending
  002bb	83 c4 04	 add	 esp, 4

; 843  :         if (s->pending != 0) {

  002be	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  002c1	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  002c5	74 11		 je	 SHORT $LN39@deflate

; 844  :             s->last_flush = -1;

  002c7	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  002ca	c7 42 28 ff ff
	ff ff		 mov	 DWORD PTR [edx+40], -1

; 845  :             return Z_OK;

  002d1	33 c0		 xor	 eax, eax
  002d3	e9 7b 0d 00 00	 jmp	 $LN1@deflate
$LN39@deflate:

; 846  :         }
; 847  :     }
; 848  : #ifdef GZIP
; 849  :     if (s->status == GZIP_STATE) {

  002d8	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  002db	83 78 04 39	 cmp	 DWORD PTR [eax+4], 57	; 00000039H
  002df	0f 85 7a 04 00
	00		 jne	 $LN50@deflate

; 850  :         /* gzip header */
; 851  :         strm->adler = crc32(0L, Z_NULL, 0);

  002e5	6a 00		 push	 0
  002e7	6a 00		 push	 0
  002e9	6a 00		 push	 0
  002eb	e8 00 00 00 00	 call	 _crc32@12
  002f0	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  002f3	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 852  :         put_byte(s, 31);

  002f6	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  002f9	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  002fc	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  002ff	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00302	c6 04 02 1f	 mov	 BYTE PTR [edx+eax], 31	; 0000001fH
  00306	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00309	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0030c	83 c1 01	 add	 ecx, 1
  0030f	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00312	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 853  :         put_byte(s, 139);

  00315	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00318	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0031b	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  0031e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00321	c6 04 08 8b	 mov	 BYTE PTR [eax+ecx], 139	; 0000008bH
  00325	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00328	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0032b	83 c2 01	 add	 edx, 1
  0032e	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00331	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 854  :         put_byte(s, 8);

  00334	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00337	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0033a	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  0033d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00340	c6 04 11 08	 mov	 BYTE PTR [ecx+edx], 8
  00344	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00347	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0034a	83 c0 01	 add	 eax, 1
  0034d	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00350	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 855  :         if (s->gzhead == Z_NULL) {

  00353	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00356	83 7a 1c 00	 cmp	 DWORD PTR [edx+28], 0
  0035a	0f 85 53 01 00
	00		 jne	 $LN51@deflate

; 856  :             put_byte(s, 0);

  00360	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00363	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00366	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00369	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0036c	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
  00370	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00373	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00376	83 c2 01	 add	 edx, 1
  00379	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  0037c	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 857  :             put_byte(s, 0);

  0037f	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00382	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00385	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00388	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0038b	c6 04 11 00	 mov	 BYTE PTR [ecx+edx], 0
  0038f	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00392	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00395	83 c0 01	 add	 eax, 1
  00398	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  0039b	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 858  :             put_byte(s, 0);

  0039e	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  003a1	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  003a4	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  003a7	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  003aa	c6 04 02 00	 mov	 BYTE PTR [edx+eax], 0
  003ae	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  003b1	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  003b4	83 c1 01	 add	 ecx, 1
  003b7	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  003ba	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 859  :             put_byte(s, 0);

  003bd	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  003c0	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  003c3	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  003c6	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  003c9	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
  003cd	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  003d0	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  003d3	83 c2 01	 add	 edx, 1
  003d6	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  003d9	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 860  :             put_byte(s, 0);

  003dc	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  003df	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  003e2	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  003e5	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  003e8	c6 04 11 00	 mov	 BYTE PTR [ecx+edx], 0
  003ec	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  003ef	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  003f2	83 c0 01	 add	 eax, 1
  003f5	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  003f8	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 861  :             put_byte(s, s->level == 9 ? 2 :

  003fb	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  003fe	83 ba 84 00 00
	00 09		 cmp	 DWORD PTR [edx+132], 9
  00405	75 09		 jne	 SHORT $LN104@deflate
  00407	c7 45 c4 02 00
	00 00		 mov	 DWORD PTR tv273[ebp], 2
  0040e	eb 2e		 jmp	 SHORT $LN105@deflate
$LN104@deflate:
  00410	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00413	83 b8 88 00 00
	00 02		 cmp	 DWORD PTR [eax+136], 2
  0041a	7d 15		 jge	 SHORT $LN102@deflate
  0041c	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  0041f	83 b9 84 00 00
	00 02		 cmp	 DWORD PTR [ecx+132], 2
  00426	7c 09		 jl	 SHORT $LN102@deflate
  00428	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR tv272[ebp], 0
  0042f	eb 07		 jmp	 SHORT $LN103@deflate
$LN102@deflate:
  00431	c7 45 c0 04 00
	00 00		 mov	 DWORD PTR tv272[ebp], 4
$LN103@deflate:
  00438	8b 55 c0	 mov	 edx, DWORD PTR tv272[ebp]
  0043b	89 55 c4	 mov	 DWORD PTR tv273[ebp], edx
$LN105@deflate:
  0043e	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00441	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00444	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00447	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0044a	8a 55 c4	 mov	 dl, BYTE PTR tv273[ebp]
  0044d	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  00450	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00453	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00456	83 c1 01	 add	 ecx, 1
  00459	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  0045c	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 862  :                      (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 863  :                       4 : 0));
; 864  :             put_byte(s, OS_CODE);

  0045f	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00462	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00465	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00468	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0046b	c6 04 08 0a	 mov	 BYTE PTR [eax+ecx], 10	; 0000000aH
  0046f	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00472	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00475	83 c2 01	 add	 edx, 1
  00478	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  0047b	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 865  :             s->status = BUSY_STATE;

  0047e	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00481	c7 41 04 71 00
	00 00		 mov	 DWORD PTR [ecx+4], 113	; 00000071H

; 866  : 
; 867  :             /* Compression must start with an empty pending buffer */
; 868  :             flush_pending(strm);

  00488	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0048b	52		 push	 edx
  0048c	e8 00 00 00 00	 call	 _flush_pending
  00491	83 c4 04	 add	 esp, 4

; 869  :             if (s->pending != 0) {

  00494	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00497	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  0049b	74 11		 je	 SHORT $LN53@deflate

; 870  :                 s->last_flush = -1;

  0049d	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  004a0	c7 41 28 ff ff
	ff ff		 mov	 DWORD PTR [ecx+40], -1

; 871  :                 return Z_OK;

  004a7	33 c0		 xor	 eax, eax
  004a9	e9 a5 0b 00 00	 jmp	 $LN1@deflate
$LN53@deflate:

; 872  :             }
; 873  :         }

  004ae	e9 ac 02 00 00	 jmp	 $LN50@deflate
$LN51@deflate:

; 874  :         else {
; 875  :             put_byte(s, (s->gzhead->text ? 1 : 0) +

  004b3	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  004b6	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  004b9	83 38 00	 cmp	 DWORD PTR [eax], 0
  004bc	74 09		 je	 SHORT $LN106@deflate
  004be	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv297[ebp], 1
  004c5	eb 07		 jmp	 SHORT $LN107@deflate
$LN106@deflate:
  004c7	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv297[ebp], 0
$LN107@deflate:
  004ce	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  004d1	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  004d4	83 7a 2c 00	 cmp	 DWORD PTR [edx+44], 0
  004d8	74 09		 je	 SHORT $LN108@deflate
  004da	c7 45 b8 02 00
	00 00		 mov	 DWORD PTR tv301[ebp], 2
  004e1	eb 07		 jmp	 SHORT $LN109@deflate
$LN108@deflate:
  004e3	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv301[ebp], 0
$LN109@deflate:
  004ea	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  004ed	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  004f0	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  004f4	75 09		 jne	 SHORT $LN110@deflate
  004f6	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv306[ebp], 0
  004fd	eb 07		 jmp	 SHORT $LN111@deflate
$LN110@deflate:
  004ff	c7 45 b4 04 00
	00 00		 mov	 DWORD PTR tv306[ebp], 4
$LN111@deflate:
  00506	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00509	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0050c	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  00510	75 09		 jne	 SHORT $LN112@deflate
  00512	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv311[ebp], 0
  00519	eb 07		 jmp	 SHORT $LN113@deflate
$LN112@deflate:
  0051b	c7 45 b0 08 00
	00 00		 mov	 DWORD PTR tv311[ebp], 8
$LN113@deflate:
  00522	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00525	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00528	83 7a 24 00	 cmp	 DWORD PTR [edx+36], 0
  0052c	75 09		 jne	 SHORT $LN114@deflate
  0052e	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv316[ebp], 0
  00535	eb 07		 jmp	 SHORT $LN115@deflate
$LN114@deflate:
  00537	c7 45 ac 10 00
	00 00		 mov	 DWORD PTR tv316[ebp], 16 ; 00000010H
$LN115@deflate:
  0053e	8b 45 bc	 mov	 eax, DWORD PTR tv297[ebp]
  00541	03 45 b8	 add	 eax, DWORD PTR tv301[ebp]
  00544	03 45 b4	 add	 eax, DWORD PTR tv306[ebp]
  00547	03 45 b0	 add	 eax, DWORD PTR tv311[ebp]
  0054a	03 45 ac	 add	 eax, DWORD PTR tv316[ebp]
  0054d	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00550	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00553	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00556	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00559	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  0055c	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  0055f	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00562	83 c0 01	 add	 eax, 1
  00565	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00568	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 876  :                      (s->gzhead->hcrc ? 2 : 0) +
; 877  :                      (s->gzhead->extra == Z_NULL ? 0 : 4) +
; 878  :                      (s->gzhead->name == Z_NULL ? 0 : 8) +
; 879  :                      (s->gzhead->comment == Z_NULL ? 0 : 16)
; 880  :                      );
; 881  :             put_byte(s, (Byte)(s->gzhead->time & 0xff));

  0056b	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  0056e	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00571	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00574	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0057a	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  0057d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00580	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00583	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  00586	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00589	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  0058c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0058f	83 c1 01	 add	 ecx, 1
  00592	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00595	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 882  :             put_byte(s, (Byte)((s->gzhead->time >> 8) & 0xff));

  00598	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  0059b	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0059e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  005a1	c1 ea 08	 shr	 edx, 8
  005a4	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  005aa	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  005ad	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  005b0	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  005b3	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  005b6	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  005b9	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  005bc	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  005bf	83 c2 01	 add	 edx, 1
  005c2	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  005c5	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 883  :             put_byte(s, (Byte)((s->gzhead->time >> 16) & 0xff));

  005c8	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  005cb	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  005ce	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  005d1	c1 e8 10	 shr	 eax, 16			; 00000010H
  005d4	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  005d9	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  005dc	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  005df	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  005e2	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  005e5	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  005e8	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  005eb	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  005ee	83 c0 01	 add	 eax, 1
  005f1	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  005f4	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 884  :             put_byte(s, (Byte)((s->gzhead->time >> 24) & 0xff));

  005f7	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  005fa	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  005fd	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00600	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00603	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00609	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  0060c	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0060f	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00612	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  00615	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00618	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  0061b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0061e	83 c1 01	 add	 ecx, 1
  00621	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00624	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 885  :             put_byte(s, s->level == 9 ? 2 :

  00627	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  0062a	83 b8 84 00 00
	00 09		 cmp	 DWORD PTR [eax+132], 9
  00631	75 09		 jne	 SHORT $LN118@deflate
  00633	c7 45 a8 02 00
	00 00		 mov	 DWORD PTR tv380[ebp], 2
  0063a	eb 2e		 jmp	 SHORT $LN119@deflate
$LN118@deflate:
  0063c	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  0063f	83 b9 88 00 00
	00 02		 cmp	 DWORD PTR [ecx+136], 2
  00646	7d 15		 jge	 SHORT $LN116@deflate
  00648	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  0064b	83 ba 84 00 00
	00 02		 cmp	 DWORD PTR [edx+132], 2
  00652	7c 09		 jl	 SHORT $LN116@deflate
  00654	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv379[ebp], 0
  0065b	eb 07		 jmp	 SHORT $LN117@deflate
$LN116@deflate:
  0065d	c7 45 a4 04 00
	00 00		 mov	 DWORD PTR tv379[ebp], 4
$LN117@deflate:
  00664	8b 45 a4	 mov	 eax, DWORD PTR tv379[ebp]
  00667	89 45 a8	 mov	 DWORD PTR tv380[ebp], eax
$LN119@deflate:
  0066a	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  0066d	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00670	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00673	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00676	8a 45 a8	 mov	 al, BYTE PTR tv380[ebp]
  00679	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  0067c	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  0067f	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00682	83 c2 01	 add	 edx, 1
  00685	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00688	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 886  :                      (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 887  :                       4 : 0));
; 888  :             put_byte(s, s->gzhead->os & 0xff);

  0068b	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  0068e	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00691	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00694	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00699	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  0069c	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0069f	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  006a2	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  006a5	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  006a8	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  006ab	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  006ae	83 c0 01	 add	 eax, 1
  006b1	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  006b4	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 889  :             if (s->gzhead->extra != Z_NULL) {

  006b7	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  006ba	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  006bd	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  006c1	74 5c		 je	 SHORT $LN54@deflate

; 890  :                 put_byte(s, s->gzhead->extra_len & 0xff);

  006c3	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  006c6	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  006c9	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  006cc	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  006d1	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  006d4	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  006d7	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  006da	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  006dd	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  006e0	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  006e3	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  006e6	83 c0 01	 add	 eax, 1
  006e9	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  006ec	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 891  :                 put_byte(s, (s->gzhead->extra_len >> 8) & 0xff);

  006ef	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  006f2	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  006f5	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  006f8	c1 e9 08	 shr	 ecx, 8
  006fb	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00701	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00704	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00707	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  0070a	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  0070d	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00710	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00713	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00716	83 c1 01	 add	 ecx, 1
  00719	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  0071c	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
$LN54@deflate:

; 892  :             }
; 893  :             if (s->gzhead->hcrc)

  0071f	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00722	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00725	83 79 2c 00	 cmp	 DWORD PTR [ecx+44], 0
  00729	74 20		 je	 SHORT $LN55@deflate

; 894  :                 strm->adler = crc32(strm->adler, s->pending_buf,

  0072b	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  0072e	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00731	50		 push	 eax
  00732	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00735	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00738	52		 push	 edx
  00739	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0073c	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0073f	51		 push	 ecx
  00740	e8 00 00 00 00	 call	 _crc32@12
  00745	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00748	89 42 30	 mov	 DWORD PTR [edx+48], eax
$LN55@deflate:

; 895  :                                     s->pending);
; 896  :             s->gzindex = 0;

  0074b	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  0074e	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 897  :             s->status = EXTRA_STATE;

  00755	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00758	c7 41 04 45 00
	00 00		 mov	 DWORD PTR [ecx+4], 69	; 00000045H
$LN50@deflate:

; 898  :         }
; 899  :     }
; 900  :     if (s->status == EXTRA_STATE) {

  0075f	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00762	83 7a 04 45	 cmp	 DWORD PTR [edx+4], 69	; 00000045H
  00766	0f 85 ad 01 00
	00		 jne	 $LN56@deflate

; 901  :         if (s->gzhead->extra != Z_NULL) {

  0076c	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  0076f	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00772	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00776	0f 84 93 01 00
	00		 je	 $LN57@deflate

; 902  :             ulg beg = s->pending;   /* start of bytes to update crc */

  0077c	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  0077f	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00782	89 45 ec	 mov	 DWORD PTR _beg$8[ebp], eax

; 903  :             uInt left = (s->gzhead->extra_len & 0xffff) - s->gzindex;

  00785	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00788	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0078b	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0078e	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00793	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00796	2b 41 20	 sub	 eax, DWORD PTR [ecx+32]
  00799	89 45 e8	 mov	 DWORD PTR _left$7[ebp], eax
$LN2@deflate:

; 904  :             while (s->pending + left > s->pending_buf_size) {

  0079c	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  0079f	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  007a2	03 45 e8	 add	 eax, DWORD PTR _left$7[ebp]
  007a5	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  007a8	3b 41 0c	 cmp	 eax, DWORD PTR [ecx+12]
  007ab	0f 86 d5 00 00
	00		 jbe	 $LN3@deflate

; 905  :                 uInt copy = s->pending_buf_size - s->pending;

  007b1	0f ae e8	 lfence
  007b4	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  007b7	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  007ba	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  007bd	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  007c0	89 4d e4	 mov	 DWORD PTR _copy$6[ebp], ecx

; 906  :                 zmemcpy(s->pending_buf + s->pending,

  007c3	8b 55 e4	 mov	 edx, DWORD PTR _copy$6[ebp]
  007c6	52		 push	 edx
  007c7	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  007ca	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  007cd	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  007d0	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  007d3	03 50 20	 add	 edx, DWORD PTR [eax+32]
  007d6	52		 push	 edx
  007d7	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  007da	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  007dd	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  007e0	03 50 14	 add	 edx, DWORD PTR [eax+20]
  007e3	52		 push	 edx
  007e4	e8 00 00 00 00	 call	 _memcpy
  007e9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 907  :                         s->gzhead->extra + s->gzindex, copy);
; 908  :                 s->pending = s->pending_buf_size;

  007ec	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  007ef	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  007f2	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  007f5	89 41 14	 mov	 DWORD PTR [ecx+20], eax
$LN6@deflate:

; 909  :                 HCRC_UPDATE(beg);

  007f8	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  007fb	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  007fe	83 7a 2c 00	 cmp	 DWORD PTR [edx+44], 0
  00802	74 34		 je	 SHORT $LN4@deflate
  00804	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00807	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0080a	3b 4d ec	 cmp	 ecx, DWORD PTR _beg$8[ebp]
  0080d	76 29		 jbe	 SHORT $LN4@deflate
  0080f	0f ae e8	 lfence
  00812	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00815	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00818	2b 45 ec	 sub	 eax, DWORD PTR _beg$8[ebp]
  0081b	50		 push	 eax
  0081c	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  0081f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00822	03 55 ec	 add	 edx, DWORD PTR _beg$8[ebp]
  00825	52		 push	 edx
  00826	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00829	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0082c	51		 push	 ecx
  0082d	e8 00 00 00 00	 call	 _crc32@12
  00832	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00835	89 42 30	 mov	 DWORD PTR [edx+48], eax
$LN4@deflate:
  00838	33 c0		 xor	 eax, eax
  0083a	75 bc		 jne	 SHORT $LN6@deflate

; 910  :                 s->gzindex += copy;

  0083c	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  0083f	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00842	03 55 e4	 add	 edx, DWORD PTR _copy$6[ebp]
  00845	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00848	89 50 20	 mov	 DWORD PTR [eax+32], edx

; 911  :                 flush_pending(strm);

  0084b	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0084e	51		 push	 ecx
  0084f	e8 00 00 00 00	 call	 _flush_pending
  00854	83 c4 04	 add	 esp, 4

; 912  :                 if (s->pending != 0) {

  00857	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  0085a	83 7a 14 00	 cmp	 DWORD PTR [edx+20], 0
  0085e	74 11		 je	 SHORT $LN59@deflate

; 913  :                     s->last_flush = -1;

  00860	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00863	c7 40 28 ff ff
	ff ff		 mov	 DWORD PTR [eax+40], -1

; 914  :                     return Z_OK;

  0086a	33 c0		 xor	 eax, eax
  0086c	e9 e2 07 00 00	 jmp	 $LN1@deflate
$LN59@deflate:

; 915  :                 }
; 916  :                 beg = 0;

  00871	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _beg$8[ebp], 0

; 917  :                 left -= copy;

  00878	8b 4d e8	 mov	 ecx, DWORD PTR _left$7[ebp]
  0087b	2b 4d e4	 sub	 ecx, DWORD PTR _copy$6[ebp]
  0087e	89 4d e8	 mov	 DWORD PTR _left$7[ebp], ecx

; 918  :             }

  00881	e9 16 ff ff ff	 jmp	 $LN2@deflate
$LN3@deflate:

; 919  :             zmemcpy(s->pending_buf + s->pending,

  00886	0f ae e8	 lfence
  00889	8b 55 e8	 mov	 edx, DWORD PTR _left$7[ebp]
  0088c	52		 push	 edx
  0088d	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00890	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00893	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00896	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00899	03 50 20	 add	 edx, DWORD PTR [eax+32]
  0089c	52		 push	 edx
  0089d	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  008a0	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  008a3	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  008a6	03 50 14	 add	 edx, DWORD PTR [eax+20]
  008a9	52		 push	 edx
  008aa	e8 00 00 00 00	 call	 _memcpy
  008af	83 c4 0c	 add	 esp, 12			; 0000000cH

; 920  :                     s->gzhead->extra + s->gzindex, left);
; 921  :             s->pending += left;

  008b2	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  008b5	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  008b8	03 55 e8	 add	 edx, DWORD PTR _left$7[ebp]
  008bb	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  008be	89 50 14	 mov	 DWORD PTR [eax+20], edx
$LN9@deflate:

; 922  :             HCRC_UPDATE(beg);

  008c1	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  008c4	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  008c7	83 7a 2c 00	 cmp	 DWORD PTR [edx+44], 0
  008cb	74 34		 je	 SHORT $LN7@deflate
  008cd	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  008d0	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  008d3	3b 4d ec	 cmp	 ecx, DWORD PTR _beg$8[ebp]
  008d6	76 29		 jbe	 SHORT $LN7@deflate
  008d8	0f ae e8	 lfence
  008db	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  008de	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  008e1	2b 45 ec	 sub	 eax, DWORD PTR _beg$8[ebp]
  008e4	50		 push	 eax
  008e5	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  008e8	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  008eb	03 55 ec	 add	 edx, DWORD PTR _beg$8[ebp]
  008ee	52		 push	 edx
  008ef	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  008f2	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  008f5	51		 push	 ecx
  008f6	e8 00 00 00 00	 call	 _crc32@12
  008fb	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  008fe	89 42 30	 mov	 DWORD PTR [edx+48], eax
$LN7@deflate:
  00901	33 c0		 xor	 eax, eax
  00903	75 bc		 jne	 SHORT $LN9@deflate

; 923  :             s->gzindex = 0;

  00905	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00908	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0
$LN57@deflate:

; 924  :         }
; 925  :         s->status = NAME_STATE;

  0090f	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00912	c7 42 04 49 00
	00 00		 mov	 DWORD PTR [edx+4], 73	; 00000049H
$LN56@deflate:

; 926  :     }
; 927  :     if (s->status == NAME_STATE) {

  00919	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  0091c	83 78 04 49	 cmp	 DWORD PTR [eax+4], 73	; 00000049H
  00920	0f 85 40 01 00
	00		 jne	 $LN61@deflate

; 928  :         if (s->gzhead->name != Z_NULL) {

  00926	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00929	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0092c	83 7a 1c 00	 cmp	 DWORD PTR [edx+28], 0
  00930	0f 84 26 01 00
	00		 je	 $LN62@deflate

; 929  :             ulg beg = s->pending;   /* start of bytes to update crc */

  00936	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00939	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0093c	89 4d e0	 mov	 DWORD PTR _beg$5[ebp], ecx
$LN12@deflate:

; 930  :             int val;
; 931  :             do {
; 932  :                 if (s->pending == s->pending_buf_size) {

  0093f	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00942	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00945	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  00948	3b 48 0c	 cmp	 ecx, DWORD PTR [eax+12]
  0094b	75 71		 jne	 SHORT $LN63@deflate
$LN15@deflate:

; 933  :                     HCRC_UPDATE(beg);

  0094d	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00950	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00953	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00957	74 34		 je	 SHORT $LN13@deflate
  00959	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  0095c	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0095f	3b 55 e0	 cmp	 edx, DWORD PTR _beg$5[ebp]
  00962	76 29		 jbe	 SHORT $LN13@deflate
  00964	0f ae e8	 lfence
  00967	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  0096a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0096d	2b 4d e0	 sub	 ecx, DWORD PTR _beg$5[ebp]
  00970	51		 push	 ecx
  00971	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00974	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00977	03 45 e0	 add	 eax, DWORD PTR _beg$5[ebp]
  0097a	50		 push	 eax
  0097b	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0097e	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00981	52		 push	 edx
  00982	e8 00 00 00 00	 call	 _crc32@12
  00987	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0098a	89 41 30	 mov	 DWORD PTR [ecx+48], eax
$LN13@deflate:
  0098d	33 d2		 xor	 edx, edx
  0098f	75 bc		 jne	 SHORT $LN15@deflate

; 934  :                     flush_pending(strm);

  00991	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00994	50		 push	 eax
  00995	e8 00 00 00 00	 call	 _flush_pending
  0099a	83 c4 04	 add	 esp, 4

; 935  :                     if (s->pending != 0) {

  0099d	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  009a0	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  009a4	74 11		 je	 SHORT $LN65@deflate

; 936  :                         s->last_flush = -1;

  009a6	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  009a9	c7 42 28 ff ff
	ff ff		 mov	 DWORD PTR [edx+40], -1

; 937  :                         return Z_OK;

  009b0	33 c0		 xor	 eax, eax
  009b2	e9 9c 06 00 00	 jmp	 $LN1@deflate
$LN65@deflate:

; 938  :                     }
; 939  :                     beg = 0;

  009b7	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _beg$5[ebp], 0
$LN63@deflate:

; 940  :                 }
; 941  :                 val = s->gzhead->name[s->gzindex++];

  009be	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  009c1	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  009c4	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  009c7	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  009ca	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  009cd	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  009d1	89 55 dc	 mov	 DWORD PTR _val$4[ebp], edx
  009d4	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  009d7	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  009da	83 c1 01	 add	 ecx, 1
  009dd	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  009e0	89 4a 20	 mov	 DWORD PTR [edx+32], ecx

; 942  :                 put_byte(s, val);

  009e3	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  009e6	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  009e9	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  009ec	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  009ef	8a 55 dc	 mov	 dl, BYTE PTR _val$4[ebp]
  009f2	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  009f5	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  009f8	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  009fb	83 c1 01	 add	 ecx, 1
  009fe	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00a01	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 943  :             } while (val != 0);

  00a04	83 7d dc 00	 cmp	 DWORD PTR _val$4[ebp], 0
  00a08	0f 85 31 ff ff
	ff		 jne	 $LN12@deflate
$LN18@deflate:

; 944  :             HCRC_UPDATE(beg);

  00a0e	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00a11	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00a14	83 79 2c 00	 cmp	 DWORD PTR [ecx+44], 0
  00a18	74 34		 je	 SHORT $LN16@deflate
  00a1a	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00a1d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00a20	3b 45 e0	 cmp	 eax, DWORD PTR _beg$5[ebp]
  00a23	76 29		 jbe	 SHORT $LN16@deflate
  00a25	0f ae e8	 lfence
  00a28	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00a2b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00a2e	2b 55 e0	 sub	 edx, DWORD PTR _beg$5[ebp]
  00a31	52		 push	 edx
  00a32	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00a35	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00a38	03 4d e0	 add	 ecx, DWORD PTR _beg$5[ebp]
  00a3b	51		 push	 ecx
  00a3c	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00a3f	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00a42	50		 push	 eax
  00a43	e8 00 00 00 00	 call	 _crc32@12
  00a48	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00a4b	89 41 30	 mov	 DWORD PTR [ecx+48], eax
$LN16@deflate:
  00a4e	33 d2		 xor	 edx, edx
  00a50	75 bc		 jne	 SHORT $LN18@deflate

; 945  :             s->gzindex = 0;

  00a52	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00a55	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0
$LN62@deflate:

; 946  :         }
; 947  :         s->status = COMMENT_STATE;

  00a5c	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00a5f	c7 41 04 5b 00
	00 00		 mov	 DWORD PTR [ecx+4], 91	; 0000005bH
$LN61@deflate:

; 948  :     }
; 949  :     if (s->status == COMMENT_STATE) {

  00a66	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00a69	83 7a 04 5b	 cmp	 DWORD PTR [edx+4], 91	; 0000005bH
  00a6d	0f 85 36 01 00
	00		 jne	 $LN67@deflate

; 950  :         if (s->gzhead->comment != Z_NULL) {

  00a73	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00a76	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00a79	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  00a7d	0f 84 1c 01 00
	00		 je	 $LN68@deflate

; 951  :             ulg beg = s->pending;   /* start of bytes to update crc */

  00a83	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00a86	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00a89	89 45 d8	 mov	 DWORD PTR _beg$3[ebp], eax
$LN21@deflate:

; 952  :             int val;
; 953  :             do {
; 954  :                 if (s->pending == s->pending_buf_size) {

  00a8c	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00a8f	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00a92	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00a95	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  00a98	75 71		 jne	 SHORT $LN69@deflate
$LN24@deflate:

; 955  :                     HCRC_UPDATE(beg);

  00a9a	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00a9d	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00aa0	83 7a 2c 00	 cmp	 DWORD PTR [edx+44], 0
  00aa4	74 34		 je	 SHORT $LN22@deflate
  00aa6	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00aa9	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00aac	3b 4d d8	 cmp	 ecx, DWORD PTR _beg$3[ebp]
  00aaf	76 29		 jbe	 SHORT $LN22@deflate
  00ab1	0f ae e8	 lfence
  00ab4	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00ab7	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00aba	2b 45 d8	 sub	 eax, DWORD PTR _beg$3[ebp]
  00abd	50		 push	 eax
  00abe	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00ac1	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00ac4	03 55 d8	 add	 edx, DWORD PTR _beg$3[ebp]
  00ac7	52		 push	 edx
  00ac8	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00acb	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00ace	51		 push	 ecx
  00acf	e8 00 00 00 00	 call	 _crc32@12
  00ad4	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00ad7	89 42 30	 mov	 DWORD PTR [edx+48], eax
$LN22@deflate:
  00ada	33 c0		 xor	 eax, eax
  00adc	75 bc		 jne	 SHORT $LN24@deflate

; 956  :                     flush_pending(strm);

  00ade	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00ae1	51		 push	 ecx
  00ae2	e8 00 00 00 00	 call	 _flush_pending
  00ae7	83 c4 04	 add	 esp, 4

; 957  :                     if (s->pending != 0) {

  00aea	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00aed	83 7a 14 00	 cmp	 DWORD PTR [edx+20], 0
  00af1	74 11		 je	 SHORT $LN71@deflate

; 958  :                         s->last_flush = -1;

  00af3	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00af6	c7 40 28 ff ff
	ff ff		 mov	 DWORD PTR [eax+40], -1

; 959  :                         return Z_OK;

  00afd	33 c0		 xor	 eax, eax
  00aff	e9 4f 05 00 00	 jmp	 $LN1@deflate
$LN71@deflate:

; 960  :                     }
; 961  :                     beg = 0;

  00b04	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _beg$3[ebp], 0
$LN69@deflate:

; 962  :                 }
; 963  :                 val = s->gzhead->comment[s->gzindex++];

  00b0b	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00b0e	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00b11	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00b14	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00b17	8b 52 24	 mov	 edx, DWORD PTR [edx+36]
  00b1a	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00b1e	89 45 d4	 mov	 DWORD PTR _val$2[ebp], eax
  00b21	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00b24	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00b27	83 c2 01	 add	 edx, 1
  00b2a	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00b2d	89 50 20	 mov	 DWORD PTR [eax+32], edx

; 964  :                 put_byte(s, val);

  00b30	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00b33	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00b36	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00b39	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00b3c	8a 45 d4	 mov	 al, BYTE PTR _val$2[ebp]
  00b3f	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  00b42	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00b45	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00b48	83 c2 01	 add	 edx, 1
  00b4b	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00b4e	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 965  :             } while (val != 0);

  00b51	83 7d d4 00	 cmp	 DWORD PTR _val$2[ebp], 0
  00b55	0f 85 31 ff ff
	ff		 jne	 $LN21@deflate
$LN27@deflate:

; 966  :             HCRC_UPDATE(beg);

  00b5b	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00b5e	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00b61	83 7a 2c 00	 cmp	 DWORD PTR [edx+44], 0
  00b65	74 34		 je	 SHORT $LN25@deflate
  00b67	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00b6a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00b6d	3b 4d d8	 cmp	 ecx, DWORD PTR _beg$3[ebp]
  00b70	76 29		 jbe	 SHORT $LN25@deflate
  00b72	0f ae e8	 lfence
  00b75	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00b78	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00b7b	2b 45 d8	 sub	 eax, DWORD PTR _beg$3[ebp]
  00b7e	50		 push	 eax
  00b7f	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00b82	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00b85	03 55 d8	 add	 edx, DWORD PTR _beg$3[ebp]
  00b88	52		 push	 edx
  00b89	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00b8c	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00b8f	51		 push	 ecx
  00b90	e8 00 00 00 00	 call	 _crc32@12
  00b95	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00b98	89 42 30	 mov	 DWORD PTR [edx+48], eax
$LN25@deflate:
  00b9b	33 c0		 xor	 eax, eax
  00b9d	75 bc		 jne	 SHORT $LN27@deflate
$LN68@deflate:

; 967  :         }
; 968  :         s->status = HCRC_STATE;

  00b9f	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00ba2	c7 41 04 67 00
	00 00		 mov	 DWORD PTR [ecx+4], 103	; 00000067H
$LN67@deflate:

; 969  :     }
; 970  :     if (s->status == HCRC_STATE) {

  00ba9	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00bac	83 7a 04 67	 cmp	 DWORD PTR [edx+4], 103	; 00000067H
  00bb0	0f 85 dd 00 00
	00		 jne	 $LN73@deflate

; 971  :         if (s->gzhead->hcrc) {

  00bb6	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00bb9	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00bbc	83 79 2c 00	 cmp	 DWORD PTR [ecx+44], 0
  00bc0	0f 84 9d 00 00
	00		 je	 $LN74@deflate

; 972  :             if (s->pending + 2 > s->pending_buf_size) {

  00bc6	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00bc9	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00bcc	83 c0 02	 add	 eax, 2
  00bcf	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00bd2	3b 41 0c	 cmp	 eax, DWORD PTR [ecx+12]
  00bd5	76 26		 jbe	 SHORT $LN75@deflate

; 973  :                 flush_pending(strm);

  00bd7	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00bda	52		 push	 edx
  00bdb	e8 00 00 00 00	 call	 _flush_pending
  00be0	83 c4 04	 add	 esp, 4

; 974  :                 if (s->pending != 0) {

  00be3	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00be6	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  00bea	74 11		 je	 SHORT $LN75@deflate

; 975  :                     s->last_flush = -1;

  00bec	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00bef	c7 41 28 ff ff
	ff ff		 mov	 DWORD PTR [ecx+40], -1

; 976  :                     return Z_OK;

  00bf6	33 c0		 xor	 eax, eax
  00bf8	e9 56 04 00 00	 jmp	 $LN1@deflate
$LN75@deflate:

; 977  :                 }
; 978  :             }
; 979  :             put_byte(s, (Byte)(strm->adler & 0xff));

  00bfd	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00c00	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00c03	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00c08	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00c0b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00c0e	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00c11	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00c14	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  00c17	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00c1a	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00c1d	83 c0 01	 add	 eax, 1
  00c20	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00c23	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 980  :             put_byte(s, (Byte)((strm->adler >> 8) & 0xff));

  00c26	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00c29	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00c2c	c1 e8 08	 shr	 eax, 8
  00c2f	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00c34	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00c37	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00c3a	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00c3d	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00c40	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  00c43	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00c46	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00c49	83 c0 01	 add	 eax, 1
  00c4c	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00c4f	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 981  :             strm->adler = crc32(0L, Z_NULL, 0);

  00c52	6a 00		 push	 0
  00c54	6a 00		 push	 0
  00c56	6a 00		 push	 0
  00c58	e8 00 00 00 00	 call	 _crc32@12
  00c5d	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00c60	89 42 30	 mov	 DWORD PTR [edx+48], eax
$LN74@deflate:

; 982  :         }
; 983  :         s->status = BUSY_STATE;

  00c63	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00c66	c7 40 04 71 00
	00 00		 mov	 DWORD PTR [eax+4], 113	; 00000071H

; 984  : 
; 985  :         /* Compression must start with an empty pending buffer */
; 986  :         flush_pending(strm);

  00c6d	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00c70	51		 push	 ecx
  00c71	e8 00 00 00 00	 call	 _flush_pending
  00c76	83 c4 04	 add	 esp, 4

; 987  :         if (s->pending != 0) {

  00c79	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00c7c	83 7a 14 00	 cmp	 DWORD PTR [edx+20], 0
  00c80	74 11		 je	 SHORT $LN73@deflate

; 988  :             s->last_flush = -1;

  00c82	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00c85	c7 40 28 ff ff
	ff ff		 mov	 DWORD PTR [eax+40], -1

; 989  :             return Z_OK;

  00c8c	33 c0		 xor	 eax, eax
  00c8e	e9 c0 03 00 00	 jmp	 $LN1@deflate
$LN73@deflate:

; 990  :         }
; 991  :     }
; 992  : #endif
; 993  : 
; 994  :     /* Start a new block or continue the current one.
; 995  :      */
; 996  :     if (strm->avail_in != 0 || s->lookahead != 0 ||

  00c93	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00c96	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00c9a	75 23		 jne	 SHORT $LN79@deflate
  00c9c	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00c9f	83 7a 74 00	 cmp	 DWORD PTR [edx+116], 0
  00ca3	75 1a		 jne	 SHORT $LN79@deflate
  00ca5	83 7d 0c 00	 cmp	 DWORD PTR _flush$[ebp], 0
  00ca9	0f 84 a5 01 00
	00		 je	 $LN78@deflate
  00caf	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00cb2	81 78 04 9a 02
	00 00		 cmp	 DWORD PTR [eax+4], 666	; 0000029aH
  00cb9	0f 84 95 01 00
	00		 je	 $LN78@deflate
$LN79@deflate:

; 997  :         (flush != Z_NO_FLUSH && s->status != FINISH_STATE)) {
; 998  :         block_state bstate;
; 999  : 
; 1000 :         bstate = s->level == 0 ? deflate_stored(s, flush) :

  00cbf	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00cc2	83 b9 84 00 00
	00 00		 cmp	 DWORD PTR [ecx+132], 0
  00cc9	75 15		 jne	 SHORT $LN124@deflate
  00ccb	8b 55 0c	 mov	 edx, DWORD PTR _flush$[ebp]
  00cce	52		 push	 edx
  00ccf	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00cd2	50		 push	 eax
  00cd3	e8 00 00 00 00	 call	 _deflate_stored
  00cd8	83 c4 08	 add	 esp, 8
  00cdb	89 45 a0	 mov	 DWORD PTR tv719[ebp], eax
  00cde	eb 77		 jmp	 SHORT $LN125@deflate
$LN124@deflate:
  00ce0	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00ce3	83 b9 88 00 00
	00 02		 cmp	 DWORD PTR [ecx+136], 2
  00cea	75 15		 jne	 SHORT $LN122@deflate
  00cec	8b 55 0c	 mov	 edx, DWORD PTR _flush$[ebp]
  00cef	52		 push	 edx
  00cf0	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00cf3	50		 push	 eax
  00cf4	e8 00 00 00 00	 call	 _deflate_huff
  00cf9	83 c4 08	 add	 esp, 8
  00cfc	89 45 9c	 mov	 DWORD PTR tv718[ebp], eax
  00cff	eb 50		 jmp	 SHORT $LN123@deflate
$LN122@deflate:
  00d01	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00d04	83 b9 88 00 00
	00 03		 cmp	 DWORD PTR [ecx+136], 3
  00d0b	75 15		 jne	 SHORT $LN120@deflate
  00d0d	8b 55 0c	 mov	 edx, DWORD PTR _flush$[ebp]
  00d10	52		 push	 edx
  00d11	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00d14	50		 push	 eax
  00d15	e8 00 00 00 00	 call	 _deflate_rle
  00d1a	83 c4 08	 add	 esp, 8
  00d1d	89 45 98	 mov	 DWORD PTR tv717[ebp], eax
  00d20	eb 29		 jmp	 SHORT $LN121@deflate
$LN120@deflate:
  00d22	8b f4		 mov	 esi, esp
  00d24	8b 4d 0c	 mov	 ecx, DWORD PTR _flush$[ebp]
  00d27	51		 push	 ecx
  00d28	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00d2b	52		 push	 edx
  00d2c	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00d2f	6b 88 84 00 00
	00 0c		 imul	 ecx, DWORD PTR [eax+132], 12
  00d36	8b 91 08 00 00
	00		 mov	 edx, DWORD PTR _configuration_table[ecx+8]
  00d3c	ff d2		 call	 edx
  00d3e	83 c4 08	 add	 esp, 8
  00d41	3b f4		 cmp	 esi, esp
  00d43	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00d48	89 45 98	 mov	 DWORD PTR tv717[ebp], eax
$LN121@deflate:
  00d4b	8b 45 98	 mov	 eax, DWORD PTR tv717[ebp]
  00d4e	89 45 9c	 mov	 DWORD PTR tv718[ebp], eax
$LN123@deflate:
  00d51	8b 4d 9c	 mov	 ecx, DWORD PTR tv718[ebp]
  00d54	89 4d a0	 mov	 DWORD PTR tv719[ebp], ecx
$LN125@deflate:
  00d57	8b 55 a0	 mov	 edx, DWORD PTR tv719[ebp]
  00d5a	89 55 d0	 mov	 DWORD PTR _bstate$1[ebp], edx

; 1001 :                  s->strategy == Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :
; 1002 :                  s->strategy == Z_RLE ? deflate_rle(s, flush) :
; 1003 :                  (*(configuration_table[s->level].func))(s, flush);
; 1004 : 
; 1005 :         if (bstate == finish_started || bstate == finish_done) {

  00d5d	83 7d d0 02	 cmp	 DWORD PTR _bstate$1[ebp], 2
  00d61	74 06		 je	 SHORT $LN81@deflate
  00d63	83 7d d0 03	 cmp	 DWORD PTR _bstate$1[ebp], 3
  00d67	75 0a		 jne	 SHORT $LN80@deflate
$LN81@deflate:

; 1006 :             s->status = FINISH_STATE;

  00d69	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00d6c	c7 40 04 9a 02
	00 00		 mov	 DWORD PTR [eax+4], 666	; 0000029aH
$LN80@deflate:

; 1007 :         }
; 1008 :         if (bstate == need_more || bstate == finish_started) {

  00d73	83 7d d0 00	 cmp	 DWORD PTR _bstate$1[ebp], 0
  00d77	74 06		 je	 SHORT $LN83@deflate
  00d79	83 7d d0 02	 cmp	 DWORD PTR _bstate$1[ebp], 2
  00d7d	75 1a		 jne	 SHORT $LN82@deflate
$LN83@deflate:

; 1009 :             if (strm->avail_out == 0) {

  00d7f	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00d82	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00d86	75 0a		 jne	 SHORT $LN84@deflate

; 1010 :                 s->last_flush = -1; /* avoid BUF_ERROR next call, see above */

  00d88	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00d8b	c7 42 28 ff ff
	ff ff		 mov	 DWORD PTR [edx+40], -1
$LN84@deflate:

; 1011 :             }
; 1012 :             return Z_OK;

  00d92	33 c0		 xor	 eax, eax
  00d94	e9 ba 02 00 00	 jmp	 $LN1@deflate
$LN82@deflate:

; 1013 :             /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
; 1014 :              * of deflate should use the same flush parameter to make sure
; 1015 :              * that the flush is complete. So we don't have to output an
; 1016 :              * empty block here, this will be done at next call. This also
; 1017 :              * ensures that for a very small output buffer, we emit at most
; 1018 :              * one empty block.
; 1019 :              */
; 1020 :         }
; 1021 :         if (bstate == block_done) {

  00d99	83 7d d0 01	 cmp	 DWORD PTR _bstate$1[ebp], 1
  00d9d	0f 85 b1 00 00
	00		 jne	 $LN78@deflate

; 1022 :             if (flush == Z_PARTIAL_FLUSH) {

  00da3	83 7d 0c 01	 cmp	 DWORD PTR _flush$[ebp], 1
  00da7	75 0e		 jne	 SHORT $LN86@deflate

; 1023 :                 _tr_align(s);

  00da9	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00dac	50		 push	 eax
  00dad	e8 00 00 00 00	 call	 __tr_align
  00db2	83 c4 04	 add	 esp, 4
  00db5	eb 77		 jmp	 SHORT $LN87@deflate
$LN86@deflate:

; 1024 :             } else if (flush != Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

  00db7	83 7d 0c 05	 cmp	 DWORD PTR _flush$[ebp], 5
  00dbb	74 71		 je	 SHORT $LN87@deflate

; 1025 :                 _tr_stored_block(s, (char*)0, 0L, 0);

  00dbd	6a 00		 push	 0
  00dbf	6a 00		 push	 0
  00dc1	6a 00		 push	 0
  00dc3	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00dc6	51		 push	 ecx
  00dc7	e8 00 00 00 00	 call	 __tr_stored_block
  00dcc	83 c4 10	 add	 esp, 16			; 00000010H

; 1026 :                 /* For a full flush, this empty block will be recognized
; 1027 :                  * as a special marker by inflate_sync().
; 1028 :                  */
; 1029 :                 if (flush == Z_FULL_FLUSH) {

  00dcf	83 7d 0c 03	 cmp	 DWORD PTR _flush$[ebp], 3
  00dd3	75 59		 jne	 SHORT $LN87@deflate

; 1030 :                     CLEAR_HASH(s);             /* forget history */

  00dd5	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00dd8	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  00ddb	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00dde	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00de1	33 c9		 xor	 ecx, ecx
  00de3	66 89 4c 42 fe	 mov	 WORD PTR [edx+eax*2-2], cx
  00de8	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00deb	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  00dee	8d 4c 00 fe	 lea	 ecx, DWORD PTR [eax+eax-2]
  00df2	51		 push	 ecx
  00df3	6a 00		 push	 0
  00df5	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00df8	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00dfb	50		 push	 eax
  00dfc	e8 00 00 00 00	 call	 _memset
  00e01	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1031 :                     if (s->lookahead == 0) {

  00e04	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00e07	83 79 74 00	 cmp	 DWORD PTR [ecx+116], 0
  00e0b	75 21		 jne	 SHORT $LN87@deflate

; 1032 :                         s->strstart = 0;

  00e0d	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00e10	c7 42 6c 00 00
	00 00		 mov	 DWORD PTR [edx+108], 0

; 1033 :                         s->block_start = 0L;

  00e17	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00e1a	c7 40 5c 00 00
	00 00		 mov	 DWORD PTR [eax+92], 0

; 1034 :                         s->insert = 0;

  00e21	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00e24	c7 81 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+5812], 0
$LN87@deflate:

; 1035 :                     }
; 1036 :                 }
; 1037 :             }
; 1038 :             flush_pending(strm);

  00e2e	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00e31	52		 push	 edx
  00e32	e8 00 00 00 00	 call	 _flush_pending
  00e37	83 c4 04	 add	 esp, 4

; 1039 :             if (strm->avail_out == 0) {

  00e3a	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00e3d	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00e41	75 11		 jne	 SHORT $LN78@deflate

; 1040 :               s->last_flush = -1; /* avoid BUF_ERROR at next call, see above */

  00e43	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00e46	c7 41 28 ff ff
	ff ff		 mov	 DWORD PTR [ecx+40], -1

; 1041 :               return Z_OK;

  00e4d	33 c0		 xor	 eax, eax
  00e4f	e9 ff 01 00 00	 jmp	 $LN1@deflate
$LN78@deflate:

; 1042 :             }
; 1043 :         }
; 1044 :     }
; 1045 : 
; 1046 :     if (flush != Z_FINISH) return Z_OK;

  00e54	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  00e58	74 07		 je	 SHORT $LN92@deflate
  00e5a	33 c0		 xor	 eax, eax
  00e5c	e9 f2 01 00 00	 jmp	 $LN1@deflate
$LN92@deflate:

; 1047 :     if (s->wrap <= 0) return Z_STREAM_END;

  00e61	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00e64	83 7a 18 00	 cmp	 DWORD PTR [edx+24], 0
  00e68	7f 0a		 jg	 SHORT $LN93@deflate
  00e6a	b8 01 00 00 00	 mov	 eax, 1
  00e6f	e9 df 01 00 00	 jmp	 $LN1@deflate
$LN93@deflate:

; 1048 : 
; 1049 :     /* Write the trailer */
; 1050 : #ifdef GZIP
; 1051 :     if (s->wrap == 2) {

  00e74	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00e77	83 78 18 02	 cmp	 DWORD PTR [eax+24], 2
  00e7b	0f 85 64 01 00
	00		 jne	 $LN94@deflate

; 1052 :         put_byte(s, (Byte)(strm->adler & 0xff));

  00e81	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00e84	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00e87	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00e8d	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00e90	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00e93	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00e96	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00e99	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  00e9c	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00e9f	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00ea2	83 c2 01	 add	 edx, 1
  00ea5	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00ea8	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 1053 :         put_byte(s, (Byte)((strm->adler >> 8) & 0xff));

  00eab	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00eae	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00eb1	c1 ea 08	 shr	 edx, 8
  00eb4	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00eba	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00ebd	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00ec0	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00ec3	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00ec6	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  00ec9	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00ecc	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00ecf	83 c2 01	 add	 edx, 1
  00ed2	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00ed5	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 1054 :         put_byte(s, (Byte)((strm->adler >> 16) & 0xff));

  00ed8	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00edb	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00ede	c1 ea 10	 shr	 edx, 16			; 00000010H
  00ee1	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00ee7	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00eea	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00eed	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00ef0	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00ef3	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  00ef6	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00ef9	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00efc	83 c2 01	 add	 edx, 1
  00eff	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00f02	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 1055 :         put_byte(s, (Byte)((strm->adler >> 24) & 0xff));

  00f05	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00f08	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00f0b	c1 ea 18	 shr	 edx, 24			; 00000018H
  00f0e	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00f14	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00f17	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00f1a	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00f1d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00f20	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  00f23	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00f26	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00f29	83 c2 01	 add	 edx, 1
  00f2c	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00f2f	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 1056 :         put_byte(s, (Byte)(strm->total_in & 0xff));

  00f32	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00f35	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00f38	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00f3e	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00f41	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00f44	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00f47	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00f4a	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  00f4d	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00f50	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00f53	83 c2 01	 add	 edx, 1
  00f56	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00f59	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 1057 :         put_byte(s, (Byte)((strm->total_in >> 8) & 0xff));

  00f5c	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00f5f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00f62	c1 ea 08	 shr	 edx, 8
  00f65	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00f6b	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00f6e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00f71	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00f74	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00f77	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  00f7a	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00f7d	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00f80	83 c2 01	 add	 edx, 1
  00f83	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00f86	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 1058 :         put_byte(s, (Byte)((strm->total_in >> 16) & 0xff));

  00f89	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00f8c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00f8f	c1 ea 10	 shr	 edx, 16			; 00000010H
  00f92	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00f98	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00f9b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00f9e	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00fa1	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00fa4	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  00fa7	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00faa	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00fad	83 c2 01	 add	 edx, 1
  00fb0	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00fb3	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 1059 :         put_byte(s, (Byte)((strm->total_in >> 24) & 0xff));

  00fb6	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00fb9	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00fbc	c1 ea 18	 shr	 edx, 24			; 00000018H
  00fbf	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00fc5	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00fc8	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00fcb	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00fce	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00fd1	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  00fd4	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00fd7	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00fda	83 c2 01	 add	 edx, 1
  00fdd	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00fe0	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 1060 :     }

  00fe3	eb 2f		 jmp	 SHORT $LN95@deflate
$LN94@deflate:

; 1061 :     else
; 1062 : #endif
; 1063 :     {
; 1064 :         putShortMSB(s, (uInt)(strm->adler >> 16));

  00fe5	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00fe8	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00feb	c1 ea 10	 shr	 edx, 16			; 00000010H
  00fee	52		 push	 edx
  00fef	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00ff2	50		 push	 eax
  00ff3	e8 00 00 00 00	 call	 _putShortMSB
  00ff8	83 c4 08	 add	 esp, 8

; 1065 :         putShortMSB(s, (uInt)(strm->adler & 0xffff));

  00ffb	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00ffe	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  01001	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  01007	52		 push	 edx
  01008	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  0100b	50		 push	 eax
  0100c	e8 00 00 00 00	 call	 _putShortMSB
  01011	83 c4 08	 add	 esp, 8
$LN95@deflate:

; 1066 :     }
; 1067 :     flush_pending(strm);

  01014	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  01017	51		 push	 ecx
  01018	e8 00 00 00 00	 call	 _flush_pending
  0101d	83 c4 04	 add	 esp, 4

; 1068 :     /* If avail_out is zero, the application will call deflate again
; 1069 :      * to flush the rest.
; 1070 :      */
; 1071 :     if (s->wrap > 0) s->wrap = -s->wrap; /* write the trailer only once! */

  01020	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  01023	83 7a 18 00	 cmp	 DWORD PTR [edx+24], 0
  01027	7e 0e		 jle	 SHORT $LN96@deflate
  01029	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  0102c	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0102f	f7 d9		 neg	 ecx
  01031	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  01034	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
$LN96@deflate:

; 1072 :     return s->pending != 0 ? Z_OK : Z_STREAM_END;

  01037	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  0103a	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  0103e	74 09		 je	 SHORT $LN126@deflate
  01040	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv865[ebp], 0
  01047	eb 07		 jmp	 SHORT $LN127@deflate
$LN126@deflate:
  01049	c7 45 94 01 00
	00 00		 mov	 DWORD PTR tv865[ebp], 1
$LN127@deflate:
  01050	8b 45 94	 mov	 eax, DWORD PTR tv865[ebp]
$LN1@deflate:

; 1073 : }

  01053	5f		 pop	 edi
  01054	5e		 pop	 esi
  01055	83 c4 6c	 add	 esp, 108		; 0000006cH
  01058	3b ec		 cmp	 ebp, esp
  0105a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0105f	8b e5		 mov	 esp, ebp
  01061	5d		 pop	 ebp
  01062	c2 08 00	 ret	 8
_deflate@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflateEnd@4
_TEXT	SEGMENT
tv144 = -8						; size = 4
_status$ = -4						; size = 4
_strm$ = 8						; size = 4
_deflateEnd@4 PROC					; COMDAT

; 1078 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1079 :     int status;
; 1080 : 
; 1081 :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  0001f	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 _deflateStateCheck
  00028	83 c4 04	 add	 esp, 4
  0002b	85 c0		 test	 eax, eax
  0002d	74 0a		 je	 SHORT $LN2@deflateEnd
  0002f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00034	e9 15 01 00 00	 jmp	 $LN1@deflateEnd
$LN2@deflateEnd:

; 1082 : 
; 1083 :     status = strm->state->status;

  00039	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0003c	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0003f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00042	89 45 fc	 mov	 DWORD PTR _status$[ebp], eax

; 1084 : 
; 1085 :     /* Deallocate in reverse order of allocations: */
; 1086 :     TRY_FREE(strm, strm->state->pending_buf);

  00045	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00048	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0004b	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  0004f	74 25		 je	 SHORT $LN3@deflateEnd
  00051	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00054	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00057	8b f4		 mov	 esi, esp
  00059	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0005c	52		 push	 edx
  0005d	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00060	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00063	51		 push	 ecx
  00064	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00067	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0006a	ff d0		 call	 eax
  0006c	83 c4 08	 add	 esp, 8
  0006f	3b f4		 cmp	 esi, esp
  00071	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@deflateEnd:

; 1087 :     TRY_FREE(strm, strm->state->head);

  00076	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00079	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0007c	83 7a 44 00	 cmp	 DWORD PTR [edx+68], 0
  00080	74 25		 je	 SHORT $LN4@deflateEnd
  00082	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00085	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00088	8b f4		 mov	 esi, esp
  0008a	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  0008d	52		 push	 edx
  0008e	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00091	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00094	51		 push	 ecx
  00095	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00098	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0009b	ff d0		 call	 eax
  0009d	83 c4 08	 add	 esp, 8
  000a0	3b f4		 cmp	 esi, esp
  000a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN4@deflateEnd:

; 1088 :     TRY_FREE(strm, strm->state->prev);

  000a7	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  000aa	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000ad	83 7a 40 00	 cmp	 DWORD PTR [edx+64], 0
  000b1	74 25		 je	 SHORT $LN5@deflateEnd
  000b3	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  000b6	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  000b9	8b f4		 mov	 esi, esp
  000bb	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  000be	52		 push	 edx
  000bf	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  000c2	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  000c5	51		 push	 ecx
  000c6	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  000c9	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000cc	ff d0		 call	 eax
  000ce	83 c4 08	 add	 esp, 8
  000d1	3b f4		 cmp	 esi, esp
  000d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN5@deflateEnd:

; 1089 :     TRY_FREE(strm, strm->state->window);

  000d8	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  000db	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000de	83 7a 38 00	 cmp	 DWORD PTR [edx+56], 0
  000e2	74 25		 je	 SHORT $LN6@deflateEnd
  000e4	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  000e7	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  000ea	8b f4		 mov	 esi, esp
  000ec	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  000ef	52		 push	 edx
  000f0	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  000f3	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  000f6	51		 push	 ecx
  000f7	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  000fa	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000fd	ff d0		 call	 eax
  000ff	83 c4 08	 add	 esp, 8
  00102	3b f4		 cmp	 esi, esp
  00104	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN6@deflateEnd:

; 1090 : 
; 1091 :     ZFREE(strm, strm->state);

  00109	8b f4		 mov	 esi, esp
  0010b	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0010e	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00111	52		 push	 edx
  00112	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00115	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00118	51		 push	 ecx
  00119	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0011c	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0011f	ff d0		 call	 eax
  00121	83 c4 08	 add	 esp, 8
  00124	3b f4		 cmp	 esi, esp
  00126	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1092 :     strm->state = Z_NULL;

  0012b	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0012e	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 1093 : 
; 1094 :     return status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;

  00135	83 7d fc 71	 cmp	 DWORD PTR _status$[ebp], 113 ; 00000071H
  00139	75 09		 jne	 SHORT $LN8@deflateEnd
  0013b	c7 45 f8 fd ff
	ff ff		 mov	 DWORD PTR tv144[ebp], -3 ; fffffffdH
  00142	eb 07		 jmp	 SHORT $LN9@deflateEnd
$LN8@deflateEnd:
  00144	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv144[ebp], 0
$LN9@deflateEnd:
  0014b	8b 45 f8	 mov	 eax, DWORD PTR tv144[ebp]
$LN1@deflateEnd:

; 1095 : }

  0014e	5e		 pop	 esi
  0014f	83 c4 08	 add	 esp, 8
  00152	3b ec		 cmp	 ebp, esp
  00154	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00159	8b e5		 mov	 esp, ebp
  0015b	5d		 pop	 ebp
  0015c	c2 04 00	 ret	 4
_deflateEnd@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflateInit_@16
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_version$ = 16						; size = 4
_stream_size$ = 20					; size = 4
_deflateInit_@16 PROC					; COMDAT

; 233  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 234  :     return deflateInit2_(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL,

  0000d	8b 45 14	 mov	 eax, DWORD PTR _stream_size$[ebp]
  00010	50		 push	 eax
  00011	8b 4d 10	 mov	 ecx, DWORD PTR _version$[ebp]
  00014	51		 push	 ecx
  00015	6a 00		 push	 0
  00017	6a 08		 push	 8
  00019	6a 0f		 push	 15			; 0000000fH
  0001b	6a 08		 push	 8
  0001d	8b 55 0c	 mov	 edx, DWORD PTR _level$[ebp]
  00020	52		 push	 edx
  00021	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _deflateInit2_@32

; 235  :                          Z_DEFAULT_STRATEGY, version, stream_size);
; 236  :     /* To do: ignore strm->next_in if we use it as window */
; 237  : }

  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	5d		 pop	 ebp
  00032	c2 10 00	 ret	 16			; 00000010H
_deflateInit_@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _slide_hash
_TEXT	SEGMENT
tv84 = -24						; size = 4
tv73 = -20						; size = 4
_wsize$ = -16						; size = 4
_p$ = -12						; size = 4
_m$ = -8						; size = 4
_n$ = -4						; size = 4
_s$ = 8							; size = 4
_slide_hash PROC					; COMDAT

; 203  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000e	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00011	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00014	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00017	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001a	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001d	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00022	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 204  :     unsigned n, m;
; 205  :     Posf *p;
; 206  :     uInt wsize = s->w_size;

  00027	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0002a	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0002d	89 4d f0	 mov	 DWORD PTR _wsize$[ebp], ecx

; 207  : 
; 208  :     n = s->hash_size;

  00030	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00033	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  00036	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax

; 209  :     p = &s->head[n];

  00039	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0003c	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  0003f	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  00042	8d 0c 42	 lea	 ecx, DWORD PTR [edx+eax*2]
  00045	89 4d f4	 mov	 DWORD PTR _p$[ebp], ecx
$LN4@slide_hash:

; 210  :     do {
; 211  :         m = *--p;

  00048	8b 55 f4	 mov	 edx, DWORD PTR _p$[ebp]
  0004b	83 ea 02	 sub	 edx, 2
  0004e	89 55 f4	 mov	 DWORD PTR _p$[ebp], edx
  00051	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00054	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00057	89 4d f8	 mov	 DWORD PTR _m$[ebp], ecx

; 212  :         *p = (Pos)(m >= wsize ? m - wsize : NIL);

  0005a	8b 55 f8	 mov	 edx, DWORD PTR _m$[ebp]
  0005d	3b 55 f0	 cmp	 edx, DWORD PTR _wsize$[ebp]
  00060	72 0b		 jb	 SHORT $LN9@slide_hash
  00062	8b 45 f8	 mov	 eax, DWORD PTR _m$[ebp]
  00065	2b 45 f0	 sub	 eax, DWORD PTR _wsize$[ebp]
  00068	89 45 ec	 mov	 DWORD PTR tv73[ebp], eax
  0006b	eb 07		 jmp	 SHORT $LN10@slide_hash
$LN9@slide_hash:
  0006d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN10@slide_hash:
  00074	8b 4d f4	 mov	 ecx, DWORD PTR _p$[ebp]
  00077	66 8b 55 ec	 mov	 dx, WORD PTR tv73[ebp]
  0007b	66 89 11	 mov	 WORD PTR [ecx], dx

; 213  :     } while (--n);

  0007e	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  00081	83 e8 01	 sub	 eax, 1
  00084	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax
  00087	75 bf		 jne	 SHORT $LN4@slide_hash

; 214  :     n = wsize;

  00089	8b 4d f0	 mov	 ecx, DWORD PTR _wsize$[ebp]
  0008c	89 4d fc	 mov	 DWORD PTR _n$[ebp], ecx

; 215  : #ifndef FASTEST
; 216  :     p = &s->prev[n];

  0008f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00092	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  00095	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  00098	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  0009b	89 55 f4	 mov	 DWORD PTR _p$[ebp], edx
$LN7@slide_hash:

; 217  :     do {
; 218  :         m = *--p;

  0009e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  000a1	83 e8 02	 sub	 eax, 2
  000a4	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
  000a7	8b 4d f4	 mov	 ecx, DWORD PTR _p$[ebp]
  000aa	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  000ad	89 55 f8	 mov	 DWORD PTR _m$[ebp], edx

; 219  :         *p = (Pos)(m >= wsize ? m - wsize : NIL);

  000b0	8b 45 f8	 mov	 eax, DWORD PTR _m$[ebp]
  000b3	3b 45 f0	 cmp	 eax, DWORD PTR _wsize$[ebp]
  000b6	72 0b		 jb	 SHORT $LN11@slide_hash
  000b8	8b 4d f8	 mov	 ecx, DWORD PTR _m$[ebp]
  000bb	2b 4d f0	 sub	 ecx, DWORD PTR _wsize$[ebp]
  000be	89 4d e8	 mov	 DWORD PTR tv84[ebp], ecx
  000c1	eb 07		 jmp	 SHORT $LN12@slide_hash
$LN11@slide_hash:
  000c3	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$LN12@slide_hash:
  000ca	8b 55 f4	 mov	 edx, DWORD PTR _p$[ebp]
  000cd	66 8b 45 e8	 mov	 ax, WORD PTR tv84[ebp]
  000d1	66 89 02	 mov	 WORD PTR [edx], ax

; 220  :         /* If n is not on any hash chain, prev[n] is garbage but
; 221  :          * its value will never be used.
; 222  :          */
; 223  :     } while (--n);

  000d4	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  000d7	83 e9 01	 sub	 ecx, 1
  000da	89 4d fc	 mov	 DWORD PTR _n$[ebp], ecx
  000dd	75 bf		 jne	 SHORT $LN7@slide_hash

; 224  : #endif
; 225  : }

  000df	83 c4 18	 add	 esp, 24			; 00000018H
  000e2	3b ec		 cmp	 ebp, esp
  000e4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c3		 ret	 0
_slide_hash ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflateInit2_@32
_TEXT	SEGMENT
_overlay$ = -12						; size = 4
_wrap$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_method$ = 16						; size = 4
_windowBits$ = 20					; size = 4
_memLevel$ = 24						; size = 4
_strategy$ = 28						; size = 4
_version$ = 32						; size = 4
_stream_size$ = 36					; size = 4
_deflateInit2_@32 PROC					; COMDAT

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00021	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 251  :     deflate_state *s;
; 252  :     int wrap = 1;

  00026	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _wrap$[ebp], 1

; 253  :     static const char my_version[] = ZLIB_VERSION;
; 254  : 
; 255  :     ushf *overlay;
; 256  :     /* We overlay pending_buf and d_buf+l_buf. This works since the average
; 257  :      * output size for (length,distance) codes is <= 24 bits.
; 258  :      */
; 259  : 
; 260  :     if (version == Z_NULL || version[0] != my_version[0] ||

  0002d	83 7d 20 00	 cmp	 DWORD PTR _version$[ebp], 0
  00031	74 28		 je	 SHORT $LN3@deflateIni
  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	6b c8 00	 imul	 ecx, eax, 0
  0003b	8b 55 20	 mov	 edx, DWORD PTR _version$[ebp]
  0003e	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00042	b9 01 00 00 00	 mov	 ecx, 1
  00047	6b d1 00	 imul	 edx, ecx, 0
  0004a	0f be 8a 00 00
	00 00		 movsx	 ecx, BYTE PTR ?my_version@?1??deflateInit2_@@9@9[edx]
  00051	3b c1		 cmp	 eax, ecx
  00053	75 06		 jne	 SHORT $LN3@deflateIni
  00055	83 7d 24 38	 cmp	 DWORD PTR _stream_size$[ebp], 56 ; 00000038H
  00059	74 0a		 je	 SHORT $LN2@deflateIni
$LN3@deflateIni:

; 261  :         stream_size != sizeof(z_stream)) {
; 262  :         return Z_VERSION_ERROR;

  0005b	b8 fa ff ff ff	 mov	 eax, -6			; fffffffaH
  00060	e9 46 03 00 00	 jmp	 $LN1@deflateIni
$LN2@deflateIni:

; 263  :     }
; 264  :     if (strm == Z_NULL) return Z_STREAM_ERROR;

  00065	83 7d 08 00	 cmp	 DWORD PTR _strm$[ebp], 0
  00069	75 0a		 jne	 SHORT $LN4@deflateIni
  0006b	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00070	e9 36 03 00 00	 jmp	 $LN1@deflateIni
$LN4@deflateIni:

; 265  : 
; 266  :     strm->msg = Z_NULL;

  00075	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00078	c7 42 18 00 00
	00 00		 mov	 DWORD PTR [edx+24], 0

; 267  :     if (strm->zalloc == (alloc_func)0) {

  0007f	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00082	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  00086	75 14		 jne	 SHORT $LN5@deflateIni

; 268  : #ifdef Z_SOLO
; 269  :         return Z_STREAM_ERROR;
; 270  : #else
; 271  :         strm->zalloc = zcalloc;

  00088	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0008b	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], OFFSET _zcalloc

; 272  :         strm->opaque = (voidpf)0;

  00092	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00095	c7 42 28 00 00
	00 00		 mov	 DWORD PTR [edx+40], 0
$LN5@deflateIni:

; 273  : #endif
; 274  :     }
; 275  :     if (strm->zfree == (free_func)0)

  0009c	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0009f	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  000a3	75 0a		 jne	 SHORT $LN6@deflateIni

; 276  : #ifdef Z_SOLO
; 277  :         return Z_STREAM_ERROR;
; 278  : #else
; 279  :         strm->zfree = zcfree;

  000a5	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  000a8	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], OFFSET _zcfree
$LN6@deflateIni:

; 280  : #endif
; 281  : 
; 282  : #ifdef FASTEST
; 283  :     if (level != 0) level = 1;
; 284  : #else
; 285  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;

  000af	83 7d 0c ff	 cmp	 DWORD PTR _level$[ebp], -1
  000b3	75 07		 jne	 SHORT $LN7@deflateIni
  000b5	c7 45 0c 06 00
	00 00		 mov	 DWORD PTR _level$[ebp], 6
$LN7@deflateIni:

; 286  : #endif
; 287  : 
; 288  :     if (windowBits < 0) { /* suppress zlib wrapper */

  000bc	83 7d 14 00	 cmp	 DWORD PTR _windowBits$[ebp], 0
  000c0	7d 11		 jge	 SHORT $LN8@deflateIni

; 289  :         wrap = 0;

  000c2	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _wrap$[ebp], 0

; 290  :         windowBits = -windowBits;

  000c9	8b 55 14	 mov	 edx, DWORD PTR _windowBits$[ebp]
  000cc	f7 da		 neg	 edx
  000ce	89 55 14	 mov	 DWORD PTR _windowBits$[ebp], edx

; 291  :     }

  000d1	eb 16		 jmp	 SHORT $LN9@deflateIni
$LN8@deflateIni:

; 292  : #ifdef GZIP
; 293  :     else if (windowBits > 15) {

  000d3	83 7d 14 0f	 cmp	 DWORD PTR _windowBits$[ebp], 15 ; 0000000fH
  000d7	7e 10		 jle	 SHORT $LN9@deflateIni

; 294  :         wrap = 2;       /* write gzip wrapper instead */

  000d9	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _wrap$[ebp], 2

; 295  :         windowBits -= 16;

  000e0	8b 45 14	 mov	 eax, DWORD PTR _windowBits$[ebp]
  000e3	83 e8 10	 sub	 eax, 16			; 00000010H
  000e6	89 45 14	 mov	 DWORD PTR _windowBits$[ebp], eax
$LN9@deflateIni:

; 296  :     }
; 297  : #endif
; 298  :     if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method != Z_DEFLATED ||
; 299  :         windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
; 300  :         strategy < 0 || strategy > Z_FIXED || (windowBits == 8 && wrap != 1)) {

  000e9	83 7d 18 01	 cmp	 DWORD PTR _memLevel$[ebp], 1
  000ed	7c 3c		 jl	 SHORT $LN12@deflateIni
  000ef	83 7d 18 09	 cmp	 DWORD PTR _memLevel$[ebp], 9
  000f3	7f 36		 jg	 SHORT $LN12@deflateIni
  000f5	83 7d 10 08	 cmp	 DWORD PTR _method$[ebp], 8
  000f9	75 30		 jne	 SHORT $LN12@deflateIni
  000fb	83 7d 14 08	 cmp	 DWORD PTR _windowBits$[ebp], 8
  000ff	7c 2a		 jl	 SHORT $LN12@deflateIni
  00101	83 7d 14 0f	 cmp	 DWORD PTR _windowBits$[ebp], 15 ; 0000000fH
  00105	7f 24		 jg	 SHORT $LN12@deflateIni
  00107	83 7d 0c 00	 cmp	 DWORD PTR _level$[ebp], 0
  0010b	7c 1e		 jl	 SHORT $LN12@deflateIni
  0010d	83 7d 0c 09	 cmp	 DWORD PTR _level$[ebp], 9
  00111	7f 18		 jg	 SHORT $LN12@deflateIni
  00113	83 7d 1c 00	 cmp	 DWORD PTR _strategy$[ebp], 0
  00117	7c 12		 jl	 SHORT $LN12@deflateIni
  00119	83 7d 1c 04	 cmp	 DWORD PTR _strategy$[ebp], 4
  0011d	7f 0c		 jg	 SHORT $LN12@deflateIni
  0011f	83 7d 14 08	 cmp	 DWORD PTR _windowBits$[ebp], 8
  00123	75 10		 jne	 SHORT $LN11@deflateIni
  00125	83 7d f8 01	 cmp	 DWORD PTR _wrap$[ebp], 1
  00129	74 0a		 je	 SHORT $LN11@deflateIni
$LN12@deflateIni:

; 301  :         return Z_STREAM_ERROR;

  0012b	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00130	e9 76 02 00 00	 jmp	 $LN1@deflateIni
$LN11@deflateIni:

; 302  :     }
; 303  :     if (windowBits == 8) windowBits = 9;  /* until 256-byte window bug fixed */

  00135	83 7d 14 08	 cmp	 DWORD PTR _windowBits$[ebp], 8
  00139	75 07		 jne	 SHORT $LN13@deflateIni
  0013b	c7 45 14 09 00
	00 00		 mov	 DWORD PTR _windowBits$[ebp], 9
$LN13@deflateIni:

; 304  :     s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));

  00142	8b f4		 mov	 esi, esp
  00144	68 c4 16 00 00	 push	 5828			; 000016c4H
  00149	6a 01		 push	 1
  0014b	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0014e	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00151	52		 push	 edx
  00152	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00155	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00158	ff d1		 call	 ecx
  0015a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0015d	3b f4		 cmp	 esi, esp
  0015f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00164	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 305  :     if (s == Z_NULL) return Z_MEM_ERROR;

  00167	83 7d fc 00	 cmp	 DWORD PTR _s$[ebp], 0
  0016b	75 0a		 jne	 SHORT $LN14@deflateIni
  0016d	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00172	e9 34 02 00 00	 jmp	 $LN1@deflateIni
$LN14@deflateIni:

; 306  :     strm->state = (struct internal_state FAR *)s;

  00177	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0017a	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0017d	89 42 1c	 mov	 DWORD PTR [edx+28], eax

; 307  :     s->strm = strm;

  00180	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00183	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00186	89 11		 mov	 DWORD PTR [ecx], edx

; 308  :     s->status = INIT_STATE;     /* to pass state test in deflateReset() */

  00188	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0018b	c7 40 04 2a 00
	00 00		 mov	 DWORD PTR [eax+4], 42	; 0000002aH

; 309  : 
; 310  :     s->wrap = wrap;

  00192	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00195	8b 55 f8	 mov	 edx, DWORD PTR _wrap$[ebp]
  00198	89 51 18	 mov	 DWORD PTR [ecx+24], edx

; 311  :     s->gzhead = Z_NULL;

  0019b	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0019e	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 312  :     s->w_bits = (uInt)windowBits;

  001a5	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  001a8	8b 55 14	 mov	 edx, DWORD PTR _windowBits$[ebp]
  001ab	89 51 30	 mov	 DWORD PTR [ecx+48], edx

; 313  :     s->w_size = 1 << s->w_bits;

  001ae	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  001b1	ba 01 00 00 00	 mov	 edx, 1
  001b6	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  001b9	d3 e2		 shl	 edx, cl
  001bb	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  001be	89 50 2c	 mov	 DWORD PTR [eax+44], edx

; 314  :     s->w_mask = s->w_size - 1;

  001c1	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  001c4	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  001c7	83 ea 01	 sub	 edx, 1
  001ca	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  001cd	89 50 34	 mov	 DWORD PTR [eax+52], edx

; 315  : 
; 316  :     s->hash_bits = (uInt)memLevel + 7;

  001d0	8b 4d 18	 mov	 ecx, DWORD PTR _memLevel$[ebp]
  001d3	83 c1 07	 add	 ecx, 7
  001d6	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  001d9	89 4a 50	 mov	 DWORD PTR [edx+80], ecx

; 317  :     s->hash_size = 1 << s->hash_bits;

  001dc	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  001df	ba 01 00 00 00	 mov	 edx, 1
  001e4	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  001e7	d3 e2		 shl	 edx, cl
  001e9	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  001ec	89 50 4c	 mov	 DWORD PTR [eax+76], edx

; 318  :     s->hash_mask = s->hash_size - 1;

  001ef	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  001f2	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  001f5	83 ea 01	 sub	 edx, 1
  001f8	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  001fb	89 50 54	 mov	 DWORD PTR [eax+84], edx

; 319  :     s->hash_shift =  ((s->hash_bits+MIN_MATCH-1)/MIN_MATCH);

  001fe	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00201	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  00204	83 c0 02	 add	 eax, 2
  00207	33 d2		 xor	 edx, edx
  00209	b9 03 00 00 00	 mov	 ecx, 3
  0020e	f7 f1		 div	 ecx
  00210	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00213	89 42 58	 mov	 DWORD PTR [edx+88], eax

; 320  : 
; 321  :     s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));

  00216	8b f4		 mov	 esi, esp
  00218	6a 02		 push	 2
  0021a	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0021d	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00220	51		 push	 ecx
  00221	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00224	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00227	50		 push	 eax
  00228	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0022b	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0022e	ff d2		 call	 edx
  00230	83 c4 0c	 add	 esp, 12			; 0000000cH
  00233	3b f4		 cmp	 esi, esp
  00235	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0023a	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0023d	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 322  :     s->prev   = (Posf *)  ZALLOC(strm, s->w_size, sizeof(Pos));

  00240	8b f4		 mov	 esi, esp
  00242	6a 02		 push	 2
  00244	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00247	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0024a	50		 push	 eax
  0024b	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0024e	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00251	52		 push	 edx
  00252	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00255	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00258	ff d1		 call	 ecx
  0025a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0025d	3b f4		 cmp	 esi, esp
  0025f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00264	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00267	89 42 40	 mov	 DWORD PTR [edx+64], eax

; 323  :     s->head   = (Posf *)  ZALLOC(strm, s->hash_size, sizeof(Pos));

  0026a	8b f4		 mov	 esi, esp
  0026c	6a 02		 push	 2
  0026e	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00271	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00274	51		 push	 ecx
  00275	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00278	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  0027b	50		 push	 eax
  0027c	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0027f	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00282	ff d2		 call	 edx
  00284	83 c4 0c	 add	 esp, 12			; 0000000cH
  00287	3b f4		 cmp	 esi, esp
  00289	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0028e	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00291	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 324  : 
; 325  :     s->high_water = 0;      /* nothing written to s->window yet */

  00294	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00297	c7 82 c0 16 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+5824], 0

; 326  : 
; 327  :     s->lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  002a1	8b 4d 18	 mov	 ecx, DWORD PTR _memLevel$[ebp]
  002a4	83 c1 06	 add	 ecx, 6
  002a7	b8 01 00 00 00	 mov	 eax, 1
  002ac	d3 e0		 shl	 eax, cl
  002ae	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  002b1	89 81 9c 16 00
	00		 mov	 DWORD PTR [ecx+5788], eax

; 328  : 
; 329  :     overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);

  002b7	8b f4		 mov	 esi, esp
  002b9	6a 04		 push	 4
  002bb	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  002be	8b 82 9c 16 00
	00		 mov	 eax, DWORD PTR [edx+5788]
  002c4	50		 push	 eax
  002c5	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  002c8	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  002cb	52		 push	 edx
  002cc	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  002cf	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  002d2	ff d1		 call	 ecx
  002d4	83 c4 0c	 add	 esp, 12			; 0000000cH
  002d7	3b f4		 cmp	 esi, esp
  002d9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002de	89 45 f4	 mov	 DWORD PTR _overlay$[ebp], eax

; 330  :     s->pending_buf = (uchf *) overlay;

  002e1	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  002e4	8b 45 f4	 mov	 eax, DWORD PTR _overlay$[ebp]
  002e7	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 331  :     s->pending_buf_size = (ulg)s->lit_bufsize * (sizeof(ush)+2L);

  002ea	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  002ed	8b 91 9c 16 00
	00		 mov	 edx, DWORD PTR [ecx+5788]
  002f3	c1 e2 02	 shl	 edx, 2
  002f6	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  002f9	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 332  : 
; 333  :     if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||

  002fc	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  002ff	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  00303	74 1b		 je	 SHORT $LN16@deflateIni
  00305	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00308	83 7a 40 00	 cmp	 DWORD PTR [edx+64], 0
  0030c	74 12		 je	 SHORT $LN16@deflateIni
  0030e	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00311	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  00315	74 09		 je	 SHORT $LN16@deflateIni
  00317	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0031a	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  0031e	75 2e		 jne	 SHORT $LN15@deflateIni
$LN16@deflateIni:

; 334  :         s->pending_buf == Z_NULL) {
; 335  :         s->status = FINISH_STATE;

  00320	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00323	c7 42 04 9a 02
	00 00		 mov	 DWORD PTR [edx+4], 666	; 0000029aH

; 336  :         strm->msg = ERR_MSG(Z_MEM_ERROR);

  0032a	b8 04 00 00 00	 mov	 eax, 4
  0032f	6b c8 06	 imul	 ecx, eax, 6
  00332	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00335	8b 81 00 00 00
	00		 mov	 eax, DWORD PTR _z_errmsg[ecx]
  0033b	89 42 18	 mov	 DWORD PTR [edx+24], eax

; 337  :         deflateEnd (strm);

  0033e	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00341	51		 push	 ecx
  00342	e8 00 00 00 00	 call	 _deflateEnd@4

; 338  :         return Z_MEM_ERROR;

  00347	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0034c	eb 5d		 jmp	 SHORT $LN1@deflateIni
$LN15@deflateIni:

; 339  :     }
; 340  :     s->d_buf = overlay + s->lit_bufsize/sizeof(ush);

  0034e	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00351	8b 82 9c 16 00
	00		 mov	 eax, DWORD PTR [edx+5788]
  00357	d1 e8		 shr	 eax, 1
  00359	8b 4d f4	 mov	 ecx, DWORD PTR _overlay$[ebp]
  0035c	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0035f	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00362	89 90 a4 16 00
	00		 mov	 DWORD PTR [eax+5796], edx

; 341  :     s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;

  00368	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0036b	6b 91 9c 16 00
	00 03		 imul	 edx, DWORD PTR [ecx+5788], 3
  00372	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00375	03 50 08	 add	 edx, DWORD PTR [eax+8]
  00378	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0037b	89 91 98 16 00
	00		 mov	 DWORD PTR [ecx+5784], edx

; 342  : 
; 343  :     s->level = level;

  00381	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00384	8b 45 0c	 mov	 eax, DWORD PTR _level$[ebp]
  00387	89 82 84 00 00
	00		 mov	 DWORD PTR [edx+132], eax

; 344  :     s->strategy = strategy;

  0038d	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00390	8b 55 1c	 mov	 edx, DWORD PTR _strategy$[ebp]
  00393	89 91 88 00 00
	00		 mov	 DWORD PTR [ecx+136], edx

; 345  :     s->method = (Byte)method;

  00399	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0039c	8a 4d 10	 mov	 cl, BYTE PTR _method$[ebp]
  0039f	88 48 24	 mov	 BYTE PTR [eax+36], cl

; 346  : 
; 347  :     return deflateReset(strm);

  003a2	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  003a5	52		 push	 edx
  003a6	e8 00 00 00 00	 call	 _deflateReset@4
$LN1@deflateIni:

; 348  : }

  003ab	5e		 pop	 esi
  003ac	83 c4 0c	 add	 esp, 12			; 0000000cH
  003af	3b ec		 cmp	 ebp, esp
  003b1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003b6	8b e5		 mov	 esp, ebp
  003b8	5d		 pop	 ebp
  003b9	c2 20 00	 ret	 32			; 00000020H
_deflateInit2_@32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflateStateCheck
_TEXT	SEGMENT
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_deflateStateCheck PROC					; COMDAT

; 355  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00010	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 356  :     deflate_state *s;
; 357  :     if (strm == Z_NULL ||
; 358  :         strm->zalloc == (alloc_func)0 || strm->zfree == (free_func)0)

  00015	83 7d 08 00	 cmp	 DWORD PTR _strm$[ebp], 0
  00019	74 12		 je	 SHORT $LN3@deflateSta
  0001b	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0001e	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  00022	74 09		 je	 SHORT $LN3@deflateSta
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00027	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  0002b	75 07		 jne	 SHORT $LN2@deflateSta
$LN3@deflateSta:

; 359  :         return 1;

  0002d	b8 01 00 00 00	 mov	 eax, 1
  00032	eb 6d		 jmp	 SHORT $LN1@deflateSta
$LN2@deflateSta:

; 360  :     s = strm->state;

  00034	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00037	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0003a	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 361  :     if (s == Z_NULL || s->strm != strm || (s->status != INIT_STATE &&

  0003d	83 7d fc 00	 cmp	 DWORD PTR _s$[ebp], 0
  00041	74 55		 je	 SHORT $LN5@deflateSta
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00046	8b 11		 mov	 edx, DWORD PTR [ecx]
  00048	3b 55 08	 cmp	 edx, DWORD PTR _strm$[ebp]
  0004b	75 4b		 jne	 SHORT $LN5@deflateSta
  0004d	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00050	83 78 04 2a	 cmp	 DWORD PTR [eax+4], 42	; 0000002aH
  00054	74 49		 je	 SHORT $LN4@deflateSta
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00059	83 79 04 39	 cmp	 DWORD PTR [ecx+4], 57	; 00000039H
  0005d	74 40		 je	 SHORT $LN4@deflateSta
  0005f	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00062	83 7a 04 45	 cmp	 DWORD PTR [edx+4], 69	; 00000045H
  00066	74 37		 je	 SHORT $LN4@deflateSta
  00068	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0006b	83 78 04 49	 cmp	 DWORD PTR [eax+4], 73	; 00000049H
  0006f	74 2e		 je	 SHORT $LN4@deflateSta
  00071	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00074	83 79 04 5b	 cmp	 DWORD PTR [ecx+4], 91	; 0000005bH
  00078	74 25		 je	 SHORT $LN4@deflateSta
  0007a	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0007d	83 7a 04 67	 cmp	 DWORD PTR [edx+4], 103	; 00000067H
  00081	74 1c		 je	 SHORT $LN4@deflateSta
  00083	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00086	83 78 04 71	 cmp	 DWORD PTR [eax+4], 113	; 00000071H
  0008a	74 13		 je	 SHORT $LN4@deflateSta
  0008c	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0008f	81 79 04 9a 02
	00 00		 cmp	 DWORD PTR [ecx+4], 666	; 0000029aH
  00096	74 07		 je	 SHORT $LN4@deflateSta
$LN5@deflateSta:

; 362  : #ifdef GZIP
; 363  :                                            s->status != GZIP_STATE &&
; 364  : #endif
; 365  :                                            s->status != EXTRA_STATE &&
; 366  :                                            s->status != NAME_STATE &&
; 367  :                                            s->status != COMMENT_STATE &&
; 368  :                                            s->status != HCRC_STATE &&
; 369  :                                            s->status != BUSY_STATE &&
; 370  :                                            s->status != FINISH_STATE))
; 371  :         return 1;

  00098	b8 01 00 00 00	 mov	 eax, 1
  0009d	eb 02		 jmp	 SHORT $LN1@deflateSta
$LN4@deflateSta:

; 372  :     return 0;

  0009f	33 c0		 xor	 eax, eax
$LN1@deflateSta:

; 373  : }

  000a1	83 c4 04	 add	 esp, 4
  000a4	3b ec		 cmp	 ebp, esp
  000a6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
_deflateStateCheck ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflateSetDictionary@12
_TEXT	SEGMENT
_next$ = -24						; size = 4
_avail$ = -20						; size = 4
_wrap$ = -16						; size = 4
_n$ = -12						; size = 4
_str$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_dictionary$ = 12					; size = 4
_dictLength$ = 16					; size = 4
_deflateSetDictionary@12 PROC				; COMDAT

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00012	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00015	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00018	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001b	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 381  :     deflate_state *s;
; 382  :     uInt str, n;
; 383  :     int wrap;
; 384  :     unsigned avail;
; 385  :     z_const unsigned char *next;
; 386  : 
; 387  :     if (deflateStateCheck(strm) || dictionary == Z_NULL)

  00028	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _deflateStateCheck
  00031	83 c4 04	 add	 esp, 4
  00034	85 c0		 test	 eax, eax
  00036	75 06		 jne	 SHORT $LN8@deflateSet
  00038	83 7d 0c 00	 cmp	 DWORD PTR _dictionary$[ebp], 0
  0003c	75 0a		 jne	 SHORT $LN7@deflateSet
$LN8@deflateSet:

; 388  :         return Z_STREAM_ERROR;

  0003e	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00043	e9 37 02 00 00	 jmp	 $LN1@deflateSet
$LN7@deflateSet:

; 389  :     s = strm->state;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0004b	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0004e	89 55 fc	 mov	 DWORD PTR _s$[ebp], edx

; 390  :     wrap = s->wrap;

  00051	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00054	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00057	89 4d f0	 mov	 DWORD PTR _wrap$[ebp], ecx

; 391  :     if (wrap == 2 || (wrap == 1 && s->status != INIT_STATE) || s->lookahead)

  0005a	83 7d f0 02	 cmp	 DWORD PTR _wrap$[ebp], 2
  0005e	74 18		 je	 SHORT $LN10@deflateSet
  00060	83 7d f0 01	 cmp	 DWORD PTR _wrap$[ebp], 1
  00064	75 09		 jne	 SHORT $LN11@deflateSet
  00066	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00069	83 7a 04 2a	 cmp	 DWORD PTR [edx+4], 42	; 0000002aH
  0006d	75 09		 jne	 SHORT $LN10@deflateSet
$LN11@deflateSet:
  0006f	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00072	83 78 74 00	 cmp	 DWORD PTR [eax+116], 0
  00076	74 0a		 je	 SHORT $LN9@deflateSet
$LN10@deflateSet:

; 392  :         return Z_STREAM_ERROR;

  00078	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0007d	e9 fd 01 00 00	 jmp	 $LN1@deflateSet
$LN9@deflateSet:

; 393  : 
; 394  :     /* when using zlib wrappers, compute Adler-32 for provided dictionary */
; 395  :     if (wrap == 1)

  00082	83 7d f0 01	 cmp	 DWORD PTR _wrap$[ebp], 1
  00086	75 1a		 jne	 SHORT $LN12@deflateSet

; 396  :         strm->adler = adler32(strm->adler, dictionary, dictLength);

  00088	8b 4d 10	 mov	 ecx, DWORD PTR _dictLength$[ebp]
  0008b	51		 push	 ecx
  0008c	8b 55 0c	 mov	 edx, DWORD PTR _dictionary$[ebp]
  0008f	52		 push	 edx
  00090	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00093	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00096	51		 push	 ecx
  00097	e8 00 00 00 00	 call	 _adler32@12
  0009c	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0009f	89 42 30	 mov	 DWORD PTR [edx+48], eax
$LN12@deflateSet:

; 397  :     s->wrap = 0;                    /* avoid computing Adler-32 in read_buf */

  000a2	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000a5	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 398  : 
; 399  :     /* if dictionary would fill window, just replace the history */
; 400  :     if (dictLength >= s->w_size) {

  000ac	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000af	8b 55 10	 mov	 edx, DWORD PTR _dictLength$[ebp]
  000b2	3b 51 2c	 cmp	 edx, DWORD PTR [ecx+44]
  000b5	72 6e		 jb	 SHORT $LN13@deflateSet

; 401  :         if (wrap == 0) {            /* already empty otherwise */

  000b7	83 7d f0 00	 cmp	 DWORD PTR _wrap$[ebp], 0
  000bb	75 50		 jne	 SHORT $LN14@deflateSet

; 402  :             CLEAR_HASH(s);

  000bd	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000c0	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  000c3	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  000c6	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  000c9	33 d2		 xor	 edx, edx
  000cb	66 89 54 48 fe	 mov	 WORD PTR [eax+ecx*2-2], dx
  000d0	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000d3	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  000d6	8d 54 09 fe	 lea	 edx, DWORD PTR [ecx+ecx-2]
  000da	52		 push	 edx
  000db	6a 00		 push	 0
  000dd	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000e0	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  000e3	51		 push	 ecx
  000e4	e8 00 00 00 00	 call	 _memset
  000e9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 403  :             s->strstart = 0;

  000ec	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  000ef	c7 42 6c 00 00
	00 00		 mov	 DWORD PTR [edx+108], 0

; 404  :             s->block_start = 0L;

  000f6	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000f9	c7 40 5c 00 00
	00 00		 mov	 DWORD PTR [eax+92], 0

; 405  :             s->insert = 0;

  00100	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00103	c7 81 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+5812], 0
$LN14@deflateSet:

; 406  :         }
; 407  :         dictionary += dictLength - s->w_size;  /* use the tail */

  0010d	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00110	8b 45 10	 mov	 eax, DWORD PTR _dictLength$[ebp]
  00113	2b 42 2c	 sub	 eax, DWORD PTR [edx+44]
  00116	03 45 0c	 add	 eax, DWORD PTR _dictionary$[ebp]
  00119	89 45 0c	 mov	 DWORD PTR _dictionary$[ebp], eax

; 408  :         dictLength = s->w_size;

  0011c	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0011f	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00122	89 55 10	 mov	 DWORD PTR _dictLength$[ebp], edx
$LN13@deflateSet:

; 409  :     }
; 410  : 
; 411  :     /* insert dictionary into window and hash */
; 412  :     avail = strm->avail_in;

  00125	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	89 4d ec	 mov	 DWORD PTR _avail$[ebp], ecx

; 413  :     next = strm->next_in;

  0012e	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00131	8b 02		 mov	 eax, DWORD PTR [edx]
  00133	89 45 e8	 mov	 DWORD PTR _next$[ebp], eax

; 414  :     strm->avail_in = dictLength;

  00136	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00139	8b 55 10	 mov	 edx, DWORD PTR _dictLength$[ebp]
  0013c	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 415  :     strm->next_in = (z_const Bytef *)dictionary;

  0013f	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00142	8b 4d 0c	 mov	 ecx, DWORD PTR _dictionary$[ebp]
  00145	89 08		 mov	 DWORD PTR [eax], ecx

; 416  :     fill_window(s);

  00147	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0014a	52		 push	 edx
  0014b	e8 00 00 00 00	 call	 _fill_window
  00150	83 c4 04	 add	 esp, 4
$LN2@deflateSet:

; 417  :     while (s->lookahead >= MIN_MATCH) {

  00153	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00156	83 78 74 03	 cmp	 DWORD PTR [eax+116], 3
  0015a	0f 82 ae 00 00
	00		 jb	 $LN3@deflateSet

; 418  :         str = s->strstart;

  00160	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00163	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  00166	89 55 f8	 mov	 DWORD PTR _str$[ebp], edx

; 419  :         n = s->lookahead - (MIN_MATCH-1);

  00169	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0016c	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0016f	83 e9 02	 sub	 ecx, 2
  00172	89 4d f4	 mov	 DWORD PTR _n$[ebp], ecx
$LN6@deflateSet:

; 420  :         do {
; 421  :             UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);

  00175	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00178	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0017b	8b 52 48	 mov	 edx, DWORD PTR [edx+72]
  0017e	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00181	d3 e2		 shl	 edx, cl
  00183	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00186	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00189	8b 45 f8	 mov	 eax, DWORD PTR _str$[ebp]
  0018c	0f b6 4c 01 02	 movzx	 ecx, BYTE PTR [ecx+eax+2]
  00191	33 d1		 xor	 edx, ecx
  00193	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00196	23 50 54	 and	 edx, DWORD PTR [eax+84]
  00199	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0019c	89 51 48	 mov	 DWORD PTR [ecx+72], edx

; 422  : #ifndef FASTEST
; 423  :             s->prev[str & s->w_mask] = s->head[s->ins_h];

  0019f	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  001a2	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  001a5	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  001a8	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  001ab	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  001ae	8b 75 f8	 mov	 esi, DWORD PTR _str$[ebp]
  001b1	23 71 34	 and	 esi, DWORD PTR [ecx+52]
  001b4	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  001b7	8b 49 40	 mov	 ecx, DWORD PTR [ecx+64]
  001ba	66 8b 14 42	 mov	 dx, WORD PTR [edx+eax*2]
  001be	66 89 14 71	 mov	 WORD PTR [ecx+esi*2], dx

; 424  : #endif
; 425  :             s->head[s->ins_h] = (Pos)str;

  001c2	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  001c5	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  001c8	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  001cb	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  001ce	66 8b 55 f8	 mov	 dx, WORD PTR _str$[ebp]
  001d2	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 426  :             str++;

  001d6	8b 45 f8	 mov	 eax, DWORD PTR _str$[ebp]
  001d9	83 c0 01	 add	 eax, 1
  001dc	89 45 f8	 mov	 DWORD PTR _str$[ebp], eax

; 427  :         } while (--n);

  001df	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  001e2	83 e9 01	 sub	 ecx, 1
  001e5	89 4d f4	 mov	 DWORD PTR _n$[ebp], ecx
  001e8	75 8b		 jne	 SHORT $LN6@deflateSet

; 428  :         s->strstart = str;

  001ea	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  001ed	8b 45 f8	 mov	 eax, DWORD PTR _str$[ebp]
  001f0	89 42 6c	 mov	 DWORD PTR [edx+108], eax

; 429  :         s->lookahead = MIN_MATCH-1;

  001f3	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  001f6	c7 41 74 02 00
	00 00		 mov	 DWORD PTR [ecx+116], 2

; 430  :         fill_window(s);

  001fd	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00200	52		 push	 edx
  00201	e8 00 00 00 00	 call	 _fill_window
  00206	83 c4 04	 add	 esp, 4

; 431  :     }

  00209	e9 45 ff ff ff	 jmp	 $LN2@deflateSet
$LN3@deflateSet:

; 432  :     s->strstart += s->lookahead;

  0020e	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00211	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  00214	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00217	03 4a 74	 add	 ecx, DWORD PTR [edx+116]
  0021a	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0021d	89 48 6c	 mov	 DWORD PTR [eax+108], ecx

; 433  :     s->block_start = (long)s->strstart;

  00220	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00223	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00226	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00229	89 41 5c	 mov	 DWORD PTR [ecx+92], eax

; 434  :     s->insert = s->lookahead;

  0022c	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0022f	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00232	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  00235	89 81 b4 16 00
	00		 mov	 DWORD PTR [ecx+5812], eax

; 435  :     s->lookahead = 0;

  0023b	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0023e	c7 41 74 00 00
	00 00		 mov	 DWORD PTR [ecx+116], 0

; 436  :     s->match_length = s->prev_length = MIN_MATCH-1;

  00245	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00248	c7 42 78 02 00
	00 00		 mov	 DWORD PTR [edx+120], 2
  0024f	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00252	c7 40 60 02 00
	00 00		 mov	 DWORD PTR [eax+96], 2

; 437  :     s->match_available = 0;

  00259	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0025c	c7 41 68 00 00
	00 00		 mov	 DWORD PTR [ecx+104], 0

; 438  :     strm->next_in = next;

  00263	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00266	8b 45 e8	 mov	 eax, DWORD PTR _next$[ebp]
  00269	89 02		 mov	 DWORD PTR [edx], eax

; 439  :     strm->avail_in = avail;

  0026b	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0026e	8b 55 ec	 mov	 edx, DWORD PTR _avail$[ebp]
  00271	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 440  :     s->wrap = wrap;

  00274	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00277	8b 4d f0	 mov	 ecx, DWORD PTR _wrap$[ebp]
  0027a	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 441  :     return Z_OK;

  0027d	33 c0		 xor	 eax, eax
$LN1@deflateSet:

; 442  : }

  0027f	5e		 pop	 esi
  00280	83 c4 18	 add	 esp, 24			; 00000018H
  00283	3b ec		 cmp	 ebp, esp
  00285	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0028a	8b e5		 mov	 esp, ebp
  0028c	5d		 pop	 ebp
  0028d	c2 0c 00	 ret	 12			; 0000000cH
_deflateSetDictionary@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflateGetDictionary@12
_TEXT	SEGMENT
_len$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_dictionary$ = 12					; size = 4
_dictLength$ = 16					; size = 4
_deflateGetDictionary@12 PROC				; COMDAT

; 449  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00019	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 450  :     deflate_state *s;
; 451  :     uInt len;
; 452  : 
; 453  :     if (deflateStateCheck(strm))

  0001e	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 _deflateStateCheck
  00027	83 c4 04	 add	 esp, 4
  0002a	85 c0		 test	 eax, eax
  0002c	74 07		 je	 SHORT $LN2@deflateGet

; 454  :         return Z_STREAM_ERROR;

  0002e	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00033	eb 6e		 jmp	 SHORT $LN1@deflateGet
$LN2@deflateGet:

; 455  :     s = strm->state;

  00035	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00038	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0003b	89 55 fc	 mov	 DWORD PTR _s$[ebp], edx

; 456  :     len = s->strstart + s->lookahead;

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00041	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  00044	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00047	03 4a 74	 add	 ecx, DWORD PTR [edx+116]
  0004a	89 4d f8	 mov	 DWORD PTR _len$[ebp], ecx

; 457  :     if (len > s->w_size)

  0004d	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00050	8b 4d f8	 mov	 ecx, DWORD PTR _len$[ebp]
  00053	3b 48 2c	 cmp	 ecx, DWORD PTR [eax+44]
  00056	76 09		 jbe	 SHORT $LN3@deflateGet

; 458  :         len = s->w_size;

  00058	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0005b	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0005e	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax
$LN3@deflateGet:

; 459  :     if (dictionary != Z_NULL && len)

  00061	83 7d 0c 00	 cmp	 DWORD PTR _dictionary$[ebp], 0
  00065	74 2c		 je	 SHORT $LN4@deflateGet
  00067	83 7d f8 00	 cmp	 DWORD PTR _len$[ebp], 0
  0006b	74 26		 je	 SHORT $LN4@deflateGet

; 460  :         zmemcpy(dictionary, s->window + s->strstart + s->lookahead - len, len);

  0006d	8b 4d f8	 mov	 ecx, DWORD PTR _len$[ebp]
  00070	51		 push	 ecx
  00071	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00074	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00077	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0007a	03 41 6c	 add	 eax, DWORD PTR [ecx+108]
  0007d	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00080	03 42 74	 add	 eax, DWORD PTR [edx+116]
  00083	2b 45 f8	 sub	 eax, DWORD PTR _len$[ebp]
  00086	50		 push	 eax
  00087	8b 45 0c	 mov	 eax, DWORD PTR _dictionary$[ebp]
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 _memcpy
  00090	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@deflateGet:

; 461  :     if (dictLength != Z_NULL)

  00093	83 7d 10 00	 cmp	 DWORD PTR _dictLength$[ebp], 0
  00097	74 08		 je	 SHORT $LN5@deflateGet

; 462  :         *dictLength = len;

  00099	8b 4d 10	 mov	 ecx, DWORD PTR _dictLength$[ebp]
  0009c	8b 55 f8	 mov	 edx, DWORD PTR _len$[ebp]
  0009f	89 11		 mov	 DWORD PTR [ecx], edx
$LN5@deflateGet:

; 463  :     return Z_OK;

  000a1	33 c0		 xor	 eax, eax
$LN1@deflateGet:

; 464  : }

  000a3	83 c4 08	 add	 esp, 8
  000a6	3b ec		 cmp	 ebp, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c2 0c 00	 ret	 12			; 0000000cH
_deflateGetDictionary@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflateResetKeep@4
_TEXT	SEGMENT
tv130 = -16						; size = 4
tv85 = -12						; size = 4
tv86 = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_deflateResetKeep@4 PROC				; COMDAT

; 469  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 470  :     deflate_state *s;
; 471  : 
; 472  :     if (deflateStateCheck(strm)) {

  00021	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _deflateStateCheck
  0002a	83 c4 04	 add	 esp, 4
  0002d	85 c0		 test	 eax, eax
  0002f	74 0a		 je	 SHORT $LN2@deflateRes

; 473  :         return Z_STREAM_ERROR;

  00031	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00036	e9 e0 00 00 00	 jmp	 $LN1@deflateRes
$LN2@deflateRes:

; 474  :     }
; 475  : 
; 476  :     strm->total_in = strm->total_out = 0;

  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0003e	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00045	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00048	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 477  :     strm->msg = Z_NULL; /* use zfree if we ever allocate msg dynamically */

  0004f	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00052	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 478  :     strm->data_type = Z_UNKNOWN;

  00059	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0005c	c7 41 2c 02 00
	00 00		 mov	 DWORD PTR [ecx+44], 2

; 479  : 
; 480  :     s = (deflate_state *)strm->state;

  00063	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00066	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00069	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 481  :     s->pending = 0;

  0006c	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0006f	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 482  :     s->pending_out = s->pending_buf;

  00076	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00079	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0007c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0007f	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 483  : 
; 484  :     if (s->wrap < 0) {

  00082	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00085	83 7a 18 00	 cmp	 DWORD PTR [edx+24], 0
  00089	7d 0e		 jge	 SHORT $LN3@deflateRes

; 485  :         s->wrap = -s->wrap; /* was made negative by deflate(..., Z_FINISH); */

  0008b	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0008e	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00091	f7 d9		 neg	 ecx
  00093	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00096	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
$LN3@deflateRes:

; 486  :     }
; 487  :     s->status =

  00099	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0009c	83 78 18 02	 cmp	 DWORD PTR [eax+24], 2
  000a0	75 09		 jne	 SHORT $LN7@deflateRes
  000a2	c7 45 f8 39 00
	00 00		 mov	 DWORD PTR tv86[ebp], 57	; 00000039H
  000a9	eb 1f		 jmp	 SHORT $LN8@deflateRes
$LN7@deflateRes:
  000ab	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000ae	83 79 18 00	 cmp	 DWORD PTR [ecx+24], 0
  000b2	74 09		 je	 SHORT $LN5@deflateRes
  000b4	c7 45 f4 2a 00
	00 00		 mov	 DWORD PTR tv85[ebp], 42	; 0000002aH
  000bb	eb 07		 jmp	 SHORT $LN6@deflateRes
$LN5@deflateRes:
  000bd	c7 45 f4 71 00
	00 00		 mov	 DWORD PTR tv85[ebp], 113 ; 00000071H
$LN6@deflateRes:
  000c4	8b 55 f4	 mov	 edx, DWORD PTR tv85[ebp]
  000c7	89 55 f8	 mov	 DWORD PTR tv86[ebp], edx
$LN8@deflateRes:
  000ca	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000cd	8b 4d f8	 mov	 ecx, DWORD PTR tv86[ebp]
  000d0	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 488  : #ifdef GZIP
; 489  :         s->wrap == 2 ? GZIP_STATE :
; 490  : #endif
; 491  :         s->wrap ? INIT_STATE : BUSY_STATE;
; 492  :     strm->adler =

  000d3	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  000d6	83 7a 18 02	 cmp	 DWORD PTR [edx+24], 2
  000da	75 10		 jne	 SHORT $LN9@deflateRes
  000dc	6a 00		 push	 0
  000de	6a 00		 push	 0
  000e0	6a 00		 push	 0
  000e2	e8 00 00 00 00	 call	 _crc32@12
  000e7	89 45 f0	 mov	 DWORD PTR tv130[ebp], eax
  000ea	eb 0e		 jmp	 SHORT $LN10@deflateRes
$LN9@deflateRes:
  000ec	6a 00		 push	 0
  000ee	6a 00		 push	 0
  000f0	6a 00		 push	 0
  000f2	e8 00 00 00 00	 call	 _adler32@12
  000f7	89 45 f0	 mov	 DWORD PTR tv130[ebp], eax
$LN10@deflateRes:
  000fa	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  000fd	8b 4d f0	 mov	 ecx, DWORD PTR tv130[ebp]
  00100	89 48 30	 mov	 DWORD PTR [eax+48], ecx

; 493  : #ifdef GZIP
; 494  :         s->wrap == 2 ? crc32(0L, Z_NULL, 0) :
; 495  : #endif
; 496  :         adler32(0L, Z_NULL, 0);
; 497  :     s->last_flush = Z_NO_FLUSH;

  00103	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00106	c7 42 28 00 00
	00 00		 mov	 DWORD PTR [edx+40], 0

; 498  : 
; 499  :     _tr_init(s);

  0010d	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00110	50		 push	 eax
  00111	e8 00 00 00 00	 call	 __tr_init
  00116	83 c4 04	 add	 esp, 4

; 500  : 
; 501  :     return Z_OK;

  00119	33 c0		 xor	 eax, eax
$LN1@deflateRes:

; 502  : }

  0011b	83 c4 10	 add	 esp, 16			; 00000010H
  0011e	3b ec		 cmp	 ebp, esp
  00120	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00125	8b e5		 mov	 esp, ebp
  00127	5d		 pop	 ebp
  00128	c2 04 00	 ret	 4
_deflateResetKeep@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflateReset@4
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_strm$ = 8						; size = 4
_deflateReset@4 PROC					; COMDAT

; 507  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00010	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 508  :     int ret;
; 509  : 
; 510  :     ret = deflateResetKeep(strm);

  00015	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 _deflateResetKeep@4
  0001e	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 511  :     if (ret == Z_OK)

  00021	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00025	75 0f		 jne	 SHORT $LN2@deflateRes

; 512  :         lm_init(strm->state);

  00027	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0002a	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0002d	52		 push	 edx
  0002e	e8 00 00 00 00	 call	 _lm_init
  00033	83 c4 04	 add	 esp, 4
$LN2@deflateRes:

; 513  :     return ret;

  00036	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]

; 514  : }

  00039	83 c4 04	 add	 esp, 4
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
_deflateReset@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflateSetHeader@8
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_head$ = 12						; size = 4
_deflateSetHeader@8 PROC				; COMDAT

; 520  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 521  :     if (deflateStateCheck(strm) || strm->state->wrap != 2)

  0000d	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 _deflateStateCheck
  00016	83 c4 04	 add	 esp, 4
  00019	85 c0		 test	 eax, eax
  0001b	75 0c		 jne	 SHORT $LN3@deflateSet
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00020	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00023	83 7a 18 02	 cmp	 DWORD PTR [edx+24], 2
  00027	74 07		 je	 SHORT $LN2@deflateSet
$LN3@deflateSet:

; 522  :         return Z_STREAM_ERROR;

  00029	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0002e	eb 0e		 jmp	 SHORT $LN1@deflateSet
$LN2@deflateSet:

; 523  :     strm->state->gzhead = head;

  00030	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00033	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00036	8b 55 0c	 mov	 edx, DWORD PTR _head$[ebp]
  00039	89 51 1c	 mov	 DWORD PTR [ecx+28], edx

; 524  :     return Z_OK;

  0003c	33 c0		 xor	 eax, eax
$LN1@deflateSet:

; 525  : }

  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
_deflateSetHeader@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflatePending@12
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_pending$ = 12						; size = 4
_bits$ = 16						; size = 4
_deflatePending@12 PROC					; COMDAT

; 532  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 533  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  0000d	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 _deflateStateCheck
  00016	83 c4 04	 add	 esp, 4
  00019	85 c0		 test	 eax, eax
  0001b	74 07		 je	 SHORT $LN2@deflatePen
  0001d	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00022	eb 2d		 jmp	 SHORT $LN1@deflatePen
$LN2@deflatePen:

; 534  :     if (pending != Z_NULL)

  00024	83 7d 0c 00	 cmp	 DWORD PTR _pending$[ebp], 0
  00028	74 0e		 je	 SHORT $LN3@deflatePen

; 535  :         *pending = strm->state->pending;

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0002d	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00030	8b 45 0c	 mov	 eax, DWORD PTR _pending$[ebp]
  00033	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  00036	89 08		 mov	 DWORD PTR [eax], ecx
$LN3@deflatePen:

; 536  :     if (bits != Z_NULL)

  00038	83 7d 10 00	 cmp	 DWORD PTR _bits$[ebp], 0
  0003c	74 11		 je	 SHORT $LN4@deflatePen

; 537  :         *bits = strm->state->bi_valid;

  0003e	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00041	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00044	8b 4d 10	 mov	 ecx, DWORD PTR _bits$[ebp]
  00047	8b 90 bc 16 00
	00		 mov	 edx, DWORD PTR [eax+5820]
  0004d	89 11		 mov	 DWORD PTR [ecx], edx
$LN4@deflatePen:

; 538  :     return Z_OK;

  0004f	33 c0		 xor	 eax, eax
$LN1@deflatePen:

; 539  : }

  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	5d		 pop	 ebp
  00059	c2 0c 00	 ret	 12			; 0000000cH
_deflatePending@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflatePrime@12
_TEXT	SEGMENT
_put$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_bits$ = 12						; size = 4
_value$ = 16						; size = 4
_deflatePrime@12 PROC					; COMDAT

; 546  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00019	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 547  :     deflate_state *s;
; 548  :     int put;
; 549  : 
; 550  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  0001e	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 _deflateStateCheck
  00027	83 c4 04	 add	 esp, 4
  0002a	85 c0		 test	 eax, eax
  0002c	74 0a		 je	 SHORT $LN5@deflatePri
  0002e	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00033	e9 b7 00 00 00	 jmp	 $LN1@deflatePri
$LN5@deflatePri:

; 551  :     s = strm->state;

  00038	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0003b	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0003e	89 55 fc	 mov	 DWORD PTR _s$[ebp], edx

; 552  :     if ((Bytef *)(s->d_buf) < s->pending_out + ((Buf_size + 7) >> 3))

  00041	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00044	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00047	83 c1 02	 add	 ecx, 2
  0004a	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0004d	39 8a a4 16 00
	00		 cmp	 DWORD PTR [edx+5796], ecx
  00053	73 0a		 jae	 SHORT $LN4@deflatePri

; 553  :         return Z_BUF_ERROR;

  00055	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  0005a	e9 90 00 00 00	 jmp	 $LN1@deflatePri
$LN4@deflatePri:

; 554  :     do {
; 555  :         put = Buf_size - s->bi_valid;

  0005f	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00062	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00067	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  0006d	89 4d f8	 mov	 DWORD PTR _put$[ebp], ecx

; 556  :         if (put > bits)

  00070	8b 55 f8	 mov	 edx, DWORD PTR _put$[ebp]
  00073	3b 55 0c	 cmp	 edx, DWORD PTR _bits$[ebp]
  00076	7e 06		 jle	 SHORT $LN7@deflatePri

; 557  :             put = bits;

  00078	8b 45 0c	 mov	 eax, DWORD PTR _bits$[ebp]
  0007b	89 45 f8	 mov	 DWORD PTR _put$[ebp], eax
$LN7@deflatePri:

; 558  :         s->bi_buf |= (ush)((value & ((1 << put) - 1)) << s->bi_valid);

  0007e	ba 01 00 00 00	 mov	 edx, 1
  00083	8b 4d f8	 mov	 ecx, DWORD PTR _put$[ebp]
  00086	d3 e2		 shl	 edx, cl
  00088	83 ea 01	 sub	 edx, 1
  0008b	23 55 10	 and	 edx, DWORD PTR _value$[ebp]
  0008e	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00091	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00097	d3 e2		 shl	 edx, cl
  00099	0f b7 ca	 movzx	 ecx, dx
  0009c	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0009f	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  000a6	0b c1		 or	 eax, ecx
  000a8	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000ab	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax

; 559  :         s->bi_valid += put;

  000b2	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  000b5	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  000bb	03 45 f8	 add	 eax, DWORD PTR _put$[ebp]
  000be	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000c1	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax

; 560  :         _tr_flush_bits(s);

  000c7	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  000ca	52		 push	 edx
  000cb	e8 00 00 00 00	 call	 __tr_flush_bits
  000d0	83 c4 04	 add	 esp, 4

; 561  :         value >>= put;

  000d3	8b 45 10	 mov	 eax, DWORD PTR _value$[ebp]
  000d6	8b 4d f8	 mov	 ecx, DWORD PTR _put$[ebp]
  000d9	d3 f8		 sar	 eax, cl
  000db	89 45 10	 mov	 DWORD PTR _value$[ebp], eax

; 562  :         bits -= put;

  000de	8b 4d 0c	 mov	 ecx, DWORD PTR _bits$[ebp]
  000e1	2b 4d f8	 sub	 ecx, DWORD PTR _put$[ebp]
  000e4	89 4d 0c	 mov	 DWORD PTR _bits$[ebp], ecx

; 563  :     } while (bits);

  000e7	0f 85 72 ff ff
	ff		 jne	 $LN4@deflatePri

; 564  :     return Z_OK;

  000ed	33 c0		 xor	 eax, eax
$LN1@deflatePri:

; 565  : }

  000ef	83 c4 08	 add	 esp, 8
  000f2	3b ec		 cmp	 ebp, esp
  000f4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c2 0c 00	 ret	 12			; 0000000cH
_deflatePrime@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflateParams@12
_TEXT	SEGMENT
_err$1 = -12						; size = 4
_func$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_strategy$ = 16						; size = 4
_deflateParams@12 PROC					; COMDAT

; 572  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 573  :     deflate_state *s;
; 574  :     compress_func func;
; 575  : 
; 576  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00025	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 _deflateStateCheck
  0002e	83 c4 04	 add	 esp, 4
  00031	85 c0		 test	 eax, eax
  00033	74 0a		 je	 SHORT $LN2@deflatePar
  00035	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0003a	e9 8a 01 00 00	 jmp	 $LN1@deflatePar
$LN2@deflatePar:

; 577  :     s = strm->state;

  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00042	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00045	89 55 fc	 mov	 DWORD PTR _s$[ebp], edx

; 578  : 
; 579  : #ifdef FASTEST
; 580  :     if (level != 0) level = 1;
; 581  : #else
; 582  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;

  00048	83 7d 0c ff	 cmp	 DWORD PTR _level$[ebp], -1
  0004c	75 07		 jne	 SHORT $LN3@deflatePar
  0004e	c7 45 0c 06 00
	00 00		 mov	 DWORD PTR _level$[ebp], 6
$LN3@deflatePar:

; 583  : #endif
; 584  :     if (level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {

  00055	83 7d 0c 00	 cmp	 DWORD PTR _level$[ebp], 0
  00059	7c 12		 jl	 SHORT $LN5@deflatePar
  0005b	83 7d 0c 09	 cmp	 DWORD PTR _level$[ebp], 9
  0005f	7f 0c		 jg	 SHORT $LN5@deflatePar
  00061	83 7d 10 00	 cmp	 DWORD PTR _strategy$[ebp], 0
  00065	7c 06		 jl	 SHORT $LN5@deflatePar
  00067	83 7d 10 04	 cmp	 DWORD PTR _strategy$[ebp], 4
  0006b	7e 0a		 jle	 SHORT $LN4@deflatePar
$LN5@deflatePar:

; 585  :         return Z_STREAM_ERROR;

  0006d	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00072	e9 52 01 00 00	 jmp	 $LN1@deflatePar
$LN4@deflatePar:

; 586  :     }
; 587  :     func = configuration_table[s->level].func;

  00077	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0007a	6b 88 84 00 00
	00 0c		 imul	 ecx, DWORD PTR [eax+132], 12
  00081	8b 91 08 00 00
	00		 mov	 edx, DWORD PTR _configuration_table[ecx+8]
  00087	89 55 f8	 mov	 DWORD PTR _func$[ebp], edx

; 588  : 
; 589  :     if ((strategy != s->strategy || func != configuration_table[level].func) &&

  0008a	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0008d	8b 4d 10	 mov	 ecx, DWORD PTR _strategy$[ebp]
  00090	3b 88 88 00 00
	00		 cmp	 ecx, DWORD PTR [eax+136]
  00096	75 0f		 jne	 SHORT $LN7@deflatePar
  00098	6b 55 0c 0c	 imul	 edx, DWORD PTR _level$[ebp], 12
  0009c	8b 45 f8	 mov	 eax, DWORD PTR _func$[ebp]
  0009f	3b 82 08 00 00
	00		 cmp	 eax, DWORD PTR _configuration_table[edx+8]
  000a5	74 3b		 je	 SHORT $LN6@deflatePar
$LN7@deflatePar:
  000a7	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000aa	83 b9 c0 16 00
	00 00		 cmp	 DWORD PTR [ecx+5824], 0
  000b1	74 2f		 je	 SHORT $LN6@deflatePar

; 590  :         s->high_water) {
; 591  :         /* Flush the last buffer: */
; 592  :         int err = deflate(strm, Z_BLOCK);

  000b3	6a 05		 push	 5
  000b5	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  000b8	52		 push	 edx
  000b9	e8 00 00 00 00	 call	 _deflate@8
  000be	89 45 f4	 mov	 DWORD PTR _err$1[ebp], eax

; 593  :         if (err == Z_STREAM_ERROR)

  000c1	83 7d f4 fe	 cmp	 DWORD PTR _err$1[ebp], -2 ; fffffffeH
  000c5	75 08		 jne	 SHORT $LN8@deflatePar

; 594  :             return err;

  000c7	8b 45 f4	 mov	 eax, DWORD PTR _err$1[ebp]
  000ca	e9 fa 00 00 00	 jmp	 $LN1@deflatePar
$LN8@deflatePar:

; 595  :         if (strm->avail_out == 0)

  000cf	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  000d2	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  000d6	75 0a		 jne	 SHORT $LN6@deflatePar

; 596  :             return Z_BUF_ERROR;

  000d8	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  000dd	e9 e7 00 00 00	 jmp	 $LN1@deflatePar
$LN6@deflatePar:

; 597  :     }
; 598  :     if (s->level != level) {

  000e2	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000e5	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  000eb	3b 55 0c	 cmp	 edx, DWORD PTR _level$[ebp]
  000ee	0f 84 c7 00 00
	00		 je	 $LN10@deflatePar

; 599  :         if (s->level == 0 && s->matches != 0) {

  000f4	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000f7	83 b8 84 00 00
	00 00		 cmp	 DWORD PTR [eax+132], 0
  000fe	75 62		 jne	 SHORT $LN11@deflatePar
  00100	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00103	83 b9 b0 16 00
	00 00		 cmp	 DWORD PTR [ecx+5808], 0
  0010a	74 56		 je	 SHORT $LN11@deflatePar

; 600  :             if (s->matches == 1)

  0010c	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0010f	83 ba b0 16 00
	00 01		 cmp	 DWORD PTR [edx+5808], 1
  00116	75 0e		 jne	 SHORT $LN12@deflatePar

; 601  :                 slide_hash(s);

  00118	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0011b	50		 push	 eax
  0011c	e8 00 00 00 00	 call	 _slide_hash
  00121	83 c4 04	 add	 esp, 4
  00124	eb 13		 jmp	 SHORT $LN13@deflatePar
$LN12@deflatePar:

; 602  :             else
; 603  :                 CLEAR_HASH(s);

  00126	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00129	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  0012c	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0012f	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00132	33 c0		 xor	 eax, eax
  00134	66 89 44 51 fe	 mov	 WORD PTR [ecx+edx*2-2], ax
$LN13@deflatePar:
  00139	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0013c	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  0013f	8d 44 12 fe	 lea	 eax, DWORD PTR [edx+edx-2]
  00143	50		 push	 eax
  00144	6a 00		 push	 0
  00146	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00149	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  0014c	52		 push	 edx
  0014d	e8 00 00 00 00	 call	 _memset
  00152	83 c4 0c	 add	 esp, 12			; 0000000cH

; 604  :             s->matches = 0;

  00155	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00158	c7 80 b0 16 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+5808], 0
$LN11@deflatePar:

; 605  :         }
; 606  :         s->level = level;

  00162	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00165	8b 55 0c	 mov	 edx, DWORD PTR _level$[ebp]
  00168	89 91 84 00 00
	00		 mov	 DWORD PTR [ecx+132], edx

; 607  :         s->max_lazy_match   = configuration_table[level].max_lazy;

  0016e	6b 45 0c 0c	 imul	 eax, DWORD PTR _level$[ebp], 12
  00172	0f b7 88 02 00
	00 00		 movzx	 ecx, WORD PTR _configuration_table[eax+2]
  00179	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0017c	89 8a 80 00 00
	00		 mov	 DWORD PTR [edx+128], ecx

; 608  :         s->good_match       = configuration_table[level].good_length;

  00182	6b 45 0c 0c	 imul	 eax, DWORD PTR _level$[ebp], 12
  00186	0f b7 88 00 00
	00 00		 movzx	 ecx, WORD PTR _configuration_table[eax]
  0018d	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00190	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 609  :         s->nice_match       = configuration_table[level].nice_length;

  00196	6b 45 0c 0c	 imul	 eax, DWORD PTR _level$[ebp], 12
  0019a	0f b7 88 04 00
	00 00		 movzx	 ecx, WORD PTR _configuration_table[eax+4]
  001a1	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  001a4	89 8a 90 00 00
	00		 mov	 DWORD PTR [edx+144], ecx

; 610  :         s->max_chain_length = configuration_table[level].max_chain;

  001aa	6b 45 0c 0c	 imul	 eax, DWORD PTR _level$[ebp], 12
  001ae	0f b7 88 06 00
	00 00		 movzx	 ecx, WORD PTR _configuration_table[eax+6]
  001b5	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  001b8	89 4a 7c	 mov	 DWORD PTR [edx+124], ecx
$LN10@deflatePar:

; 611  :     }
; 612  :     s->strategy = strategy;

  001bb	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  001be	8b 4d 10	 mov	 ecx, DWORD PTR _strategy$[ebp]
  001c1	89 88 88 00 00
	00		 mov	 DWORD PTR [eax+136], ecx

; 613  :     return Z_OK;

  001c7	33 c0		 xor	 eax, eax
$LN1@deflatePar:

; 614  : }

  001c9	83 c4 0c	 add	 esp, 12			; 0000000cH
  001cc	3b ec		 cmp	 ebp, esp
  001ce	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d3	8b e5		 mov	 esp, ebp
  001d5	5d		 pop	 ebp
  001d6	c2 0c 00	 ret	 12			; 0000000cH
_deflateParams@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflateTune@20
_TEXT	SEGMENT
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_good_length$ = 12					; size = 4
_max_lazy$ = 16						; size = 4
_nice_length$ = 20					; size = 4
_max_chain$ = 24					; size = 4
_deflateTune@20 PROC					; COMDAT

; 623  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00010	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 624  :     deflate_state *s;
; 625  : 
; 626  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00015	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 _deflateStateCheck
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c0		 test	 eax, eax
  00023	74 07		 je	 SHORT $LN2@deflateTun
  00025	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0002a	eb 38		 jmp	 SHORT $LN1@deflateTun
$LN2@deflateTun:

; 627  :     s = strm->state;

  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0002f	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00032	89 55 fc	 mov	 DWORD PTR _s$[ebp], edx

; 628  :     s->good_match = (uInt)good_length;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00038	8b 4d 0c	 mov	 ecx, DWORD PTR _good_length$[ebp]
  0003b	89 88 8c 00 00
	00		 mov	 DWORD PTR [eax+140], ecx

; 629  :     s->max_lazy_match = (uInt)max_lazy;

  00041	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00044	8b 45 10	 mov	 eax, DWORD PTR _max_lazy$[ebp]
  00047	89 82 80 00 00
	00		 mov	 DWORD PTR [edx+128], eax

; 630  :     s->nice_match = nice_length;

  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00050	8b 55 14	 mov	 edx, DWORD PTR _nice_length$[ebp]
  00053	89 91 90 00 00
	00		 mov	 DWORD PTR [ecx+144], edx

; 631  :     s->max_chain_length = (uInt)max_chain;

  00059	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0005c	8b 4d 18	 mov	 ecx, DWORD PTR _max_chain$[ebp]
  0005f	89 48 7c	 mov	 DWORD PTR [eax+124], ecx

; 632  :     return Z_OK;

  00062	33 c0		 xor	 eax, eax
$LN1@deflateTun:

; 633  : }

  00064	83 c4 04	 add	 esp, 4
  00067	3b ec		 cmp	 ebp, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c2 14 00	 ret	 20			; 00000014H
_deflateTune@20 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflateBound@8
_TEXT	SEGMENT
tv136 = -26						; size = 1
tv128 = -25						; size = 1
tv80 = -24						; size = 4
tv77 = -20						; size = 4
_str$1 = -16						; size = 4
_wraplen$ = -12						; size = 4
_complen$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_sourceLen$ = 12					; size = 4
_deflateBound@8 PROC					; COMDAT

; 655  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 656  :     deflate_state *s;
; 657  :     uLong complen, wraplen;
; 658  : 
; 659  :     /* conservative upper bound for compressed data */
; 660  :     complen = sourceLen +

  0002a	8b 45 0c	 mov	 eax, DWORD PTR _sourceLen$[ebp]
  0002d	83 c0 07	 add	 eax, 7
  00030	c1 e8 03	 shr	 eax, 3
  00033	03 45 0c	 add	 eax, DWORD PTR _sourceLen$[ebp]
  00036	8b 4d 0c	 mov	 ecx, DWORD PTR _sourceLen$[ebp]
  00039	83 c1 3f	 add	 ecx, 63			; 0000003fH
  0003c	c1 e9 06	 shr	 ecx, 6
  0003f	8d 54 08 05	 lea	 edx, DWORD PTR [eax+ecx+5]
  00043	89 55 f8	 mov	 DWORD PTR _complen$[ebp], edx

; 661  :               ((sourceLen + 7) >> 3) + ((sourceLen + 63) >> 6) + 5;
; 662  : 
; 663  :     /* if can't get parameters, return conservative bound plus zlib wrapper */
; 664  :     if (deflateStateCheck(strm))

  00046	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 _deflateStateCheck
  0004f	83 c4 04	 add	 esp, 4
  00052	85 c0		 test	 eax, eax
  00054	74 0b		 je	 SHORT $LN10@deflateBou

; 665  :         return complen + 6;

  00056	8b 45 f8	 mov	 eax, DWORD PTR _complen$[ebp]
  00059	83 c0 06	 add	 eax, 6
  0005c	e9 4d 01 00 00	 jmp	 $LN1@deflateBou
$LN10@deflateBou:

; 666  : 
; 667  :     /* compute wrapper length */
; 668  :     s = strm->state;

  00061	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00064	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00067	89 55 fc	 mov	 DWORD PTR _s$[ebp], edx

; 669  :     switch (s->wrap) {

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0006d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00070	89 4d ec	 mov	 DWORD PTR tv77[ebp], ecx
  00073	83 7d ec 00	 cmp	 DWORD PTR tv77[ebp], 0
  00077	74 11		 je	 SHORT $LN11@deflateBou
  00079	83 7d ec 01	 cmp	 DWORD PTR tv77[ebp], 1
  0007d	74 17		 je	 SHORT $LN12@deflateBou
  0007f	83 7d ec 02	 cmp	 DWORD PTR tv77[ebp], 2
  00083	74 38		 je	 SHORT $LN13@deflateBou
  00085	e9 e5 00 00 00	 jmp	 $LN19@deflateBou
$LN11@deflateBou:

; 670  :     case 0:                                 /* raw deflate */
; 671  :         wraplen = 0;

  0008a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _wraplen$[ebp], 0

; 672  :         break;

  00091	e9 e0 00 00 00	 jmp	 $LN2@deflateBou
$LN12@deflateBou:

; 673  :     case 1:                                 /* zlib wrapper */
; 674  :         wraplen = 6 + (s->strstart ? 4 : 0);

  00096	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00099	83 7a 6c 00	 cmp	 DWORD PTR [edx+108], 0
  0009d	74 09		 je	 SHORT $LN23@deflateBou
  0009f	c7 45 e8 04 00
	00 00		 mov	 DWORD PTR tv80[ebp], 4
  000a6	eb 07		 jmp	 SHORT $LN24@deflateBou
$LN23@deflateBou:
  000a8	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$LN24@deflateBou:
  000af	8b 45 e8	 mov	 eax, DWORD PTR tv80[ebp]
  000b2	83 c0 06	 add	 eax, 6
  000b5	89 45 f4	 mov	 DWORD PTR _wraplen$[ebp], eax

; 675  :         break;

  000b8	e9 b9 00 00 00	 jmp	 $LN2@deflateBou
$LN13@deflateBou:

; 676  : #ifdef GZIP
; 677  :     case 2:                                 /* gzip wrapper */
; 678  :         wraplen = 18;

  000bd	c7 45 f4 12 00
	00 00		 mov	 DWORD PTR _wraplen$[ebp], 18 ; 00000012H

; 679  :         if (s->gzhead != Z_NULL) {          /* user-supplied gzip header */

  000c4	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000c7	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
  000cb	0f 84 9c 00 00
	00		 je	 $LN14@deflateBou

; 680  :             Bytef *str;
; 681  :             if (s->gzhead->extra != Z_NULL)

  000d1	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  000d4	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  000d7	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  000db	74 13		 je	 SHORT $LN15@deflateBou

; 682  :                 wraplen += 2 + s->gzhead->extra_len;

  000dd	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000e0	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000e3	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000e6	8b 4d f4	 mov	 ecx, DWORD PTR _wraplen$[ebp]
  000e9	8d 54 01 02	 lea	 edx, DWORD PTR [ecx+eax+2]
  000ed	89 55 f4	 mov	 DWORD PTR _wraplen$[ebp], edx
$LN15@deflateBou:

; 683  :             str = s->gzhead->name;

  000f0	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000f3	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  000f6	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000f9	89 55 f0	 mov	 DWORD PTR _str$1[ebp], edx

; 684  :             if (str != Z_NULL)

  000fc	83 7d f0 00	 cmp	 DWORD PTR _str$1[ebp], 0
  00100	74 22		 je	 SHORT $LN16@deflateBou
$LN6@deflateBou:

; 685  :                 do {
; 686  :                     wraplen++;

  00102	8b 45 f4	 mov	 eax, DWORD PTR _wraplen$[ebp]
  00105	83 c0 01	 add	 eax, 1
  00108	89 45 f4	 mov	 DWORD PTR _wraplen$[ebp], eax

; 687  :                 } while (*str++);

  0010b	8b 4d f0	 mov	 ecx, DWORD PTR _str$1[ebp]
  0010e	8a 11		 mov	 dl, BYTE PTR [ecx]
  00110	88 55 e7	 mov	 BYTE PTR tv128[ebp], dl
  00113	8b 45 f0	 mov	 eax, DWORD PTR _str$1[ebp]
  00116	83 c0 01	 add	 eax, 1
  00119	89 45 f0	 mov	 DWORD PTR _str$1[ebp], eax
  0011c	0f b6 4d e7	 movzx	 ecx, BYTE PTR tv128[ebp]
  00120	85 c9		 test	 ecx, ecx
  00122	75 de		 jne	 SHORT $LN6@deflateBou
$LN16@deflateBou:

; 688  :             str = s->gzhead->comment;

  00124	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00127	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0012a	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0012d	89 4d f0	 mov	 DWORD PTR _str$1[ebp], ecx

; 689  :             if (str != Z_NULL)

  00130	83 7d f0 00	 cmp	 DWORD PTR _str$1[ebp], 0
  00134	74 22		 je	 SHORT $LN17@deflateBou
$LN9@deflateBou:

; 690  :                 do {
; 691  :                     wraplen++;

  00136	8b 55 f4	 mov	 edx, DWORD PTR _wraplen$[ebp]
  00139	83 c2 01	 add	 edx, 1
  0013c	89 55 f4	 mov	 DWORD PTR _wraplen$[ebp], edx

; 692  :                 } while (*str++);

  0013f	8b 45 f0	 mov	 eax, DWORD PTR _str$1[ebp]
  00142	8a 08		 mov	 cl, BYTE PTR [eax]
  00144	88 4d e6	 mov	 BYTE PTR tv136[ebp], cl
  00147	8b 55 f0	 mov	 edx, DWORD PTR _str$1[ebp]
  0014a	83 c2 01	 add	 edx, 1
  0014d	89 55 f0	 mov	 DWORD PTR _str$1[ebp], edx
  00150	0f b6 45 e6	 movzx	 eax, BYTE PTR tv136[ebp]
  00154	85 c0		 test	 eax, eax
  00156	75 de		 jne	 SHORT $LN9@deflateBou
$LN17@deflateBou:

; 693  :             if (s->gzhead->hcrc)

  00158	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0015b	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0015e	83 7a 2c 00	 cmp	 DWORD PTR [edx+44], 0
  00162	74 09		 je	 SHORT $LN14@deflateBou

; 694  :                 wraplen += 2;

  00164	8b 45 f4	 mov	 eax, DWORD PTR _wraplen$[ebp]
  00167	83 c0 02	 add	 eax, 2
  0016a	89 45 f4	 mov	 DWORD PTR _wraplen$[ebp], eax
$LN14@deflateBou:

; 695  :         }
; 696  :         break;

  0016d	eb 07		 jmp	 SHORT $LN2@deflateBou
$LN19@deflateBou:

; 697  : #endif
; 698  :     default:                                /* for compiler happiness */
; 699  :         wraplen = 6;

  0016f	c7 45 f4 06 00
	00 00		 mov	 DWORD PTR _wraplen$[ebp], 6
$LN2@deflateBou:

; 700  :     }
; 701  : 
; 702  :     /* if not default parameters, return conservative bound */
; 703  :     if (s->w_bits != 15 || s->hash_bits != 8 + 7)

  00176	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00179	83 79 30 0f	 cmp	 DWORD PTR [ecx+48], 15	; 0000000fH
  0017d	75 09		 jne	 SHORT $LN21@deflateBou
  0017f	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00182	83 7a 50 0f	 cmp	 DWORD PTR [edx+80], 15	; 0000000fH
  00186	74 08		 je	 SHORT $LN20@deflateBou
$LN21@deflateBou:

; 704  :         return complen + wraplen;

  00188	8b 45 f8	 mov	 eax, DWORD PTR _complen$[ebp]
  0018b	03 45 f4	 add	 eax, DWORD PTR _wraplen$[ebp]
  0018e	eb 1e		 jmp	 SHORT $LN1@deflateBou
$LN20@deflateBou:

; 705  : 
; 706  :     /* default settings: return tight bound for that case */
; 707  :     return sourceLen + (sourceLen >> 12) + (sourceLen >> 14) +

  00190	8b 45 0c	 mov	 eax, DWORD PTR _sourceLen$[ebp]
  00193	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  00196	03 45 0c	 add	 eax, DWORD PTR _sourceLen$[ebp]
  00199	8b 4d 0c	 mov	 ecx, DWORD PTR _sourceLen$[ebp]
  0019c	c1 e9 0e	 shr	 ecx, 14			; 0000000eH
  0019f	03 c1		 add	 eax, ecx
  001a1	8b 55 0c	 mov	 edx, DWORD PTR _sourceLen$[ebp]
  001a4	c1 ea 19	 shr	 edx, 25			; 00000019H
  001a7	03 45 f4	 add	 eax, DWORD PTR _wraplen$[ebp]
  001aa	8d 44 02 07	 lea	 eax, DWORD PTR [edx+eax+7]
$LN1@deflateBou:

; 708  :            (sourceLen >> 25) + 13 - 6 + wraplen;
; 709  : }

  001ae	83 c4 1c	 add	 esp, 28			; 0000001cH
  001b1	3b ec		 cmp	 ebp, esp
  001b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b8	8b e5		 mov	 esp, ebp
  001ba	5d		 pop	 ebp
  001bb	c2 08 00	 ret	 8
_deflateBound@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _putShortMSB
_TEXT	SEGMENT
_s$ = 8							; size = 4
_b$ = 12						; size = 4
_putShortMSB PROC					; COMDAT

; 719  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 720  :     put_byte(s, (Byte)(b >> 8));

  0000d	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  00010	c1 e8 08	 shr	 eax, 8
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00016	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00019	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0001c	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0001f	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  00022	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00025	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00028	83 c0 01	 add	 eax, 1
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0002e	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 721  :     put_byte(s, (Byte)(b & 0xff));

  00031	8b 55 0c	 mov	 edx, DWORD PTR _b$[ebp]
  00034	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0003a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0003d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00040	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00043	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00046	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  00049	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0004c	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0004f	83 c2 01	 add	 edx, 1
  00052	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00055	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 722  : }

  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_putShortMSB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _flush_pending
_TEXT	SEGMENT
_s$ = -8						; size = 4
_len$ = -4						; size = 4
_strm$ = 8						; size = 4
_flush_pending PROC					; COMDAT

; 732  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00019	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 733  :     unsigned len;
; 734  :     deflate_state *s = strm->state;

  0001e	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00021	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00024	89 4d f8	 mov	 DWORD PTR _s$[ebp], ecx

; 735  : 
; 736  :     _tr_flush_bits(s);

  00027	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  0002a	52		 push	 edx
  0002b	e8 00 00 00 00	 call	 __tr_flush_bits
  00030	83 c4 04	 add	 esp, 4

; 737  :     len = s->pending;

  00033	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00036	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00039	89 4d fc	 mov	 DWORD PTR _len$[ebp], ecx

; 738  :     if (len > strm->avail_out) len = strm->avail_out;

  0003c	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0003f	8b 45 fc	 mov	 eax, DWORD PTR _len$[ebp]
  00042	3b 42 10	 cmp	 eax, DWORD PTR [edx+16]
  00045	76 09		 jbe	 SHORT $LN2@flush_pend
  00047	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0004a	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0004d	89 55 fc	 mov	 DWORD PTR _len$[ebp], edx
$LN2@flush_pend:

; 739  :     if (len == 0) return;

  00050	83 7d fc 00	 cmp	 DWORD PTR _len$[ebp], 0
  00054	75 02		 jne	 SHORT $LN3@flush_pend
  00056	eb 7a		 jmp	 SHORT $LN1@flush_pend
$LN3@flush_pend:

; 740  : 
; 741  :     zmemcpy(strm->next_out, s->pending_out, len);

  00058	8b 45 fc	 mov	 eax, DWORD PTR _len$[ebp]
  0005b	50		 push	 eax
  0005c	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  0005f	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00062	52		 push	 edx
  00063	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00066	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00069	51		 push	 ecx
  0006a	e8 00 00 00 00	 call	 _memcpy
  0006f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 742  :     strm->next_out  += len;

  00072	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00075	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00078	03 45 fc	 add	 eax, DWORD PTR _len$[ebp]
  0007b	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0007e	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 743  :     s->pending_out  += len;

  00081	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00084	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00087	03 45 fc	 add	 eax, DWORD PTR _len$[ebp]
  0008a	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  0008d	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 744  :     strm->total_out += len;

  00090	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00093	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00096	03 45 fc	 add	 eax, DWORD PTR _len$[ebp]
  00099	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0009c	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 745  :     strm->avail_out -= len;

  0009f	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  000a2	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000a5	2b 45 fc	 sub	 eax, DWORD PTR _len$[ebp]
  000a8	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  000ab	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 746  :     s->pending      -= len;

  000ae	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  000b1	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000b4	2b 45 fc	 sub	 eax, DWORD PTR _len$[ebp]
  000b7	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  000ba	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 747  :     if (s->pending == 0) {

  000bd	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  000c0	83 7a 14 00	 cmp	 DWORD PTR [edx+20], 0
  000c4	75 0c		 jne	 SHORT $LN1@flush_pend

; 748  :         s->pending_out = s->pending_buf;

  000c6	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  000c9	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  000cc	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000cf	89 50 10	 mov	 DWORD PTR [eax+16], edx
$LN1@flush_pend:

; 749  :     }
; 750  : }

  000d2	83 c4 08	 add	 esp, 8
  000d5	3b ec		 cmp	 ebp, esp
  000d7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000dc	8b e5		 mov	 esp, ebp
  000de	5d		 pop	 ebp
  000df	c3		 ret	 0
_flush_pending ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflateCopy@8
_TEXT	SEGMENT
_overlay$ = -12						; size = 4
_ss$ = -8						; size = 4
_ds$ = -4						; size = 4
_dest$ = 8						; size = 4
_source$ = 12						; size = 4
_deflateCopy@8 PROC					; COMDAT

; 1105 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00021	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1106 : #ifdef MAXSEG_64K
; 1107 :     return Z_STREAM_ERROR;
; 1108 : #else
; 1109 :     deflate_state *ds;
; 1110 :     deflate_state *ss;
; 1111 :     ushf *overlay;
; 1112 : 
; 1113 : 
; 1114 :     if (deflateStateCheck(source) || dest == Z_NULL) {

  00026	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 _deflateStateCheck
  0002f	83 c4 04	 add	 esp, 4
  00032	85 c0		 test	 eax, eax
  00034	75 06		 jne	 SHORT $LN3@deflateCop
  00036	83 7d 08 00	 cmp	 DWORD PTR _dest$[ebp], 0
  0003a	75 0a		 jne	 SHORT $LN2@deflateCop
$LN3@deflateCop:

; 1115 :         return Z_STREAM_ERROR;

  0003c	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00041	e9 5a 02 00 00	 jmp	 $LN1@deflateCop
$LN2@deflateCop:

; 1116 :     }
; 1117 : 
; 1118 :     ss = source->state;

  00046	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  00049	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0004c	89 55 f8	 mov	 DWORD PTR _ss$[ebp], edx

; 1119 : 
; 1120 :     zmemcpy((voidpf)dest, (voidpf)source, sizeof(z_stream));

  0004f	6a 38		 push	 56			; 00000038H
  00051	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  00054	50		 push	 eax
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  00058	51		 push	 ecx
  00059	e8 00 00 00 00	 call	 _memcpy
  0005e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1121 : 
; 1122 :     ds = (deflate_state *) ZALLOC(dest, 1, sizeof(deflate_state));

  00061	8b f4		 mov	 esi, esp
  00063	68 c4 16 00 00	 push	 5828			; 000016c4H
  00068	6a 01		 push	 1
  0006a	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  0006d	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00070	50		 push	 eax
  00071	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  00074	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00077	ff d2		 call	 edx
  00079	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007c	3b f4		 cmp	 esi, esp
  0007e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00083	89 45 fc	 mov	 DWORD PTR _ds$[ebp], eax

; 1123 :     if (ds == Z_NULL) return Z_MEM_ERROR;

  00086	83 7d fc 00	 cmp	 DWORD PTR _ds$[ebp], 0
  0008a	75 0a		 jne	 SHORT $LN4@deflateCop
  0008c	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00091	e9 0a 02 00 00	 jmp	 $LN1@deflateCop
$LN4@deflateCop:

; 1124 :     dest->state = (struct internal_state FAR *) ds;

  00096	8b 45 08	 mov	 eax, DWORD PTR _dest$[ebp]
  00099	8b 4d fc	 mov	 ecx, DWORD PTR _ds$[ebp]
  0009c	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 1125 :     zmemcpy((voidpf)ds, (voidpf)ss, sizeof(deflate_state));

  0009f	68 c4 16 00 00	 push	 5828			; 000016c4H
  000a4	8b 55 f8	 mov	 edx, DWORD PTR _ss$[ebp]
  000a7	52		 push	 edx
  000a8	8b 45 fc	 mov	 eax, DWORD PTR _ds$[ebp]
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 _memcpy
  000b1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1126 :     ds->strm = dest;

  000b4	8b 4d fc	 mov	 ecx, DWORD PTR _ds$[ebp]
  000b7	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  000ba	89 11		 mov	 DWORD PTR [ecx], edx

; 1127 : 
; 1128 :     ds->window = (Bytef *) ZALLOC(dest, ds->w_size, 2*sizeof(Byte));

  000bc	8b f4		 mov	 esi, esp
  000be	6a 02		 push	 2
  000c0	8b 45 fc	 mov	 eax, DWORD PTR _ds$[ebp]
  000c3	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  000c6	51		 push	 ecx
  000c7	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  000ca	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  000cd	50		 push	 eax
  000ce	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  000d1	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000d4	ff d2		 call	 edx
  000d6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d9	3b f4		 cmp	 esi, esp
  000db	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e0	8b 4d fc	 mov	 ecx, DWORD PTR _ds$[ebp]
  000e3	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 1129 :     ds->prev   = (Posf *)  ZALLOC(dest, ds->w_size, sizeof(Pos));

  000e6	8b f4		 mov	 esi, esp
  000e8	6a 02		 push	 2
  000ea	8b 55 fc	 mov	 edx, DWORD PTR _ds$[ebp]
  000ed	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  000f0	50		 push	 eax
  000f1	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  000f4	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  000f7	52		 push	 edx
  000f8	8b 45 08	 mov	 eax, DWORD PTR _dest$[ebp]
  000fb	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  000fe	ff d1		 call	 ecx
  00100	83 c4 0c	 add	 esp, 12			; 0000000cH
  00103	3b f4		 cmp	 esi, esp
  00105	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010a	8b 55 fc	 mov	 edx, DWORD PTR _ds$[ebp]
  0010d	89 42 40	 mov	 DWORD PTR [edx+64], eax

; 1130 :     ds->head   = (Posf *)  ZALLOC(dest, ds->hash_size, sizeof(Pos));

  00110	8b f4		 mov	 esi, esp
  00112	6a 02		 push	 2
  00114	8b 45 fc	 mov	 eax, DWORD PTR _ds$[ebp]
  00117	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0011a	51		 push	 ecx
  0011b	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  0011e	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00121	50		 push	 eax
  00122	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  00125	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00128	ff d2		 call	 edx
  0012a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0012d	3b f4		 cmp	 esi, esp
  0012f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00134	8b 4d fc	 mov	 ecx, DWORD PTR _ds$[ebp]
  00137	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 1131 :     overlay = (ushf *) ZALLOC(dest, ds->lit_bufsize, sizeof(ush)+2);

  0013a	8b f4		 mov	 esi, esp
  0013c	6a 04		 push	 4
  0013e	8b 55 fc	 mov	 edx, DWORD PTR _ds$[ebp]
  00141	8b 82 9c 16 00
	00		 mov	 eax, DWORD PTR [edx+5788]
  00147	50		 push	 eax
  00148	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  0014b	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  0014e	52		 push	 edx
  0014f	8b 45 08	 mov	 eax, DWORD PTR _dest$[ebp]
  00152	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00155	ff d1		 call	 ecx
  00157	83 c4 0c	 add	 esp, 12			; 0000000cH
  0015a	3b f4		 cmp	 esi, esp
  0015c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00161	89 45 f4	 mov	 DWORD PTR _overlay$[ebp], eax

; 1132 :     ds->pending_buf = (uchf *) overlay;

  00164	8b 55 fc	 mov	 edx, DWORD PTR _ds$[ebp]
  00167	8b 45 f4	 mov	 eax, DWORD PTR _overlay$[ebp]
  0016a	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1133 : 
; 1134 :     if (ds->window == Z_NULL || ds->prev == Z_NULL || ds->head == Z_NULL ||

  0016d	8b 4d fc	 mov	 ecx, DWORD PTR _ds$[ebp]
  00170	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  00174	74 1b		 je	 SHORT $LN6@deflateCop
  00176	8b 55 fc	 mov	 edx, DWORD PTR _ds$[ebp]
  00179	83 7a 40 00	 cmp	 DWORD PTR [edx+64], 0
  0017d	74 12		 je	 SHORT $LN6@deflateCop
  0017f	8b 45 fc	 mov	 eax, DWORD PTR _ds$[ebp]
  00182	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  00186	74 09		 je	 SHORT $LN6@deflateCop
  00188	8b 4d fc	 mov	 ecx, DWORD PTR _ds$[ebp]
  0018b	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  0018f	75 13		 jne	 SHORT $LN5@deflateCop
$LN6@deflateCop:

; 1135 :         ds->pending_buf == Z_NULL) {
; 1136 :         deflateEnd (dest);

  00191	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  00194	52		 push	 edx
  00195	e8 00 00 00 00	 call	 _deflateEnd@4

; 1137 :         return Z_MEM_ERROR;

  0019a	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0019f	e9 fc 00 00 00	 jmp	 $LN1@deflateCop
$LN5@deflateCop:

; 1138 :     }
; 1139 :     /* following zmemcpy do not work for 16-bit MSDOS */
; 1140 :     zmemcpy(ds->window, ss->window, ds->w_size * 2 * sizeof(Byte));

  001a4	8b 45 fc	 mov	 eax, DWORD PTR _ds$[ebp]
  001a7	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  001aa	d1 e1		 shl	 ecx, 1
  001ac	51		 push	 ecx
  001ad	8b 55 f8	 mov	 edx, DWORD PTR _ss$[ebp]
  001b0	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  001b3	50		 push	 eax
  001b4	8b 4d fc	 mov	 ecx, DWORD PTR _ds$[ebp]
  001b7	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  001ba	52		 push	 edx
  001bb	e8 00 00 00 00	 call	 _memcpy
  001c0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1141 :     zmemcpy((voidpf)ds->prev, (voidpf)ss->prev, ds->w_size * sizeof(Pos));

  001c3	8b 45 fc	 mov	 eax, DWORD PTR _ds$[ebp]
  001c6	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  001c9	d1 e1		 shl	 ecx, 1
  001cb	51		 push	 ecx
  001cc	8b 55 f8	 mov	 edx, DWORD PTR _ss$[ebp]
  001cf	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  001d2	50		 push	 eax
  001d3	8b 4d fc	 mov	 ecx, DWORD PTR _ds$[ebp]
  001d6	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  001d9	52		 push	 edx
  001da	e8 00 00 00 00	 call	 _memcpy
  001df	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1142 :     zmemcpy((voidpf)ds->head, (voidpf)ss->head, ds->hash_size * sizeof(Pos));

  001e2	8b 45 fc	 mov	 eax, DWORD PTR _ds$[ebp]
  001e5	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  001e8	d1 e1		 shl	 ecx, 1
  001ea	51		 push	 ecx
  001eb	8b 55 f8	 mov	 edx, DWORD PTR _ss$[ebp]
  001ee	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  001f1	50		 push	 eax
  001f2	8b 4d fc	 mov	 ecx, DWORD PTR _ds$[ebp]
  001f5	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  001f8	52		 push	 edx
  001f9	e8 00 00 00 00	 call	 _memcpy
  001fe	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1143 :     zmemcpy(ds->pending_buf, ss->pending_buf, (uInt)ds->pending_buf_size);

  00201	8b 45 fc	 mov	 eax, DWORD PTR _ds$[ebp]
  00204	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00207	51		 push	 ecx
  00208	8b 55 f8	 mov	 edx, DWORD PTR _ss$[ebp]
  0020b	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0020e	50		 push	 eax
  0020f	8b 4d fc	 mov	 ecx, DWORD PTR _ds$[ebp]
  00212	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00215	52		 push	 edx
  00216	e8 00 00 00 00	 call	 _memcpy
  0021b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1144 : 
; 1145 :     ds->pending_out = ds->pending_buf + (ss->pending_out - ss->pending_buf);

  0021e	8b 45 f8	 mov	 eax, DWORD PTR _ss$[ebp]
  00221	8b 4d f8	 mov	 ecx, DWORD PTR _ss$[ebp]
  00224	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00227	2b 51 08	 sub	 edx, DWORD PTR [ecx+8]
  0022a	8b 45 fc	 mov	 eax, DWORD PTR _ds$[ebp]
  0022d	03 50 08	 add	 edx, DWORD PTR [eax+8]
  00230	8b 4d fc	 mov	 ecx, DWORD PTR _ds$[ebp]
  00233	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 1146 :     ds->d_buf = overlay + ds->lit_bufsize/sizeof(ush);

  00236	8b 55 fc	 mov	 edx, DWORD PTR _ds$[ebp]
  00239	8b 82 9c 16 00
	00		 mov	 eax, DWORD PTR [edx+5788]
  0023f	d1 e8		 shr	 eax, 1
  00241	8b 4d f4	 mov	 ecx, DWORD PTR _overlay$[ebp]
  00244	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00247	8b 45 fc	 mov	 eax, DWORD PTR _ds$[ebp]
  0024a	89 90 a4 16 00
	00		 mov	 DWORD PTR [eax+5796], edx

; 1147 :     ds->l_buf = ds->pending_buf + (1+sizeof(ush))*ds->lit_bufsize;

  00250	8b 4d fc	 mov	 ecx, DWORD PTR _ds$[ebp]
  00253	6b 91 9c 16 00
	00 03		 imul	 edx, DWORD PTR [ecx+5788], 3
  0025a	8b 45 fc	 mov	 eax, DWORD PTR _ds$[ebp]
  0025d	03 50 08	 add	 edx, DWORD PTR [eax+8]
  00260	8b 4d fc	 mov	 ecx, DWORD PTR _ds$[ebp]
  00263	89 91 98 16 00
	00		 mov	 DWORD PTR [ecx+5784], edx

; 1148 : 
; 1149 :     ds->l_desc.dyn_tree = ds->dyn_ltree;

  00269	8b 55 fc	 mov	 edx, DWORD PTR _ds$[ebp]
  0026c	81 c2 94 00 00
	00		 add	 edx, 148		; 00000094H
  00272	8b 45 fc	 mov	 eax, DWORD PTR _ds$[ebp]
  00275	89 90 18 0b 00
	00		 mov	 DWORD PTR [eax+2840], edx

; 1150 :     ds->d_desc.dyn_tree = ds->dyn_dtree;

  0027b	8b 4d fc	 mov	 ecx, DWORD PTR _ds$[ebp]
  0027e	81 c1 88 09 00
	00		 add	 ecx, 2440		; 00000988H
  00284	8b 55 fc	 mov	 edx, DWORD PTR _ds$[ebp]
  00287	89 8a 24 0b 00
	00		 mov	 DWORD PTR [edx+2852], ecx

; 1151 :     ds->bl_desc.dyn_tree = ds->bl_tree;

  0028d	8b 45 fc	 mov	 eax, DWORD PTR _ds$[ebp]
  00290	05 7c 0a 00 00	 add	 eax, 2684		; 00000a7cH
  00295	8b 4d fc	 mov	 ecx, DWORD PTR _ds$[ebp]
  00298	89 81 30 0b 00
	00		 mov	 DWORD PTR [ecx+2864], eax

; 1152 : 
; 1153 :     return Z_OK;

  0029e	33 c0		 xor	 eax, eax
$LN1@deflateCop:

; 1154 : #endif /* MAXSEG_64K */
; 1155 : }

  002a0	5e		 pop	 esi
  002a1	83 c4 0c	 add	 esp, 12			; 0000000cH
  002a4	3b ec		 cmp	 ebp, esp
  002a6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002ab	8b e5		 mov	 esp, ebp
  002ad	5d		 pop	 ebp
  002ae	c2 08 00	 ret	 8
_deflateCopy@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _read_buf
_TEXT	SEGMENT
_len$ = -4						; size = 4
_strm$ = 8						; size = 4
_buf$ = 12						; size = 4
_size$ = 16						; size = 4
_read_buf PROC						; COMDAT

; 1168 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00010	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1169 :     unsigned len = strm->avail_in;

  00015	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00018	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001b	89 4d fc	 mov	 DWORD PTR _len$[ebp], ecx

; 1170 : 
; 1171 :     if (len > size) len = size;

  0001e	8b 55 fc	 mov	 edx, DWORD PTR _len$[ebp]
  00021	3b 55 10	 cmp	 edx, DWORD PTR _size$[ebp]
  00024	76 06		 jbe	 SHORT $LN2@read_buf
  00026	8b 45 10	 mov	 eax, DWORD PTR _size$[ebp]
  00029	89 45 fc	 mov	 DWORD PTR _len$[ebp], eax
$LN2@read_buf:

; 1172 :     if (len == 0) return 0;

  0002c	83 7d fc 00	 cmp	 DWORD PTR _len$[ebp], 0
  00030	75 07		 jne	 SHORT $LN3@read_buf
  00032	33 c0		 xor	 eax, eax
  00034	e9 92 00 00 00	 jmp	 $LN1@read_buf
$LN3@read_buf:

; 1173 : 
; 1174 :     strm->avail_in  -= len;

  00039	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0003c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0003f	2b 55 fc	 sub	 edx, DWORD PTR _len$[ebp]
  00042	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00045	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1175 : 
; 1176 :     zmemcpy(buf, strm->next_in, len);

  00048	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  0004b	51		 push	 ecx
  0004c	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0004f	8b 02		 mov	 eax, DWORD PTR [edx]
  00051	50		 push	 eax
  00052	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  00055	51		 push	 ecx
  00056	e8 00 00 00 00	 call	 _memcpy
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1177 :     if (strm->state->wrap == 1) {

  0005e	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00061	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00064	83 78 18 01	 cmp	 DWORD PTR [eax+24], 1
  00068	75 1c		 jne	 SHORT $LN4@read_buf

; 1178 :         strm->adler = adler32(strm->adler, buf, len);

  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  0006d	51		 push	 ecx
  0006e	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  00071	52		 push	 edx
  00072	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00075	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00078	51		 push	 ecx
  00079	e8 00 00 00 00	 call	 _adler32@12
  0007e	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00081	89 42 30	 mov	 DWORD PTR [edx+48], eax

; 1179 :     }

  00084	eb 26		 jmp	 SHORT $LN5@read_buf
$LN4@read_buf:

; 1180 : #ifdef GZIP
; 1181 :     else if (strm->state->wrap == 2) {

  00086	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00089	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0008c	83 79 18 02	 cmp	 DWORD PTR [ecx+24], 2
  00090	75 1a		 jne	 SHORT $LN5@read_buf

; 1182 :         strm->adler = crc32(strm->adler, buf, len);

  00092	8b 55 fc	 mov	 edx, DWORD PTR _len$[ebp]
  00095	52		 push	 edx
  00096	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  00099	50		 push	 eax
  0009a	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0009d	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  000a0	52		 push	 edx
  000a1	e8 00 00 00 00	 call	 _crc32@12
  000a6	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  000a9	89 41 30	 mov	 DWORD PTR [ecx+48], eax
$LN5@read_buf:

; 1183 :     }
; 1184 : #endif
; 1185 :     strm->next_in  += len;

  000ac	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  000af	8b 02		 mov	 eax, DWORD PTR [edx]
  000b1	03 45 fc	 add	 eax, DWORD PTR _len$[ebp]
  000b4	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  000b7	89 01		 mov	 DWORD PTR [ecx], eax

; 1186 :     strm->total_in += len;

  000b9	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  000bc	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000bf	03 45 fc	 add	 eax, DWORD PTR _len$[ebp]
  000c2	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  000c5	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1187 : 
; 1188 :     return len;

  000c8	8b 45 fc	 mov	 eax, DWORD PTR _len$[ebp]
$LN1@read_buf:

; 1189 : }

  000cb	83 c4 04	 add	 esp, 4
  000ce	3b ec		 cmp	 ebp, esp
  000d0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c3		 ret	 0
_read_buf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _lm_init
_TEXT	SEGMENT
_s$ = 8							; size = 4
_lm_init PROC						; COMDAT

; 1196 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1197 :     s->window_size = (ulg)2L*s->w_size;

  0000d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00010	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00013	d1 e1		 shl	 ecx, 1
  00015	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00018	89 4a 3c	 mov	 DWORD PTR [edx+60], ecx

; 1198 : 
; 1199 :     CLEAR_HASH(s);

  0001b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0001e	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00021	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00024	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00027	33 d2		 xor	 edx, edx
  00029	66 89 54 48 fe	 mov	 WORD PTR [eax+ecx*2-2], dx
  0002e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00031	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00034	8d 54 09 fe	 lea	 edx, DWORD PTR [ecx+ecx-2]
  00038	52		 push	 edx
  00039	6a 00		 push	 0
  0003b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0003e	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 _memset
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1200 : 
; 1201 :     /* Set the default configuration parameters:
; 1202 :      */
; 1203 :     s->max_lazy_match   = configuration_table[s->level].max_lazy;

  0004a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0004d	6b 82 84 00 00
	00 0c		 imul	 eax, DWORD PTR [edx+132], 12
  00054	0f b7 88 02 00
	00 00		 movzx	 ecx, WORD PTR _configuration_table[eax+2]
  0005b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0005e	89 8a 80 00 00
	00		 mov	 DWORD PTR [edx+128], ecx

; 1204 :     s->good_match       = configuration_table[s->level].good_length;

  00064	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00067	6b 88 84 00 00
	00 0c		 imul	 ecx, DWORD PTR [eax+132], 12
  0006e	0f b7 91 00 00
	00 00		 movzx	 edx, WORD PTR _configuration_table[ecx]
  00075	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00078	89 90 8c 00 00
	00		 mov	 DWORD PTR [eax+140], edx

; 1205 :     s->nice_match       = configuration_table[s->level].nice_length;

  0007e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00081	6b 91 84 00 00
	00 0c		 imul	 edx, DWORD PTR [ecx+132], 12
  00088	0f b7 82 04 00
	00 00		 movzx	 eax, WORD PTR _configuration_table[edx+4]
  0008f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00092	89 81 90 00 00
	00		 mov	 DWORD PTR [ecx+144], eax

; 1206 :     s->max_chain_length = configuration_table[s->level].max_chain;

  00098	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0009b	6b 82 84 00 00
	00 0c		 imul	 eax, DWORD PTR [edx+132], 12
  000a2	0f b7 88 06 00
	00 00		 movzx	 ecx, WORD PTR _configuration_table[eax+6]
  000a9	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000ac	89 4a 7c	 mov	 DWORD PTR [edx+124], ecx

; 1207 : 
; 1208 :     s->strstart = 0;

  000af	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000b2	c7 40 6c 00 00
	00 00		 mov	 DWORD PTR [eax+108], 0

; 1209 :     s->block_start = 0L;

  000b9	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000bc	c7 41 5c 00 00
	00 00		 mov	 DWORD PTR [ecx+92], 0

; 1210 :     s->lookahead = 0;

  000c3	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000c6	c7 42 74 00 00
	00 00		 mov	 DWORD PTR [edx+116], 0

; 1211 :     s->insert = 0;

  000cd	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000d0	c7 80 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+5812], 0

; 1212 :     s->match_length = s->prev_length = MIN_MATCH-1;

  000da	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000dd	c7 41 78 02 00
	00 00		 mov	 DWORD PTR [ecx+120], 2
  000e4	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000e7	c7 42 60 02 00
	00 00		 mov	 DWORD PTR [edx+96], 2

; 1213 :     s->match_available = 0;

  000ee	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000f1	c7 40 68 00 00
	00 00		 mov	 DWORD PTR [eax+104], 0

; 1214 :     s->ins_h = 0;

  000f8	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000fb	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0

; 1215 : #ifndef FASTEST
; 1216 : #ifdef ASMV
; 1217 :     match_init(); /* initialize the asm code */

  00102	e8 00 00 00 00	 call	 _match_init

; 1218 : #endif
; 1219 : #endif
; 1220 : }

  00107	3b ec		 cmp	 ebp, esp
  00109	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010e	5d		 pop	 ebp
  0010f	c3		 ret	 0
_lm_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _fill_window
_TEXT	SEGMENT
_init$1 = -24						; size = 4
_curr$2 = -20						; size = 4
_str$3 = -16						; size = 4
_wsize$ = -12						; size = 4
_more$ = -8						; size = 4
_n$ = -4						; size = 4
_s$ = 8							; size = 4
_fill_window PROC					; COMDAT

; 1484 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00012	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00015	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00018	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001b	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1485 :     unsigned n;
; 1486 :     unsigned more;    /* Amount of free space at the end of the window. */
; 1487 :     uInt wsize = s->w_size;

  00028	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0002b	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0002e	89 4d f4	 mov	 DWORD PTR _wsize$[ebp], ecx
$LN4@fill_windo:

; 1488 : 
; 1489 :     Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");
; 1490 : 
; 1491 :     do {
; 1492 :         more = (unsigned)(s->window_size -(ulg)s->lookahead -(ulg)s->strstart);

  00031	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00034	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00037	8b 4a 3c	 mov	 ecx, DWORD PTR [edx+60]
  0003a	2b 48 74	 sub	 ecx, DWORD PTR [eax+116]
  0003d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00040	2b 4a 6c	 sub	 ecx, DWORD PTR [edx+108]
  00043	89 4d f8	 mov	 DWORD PTR _more$[ebp], ecx

; 1493 : 
; 1494 :         /* Deal with !@#$% 64K limit: */
; 1495 :         if (sizeof(int) <= 2) {

  00046	33 c0		 xor	 eax, eax
  00048	74 2f		 je	 SHORT $LN7@fill_windo

; 1496 :             if (more == 0 && s->strstart == 0 && s->lookahead == 0) {

  0004a	83 7d f8 00	 cmp	 DWORD PTR _more$[ebp], 0
  0004e	75 1a		 jne	 SHORT $LN8@fill_windo
  00050	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00053	83 79 6c 00	 cmp	 DWORD PTR [ecx+108], 0
  00057	75 11		 jne	 SHORT $LN8@fill_windo
  00059	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0005c	83 7a 74 00	 cmp	 DWORD PTR [edx+116], 0
  00060	75 08		 jne	 SHORT $LN8@fill_windo

; 1497 :                 more = wsize;

  00062	8b 45 f4	 mov	 eax, DWORD PTR _wsize$[ebp]
  00065	89 45 f8	 mov	 DWORD PTR _more$[ebp], eax
  00068	eb 0f		 jmp	 SHORT $LN7@fill_windo
$LN8@fill_windo:

; 1498 : 
; 1499 :             } else if (more == (unsigned)(-1)) {

  0006a	83 7d f8 ff	 cmp	 DWORD PTR _more$[ebp], -1
  0006e	75 09		 jne	 SHORT $LN7@fill_windo

; 1500 :                 /* Very unlikely, but possible on 16 bit machine if
; 1501 :                  * strstart == 0 && lookahead == 1 (input done a byte at time)
; 1502 :                  */
; 1503 :                 more--;

  00070	8b 4d f8	 mov	 ecx, DWORD PTR _more$[ebp]
  00073	83 e9 01	 sub	 ecx, 1
  00076	89 4d f8	 mov	 DWORD PTR _more$[ebp], ecx
$LN7@fill_windo:

; 1504 :             }
; 1505 :         }
; 1506 : 
; 1507 :         /* If the window is almost full and there is insufficient lookahead,
; 1508 :          * move the upper half to the lower one to make room in the upper half.
; 1509 :          */
; 1510 :         if (s->strstart >= wsize+MAX_DIST(s)) {

  00079	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0007c	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0007f	8b 4d f4	 mov	 ecx, DWORD PTR _wsize$[ebp]
  00082	8d 94 01 fa fe
	ff ff		 lea	 edx, DWORD PTR [ecx+eax-262]
  00089	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0008c	39 50 6c	 cmp	 DWORD PTR [eax+108], edx
  0008f	72 65		 jb	 SHORT $LN11@fill_windo

; 1511 : 
; 1512 :             zmemcpy(s->window, s->window+wsize, (unsigned)wsize - more);

  00091	0f ae e8	 lfence
  00094	8b 4d f4	 mov	 ecx, DWORD PTR _wsize$[ebp]
  00097	2b 4d f8	 sub	 ecx, DWORD PTR _more$[ebp]
  0009a	51		 push	 ecx
  0009b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0009e	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  000a1	03 45 f4	 add	 eax, DWORD PTR _wsize$[ebp]
  000a4	50		 push	 eax
  000a5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000a8	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  000ab	52		 push	 edx
  000ac	e8 00 00 00 00	 call	 _memcpy
  000b1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1513 :             s->match_start -= wsize;

  000b4	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000b7	8b 48 70	 mov	 ecx, DWORD PTR [eax+112]
  000ba	2b 4d f4	 sub	 ecx, DWORD PTR _wsize$[ebp]
  000bd	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000c0	89 4a 70	 mov	 DWORD PTR [edx+112], ecx

; 1514 :             s->strstart    -= wsize; /* we now have strstart >= MAX_DIST */

  000c3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000c6	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  000c9	2b 4d f4	 sub	 ecx, DWORD PTR _wsize$[ebp]
  000cc	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000cf	89 4a 6c	 mov	 DWORD PTR [edx+108], ecx

; 1515 :             s->block_start -= (long) wsize;

  000d2	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000d5	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  000d8	2b 4d f4	 sub	 ecx, DWORD PTR _wsize$[ebp]
  000db	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000de	89 4a 5c	 mov	 DWORD PTR [edx+92], ecx

; 1516 :             slide_hash(s);

  000e1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 _slide_hash
  000ea	83 c4 04	 add	 esp, 4

; 1517 :             more += wsize;

  000ed	8b 4d f8	 mov	 ecx, DWORD PTR _more$[ebp]
  000f0	03 4d f4	 add	 ecx, DWORD PTR _wsize$[ebp]
  000f3	89 4d f8	 mov	 DWORD PTR _more$[ebp], ecx
$LN11@fill_windo:

; 1518 :         }
; 1519 :         if (s->strm->avail_in == 0) break;

  000f6	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000f9	8b 02		 mov	 eax, DWORD PTR [edx]
  000fb	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  000ff	75 05		 jne	 SHORT $LN12@fill_windo
  00101	e9 63 01 00 00	 jmp	 $LN3@fill_windo
$LN12@fill_windo:

; 1520 : 
; 1521 :         /* If there was no sliding:
; 1522 :          *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
; 1523 :          *    more == window_size - lookahead - strstart
; 1524 :          * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
; 1525 :          * => more >= window_size - 2*WSIZE + 2
; 1526 :          * In the BIG_MEM or MMAP case (not yet supported),
; 1527 :          *   window_size == input_size + MIN_LOOKAHEAD  &&
; 1528 :          *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
; 1529 :          * Otherwise, window_size == 2*WSIZE so more >= 2.
; 1530 :          * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
; 1531 :          */
; 1532 :         Assert(more >= 2, "more < 2");
; 1533 : 
; 1534 :         n = read_buf(s->strm, s->window + s->strstart + s->lookahead, more);

  00106	8b 4d f8	 mov	 ecx, DWORD PTR _more$[ebp]
  00109	51		 push	 ecx
  0010a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0010d	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00110	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00113	03 41 6c	 add	 eax, DWORD PTR [ecx+108]
  00116	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00119	03 42 74	 add	 eax, DWORD PTR [edx+116]
  0011c	50		 push	 eax
  0011d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00120	8b 08		 mov	 ecx, DWORD PTR [eax]
  00122	51		 push	 ecx
  00123	e8 00 00 00 00	 call	 _read_buf
  00128	83 c4 0c	 add	 esp, 12			; 0000000cH
  0012b	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax

; 1535 :         s->lookahead += n;

  0012e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00131	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  00134	03 45 fc	 add	 eax, DWORD PTR _n$[ebp]
  00137	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0013a	89 41 74	 mov	 DWORD PTR [ecx+116], eax

; 1536 : 
; 1537 :         /* Initialize the hash value now that we have some input: */
; 1538 :         if (s->lookahead + s->insert >= MIN_MATCH) {

  0013d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00140	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  00143	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00146	03 81 b4 16 00
	00		 add	 eax, DWORD PTR [ecx+5812]
  0014c	83 f8 03	 cmp	 eax, 3
  0014f	0f 82 f9 00 00
	00		 jb	 $LN2@fill_windo

; 1539 :             uInt str = s->strstart - s->insert;

  00155	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00158	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0015b	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  0015e	2b 88 b4 16 00
	00		 sub	 ecx, DWORD PTR [eax+5812]
  00164	89 4d f0	 mov	 DWORD PTR _str$3[ebp], ecx

; 1540 :             s->ins_h = s->window[str];

  00167	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0016a	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  0016d	8b 4d f0	 mov	 ecx, DWORD PTR _str$3[ebp]
  00170	0f b6 14 08	 movzx	 edx, BYTE PTR [eax+ecx]
  00174	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00177	89 50 48	 mov	 DWORD PTR [eax+72], edx

; 1541 :             UPDATE_HASH(s, s->ins_h, s->window[str + 1]);

  0017a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0017d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00180	8b 41 48	 mov	 eax, DWORD PTR [ecx+72]
  00183	8b 4a 58	 mov	 ecx, DWORD PTR [edx+88]
  00186	d3 e0		 shl	 eax, cl
  00188	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0018b	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0018e	8b 4d f0	 mov	 ecx, DWORD PTR _str$3[ebp]
  00191	0f b6 54 0a 01	 movzx	 edx, BYTE PTR [edx+ecx+1]
  00196	33 c2		 xor	 eax, edx
  00198	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0019b	23 41 54	 and	 eax, DWORD PTR [ecx+84]
  0019e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001a1	89 42 48	 mov	 DWORD PTR [edx+72], eax
$LN5@fill_windo:

; 1542 : #if MIN_MATCH != 3
; 1543 :             Call UPDATE_HASH() MIN_MATCH-3 more times
; 1544 : #endif
; 1545 :             while (s->insert) {

  001a4	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001a7	83 b8 b4 16 00
	00 00		 cmp	 DWORD PTR [eax+5812], 0
  001ae	0f 84 9a 00 00
	00		 je	 $LN2@fill_windo

; 1546 :                 UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);

  001b4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001b7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001ba	8b 41 48	 mov	 eax, DWORD PTR [ecx+72]
  001bd	8b 4a 58	 mov	 ecx, DWORD PTR [edx+88]
  001c0	d3 e0		 shl	 eax, cl
  001c2	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001c5	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  001c8	8b 4d f0	 mov	 ecx, DWORD PTR _str$3[ebp]
  001cb	0f b6 54 0a 02	 movzx	 edx, BYTE PTR [edx+ecx+2]
  001d0	33 c2		 xor	 eax, edx
  001d2	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001d5	23 41 54	 and	 eax, DWORD PTR [ecx+84]
  001d8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001db	89 42 48	 mov	 DWORD PTR [edx+72], eax

; 1547 : #ifndef FASTEST
; 1548 :                 s->prev[str & s->w_mask] = s->head[s->ins_h];

  001de	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001e1	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  001e4	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001e7	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  001ea	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001ed	8b 75 f0	 mov	 esi, DWORD PTR _str$3[ebp]
  001f0	23 72 34	 and	 esi, DWORD PTR [edx+52]
  001f3	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001f6	8b 52 40	 mov	 edx, DWORD PTR [edx+64]
  001f9	66 8b 04 48	 mov	 ax, WORD PTR [eax+ecx*2]
  001fd	66 89 04 72	 mov	 WORD PTR [edx+esi*2], ax

; 1549 : #endif
; 1550 :                 s->head[s->ins_h] = (Pos)str;

  00201	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00204	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  00207	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0020a	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  0020d	66 8b 45 f0	 mov	 ax, WORD PTR _str$3[ebp]
  00211	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax

; 1551 :                 str++;

  00215	8b 4d f0	 mov	 ecx, DWORD PTR _str$3[ebp]
  00218	83 c1 01	 add	 ecx, 1
  0021b	89 4d f0	 mov	 DWORD PTR _str$3[ebp], ecx

; 1552 :                 s->insert--;

  0021e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00221	8b 82 b4 16 00
	00		 mov	 eax, DWORD PTR [edx+5812]
  00227	83 e8 01	 sub	 eax, 1
  0022a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0022d	89 81 b4 16 00
	00		 mov	 DWORD PTR [ecx+5812], eax

; 1553 :                 if (s->lookahead + s->insert < MIN_MATCH)

  00233	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00236	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  00239	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0023c	03 81 b4 16 00
	00		 add	 eax, DWORD PTR [ecx+5812]
  00242	83 f8 03	 cmp	 eax, 3
  00245	73 02		 jae	 SHORT $LN14@fill_windo

; 1554 :                     break;

  00247	eb 05		 jmp	 SHORT $LN2@fill_windo
$LN14@fill_windo:

; 1555 :             }

  00249	e9 56 ff ff ff	 jmp	 $LN5@fill_windo
$LN2@fill_windo:

; 1556 :         }
; 1557 :         /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
; 1558 :          * but this is not important since only literal bytes will be emitted.
; 1559 :          */
; 1560 : 
; 1561 :     } while (s->lookahead < MIN_LOOKAHEAD && s->strm->avail_in != 0);

  0024e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00251	81 7a 74 06 01
	00 00		 cmp	 DWORD PTR [edx+116], 262 ; 00000106H
  00258	73 0f		 jae	 SHORT $LN3@fill_windo
  0025a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0025d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0025f	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00263	0f 85 c8 fd ff
	ff		 jne	 $LN4@fill_windo
$LN3@fill_windo:

; 1562 : 
; 1563 :     /* If the WIN_INIT bytes after the end of the current data have never been
; 1564 :      * written, then zero those bytes in order to avoid memory check reports of
; 1565 :      * the use of uninitialized (or uninitialised as Julian writes) bytes by
; 1566 :      * the longest match routines.  Update the high water mark for the next
; 1567 :      * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
; 1568 :      * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
; 1569 :      */
; 1570 :     if (s->high_water < s->window_size) {

  00269	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0026c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0026f	8b 8a c0 16 00
	00		 mov	 ecx, DWORD PTR [edx+5824]
  00275	3b 48 3c	 cmp	 ecx, DWORD PTR [eax+60]
  00278	0f 83 ed 00 00
	00		 jae	 $LN1@fill_windo

; 1571 :         ulg curr = s->strstart + (ulg)(s->lookahead);

  0027e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00281	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00284	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00287	03 41 74	 add	 eax, DWORD PTR [ecx+116]
  0028a	89 45 ec	 mov	 DWORD PTR _curr$2[ebp], eax

; 1572 :         ulg init;
; 1573 : 
; 1574 :         if (s->high_water < curr) {

  0028d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00290	8b 82 c0 16 00
	00		 mov	 eax, DWORD PTR [edx+5824]
  00296	3b 45 ec	 cmp	 eax, DWORD PTR _curr$2[ebp]
  00299	73 4b		 jae	 SHORT $LN17@fill_windo

; 1575 :             /* Previous high water mark below current data -- zero WIN_INIT
; 1576 :              * bytes or up to end of window, whichever is less.
; 1577 :              */
; 1578 :             init = s->window_size - curr;

  0029b	0f ae e8	 lfence
  0029e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002a1	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  002a4	2b 55 ec	 sub	 edx, DWORD PTR _curr$2[ebp]
  002a7	89 55 e8	 mov	 DWORD PTR _init$1[ebp], edx

; 1579 :             if (init > WIN_INIT)

  002aa	81 7d e8 02 01
	00 00		 cmp	 DWORD PTR _init$1[ebp], 258 ; 00000102H
  002b1	76 07		 jbe	 SHORT $LN19@fill_windo

; 1580 :                 init = WIN_INIT;

  002b3	c7 45 e8 02 01
	00 00		 mov	 DWORD PTR _init$1[ebp], 258 ; 00000102H
$LN19@fill_windo:

; 1581 :             zmemzero(s->window + curr, (unsigned)init);

  002ba	8b 45 e8	 mov	 eax, DWORD PTR _init$1[ebp]
  002bd	50		 push	 eax
  002be	6a 00		 push	 0
  002c0	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002c3	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  002c6	03 55 ec	 add	 edx, DWORD PTR _curr$2[ebp]
  002c9	52		 push	 edx
  002ca	e8 00 00 00 00	 call	 _memset
  002cf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1582 :             s->high_water = curr + init;

  002d2	8b 45 ec	 mov	 eax, DWORD PTR _curr$2[ebp]
  002d5	03 45 e8	 add	 eax, DWORD PTR _init$1[ebp]
  002d8	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002db	89 81 c0 16 00
	00		 mov	 DWORD PTR [ecx+5824], eax

; 1583 :         }

  002e1	e9 85 00 00 00	 jmp	 $LN1@fill_windo
$LN17@fill_windo:

; 1584 :         else if (s->high_water < (ulg)curr + WIN_INIT) {

  002e6	8b 55 ec	 mov	 edx, DWORD PTR _curr$2[ebp]
  002e9	81 c2 02 01 00
	00		 add	 edx, 258		; 00000102H
  002ef	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002f2	39 90 c0 16 00
	00		 cmp	 DWORD PTR [eax+5824], edx
  002f8	73 71		 jae	 SHORT $LN1@fill_windo

; 1585 :             /* High water mark at or above current data, but below current data
; 1586 :              * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
; 1587 :              * to end of window, whichever is less.
; 1588 :              */
; 1589 :             init = (ulg)curr + WIN_INIT - s->high_water;

  002fa	0f ae e8	 lfence
  002fd	8b 4d ec	 mov	 ecx, DWORD PTR _curr$2[ebp]
  00300	81 c1 02 01 00
	00		 add	 ecx, 258		; 00000102H
  00306	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00309	2b 8a c0 16 00
	00		 sub	 ecx, DWORD PTR [edx+5824]
  0030f	89 4d e8	 mov	 DWORD PTR _init$1[ebp], ecx

; 1590 :             if (init > s->window_size - s->high_water)

  00312	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00315	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00318	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  0031b	2b 91 c0 16 00
	00		 sub	 edx, DWORD PTR [ecx+5824]
  00321	39 55 e8	 cmp	 DWORD PTR _init$1[ebp], edx
  00324	76 12		 jbe	 SHORT $LN21@fill_windo

; 1591 :                 init = s->window_size - s->high_water;

  00326	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00329	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0032c	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  0032f	2b 91 c0 16 00
	00		 sub	 edx, DWORD PTR [ecx+5824]
  00335	89 55 e8	 mov	 DWORD PTR _init$1[ebp], edx
$LN21@fill_windo:

; 1592 :             zmemzero(s->window + s->high_water, (unsigned)init);

  00338	8b 45 e8	 mov	 eax, DWORD PTR _init$1[ebp]
  0033b	50		 push	 eax
  0033c	6a 00		 push	 0
  0033e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00341	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00344	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00347	03 90 c0 16 00
	00		 add	 edx, DWORD PTR [eax+5824]
  0034d	52		 push	 edx
  0034e	e8 00 00 00 00	 call	 _memset
  00353	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1593 :             s->high_water += init;

  00356	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00359	8b 91 c0 16 00
	00		 mov	 edx, DWORD PTR [ecx+5824]
  0035f	03 55 e8	 add	 edx, DWORD PTR _init$1[ebp]
  00362	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00365	89 90 c0 16 00
	00		 mov	 DWORD PTR [eax+5824], edx
$LN1@fill_windo:

; 1594 :         }
; 1595 :     }
; 1596 : 
; 1597 :     Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
; 1598 :            "not enough room for search");
; 1599 : }

  0036b	5e		 pop	 esi
  0036c	83 c4 18	 add	 esp, 24			; 00000018H
  0036f	3b ec		 cmp	 ebp, esp
  00371	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00376	8b e5		 mov	 esp, ebp
  00378	5d		 pop	 ebp
  00379	c3		 ret	 0
_fill_window ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflate_stored
_TEXT	SEGMENT
tv404 = -56						; size = 4
tv390 = -52						; size = 4
tv384 = -48						; size = 4
tv371 = -44						; size = 4
tv367 = -40						; size = 4
tv287 = -36						; size = 4
tv139 = -32						; size = 4
tv71 = -28						; size = 4
_used$ = -24						; size = 4
_last$ = -20						; size = 4
_have$ = -16						; size = 4
_left$ = -12						; size = 4
_len$ = -8						; size = 4
_min_block$ = -4					; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_stored PROC					; COMDAT

; 1646 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	57		 push	 edi
  00007	8d 7d c8	 lea	 edi, DWORD PTR [ebp-56]
  0000a	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1647 :     /* Smallest worthy block size when not flushing or finishing. By default
; 1648 :      * this is 32K. This can be as small as 507 bytes for memLevel == 1. For
; 1649 :      * large input and output buffers, the stored block size will be larger.
; 1650 :      */
; 1651 :     unsigned min_block = MIN(s->pending_buf_size - 5, s->w_size);

  00020	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00023	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00026	83 e9 05	 sub	 ecx, 5
  00029	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0002c	3b 4a 2c	 cmp	 ecx, DWORD PTR [edx+44]
  0002f	76 0b		 jbe	 SHORT $LN31@deflate_st
  00031	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00034	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00037	89 4d e4	 mov	 DWORD PTR tv71[ebp], ecx
  0003a	eb 0c		 jmp	 SHORT $LN32@deflate_st
$LN31@deflate_st:
  0003c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0003f	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00042	83 e8 05	 sub	 eax, 5
  00045	89 45 e4	 mov	 DWORD PTR tv71[ebp], eax
$LN32@deflate_st:
  00048	8b 4d e4	 mov	 ecx, DWORD PTR tv71[ebp]
  0004b	89 4d fc	 mov	 DWORD PTR _min_block$[ebp], ecx

; 1652 : 
; 1653 :     /* Copy as many min_block or larger stored blocks directly to next_out as
; 1654 :      * possible. If flushing, copy the remaining available input to next_out as
; 1655 :      * stored blocks, if there is enough space.
; 1656 :      */
; 1657 :     unsigned len, left, have, last = 0;

  0004e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _last$[ebp], 0

; 1658 :     unsigned used = s->strm->avail_in;

  00055	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00058	8b 02		 mov	 eax, DWORD PTR [edx]
  0005a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005d	89 4d e8	 mov	 DWORD PTR _used$[ebp], ecx
$LN4@deflate_st:

; 1659 :     do {
; 1660 :         /* Set len to the maximum size block that we can copy directly with the
; 1661 :          * available input data and output space. Set left to how much of that
; 1662 :          * would be copied from what's left in the window.
; 1663 :          */
; 1664 :         len = MAX_STORED;       /* maximum deflate stored block length */

  00060	c7 45 f8 ff ff
	00 00		 mov	 DWORD PTR _len$[ebp], 65535 ; 0000ffffH

; 1665 :         have = (s->bi_valid + 42) >> 3;         /* number of header bytes */

  00067	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0006a	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00070	83 c0 2a	 add	 eax, 42			; 0000002aH
  00073	c1 f8 03	 sar	 eax, 3
  00076	89 45 f0	 mov	 DWORD PTR _have$[ebp], eax

; 1666 :         if (s->strm->avail_out < have)          /* need room for header */

  00079	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0007c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007e	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00081	3b 45 f0	 cmp	 eax, DWORD PTR _have$[ebp]
  00084	73 05		 jae	 SHORT $LN5@deflate_st

; 1667 :             break;

  00086	e9 0b 02 00 00	 jmp	 $LN3@deflate_st
$LN5@deflate_st:

; 1668 :             /* maximum stored block length that will fit in avail_out: */
; 1669 :         have = s->strm->avail_out - have;

  0008b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0008e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00090	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00093	2b 45 f0	 sub	 eax, DWORD PTR _have$[ebp]
  00096	89 45 f0	 mov	 DWORD PTR _have$[ebp], eax

; 1670 :         left = s->strstart - s->block_start;    /* bytes left in window */

  00099	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0009c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0009f	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  000a2	2b 42 5c	 sub	 eax, DWORD PTR [edx+92]
  000a5	89 45 f4	 mov	 DWORD PTR _left$[ebp], eax

; 1671 :         if (len > (ulg)left + s->strm->avail_in)

  000a8	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000ab	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ad	8b 45 f4	 mov	 eax, DWORD PTR _left$[ebp]
  000b0	03 42 04	 add	 eax, DWORD PTR [edx+4]
  000b3	39 45 f8	 cmp	 DWORD PTR _len$[ebp], eax
  000b6	76 0e		 jbe	 SHORT $LN6@deflate_st

; 1672 :             len = left + s->strm->avail_in;     /* limit len to the input */

  000b8	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000bb	8b 11		 mov	 edx, DWORD PTR [ecx]
  000bd	8b 45 f4	 mov	 eax, DWORD PTR _left$[ebp]
  000c0	03 42 04	 add	 eax, DWORD PTR [edx+4]
  000c3	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax
$LN6@deflate_st:

; 1673 :         if (len > have)

  000c6	8b 4d f8	 mov	 ecx, DWORD PTR _len$[ebp]
  000c9	3b 4d f0	 cmp	 ecx, DWORD PTR _have$[ebp]
  000cc	76 06		 jbe	 SHORT $LN7@deflate_st

; 1674 :             len = have;                         /* limit len to the output */

  000ce	8b 55 f0	 mov	 edx, DWORD PTR _have$[ebp]
  000d1	89 55 f8	 mov	 DWORD PTR _len$[ebp], edx
$LN7@deflate_st:

; 1675 : 
; 1676 :         /* If the stored block would be less than min_block in length, or if
; 1677 :          * unable to copy all of the available input when flushing, then try
; 1678 :          * copying to the window and the pending buffer instead. Also don't
; 1679 :          * write an empty block when flushing -- deflate() does that.
; 1680 :          */
; 1681 :         if (len < min_block && ((len == 0 && flush != Z_FINISH) ||

  000d4	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  000d7	3b 45 fc	 cmp	 eax, DWORD PTR _min_block$[ebp]
  000da	73 27		 jae	 SHORT $LN8@deflate_st
  000dc	83 7d f8 00	 cmp	 DWORD PTR _len$[ebp], 0
  000e0	75 06		 jne	 SHORT $LN10@deflate_st
  000e2	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  000e6	75 16		 jne	 SHORT $LN9@deflate_st
$LN10@deflate_st:
  000e8	83 7d 0c 00	 cmp	 DWORD PTR _flush$[ebp], 0
  000ec	74 10		 je	 SHORT $LN9@deflate_st
  000ee	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000f1	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f3	8b 45 f4	 mov	 eax, DWORD PTR _left$[ebp]
  000f6	03 42 04	 add	 eax, DWORD PTR [edx+4]
  000f9	39 45 f8	 cmp	 DWORD PTR _len$[ebp], eax
  000fc	74 05		 je	 SHORT $LN8@deflate_st
$LN9@deflate_st:

; 1682 :                                 flush == Z_NO_FLUSH ||
; 1683 :                                 len != left + s->strm->avail_in))
; 1684 :             break;

  000fe	e9 93 01 00 00	 jmp	 $LN3@deflate_st
$LN8@deflate_st:

; 1685 : 
; 1686 :         /* Make a dummy stored block in pending to get the header bytes,
; 1687 :          * including any pending bits. This also updates the debugging counts.
; 1688 :          */
; 1689 :         last = flush == Z_FINISH && len == left + s->strm->avail_in ? 1 : 0;

  00103	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  00107	75 19		 jne	 SHORT $LN33@deflate_st
  00109	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0010c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0010e	8b 45 f4	 mov	 eax, DWORD PTR _left$[ebp]
  00111	03 42 04	 add	 eax, DWORD PTR [edx+4]
  00114	39 45 f8	 cmp	 DWORD PTR _len$[ebp], eax
  00117	75 09		 jne	 SHORT $LN33@deflate_st
  00119	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR tv139[ebp], 1
  00120	eb 07		 jmp	 SHORT $LN34@deflate_st
$LN33@deflate_st:
  00122	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv139[ebp], 0
$LN34@deflate_st:
  00129	8b 4d e0	 mov	 ecx, DWORD PTR tv139[ebp]
  0012c	89 4d ec	 mov	 DWORD PTR _last$[ebp], ecx

; 1690 :         _tr_stored_block(s, (char *)0, 0L, last);

  0012f	8b 55 ec	 mov	 edx, DWORD PTR _last$[ebp]
  00132	52		 push	 edx
  00133	6a 00		 push	 0
  00135	6a 00		 push	 0
  00137	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0013a	50		 push	 eax
  0013b	e8 00 00 00 00	 call	 __tr_stored_block
  00140	83 c4 10	 add	 esp, 16			; 00000010H

; 1691 : 
; 1692 :         /* Replace the lengths in the dummy stored block with len. */
; 1693 :         s->pending_buf[s->pending - 4] = len;

  00143	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00146	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00149	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0014c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0014f	8a 45 f8	 mov	 al, BYTE PTR _len$[ebp]
  00152	88 44 11 fc	 mov	 BYTE PTR [ecx+edx-4], al

; 1694 :         s->pending_buf[s->pending - 3] = len >> 8;

  00156	8b 4d f8	 mov	 ecx, DWORD PTR _len$[ebp]
  00159	c1 e9 08	 shr	 ecx, 8
  0015c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0015f	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00162	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00165	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  00168	88 4c 02 fd	 mov	 BYTE PTR [edx+eax-3], cl

; 1695 :         s->pending_buf[s->pending - 2] = ~len;

  0016c	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  0016f	f7 d0		 not	 eax
  00171	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00174	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00177	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0017a	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0017d	88 44 11 fe	 mov	 BYTE PTR [ecx+edx-2], al

; 1696 :         s->pending_buf[s->pending - 1] = ~len >> 8;

  00181	8b 55 f8	 mov	 edx, DWORD PTR _len$[ebp]
  00184	f7 d2		 not	 edx
  00186	c1 ea 08	 shr	 edx, 8
  00189	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0018c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0018f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00192	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00195	88 54 08 ff	 mov	 BYTE PTR [eax+ecx-1], dl

; 1697 : 
; 1698 :         /* Write the stored block header bytes. */
; 1699 :         flush_pending(s->strm);

  00199	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0019c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0019e	52		 push	 edx
  0019f	e8 00 00 00 00	 call	 _flush_pending
  001a4	83 c4 04	 add	 esp, 4

; 1700 : 
; 1701 : #ifdef ZLIB_DEBUG
; 1702 :         /* Update debugging counts for the data about to be copied. */
; 1703 :         s->compressed_len += len << 3;
; 1704 :         s->bits_sent += len << 3;
; 1705 : #endif
; 1706 : 
; 1707 :         /* Copy uncompressed bytes from the window to next_out. */
; 1708 :         if (left) {

  001a7	83 7d f4 00	 cmp	 DWORD PTR _left$[ebp], 0
  001ab	0f 84 81 00 00
	00		 je	 $LN11@deflate_st

; 1709 :             if (left > len)

  001b1	8b 45 f4	 mov	 eax, DWORD PTR _left$[ebp]
  001b4	3b 45 f8	 cmp	 eax, DWORD PTR _len$[ebp]
  001b7	76 06		 jbe	 SHORT $LN12@deflate_st

; 1710 :                 left = len;

  001b9	8b 4d f8	 mov	 ecx, DWORD PTR _len$[ebp]
  001bc	89 4d f4	 mov	 DWORD PTR _left$[ebp], ecx
$LN12@deflate_st:

; 1711 :             zmemcpy(s->strm->next_out, s->window + s->block_start, left);

  001bf	8b 55 f4	 mov	 edx, DWORD PTR _left$[ebp]
  001c2	52		 push	 edx
  001c3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001c6	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  001c9	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001cc	03 4a 5c	 add	 ecx, DWORD PTR [edx+92]
  001cf	51		 push	 ecx
  001d0	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d5	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  001d8	52		 push	 edx
  001d9	e8 00 00 00 00	 call	 _memcpy
  001de	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1712 :             s->strm->next_out += left;

  001e1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001e4	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e6	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  001e9	03 55 f4	 add	 edx, DWORD PTR _left$[ebp]
  001ec	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001ef	8b 08		 mov	 ecx, DWORD PTR [eax]
  001f1	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 1713 :             s->strm->avail_out -= left;

  001f4	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001f7	8b 02		 mov	 eax, DWORD PTR [edx]
  001f9	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  001fc	2b 4d f4	 sub	 ecx, DWORD PTR _left$[ebp]
  001ff	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00202	8b 02		 mov	 eax, DWORD PTR [edx]
  00204	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 1714 :             s->strm->total_out += left;

  00207	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0020a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0020c	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0020f	03 45 f4	 add	 eax, DWORD PTR _left$[ebp]
  00212	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00215	8b 11		 mov	 edx, DWORD PTR [ecx]
  00217	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 1715 :             s->block_start += left;

  0021a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0021d	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  00220	03 4d f4	 add	 ecx, DWORD PTR _left$[ebp]
  00223	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00226	89 4a 5c	 mov	 DWORD PTR [edx+92], ecx

; 1716 :             len -= left;

  00229	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  0022c	2b 45 f4	 sub	 eax, DWORD PTR _left$[ebp]
  0022f	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax
$LN11@deflate_st:

; 1717 :         }
; 1718 : 
; 1719 :         /* Copy uncompressed bytes directly from next_in to next_out, updating
; 1720 :          * the check value.
; 1721 :          */
; 1722 :         if (len) {

  00232	83 7d f8 00	 cmp	 DWORD PTR _len$[ebp], 0
  00236	74 54		 je	 SHORT $LN2@deflate_st

; 1723 :             read_buf(s->strm, s->strm->next_out, len);

  00238	8b 4d f8	 mov	 ecx, DWORD PTR _len$[ebp]
  0023b	51		 push	 ecx
  0023c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0023f	8b 02		 mov	 eax, DWORD PTR [edx]
  00241	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00244	51		 push	 ecx
  00245	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00248	8b 02		 mov	 eax, DWORD PTR [edx]
  0024a	50		 push	 eax
  0024b	e8 00 00 00 00	 call	 _read_buf
  00250	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1724 :             s->strm->next_out += len;

  00253	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00256	8b 11		 mov	 edx, DWORD PTR [ecx]
  00258	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0025b	03 45 f8	 add	 eax, DWORD PTR _len$[ebp]
  0025e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00261	8b 11		 mov	 edx, DWORD PTR [ecx]
  00263	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 1725 :             s->strm->avail_out -= len;

  00266	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00269	8b 08		 mov	 ecx, DWORD PTR [eax]
  0026b	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0026e	2b 55 f8	 sub	 edx, DWORD PTR _len$[ebp]
  00271	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00274	8b 08		 mov	 ecx, DWORD PTR [eax]
  00276	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 1726 :             s->strm->total_out += len;

  00279	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0027c	8b 02		 mov	 eax, DWORD PTR [edx]
  0027e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00281	03 4d f8	 add	 ecx, DWORD PTR _len$[ebp]
  00284	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00287	8b 02		 mov	 eax, DWORD PTR [edx]
  00289	89 48 14	 mov	 DWORD PTR [eax+20], ecx
$LN2@deflate_st:

; 1727 :         }
; 1728 :     } while (last == 0);

  0028c	83 7d ec 00	 cmp	 DWORD PTR _last$[ebp], 0
  00290	0f 84 ca fd ff
	ff		 je	 $LN4@deflate_st
$LN3@deflate_st:

; 1729 : 
; 1730 :     /* Update the sliding window with the last s->w_size bytes of the copied
; 1731 :      * data, or append all of the copied data to the existing window if less
; 1732 :      * than s->w_size bytes were copied. Also update the number of bytes to
; 1733 :      * insert in the hash tables, in the event that deflateParams() switches to
; 1734 :      * a non-zero compression level.
; 1735 :      */
; 1736 :     used -= s->strm->avail_in;      /* number of input bytes directly copied */

  00296	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00299	8b 11		 mov	 edx, DWORD PTR [ecx]
  0029b	8b 45 e8	 mov	 eax, DWORD PTR _used$[ebp]
  0029e	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  002a1	89 45 e8	 mov	 DWORD PTR _used$[ebp], eax

; 1737 :     if (used) {

  002a4	0f 84 39 01 00
	00		 je	 $LN14@deflate_st

; 1738 :         /* If any input was used, then no unused input remains in the window,
; 1739 :          * therefore s->block_start == s->strstart.
; 1740 :          */
; 1741 :         if (used >= s->w_size) {    /* supplant the previous history */

  002aa	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002ad	8b 55 e8	 mov	 edx, DWORD PTR _used$[ebp]
  002b0	3b 51 2c	 cmp	 edx, DWORD PTR [ecx+44]
  002b3	72 42		 jb	 SHORT $LN15@deflate_st

; 1742 :             s->matches = 2;         /* clear hash */

  002b5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002b8	c7 80 b0 16 00
	00 02 00 00 00	 mov	 DWORD PTR [eax+5808], 2

; 1743 :             zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);

  002c2	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002c5	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  002c8	52		 push	 edx
  002c9	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002cc	8b 08		 mov	 ecx, DWORD PTR [eax]
  002ce	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002d1	8b 01		 mov	 eax, DWORD PTR [ecx]
  002d3	2b 42 2c	 sub	 eax, DWORD PTR [edx+44]
  002d6	50		 push	 eax
  002d7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002da	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  002dd	52		 push	 edx
  002de	e8 00 00 00 00	 call	 _memcpy
  002e3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1744 :             s->strstart = s->w_size;

  002e6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002e9	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002ec	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  002ef	89 50 6c	 mov	 DWORD PTR [eax+108], edx

; 1745 :         }

  002f2	e9 9d 00 00 00	 jmp	 $LN16@deflate_st
$LN15@deflate_st:

; 1746 :         else {
; 1747 :             if (s->window_size - s->strstart <= used) {

  002f7	0f ae e8	 lfence
  002fa	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002fd	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00300	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  00303	2b 51 6c	 sub	 edx, DWORD PTR [ecx+108]
  00306	3b 55 e8	 cmp	 edx, DWORD PTR _used$[ebp]
  00309	77 56		 ja	 SHORT $LN17@deflate_st

; 1748 :                 /* Slide the window down. */
; 1749 :                 s->strstart -= s->w_size;

  0030b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0030e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00311	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  00314	2b 51 2c	 sub	 edx, DWORD PTR [ecx+44]
  00317	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0031a	89 50 6c	 mov	 DWORD PTR [eax+108], edx

; 1750 :                 zmemcpy(s->window, s->window + s->w_size, s->strstart);

  0031d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00320	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  00323	52		 push	 edx
  00324	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00327	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0032a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0032d	03 4a 2c	 add	 ecx, DWORD PTR [edx+44]
  00330	51		 push	 ecx
  00331	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00334	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00337	51		 push	 ecx
  00338	e8 00 00 00 00	 call	 _memcpy
  0033d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1751 :                 if (s->matches < 2)

  00340	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00343	83 ba b0 16 00
	00 02		 cmp	 DWORD PTR [edx+5808], 2
  0034a	73 15		 jae	 SHORT $LN17@deflate_st

; 1752 :                     s->matches++;   /* add a pending slide_hash() */

  0034c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0034f	8b 88 b0 16 00
	00		 mov	 ecx, DWORD PTR [eax+5808]
  00355	83 c1 01	 add	 ecx, 1
  00358	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0035b	89 8a b0 16 00
	00		 mov	 DWORD PTR [edx+5808], ecx
$LN17@deflate_st:

; 1753 :             }
; 1754 :             zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);

  00361	8b 45 e8	 mov	 eax, DWORD PTR _used$[ebp]
  00364	50		 push	 eax
  00365	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00368	8b 11		 mov	 edx, DWORD PTR [ecx]
  0036a	8b 02		 mov	 eax, DWORD PTR [edx]
  0036c	2b 45 e8	 sub	 eax, DWORD PTR _used$[ebp]
  0036f	50		 push	 eax
  00370	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00373	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00376	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00379	03 50 6c	 add	 edx, DWORD PTR [eax+108]
  0037c	52		 push	 edx
  0037d	e8 00 00 00 00	 call	 _memcpy
  00382	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1755 :             s->strstart += used;

  00385	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00388	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  0038b	03 55 e8	 add	 edx, DWORD PTR _used$[ebp]
  0038e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00391	89 50 6c	 mov	 DWORD PTR [eax+108], edx
$LN16@deflate_st:

; 1756 :         }
; 1757 :         s->block_start = s->strstart;

  00394	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00397	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0039a	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  0039d	89 41 5c	 mov	 DWORD PTR [ecx+92], eax

; 1758 :         s->insert += MIN(used, s->w_size - s->insert);

  003a0	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003a3	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003a6	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  003a9	2b 82 b4 16 00
	00		 sub	 eax, DWORD PTR [edx+5812]
  003af	39 45 e8	 cmp	 DWORD PTR _used$[ebp], eax
  003b2	76 14		 jbe	 SHORT $LN35@deflate_st
  003b4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003b7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003ba	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  003bd	2b 82 b4 16 00
	00		 sub	 eax, DWORD PTR [edx+5812]
  003c3	89 45 dc	 mov	 DWORD PTR tv287[ebp], eax
  003c6	eb 06		 jmp	 SHORT $LN36@deflate_st
$LN35@deflate_st:
  003c8	8b 4d e8	 mov	 ecx, DWORD PTR _used$[ebp]
  003cb	89 4d dc	 mov	 DWORD PTR tv287[ebp], ecx
$LN36@deflate_st:
  003ce	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003d1	8b 82 b4 16 00
	00		 mov	 eax, DWORD PTR [edx+5812]
  003d7	03 45 dc	 add	 eax, DWORD PTR tv287[ebp]
  003da	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003dd	89 81 b4 16 00
	00		 mov	 DWORD PTR [ecx+5812], eax
$LN14@deflate_st:

; 1759 :     }
; 1760 :     if (s->high_water < s->strstart)

  003e3	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003e6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003e9	8b 8a c0 16 00
	00		 mov	 ecx, DWORD PTR [edx+5824]
  003ef	3b 48 6c	 cmp	 ecx, DWORD PTR [eax+108]
  003f2	73 0f		 jae	 SHORT $LN19@deflate_st

; 1761 :         s->high_water = s->strstart;

  003f4	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003f7	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003fa	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  003fd	89 8a c0 16 00
	00		 mov	 DWORD PTR [edx+5824], ecx
$LN19@deflate_st:

; 1762 : 
; 1763 :     /* If the last block was written to next_out, then done. */
; 1764 :     if (last)

  00403	83 7d ec 00	 cmp	 DWORD PTR _last$[ebp], 0
  00407	74 0a		 je	 SHORT $LN20@deflate_st

; 1765 :         return finish_done;

  00409	b8 03 00 00 00	 mov	 eax, 3
  0040e	e9 8e 02 00 00	 jmp	 $LN1@deflate_st
$LN20@deflate_st:

; 1766 : 
; 1767 :     /* If flushing and all input has been consumed, then done. */
; 1768 :     if (flush != Z_NO_FLUSH && flush != Z_FINISH &&
; 1769 :         s->strm->avail_in == 0 && (long)s->strstart == s->block_start)

  00413	83 7d 0c 00	 cmp	 DWORD PTR _flush$[ebp], 0
  00417	74 29		 je	 SHORT $LN21@deflate_st
  00419	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  0041d	74 23		 je	 SHORT $LN21@deflate_st
  0041f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00422	8b 02		 mov	 eax, DWORD PTR [edx]
  00424	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00428	75 18		 jne	 SHORT $LN21@deflate_st
  0042a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0042d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00430	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  00433	3b 42 5c	 cmp	 eax, DWORD PTR [edx+92]
  00436	75 0a		 jne	 SHORT $LN21@deflate_st

; 1770 :         return block_done;

  00438	b8 01 00 00 00	 mov	 eax, 1
  0043d	e9 5f 02 00 00	 jmp	 $LN1@deflate_st
$LN21@deflate_st:

; 1771 : 
; 1772 :     /* Fill the window with any remaining input. */
; 1773 :     have = s->window_size - s->strstart - 1;

  00442	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00445	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00448	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  0044b	2b 42 6c	 sub	 eax, DWORD PTR [edx+108]
  0044e	83 e8 01	 sub	 eax, 1
  00451	89 45 f0	 mov	 DWORD PTR _have$[ebp], eax

; 1774 :     if (s->strm->avail_in > have && s->block_start >= (long)s->w_size) {

  00454	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00457	8b 11		 mov	 edx, DWORD PTR [ecx]
  00459	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0045c	3b 45 f0	 cmp	 eax, DWORD PTR _have$[ebp]
  0045f	0f 86 82 00 00
	00		 jbe	 $LN22@deflate_st
  00465	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00468	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0046b	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  0046e	3b 42 2c	 cmp	 eax, DWORD PTR [edx+44]
  00471	7c 74		 jl	 SHORT $LN22@deflate_st

; 1775 :         /* Slide the window down. */
; 1776 :         s->block_start -= s->w_size;

  00473	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00476	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00479	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  0047c	2b 42 2c	 sub	 eax, DWORD PTR [edx+44]
  0047f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00482	89 41 5c	 mov	 DWORD PTR [ecx+92], eax

; 1777 :         s->strstart -= s->w_size;

  00485	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00488	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0048b	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  0048e	2b 48 2c	 sub	 ecx, DWORD PTR [eax+44]
  00491	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00494	89 4a 6c	 mov	 DWORD PTR [edx+108], ecx

; 1778 :         zmemcpy(s->window, s->window + s->w_size, s->strstart);

  00497	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0049a	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  0049d	51		 push	 ecx
  0049e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004a1	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  004a4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004a7	03 41 2c	 add	 eax, DWORD PTR [ecx+44]
  004aa	50		 push	 eax
  004ab	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004ae	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  004b1	50		 push	 eax
  004b2	e8 00 00 00 00	 call	 _memcpy
  004b7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1779 :         if (s->matches < 2)

  004ba	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004bd	83 b9 b0 16 00
	00 02		 cmp	 DWORD PTR [ecx+5808], 2
  004c4	73 15		 jae	 SHORT $LN23@deflate_st

; 1780 :             s->matches++;           /* add a pending slide_hash() */

  004c6	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004c9	8b 82 b0 16 00
	00		 mov	 eax, DWORD PTR [edx+5808]
  004cf	83 c0 01	 add	 eax, 1
  004d2	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004d5	89 81 b0 16 00
	00		 mov	 DWORD PTR [ecx+5808], eax
$LN23@deflate_st:

; 1781 :         have += s->w_size;          /* more space now */

  004db	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004de	8b 45 f0	 mov	 eax, DWORD PTR _have$[ebp]
  004e1	03 42 2c	 add	 eax, DWORD PTR [edx+44]
  004e4	89 45 f0	 mov	 DWORD PTR _have$[ebp], eax
$LN22@deflate_st:

; 1782 :     }
; 1783 :     if (have > s->strm->avail_in)

  004e7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004ea	8b 11		 mov	 edx, DWORD PTR [ecx]
  004ec	8b 45 f0	 mov	 eax, DWORD PTR _have$[ebp]
  004ef	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  004f2	76 0b		 jbe	 SHORT $LN24@deflate_st

; 1784 :         have = s->strm->avail_in;

  004f4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004f7	8b 11		 mov	 edx, DWORD PTR [ecx]
  004f9	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  004fc	89 45 f0	 mov	 DWORD PTR _have$[ebp], eax
$LN24@deflate_st:

; 1785 :     if (have) {

  004ff	83 7d f0 00	 cmp	 DWORD PTR _have$[ebp], 0
  00503	74 2e		 je	 SHORT $LN25@deflate_st

; 1786 :         read_buf(s->strm, s->window + s->strstart, have);

  00505	8b 4d f0	 mov	 ecx, DWORD PTR _have$[ebp]
  00508	51		 push	 ecx
  00509	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0050c	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  0050f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00512	03 41 6c	 add	 eax, DWORD PTR [ecx+108]
  00515	50		 push	 eax
  00516	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00519	8b 02		 mov	 eax, DWORD PTR [edx]
  0051b	50		 push	 eax
  0051c	e8 00 00 00 00	 call	 _read_buf
  00521	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1787 :         s->strstart += have;

  00524	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00527	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  0052a	03 55 f0	 add	 edx, DWORD PTR _have$[ebp]
  0052d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00530	89 50 6c	 mov	 DWORD PTR [eax+108], edx
$LN25@deflate_st:

; 1788 :     }
; 1789 :     if (s->high_water < s->strstart)

  00533	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00536	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00539	8b 81 c0 16 00
	00		 mov	 eax, DWORD PTR [ecx+5824]
  0053f	3b 42 6c	 cmp	 eax, DWORD PTR [edx+108]
  00542	73 0f		 jae	 SHORT $LN26@deflate_st

; 1790 :         s->high_water = s->strstart;

  00544	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00547	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0054a	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  0054d	89 81 c0 16 00
	00		 mov	 DWORD PTR [ecx+5824], eax
$LN26@deflate_st:

; 1791 : 
; 1792 :     /* There was not enough avail_out to write a complete worthy or flushed
; 1793 :      * stored block to next_out. Write a stored block to pending instead, if we
; 1794 :      * have enough input for a worthy block, or if flushing and there is enough
; 1795 :      * room for the remaining input as a stored block in the pending buffer.
; 1796 :      */
; 1797 :     have = (s->bi_valid + 42) >> 3;         /* number of header bytes */

  00553	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00556	8b 91 bc 16 00
	00		 mov	 edx, DWORD PTR [ecx+5820]
  0055c	83 c2 2a	 add	 edx, 42			; 0000002aH
  0055f	c1 fa 03	 sar	 edx, 3
  00562	89 55 f0	 mov	 DWORD PTR _have$[ebp], edx

; 1798 :         /* maximum stored block length that will fit in pending: */
; 1799 :     have = MIN(s->pending_buf_size - have, MAX_STORED);

  00565	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00568	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0056b	2b 4d f0	 sub	 ecx, DWORD PTR _have$[ebp]
  0056e	81 f9 ff ff 00
	00		 cmp	 ecx, 65535		; 0000ffffH
  00574	76 09		 jbe	 SHORT $LN37@deflate_st
  00576	c7 45 d8 ff ff
	00 00		 mov	 DWORD PTR tv367[ebp], 65535 ; 0000ffffH
  0057d	eb 0c		 jmp	 SHORT $LN38@deflate_st
$LN37@deflate_st:
  0057f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00582	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00585	2b 45 f0	 sub	 eax, DWORD PTR _have$[ebp]
  00588	89 45 d8	 mov	 DWORD PTR tv367[ebp], eax
$LN38@deflate_st:
  0058b	8b 4d d8	 mov	 ecx, DWORD PTR tv367[ebp]
  0058e	89 4d f0	 mov	 DWORD PTR _have$[ebp], ecx

; 1800 :     min_block = MIN(have, s->w_size);

  00591	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00594	8b 45 f0	 mov	 eax, DWORD PTR _have$[ebp]
  00597	3b 42 2c	 cmp	 eax, DWORD PTR [edx+44]
  0059a	76 0b		 jbe	 SHORT $LN39@deflate_st
  0059c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0059f	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  005a2	89 55 d4	 mov	 DWORD PTR tv371[ebp], edx
  005a5	eb 06		 jmp	 SHORT $LN40@deflate_st
$LN39@deflate_st:
  005a7	8b 45 f0	 mov	 eax, DWORD PTR _have$[ebp]
  005aa	89 45 d4	 mov	 DWORD PTR tv371[ebp], eax
$LN40@deflate_st:
  005ad	8b 4d d4	 mov	 ecx, DWORD PTR tv371[ebp]
  005b0	89 4d fc	 mov	 DWORD PTR _min_block$[ebp], ecx

; 1801 :     left = s->strstart - s->block_start;

  005b3	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  005b6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005b9	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  005bc	2b 48 5c	 sub	 ecx, DWORD PTR [eax+92]
  005bf	89 4d f4	 mov	 DWORD PTR _left$[ebp], ecx

; 1802 :     if (left >= min_block ||

  005c2	8b 55 f4	 mov	 edx, DWORD PTR _left$[ebp]
  005c5	3b 55 fc	 cmp	 edx, DWORD PTR _min_block$[ebp]
  005c8	73 35		 jae	 SHORT $LN28@deflate_st
  005ca	83 7d f4 00	 cmp	 DWORD PTR _left$[ebp], 0
  005ce	75 0a		 jne	 SHORT $LN29@deflate_st
  005d0	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  005d4	0f 85 ae 00 00
	00		 jne	 $LN27@deflate_st
$LN29@deflate_st:
  005da	83 7d 0c 00	 cmp	 DWORD PTR _flush$[ebp], 0
  005de	0f 84 a4 00 00
	00		 je	 $LN27@deflate_st
  005e4	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005e7	8b 08		 mov	 ecx, DWORD PTR [eax]
  005e9	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  005ed	0f 85 95 00 00
	00		 jne	 $LN27@deflate_st
  005f3	8b 55 f4	 mov	 edx, DWORD PTR _left$[ebp]
  005f6	3b 55 f0	 cmp	 edx, DWORD PTR _have$[ebp]
  005f9	0f 87 89 00 00
	00		 ja	 $LN27@deflate_st
$LN28@deflate_st:

; 1803 :         ((left || flush == Z_FINISH) && flush != Z_NO_FLUSH &&
; 1804 :          s->strm->avail_in == 0 && left <= have)) {
; 1805 :         len = MIN(left, have);

  005ff	8b 45 f4	 mov	 eax, DWORD PTR _left$[ebp]
  00602	3b 45 f0	 cmp	 eax, DWORD PTR _have$[ebp]
  00605	76 08		 jbe	 SHORT $LN41@deflate_st
  00607	8b 4d f0	 mov	 ecx, DWORD PTR _have$[ebp]
  0060a	89 4d d0	 mov	 DWORD PTR tv384[ebp], ecx
  0060d	eb 06		 jmp	 SHORT $LN42@deflate_st
$LN41@deflate_st:
  0060f	8b 55 f4	 mov	 edx, DWORD PTR _left$[ebp]
  00612	89 55 d0	 mov	 DWORD PTR tv384[ebp], edx
$LN42@deflate_st:
  00615	8b 45 d0	 mov	 eax, DWORD PTR tv384[ebp]
  00618	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax

; 1806 :         last = flush == Z_FINISH && s->strm->avail_in == 0 &&

  0061b	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  0061f	75 1c		 jne	 SHORT $LN43@deflate_st
  00621	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00624	8b 11		 mov	 edx, DWORD PTR [ecx]
  00626	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0062a	75 11		 jne	 SHORT $LN43@deflate_st
  0062c	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  0062f	3b 45 f4	 cmp	 eax, DWORD PTR _left$[ebp]
  00632	75 09		 jne	 SHORT $LN43@deflate_st
  00634	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR tv390[ebp], 1
  0063b	eb 07		 jmp	 SHORT $LN44@deflate_st
$LN43@deflate_st:
  0063d	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR tv390[ebp], 0
$LN44@deflate_st:
  00644	8b 4d cc	 mov	 ecx, DWORD PTR tv390[ebp]
  00647	89 4d ec	 mov	 DWORD PTR _last$[ebp], ecx

; 1807 :                len == left ? 1 : 0;
; 1808 :         _tr_stored_block(s, (charf *)s->window + s->block_start, len, last);

  0064a	8b 55 ec	 mov	 edx, DWORD PTR _last$[ebp]
  0064d	52		 push	 edx
  0064e	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  00651	50		 push	 eax
  00652	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00655	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00658	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0065b	03 50 5c	 add	 edx, DWORD PTR [eax+92]
  0065e	52		 push	 edx
  0065f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00662	51		 push	 ecx
  00663	e8 00 00 00 00	 call	 __tr_stored_block
  00668	83 c4 10	 add	 esp, 16			; 00000010H

; 1809 :         s->block_start += len;

  0066b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0066e	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  00671	03 45 f8	 add	 eax, DWORD PTR _len$[ebp]
  00674	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00677	89 41 5c	 mov	 DWORD PTR [ecx+92], eax

; 1810 :         flush_pending(s->strm);

  0067a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0067d	8b 02		 mov	 eax, DWORD PTR [edx]
  0067f	50		 push	 eax
  00680	e8 00 00 00 00	 call	 _flush_pending
  00685	83 c4 04	 add	 esp, 4
$LN27@deflate_st:

; 1811 :     }
; 1812 : 
; 1813 :     /* We've done all we can with the available input and output. */
; 1814 :     return last ? finish_started : need_more;

  00688	83 7d ec 00	 cmp	 DWORD PTR _last$[ebp], 0
  0068c	74 09		 je	 SHORT $LN45@deflate_st
  0068e	c7 45 c8 02 00
	00 00		 mov	 DWORD PTR tv404[ebp], 2
  00695	eb 07		 jmp	 SHORT $LN46@deflate_st
$LN45@deflate_st:
  00697	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR tv404[ebp], 0
$LN46@deflate_st:
  0069e	8b 45 c8	 mov	 eax, DWORD PTR tv404[ebp]
$LN1@deflate_st:

; 1815 : }

  006a1	5f		 pop	 edi
  006a2	83 c4 38	 add	 esp, 56			; 00000038H
  006a5	3b ec		 cmp	 ebp, esp
  006a7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  006ac	8b e5		 mov	 esp, ebp
  006ae	5d		 pop	 ebp
  006af	c3		 ret	 0
_deflate_stored ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflate_fast
_TEXT	SEGMENT
tv424 = -52						; size = 4
tv401 = -48						; size = 4
tv388 = -44						; size = 4
tv374 = -40						; size = 4
tv353 = -36						; size = 4
tv288 = -32						; size = 4
tv233 = -28						; size = 4
tv216 = -24						; size = 4
_cc$1 = -17						; size = 1
_dist$2 = -16						; size = 2
_len$3 = -9						; size = 1
_bflush$ = -8						; size = 4
_hash_head$ = -4					; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_fast PROC					; COMDAT

; 1827 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  0000b	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
$LN4@deflate_fa:

; 1828 :     IPos hash_head;       /* head of the hash chain */
; 1829 :     int bflush;           /* set if current block must be flushed */
; 1830 : 
; 1831 :     for (;;) {
; 1832 :         /* Make sure that we always have enough lookahead, except
; 1833 :          * at the end of the input file. We need MAX_MATCH bytes
; 1834 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1835 :          * string following the next match.
; 1836 :          */
; 1837 :         if (s->lookahead < MIN_LOOKAHEAD) {

  00021	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00024	81 78 74 06 01
	00 00		 cmp	 DWORD PTR [eax+116], 262 ; 00000106H
  0002b	73 33		 jae	 SHORT $LN8@deflate_fa

; 1838 :             fill_window(s);

  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00030	51		 push	 ecx
  00031	e8 00 00 00 00	 call	 _fill_window
  00036	83 c4 04	 add	 esp, 4

; 1839 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

  00039	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0003c	81 7a 74 06 01
	00 00		 cmp	 DWORD PTR [edx+116], 262 ; 00000106H
  00043	73 0d		 jae	 SHORT $LN9@deflate_fa
  00045	83 7d 0c 00	 cmp	 DWORD PTR _flush$[ebp], 0
  00049	75 07		 jne	 SHORT $LN9@deflate_fa

; 1840 :                 return need_more;

  0004b	33 c0		 xor	 eax, eax
  0004d	e9 c9 05 00 00	 jmp	 $LN1@deflate_fa
$LN9@deflate_fa:

; 1841 :             }
; 1842 :             if (s->lookahead == 0) break; /* flush the current block */

  00052	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00055	83 78 74 00	 cmp	 DWORD PTR [eax+116], 0
  00059	75 05		 jne	 SHORT $LN8@deflate_fa
  0005b	e9 9e 04 00 00	 jmp	 $LN3@deflate_fa
$LN8@deflate_fa:

; 1843 :         }
; 1844 : 
; 1845 :         /* Insert the string window[strstart .. strstart+2] in the
; 1846 :          * dictionary, and set hash_head to the head of the hash chain:
; 1847 :          */
; 1848 :         hash_head = NIL;

  00060	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hash_head$[ebp], 0

; 1849 :         if (s->lookahead >= MIN_MATCH) {

  00067	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0006a	83 79 74 03	 cmp	 DWORD PTR [ecx+116], 3
  0006e	0f 82 83 00 00
	00		 jb	 $LN11@deflate_fa

; 1850 :             INSERT_STRING(s, s->strstart, hash_head);

  00074	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00077	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0007a	8b 52 48	 mov	 edx, DWORD PTR [edx+72]
  0007d	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00080	d3 e2		 shl	 edx, cl
  00082	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00085	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  00088	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0008b	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  0008e	0f b6 4c 08 02	 movzx	 ecx, BYTE PTR [eax+ecx+2]
  00093	33 d1		 xor	 edx, ecx
  00095	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00098	23 50 54	 and	 edx, DWORD PTR [eax+84]
  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0009e	89 51 48	 mov	 DWORD PTR [ecx+72], edx
  000a1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000a4	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  000a7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000aa	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  000ad	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000b0	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  000b3	8b 49 6c	 mov	 ecx, DWORD PTR [ecx+108]
  000b6	23 4e 34	 and	 ecx, DWORD PTR [esi+52]
  000b9	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  000bc	8b 76 40	 mov	 esi, DWORD PTR [esi+64]
  000bf	66 8b 14 42	 mov	 dx, WORD PTR [edx+eax*2]
  000c3	66 89 14 4e	 mov	 WORD PTR [esi+ecx*2], dx
  000c7	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000ca	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000cd	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  000d0	23 51 34	 and	 edx, DWORD PTR [ecx+52]
  000d3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000d6	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  000d9	0f b7 14 51	 movzx	 edx, WORD PTR [ecx+edx*2]
  000dd	89 55 fc	 mov	 DWORD PTR _hash_head$[ebp], edx
  000e0	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000e3	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  000e6	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000e9	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  000ec	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000ef	66 8b 52 6c	 mov	 dx, WORD PTR [edx+108]
  000f3	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN11@deflate_fa:

; 1851 :         }
; 1852 : 
; 1853 :         /* Find the longest match, discarding those <= prev_length.
; 1854 :          * At this point we have always match_length < MIN_MATCH
; 1855 :          */
; 1856 :         if (hash_head != NIL && s->strstart - hash_head <= MAX_DIST(s)) {

  000f7	83 7d fc 00	 cmp	 DWORD PTR _hash_head$[ebp], 0
  000fb	74 31		 je	 SHORT $LN12@deflate_fa
  000fd	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00100	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  00103	2b 4d fc	 sub	 ecx, DWORD PTR _hash_head$[ebp]
  00106	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00109	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0010c	2d 06 01 00 00	 sub	 eax, 262		; 00000106H
  00111	3b c8		 cmp	 ecx, eax
  00113	77 19		 ja	 SHORT $LN12@deflate_fa

; 1857 :             /* To simplify the code, we prevent matches with the string
; 1858 :              * of window index 0 (in particular we have to avoid a match
; 1859 :              * of the string with itself at the start of the input file).
; 1860 :              */
; 1861 :             s->match_length = longest_match (s, hash_head);

  00115	0f ae e8	 lfence
  00118	8b 4d fc	 mov	 ecx, DWORD PTR _hash_head$[ebp]
  0011b	51		 push	 ecx
  0011c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0011f	52		 push	 edx
  00120	e8 00 00 00 00	 call	 _longest_match
  00125	83 c4 08	 add	 esp, 8
  00128	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0012b	89 41 60	 mov	 DWORD PTR [ecx+96], eax
$LN12@deflate_fa:

; 1862 :             /* longest_match() sets match_start */
; 1863 :         }
; 1864 :         if (s->match_length >= MIN_MATCH) {

  0012e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00131	83 7a 60 03	 cmp	 DWORD PTR [edx+96], 3
  00135	0f 82 88 02 00
	00		 jb	 $LN13@deflate_fa

; 1865 :             check_match(s, s->strstart, s->match_start, s->match_length);
; 1866 : 
; 1867 :             _tr_tally_dist(s, s->strstart - s->match_start,

  0013b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0013e	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00141	83 e9 03	 sub	 ecx, 3
  00144	88 4d f7	 mov	 BYTE PTR _len$3[ebp], cl
  00147	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0014a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0014d	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  00150	2b 48 70	 sub	 ecx, DWORD PTR [eax+112]
  00153	66 89 4d f0	 mov	 WORD PTR _dist$2[ebp], cx
  00157	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0015a	8b 82 a0 16 00
	00		 mov	 eax, DWORD PTR [edx+5792]
  00160	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00163	8b 91 a4 16 00
	00		 mov	 edx, DWORD PTR [ecx+5796]
  00169	66 8b 4d f0	 mov	 cx, WORD PTR _dist$2[ebp]
  0016d	66 89 0c 42	 mov	 WORD PTR [edx+eax*2], cx
  00171	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00174	8b 82 a0 16 00
	00		 mov	 eax, DWORD PTR [edx+5792]
  0017a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0017d	8b 91 98 16 00
	00		 mov	 edx, DWORD PTR [ecx+5784]
  00183	8a 4d f7	 mov	 cl, BYTE PTR _len$3[ebp]
  00186	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00189	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0018c	8b 82 a0 16 00
	00		 mov	 eax, DWORD PTR [edx+5792]
  00192	83 c0 01	 add	 eax, 1
  00195	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00198	89 81 a0 16 00
	00		 mov	 DWORD PTR [ecx+5792], eax
  0019e	66 8b 55 f0	 mov	 dx, WORD PTR _dist$2[ebp]
  001a2	66 83 ea 01	 sub	 dx, 1
  001a6	66 89 55 f0	 mov	 WORD PTR _dist$2[ebp], dx
  001aa	0f b6 45 f7	 movzx	 eax, BYTE PTR _len$3[ebp]
  001ae	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR __length_code[eax]
  001b5	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001b8	66 8b 84 8a 98
	04 00 00	 mov	 ax, WORD PTR [edx+ecx*4+1176]
  001c0	66 83 c0 01	 add	 ax, 1
  001c4	0f b6 4d f7	 movzx	 ecx, BYTE PTR _len$3[ebp]
  001c8	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR __length_code[ecx]
  001cf	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001d2	66 89 84 91 98
	04 00 00	 mov	 WORD PTR [ecx+edx*4+1176], ax
  001da	0f b7 55 f0	 movzx	 edx, WORD PTR _dist$2[ebp]
  001de	81 fa 00 01 00
	00		 cmp	 edx, 256		; 00000100H
  001e4	7d 13		 jge	 SHORT $LN24@deflate_fa
  001e6	0f ae e8	 lfence
  001e9	0f b7 45 f0	 movzx	 eax, WORD PTR _dist$2[ebp]
  001ed	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR __dist_code[eax]
  001f4	89 4d e8	 mov	 DWORD PTR tv216[ebp], ecx
  001f7	eb 14		 jmp	 SHORT $LN25@deflate_fa
$LN24@deflate_fa:
  001f9	0f ae e8	 lfence
  001fc	0f b7 55 f0	 movzx	 edx, WORD PTR _dist$2[ebp]
  00200	c1 fa 07	 sar	 edx, 7
  00203	0f b6 82 00 01
	00 00		 movzx	 eax, BYTE PTR __dist_code[edx+256]
  0020a	89 45 e8	 mov	 DWORD PTR tv216[ebp], eax
$LN25@deflate_fa:
  0020d	8b 4d e8	 mov	 ecx, DWORD PTR tv216[ebp]
  00210	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00213	66 8b 84 8a 88
	09 00 00	 mov	 ax, WORD PTR [edx+ecx*4+2440]
  0021b	66 83 c0 01	 add	 ax, 1
  0021f	8b 4d e8	 mov	 ecx, DWORD PTR tv216[ebp]
  00222	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00225	66 89 84 8a 88
	09 00 00	 mov	 WORD PTR [edx+ecx*4+2440], ax
  0022d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00230	8b 88 9c 16 00
	00		 mov	 ecx, DWORD PTR [eax+5788]
  00236	83 e9 01	 sub	 ecx, 1
  00239	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0023c	39 8a a0 16 00
	00		 cmp	 DWORD PTR [edx+5792], ecx
  00242	75 09		 jne	 SHORT $LN26@deflate_fa
  00244	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR tv233[ebp], 1
  0024b	eb 07		 jmp	 SHORT $LN27@deflate_fa
$LN26@deflate_fa:
  0024d	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv233[ebp], 0
$LN27@deflate_fa:
  00254	8b 45 e4	 mov	 eax, DWORD PTR tv233[ebp]
  00257	89 45 f8	 mov	 DWORD PTR _bflush$[ebp], eax

; 1868 :                            s->match_length - MIN_MATCH, bflush);
; 1869 : 
; 1870 :             s->lookahead -= s->match_length;

  0025a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0025d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00260	8b 41 74	 mov	 eax, DWORD PTR [ecx+116]
  00263	2b 42 60	 sub	 eax, DWORD PTR [edx+96]
  00266	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00269	89 41 74	 mov	 DWORD PTR [ecx+116], eax

; 1871 : 
; 1872 :             /* Insert new strings in the hash table only if the match length
; 1873 :              * is not too large. This saves time but degrades compression.
; 1874 :              */
; 1875 : #ifndef FASTEST
; 1876 :             if (s->match_length <= s->max_insert_length &&

  0026c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0026f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00272	8b 4a 60	 mov	 ecx, DWORD PTR [edx+96]
  00275	3b 88 80 00 00
	00		 cmp	 ecx, DWORD PTR [eax+128]
  0027b	0f 87 de 00 00
	00		 ja	 $LN15@deflate_fa
  00281	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00284	83 7a 74 03	 cmp	 DWORD PTR [edx+116], 3
  00288	0f 82 d1 00 00
	00		 jb	 $LN15@deflate_fa

; 1877 :                 s->lookahead >= MIN_MATCH) {
; 1878 :                 s->match_length--; /* string at strstart already in table */

  0028e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00291	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00294	83 e9 01	 sub	 ecx, 1
  00297	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0029a	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
$LN7@deflate_fa:

; 1879 :                 do {
; 1880 :                     s->strstart++;

  0029d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002a0	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  002a3	83 c1 01	 add	 ecx, 1
  002a6	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002a9	89 4a 6c	 mov	 DWORD PTR [edx+108], ecx

; 1881 :                     INSERT_STRING(s, s->strstart, hash_head);

  002ac	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002af	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002b2	8b 50 48	 mov	 edx, DWORD PTR [eax+72]
  002b5	8b 49 58	 mov	 ecx, DWORD PTR [ecx+88]
  002b8	d3 e2		 shl	 edx, cl
  002ba	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002bd	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  002c0	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002c3	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  002c6	0f b6 4c 08 02	 movzx	 ecx, BYTE PTR [eax+ecx+2]
  002cb	33 d1		 xor	 edx, ecx
  002cd	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002d0	23 50 54	 and	 edx, DWORD PTR [eax+84]
  002d3	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002d6	89 51 48	 mov	 DWORD PTR [ecx+72], edx
  002d9	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002dc	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  002df	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002e2	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  002e5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002e8	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  002eb	8b 49 6c	 mov	 ecx, DWORD PTR [ecx+108]
  002ee	23 4e 34	 and	 ecx, DWORD PTR [esi+52]
  002f1	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  002f4	8b 76 40	 mov	 esi, DWORD PTR [esi+64]
  002f7	66 8b 14 42	 mov	 dx, WORD PTR [edx+eax*2]
  002fb	66 89 14 4e	 mov	 WORD PTR [esi+ecx*2], dx
  002ff	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00302	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00305	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  00308	23 51 34	 and	 edx, DWORD PTR [ecx+52]
  0030b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0030e	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00311	0f b7 14 51	 movzx	 edx, WORD PTR [ecx+edx*2]
  00315	89 55 fc	 mov	 DWORD PTR _hash_head$[ebp], edx
  00318	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0031b	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  0031e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00321	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00324	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00327	66 8b 52 6c	 mov	 dx, WORD PTR [edx+108]
  0032b	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 1882 :                     /* strstart never exceeds WSIZE-MAX_MATCH, so there are
; 1883 :                      * always MIN_MATCH bytes ahead.
; 1884 :                      */
; 1885 :                 } while (--s->match_length != 0);

  0032f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00332	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00335	83 e9 01	 sub	 ecx, 1
  00338	89 4d e0	 mov	 DWORD PTR tv288[ebp], ecx
  0033b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0033e	8b 45 e0	 mov	 eax, DWORD PTR tv288[ebp]
  00341	89 42 60	 mov	 DWORD PTR [edx+96], eax
  00344	83 7d e0 00	 cmp	 DWORD PTR tv288[ebp], 0
  00348	0f 85 4f ff ff
	ff		 jne	 $LN7@deflate_fa

; 1886 :                 s->strstart++;

  0034e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00351	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  00354	83 c2 01	 add	 edx, 1
  00357	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0035a	89 50 6c	 mov	 DWORD PTR [eax+108], edx

; 1887 :             } else

  0035d	eb 5f		 jmp	 SHORT $LN16@deflate_fa
$LN15@deflate_fa:

; 1888 : #endif
; 1889 :             {
; 1890 :                 s->strstart += s->match_length;

  0035f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00362	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  00365	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00368	03 50 60	 add	 edx, DWORD PTR [eax+96]
  0036b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0036e	89 51 6c	 mov	 DWORD PTR [ecx+108], edx

; 1891 :                 s->match_length = 0;

  00371	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00374	c7 42 60 00 00
	00 00		 mov	 DWORD PTR [edx+96], 0

; 1892 :                 s->ins_h = s->window[s->strstart];

  0037b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0037e	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  00381	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00384	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00387	0f b6 0c 08	 movzx	 ecx, BYTE PTR [eax+ecx]
  0038b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0038e	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 1893 :                 UPDATE_HASH(s, s->ins_h, s->window[s->strstart+1]);

  00391	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00394	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00397	8b 50 48	 mov	 edx, DWORD PTR [eax+72]
  0039a	8b 49 58	 mov	 ecx, DWORD PTR [ecx+88]
  0039d	d3 e2		 shl	 edx, cl
  0039f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003a2	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  003a5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003a8	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  003ab	0f b6 4c 08 01	 movzx	 ecx, BYTE PTR [eax+ecx+1]
  003b0	33 d1		 xor	 edx, ecx
  003b2	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003b5	23 50 54	 and	 edx, DWORD PTR [eax+84]
  003b8	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003bb	89 51 48	 mov	 DWORD PTR [ecx+72], edx
$LN16@deflate_fa:

; 1894 : #if MIN_MATCH != 3
; 1895 :                 Call UPDATE_HASH() MIN_MATCH-3 more times
; 1896 : #endif
; 1897 :                 /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
; 1898 :                  * matter since it will be recomputed at next deflate call.
; 1899 :                  */
; 1900 :             }
; 1901 :         } else {

  003be	e9 c4 00 00 00	 jmp	 $LN14@deflate_fa
$LN13@deflate_fa:

; 1902 :             /* No match, output a literal byte */
; 1903 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 1904 :             _tr_tally_lit (s, s->window[s->strstart], bflush);

  003c3	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003c6	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  003c9	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003cc	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  003cf	8a 04 02	 mov	 al, BYTE PTR [edx+eax]
  003d2	88 45 ef	 mov	 BYTE PTR _cc$1[ebp], al
  003d5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003d8	8b 91 a0 16 00
	00		 mov	 edx, DWORD PTR [ecx+5792]
  003de	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003e1	8b 88 a4 16 00
	00		 mov	 ecx, DWORD PTR [eax+5796]
  003e7	33 c0		 xor	 eax, eax
  003e9	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  003ed	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003f0	8b 91 a0 16 00
	00		 mov	 edx, DWORD PTR [ecx+5792]
  003f6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003f9	8b 88 98 16 00
	00		 mov	 ecx, DWORD PTR [eax+5784]
  003ff	8a 45 ef	 mov	 al, BYTE PTR _cc$1[ebp]
  00402	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  00405	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00408	8b 91 a0 16 00
	00		 mov	 edx, DWORD PTR [ecx+5792]
  0040e	83 c2 01	 add	 edx, 1
  00411	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00414	89 90 a0 16 00
	00		 mov	 DWORD PTR [eax+5792], edx
  0041a	0f b6 4d ef	 movzx	 ecx, BYTE PTR _cc$1[ebp]
  0041e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00421	66 8b 84 8a 94
	00 00 00	 mov	 ax, WORD PTR [edx+ecx*4+148]
  00429	66 83 c0 01	 add	 ax, 1
  0042d	0f b6 4d ef	 movzx	 ecx, BYTE PTR _cc$1[ebp]
  00431	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00434	66 89 84 8a 94
	00 00 00	 mov	 WORD PTR [edx+ecx*4+148], ax
  0043c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0043f	8b 88 9c 16 00
	00		 mov	 ecx, DWORD PTR [eax+5788]
  00445	83 e9 01	 sub	 ecx, 1
  00448	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0044b	39 8a a0 16 00
	00		 cmp	 DWORD PTR [edx+5792], ecx
  00451	75 09		 jne	 SHORT $LN28@deflate_fa
  00453	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR tv353[ebp], 1
  0045a	eb 07		 jmp	 SHORT $LN29@deflate_fa
$LN28@deflate_fa:
  0045c	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv353[ebp], 0
$LN29@deflate_fa:
  00463	8b 45 dc	 mov	 eax, DWORD PTR tv353[ebp]
  00466	89 45 f8	 mov	 DWORD PTR _bflush$[ebp], eax

; 1905 :             s->lookahead--;

  00469	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0046c	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  0046f	83 ea 01	 sub	 edx, 1
  00472	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00475	89 50 74	 mov	 DWORD PTR [eax+116], edx

; 1906 :             s->strstart++;

  00478	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0047b	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  0047e	83 c2 01	 add	 edx, 1
  00481	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00484	89 50 6c	 mov	 DWORD PTR [eax+108], edx
$LN14@deflate_fa:

; 1907 :         }
; 1908 :         if (bflush) FLUSH_BLOCK(s, 0);

  00487	83 7d f8 00	 cmp	 DWORD PTR _bflush$[ebp], 0
  0048b	74 6c		 je	 SHORT $LN17@deflate_fa
  0048d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00490	83 79 5c 00	 cmp	 DWORD PTR [ecx+92], 0
  00494	7c 11		 jl	 SHORT $LN30@deflate_fa
  00496	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00499	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  0049c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0049f	03 41 5c	 add	 eax, DWORD PTR [ecx+92]
  004a2	89 45 d8	 mov	 DWORD PTR tv374[ebp], eax
  004a5	eb 07		 jmp	 SHORT $LN31@deflate_fa
$LN30@deflate_fa:
  004a7	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv374[ebp], 0
$LN31@deflate_fa:
  004ae	6a 00		 push	 0
  004b0	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004b3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004b6	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  004b9	2b 48 5c	 sub	 ecx, DWORD PTR [eax+92]
  004bc	51		 push	 ecx
  004bd	8b 55 d8	 mov	 edx, DWORD PTR tv374[ebp]
  004c0	52		 push	 edx
  004c1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004c4	50		 push	 eax
  004c5	e8 00 00 00 00	 call	 __tr_flush_block
  004ca	83 c4 10	 add	 esp, 16			; 00000010H
  004cd	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004d0	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004d3	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  004d6	89 41 5c	 mov	 DWORD PTR [ecx+92], eax
  004d9	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004dc	8b 11		 mov	 edx, DWORD PTR [ecx]
  004de	52		 push	 edx
  004df	e8 00 00 00 00	 call	 _flush_pending
  004e4	83 c4 04	 add	 esp, 4
  004e7	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004ea	8b 08		 mov	 ecx, DWORD PTR [eax]
  004ec	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  004f0	75 07		 jne	 SHORT $LN17@deflate_fa
  004f2	33 c0		 xor	 eax, eax
  004f4	e9 22 01 00 00	 jmp	 $LN1@deflate_fa
$LN17@deflate_fa:

; 1909 :     }

  004f9	e9 23 fb ff ff	 jmp	 $LN4@deflate_fa
$LN3@deflate_fa:

; 1910 :     s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;

  004fe	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00501	83 7a 6c 02	 cmp	 DWORD PTR [edx+108], 2
  00505	73 0b		 jae	 SHORT $LN32@deflate_fa
  00507	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0050a	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  0050d	89 4d d4	 mov	 DWORD PTR tv388[ebp], ecx
  00510	eb 07		 jmp	 SHORT $LN33@deflate_fa
$LN32@deflate_fa:
  00512	c7 45 d4 02 00
	00 00		 mov	 DWORD PTR tv388[ebp], 2
$LN33@deflate_fa:
  00519	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0051c	8b 45 d4	 mov	 eax, DWORD PTR tv388[ebp]
  0051f	89 82 b4 16 00
	00		 mov	 DWORD PTR [edx+5812], eax

; 1911 :     if (flush == Z_FINISH) {

  00525	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  00529	75 76		 jne	 SHORT $LN19@deflate_fa

; 1912 :         FLUSH_BLOCK(s, 1);

  0052b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0052e	83 79 5c 00	 cmp	 DWORD PTR [ecx+92], 0
  00532	7c 11		 jl	 SHORT $LN34@deflate_fa
  00534	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00537	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  0053a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0053d	03 41 5c	 add	 eax, DWORD PTR [ecx+92]
  00540	89 45 d0	 mov	 DWORD PTR tv401[ebp], eax
  00543	eb 07		 jmp	 SHORT $LN35@deflate_fa
$LN34@deflate_fa:
  00545	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv401[ebp], 0
$LN35@deflate_fa:
  0054c	6a 01		 push	 1
  0054e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00551	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00554	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  00557	2b 48 5c	 sub	 ecx, DWORD PTR [eax+92]
  0055a	51		 push	 ecx
  0055b	8b 55 d0	 mov	 edx, DWORD PTR tv401[ebp]
  0055e	52		 push	 edx
  0055f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00562	50		 push	 eax
  00563	e8 00 00 00 00	 call	 __tr_flush_block
  00568	83 c4 10	 add	 esp, 16			; 00000010H
  0056b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0056e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00571	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00574	89 41 5c	 mov	 DWORD PTR [ecx+92], eax
  00577	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0057a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0057c	52		 push	 edx
  0057d	e8 00 00 00 00	 call	 _flush_pending
  00582	83 c4 04	 add	 esp, 4
  00585	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00588	8b 08		 mov	 ecx, DWORD PTR [eax]
  0058a	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  0058e	75 0a		 jne	 SHORT $LN20@deflate_fa
  00590	b8 02 00 00 00	 mov	 eax, 2
  00595	e9 81 00 00 00	 jmp	 $LN1@deflate_fa
$LN20@deflate_fa:

; 1913 :         return finish_done;

  0059a	b8 03 00 00 00	 mov	 eax, 3
  0059f	eb 7a		 jmp	 SHORT $LN1@deflate_fa
$LN19@deflate_fa:

; 1914 :     }
; 1915 :     if (s->last_lit)

  005a1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  005a4	83 ba a0 16 00
	00 00		 cmp	 DWORD PTR [edx+5792], 0
  005ab	74 69		 je	 SHORT $LN21@deflate_fa

; 1916 :         FLUSH_BLOCK(s, 0);

  005ad	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005b0	83 78 5c 00	 cmp	 DWORD PTR [eax+92], 0
  005b4	7c 11		 jl	 SHORT $LN36@deflate_fa
  005b6	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  005b9	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  005bc	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005bf	03 50 5c	 add	 edx, DWORD PTR [eax+92]
  005c2	89 55 cc	 mov	 DWORD PTR tv424[ebp], edx
  005c5	eb 07		 jmp	 SHORT $LN37@deflate_fa
$LN36@deflate_fa:
  005c7	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR tv424[ebp], 0
$LN37@deflate_fa:
  005ce	6a 00		 push	 0
  005d0	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  005d3	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  005d6	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  005d9	2b 42 5c	 sub	 eax, DWORD PTR [edx+92]
  005dc	50		 push	 eax
  005dd	8b 4d cc	 mov	 ecx, DWORD PTR tv424[ebp]
  005e0	51		 push	 ecx
  005e1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  005e4	52		 push	 edx
  005e5	e8 00 00 00 00	 call	 __tr_flush_block
  005ea	83 c4 10	 add	 esp, 16			; 00000010H
  005ed	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005f0	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  005f3	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  005f6	89 50 5c	 mov	 DWORD PTR [eax+92], edx
  005f9	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005fc	8b 08		 mov	 ecx, DWORD PTR [eax]
  005fe	51		 push	 ecx
  005ff	e8 00 00 00 00	 call	 _flush_pending
  00604	83 c4 04	 add	 esp, 4
  00607	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0060a	8b 02		 mov	 eax, DWORD PTR [edx]
  0060c	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00610	75 04		 jne	 SHORT $LN21@deflate_fa
  00612	33 c0		 xor	 eax, eax
  00614	eb 05		 jmp	 SHORT $LN1@deflate_fa
$LN21@deflate_fa:

; 1917 :     return block_done;

  00616	b8 01 00 00 00	 mov	 eax, 1
$LN1@deflate_fa:

; 1918 : }

  0061b	5f		 pop	 edi
  0061c	5e		 pop	 esi
  0061d	83 c4 34	 add	 esp, 52			; 00000034H
  00620	3b ec		 cmp	 ebp, esp
  00622	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00627	8b e5		 mov	 esp, ebp
  00629	5d		 pop	 ebp
  0062a	c3		 ret	 0
_deflate_fast ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflate_slow
_TEXT	SEGMENT
tv498 = -68						; size = 4
tv475 = -64						; size = 4
tv462 = -60						; size = 4
tv456 = -56						; size = 4
tv391 = -52						; size = 4
tv378 = -48						; size = 4
tv330 = -44						; size = 4
tv310 = -40						; size = 4
tv271 = -36						; size = 4
tv260 = -32						; size = 4
tv243 = -28						; size = 4
_cc$1 = -22						; size = 1
_cc$2 = -21						; size = 1
_dist$3 = -20						; size = 2
_len$4 = -13						; size = 1
_max_insert$5 = -12					; size = 4
_bflush$ = -8						; size = 4
_hash_head$ = -4					; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_slow PROC					; COMDAT

; 1929 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d bc	 lea	 edi, DWORD PTR [ebp-68]
  0000b	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
$LN4@deflate_sl:

; 1930 :     IPos hash_head;          /* head of hash chain */
; 1931 :     int bflush;              /* set if current block must be flushed */
; 1932 : 
; 1933 :     /* Process the input block. */
; 1934 :     for (;;) {
; 1935 :         /* Make sure that we always have enough lookahead, except
; 1936 :          * at the end of the input file. We need MAX_MATCH bytes
; 1937 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1938 :          * string following the next match.
; 1939 :          */
; 1940 :         if (s->lookahead < MIN_LOOKAHEAD) {

  00021	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00024	81 78 74 06 01
	00 00		 cmp	 DWORD PTR [eax+116], 262 ; 00000106H
  0002b	73 33		 jae	 SHORT $LN8@deflate_sl

; 1941 :             fill_window(s);

  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00030	51		 push	 ecx
  00031	e8 00 00 00 00	 call	 _fill_window
  00036	83 c4 04	 add	 esp, 4

; 1942 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

  00039	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0003c	81 7a 74 06 01
	00 00		 cmp	 DWORD PTR [edx+116], 262 ; 00000106H
  00043	73 0d		 jae	 SHORT $LN9@deflate_sl
  00045	83 7d 0c 00	 cmp	 DWORD PTR _flush$[ebp], 0
  00049	75 07		 jne	 SHORT $LN9@deflate_sl

; 1943 :                 return need_more;

  0004b	33 c0		 xor	 eax, eax
  0004d	e9 71 07 00 00	 jmp	 $LN1@deflate_sl
$LN9@deflate_sl:

; 1944 :             }
; 1945 :             if (s->lookahead == 0) break; /* flush the current block */

  00052	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00055	83 78 74 00	 cmp	 DWORD PTR [eax+116], 0
  00059	75 05		 jne	 SHORT $LN8@deflate_sl
  0005b	e9 88 05 00 00	 jmp	 $LN3@deflate_sl
$LN8@deflate_sl:

; 1946 :         }
; 1947 : 
; 1948 :         /* Insert the string window[strstart .. strstart+2] in the
; 1949 :          * dictionary, and set hash_head to the head of the hash chain:
; 1950 :          */
; 1951 :         hash_head = NIL;

  00060	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hash_head$[ebp], 0

; 1952 :         if (s->lookahead >= MIN_MATCH) {

  00067	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0006a	83 79 74 03	 cmp	 DWORD PTR [ecx+116], 3
  0006e	0f 82 83 00 00
	00		 jb	 $LN11@deflate_sl

; 1953 :             INSERT_STRING(s, s->strstart, hash_head);

  00074	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00077	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0007a	8b 52 48	 mov	 edx, DWORD PTR [edx+72]
  0007d	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00080	d3 e2		 shl	 edx, cl
  00082	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00085	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  00088	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0008b	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  0008e	0f b6 4c 08 02	 movzx	 ecx, BYTE PTR [eax+ecx+2]
  00093	33 d1		 xor	 edx, ecx
  00095	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00098	23 50 54	 and	 edx, DWORD PTR [eax+84]
  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0009e	89 51 48	 mov	 DWORD PTR [ecx+72], edx
  000a1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000a4	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  000a7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000aa	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  000ad	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000b0	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  000b3	8b 49 6c	 mov	 ecx, DWORD PTR [ecx+108]
  000b6	23 4e 34	 and	 ecx, DWORD PTR [esi+52]
  000b9	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  000bc	8b 76 40	 mov	 esi, DWORD PTR [esi+64]
  000bf	66 8b 14 42	 mov	 dx, WORD PTR [edx+eax*2]
  000c3	66 89 14 4e	 mov	 WORD PTR [esi+ecx*2], dx
  000c7	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000ca	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000cd	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  000d0	23 51 34	 and	 edx, DWORD PTR [ecx+52]
  000d3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000d6	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  000d9	0f b7 14 51	 movzx	 edx, WORD PTR [ecx+edx*2]
  000dd	89 55 fc	 mov	 DWORD PTR _hash_head$[ebp], edx
  000e0	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000e3	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  000e6	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000e9	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  000ec	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000ef	66 8b 52 6c	 mov	 dx, WORD PTR [edx+108]
  000f3	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN11@deflate_sl:

; 1954 :         }
; 1955 : 
; 1956 :         /* Find the longest match, discarding those <= prev_length.
; 1957 :          */
; 1958 :         s->prev_length = s->match_length, s->prev_match = s->match_start;

  000f7	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000fa	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000fd	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  00100	89 50 78	 mov	 DWORD PTR [eax+120], edx
  00103	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00106	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00109	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  0010c	89 50 64	 mov	 DWORD PTR [eax+100], edx

; 1959 :         s->match_length = MIN_MATCH-1;

  0010f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00112	c7 40 60 02 00
	00 00		 mov	 DWORD PTR [eax+96], 2

; 1960 : 
; 1961 :         if (hash_head != NIL && s->prev_length < s->max_lazy_match &&

  00119	83 7d fc 00	 cmp	 DWORD PTR _hash_head$[ebp], 0
  0011d	74 7f		 je	 SHORT $LN12@deflate_sl
  0011f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00122	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00125	8b 41 78	 mov	 eax, DWORD PTR [ecx+120]
  00128	3b 82 80 00 00
	00		 cmp	 eax, DWORD PTR [edx+128]
  0012e	73 6e		 jae	 SHORT $LN12@deflate_sl
  00130	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00133	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  00136	2b 55 fc	 sub	 edx, DWORD PTR _hash_head$[ebp]
  00139	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0013c	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0013f	81 e9 06 01 00
	00		 sub	 ecx, 262		; 00000106H
  00145	3b d1		 cmp	 edx, ecx
  00147	77 55		 ja	 SHORT $LN12@deflate_sl

; 1962 :             s->strstart - hash_head <= MAX_DIST(s)) {
; 1963 :             /* To simplify the code, we prevent matches with the string
; 1964 :              * of window index 0 (in particular we have to avoid a match
; 1965 :              * of the string with itself at the start of the input file).
; 1966 :              */
; 1967 :             s->match_length = longest_match (s, hash_head);

  00149	0f ae e8	 lfence
  0014c	8b 55 fc	 mov	 edx, DWORD PTR _hash_head$[ebp]
  0014f	52		 push	 edx
  00150	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 _longest_match
  00159	83 c4 08	 add	 esp, 8
  0015c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0015f	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 1968 :             /* longest_match() sets match_start */
; 1969 : 
; 1970 :             if (s->match_length <= 5 && (s->strategy == Z_FILTERED

  00162	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00165	83 7a 60 05	 cmp	 DWORD PTR [edx+96], 5
  00169	77 33		 ja	 SHORT $LN12@deflate_sl
  0016b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0016e	83 b8 88 00 00
	00 01		 cmp	 DWORD PTR [eax+136], 1
  00175	74 1d		 je	 SHORT $LN14@deflate_sl
  00177	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0017a	83 79 60 03	 cmp	 DWORD PTR [ecx+96], 3
  0017e	75 1e		 jne	 SHORT $LN12@deflate_sl
  00180	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00183	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00186	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  00189	2b 48 70	 sub	 ecx, DWORD PTR [eax+112]
  0018c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00192	76 0a		 jbe	 SHORT $LN12@deflate_sl
$LN14@deflate_sl:

; 1971 : #if TOO_FAR <= 32767
; 1972 :                 || (s->match_length == MIN_MATCH &&
; 1973 :                     s->strstart - s->match_start > TOO_FAR)
; 1974 : #endif
; 1975 :                 )) {
; 1976 : 
; 1977 :                 /* If prev_match is also MIN_MATCH, match_start is garbage
; 1978 :                  * but we will ignore the current match anyway.
; 1979 :                  */
; 1980 :                 s->match_length = MIN_MATCH-1;

  00194	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00197	c7 42 60 02 00
	00 00		 mov	 DWORD PTR [edx+96], 2
$LN12@deflate_sl:

; 1981 :             }
; 1982 :         }
; 1983 :         /* If there was a match at the previous step and the current
; 1984 :          * match is not better, output the previous match:
; 1985 :          */
; 1986 :         if (s->prev_length >= MIN_MATCH && s->match_length <= s->prev_length) {

  0019e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001a1	83 78 78 03	 cmp	 DWORD PTR [eax+120], 3
  001a5	0f 82 ca 02 00
	00		 jb	 $LN15@deflate_sl
  001ab	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001ae	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001b1	8b 41 60	 mov	 eax, DWORD PTR [ecx+96]
  001b4	3b 42 78	 cmp	 eax, DWORD PTR [edx+120]
  001b7	0f 87 b8 02 00
	00		 ja	 $LN15@deflate_sl

; 1987 :             uInt max_insert = s->strstart + s->lookahead - MIN_MATCH;

  001bd	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001c0	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  001c3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001c6	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  001c9	8d 54 0a fd	 lea	 edx, DWORD PTR [edx+ecx-3]
  001cd	89 55 f4	 mov	 DWORD PTR _max_insert$5[ebp], edx

; 1988 :             /* Do not insert strings in hash table beyond this. */
; 1989 : 
; 1990 :             check_match(s, s->strstart-1, s->prev_match, s->prev_length);
; 1991 : 
; 1992 :             _tr_tally_dist(s, s->strstart -1 - s->prev_match,

  001d0	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001d3	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  001d6	83 e9 03	 sub	 ecx, 3
  001d9	88 4d f3	 mov	 BYTE PTR _len$4[ebp], cl
  001dc	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001df	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  001e2	83 e8 01	 sub	 eax, 1
  001e5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001e8	2b 41 64	 sub	 eax, DWORD PTR [ecx+100]
  001eb	66 89 45 ec	 mov	 WORD PTR _dist$3[ebp], ax
  001ef	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001f2	8b 82 a0 16 00
	00		 mov	 eax, DWORD PTR [edx+5792]
  001f8	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001fb	8b 91 a4 16 00
	00		 mov	 edx, DWORD PTR [ecx+5796]
  00201	66 8b 4d ec	 mov	 cx, WORD PTR _dist$3[ebp]
  00205	66 89 0c 42	 mov	 WORD PTR [edx+eax*2], cx
  00209	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0020c	8b 82 a0 16 00
	00		 mov	 eax, DWORD PTR [edx+5792]
  00212	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00215	8b 91 98 16 00
	00		 mov	 edx, DWORD PTR [ecx+5784]
  0021b	8a 4d f3	 mov	 cl, BYTE PTR _len$4[ebp]
  0021e	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00221	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00224	8b 82 a0 16 00
	00		 mov	 eax, DWORD PTR [edx+5792]
  0022a	83 c0 01	 add	 eax, 1
  0022d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00230	89 81 a0 16 00
	00		 mov	 DWORD PTR [ecx+5792], eax
  00236	66 8b 55 ec	 mov	 dx, WORD PTR _dist$3[ebp]
  0023a	66 83 ea 01	 sub	 dx, 1
  0023e	66 89 55 ec	 mov	 WORD PTR _dist$3[ebp], dx
  00242	0f b6 45 f3	 movzx	 eax, BYTE PTR _len$4[ebp]
  00246	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR __length_code[eax]
  0024d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00250	66 8b 84 8a 98
	04 00 00	 mov	 ax, WORD PTR [edx+ecx*4+1176]
  00258	66 83 c0 01	 add	 ax, 1
  0025c	0f b6 4d f3	 movzx	 ecx, BYTE PTR _len$4[ebp]
  00260	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR __length_code[ecx]
  00267	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0026a	66 89 84 91 98
	04 00 00	 mov	 WORD PTR [ecx+edx*4+1176], ax
  00272	0f b7 55 ec	 movzx	 edx, WORD PTR _dist$3[ebp]
  00276	81 fa 00 01 00
	00		 cmp	 edx, 256		; 00000100H
  0027c	7d 13		 jge	 SHORT $LN30@deflate_sl
  0027e	0f ae e8	 lfence
  00281	0f b7 45 ec	 movzx	 eax, WORD PTR _dist$3[ebp]
  00285	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR __dist_code[eax]
  0028c	89 4d e4	 mov	 DWORD PTR tv243[ebp], ecx
  0028f	eb 14		 jmp	 SHORT $LN31@deflate_sl
$LN30@deflate_sl:
  00291	0f ae e8	 lfence
  00294	0f b7 55 ec	 movzx	 edx, WORD PTR _dist$3[ebp]
  00298	c1 fa 07	 sar	 edx, 7
  0029b	0f b6 82 00 01
	00 00		 movzx	 eax, BYTE PTR __dist_code[edx+256]
  002a2	89 45 e4	 mov	 DWORD PTR tv243[ebp], eax
$LN31@deflate_sl:
  002a5	8b 4d e4	 mov	 ecx, DWORD PTR tv243[ebp]
  002a8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002ab	66 8b 84 8a 88
	09 00 00	 mov	 ax, WORD PTR [edx+ecx*4+2440]
  002b3	66 83 c0 01	 add	 ax, 1
  002b7	8b 4d e4	 mov	 ecx, DWORD PTR tv243[ebp]
  002ba	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002bd	66 89 84 8a 88
	09 00 00	 mov	 WORD PTR [edx+ecx*4+2440], ax
  002c5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002c8	8b 88 9c 16 00
	00		 mov	 ecx, DWORD PTR [eax+5788]
  002ce	83 e9 01	 sub	 ecx, 1
  002d1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002d4	39 8a a0 16 00
	00		 cmp	 DWORD PTR [edx+5792], ecx
  002da	75 09		 jne	 SHORT $LN32@deflate_sl
  002dc	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR tv260[ebp], 1
  002e3	eb 07		 jmp	 SHORT $LN33@deflate_sl
$LN32@deflate_sl:
  002e5	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv260[ebp], 0
$LN33@deflate_sl:
  002ec	8b 45 e0	 mov	 eax, DWORD PTR tv260[ebp]
  002ef	89 45 f8	 mov	 DWORD PTR _bflush$[ebp], eax

; 1993 :                            s->prev_length - MIN_MATCH, bflush);
; 1994 : 
; 1995 :             /* Insert in hash table all strings up to the end of the match.
; 1996 :              * strstart-1 and strstart are already inserted. If there is not
; 1997 :              * enough lookahead, the last two strings are not inserted in
; 1998 :              * the hash table.
; 1999 :              */
; 2000 :             s->lookahead -= s->prev_length-1;

  002f2	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002f5	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  002f8	83 ea 01	 sub	 edx, 1
  002fb	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002fe	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00301	2b ca		 sub	 ecx, edx
  00303	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00306	89 4a 74	 mov	 DWORD PTR [edx+116], ecx

; 2001 :             s->prev_length -= 2;

  00309	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0030c	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0030f	83 e9 02	 sub	 ecx, 2
  00312	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00315	89 4a 78	 mov	 DWORD PTR [edx+120], ecx
$LN7@deflate_sl:

; 2002 :             do {
; 2003 :                 if (++s->strstart <= max_insert) {

  00318	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0031b	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  0031e	83 c1 01	 add	 ecx, 1
  00321	89 4d dc	 mov	 DWORD PTR tv271[ebp], ecx
  00324	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00327	8b 45 dc	 mov	 eax, DWORD PTR tv271[ebp]
  0032a	89 42 6c	 mov	 DWORD PTR [edx+108], eax
  0032d	8b 4d dc	 mov	 ecx, DWORD PTR tv271[ebp]
  00330	3b 4d f4	 cmp	 ecx, DWORD PTR _max_insert$5[ebp]
  00333	0f 87 83 00 00
	00		 ja	 $LN5@deflate_sl

; 2004 :                     INSERT_STRING(s, s->strstart, hash_head);

  00339	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0033c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0033f	8b 52 48	 mov	 edx, DWORD PTR [edx+72]
  00342	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00345	d3 e2		 shl	 edx, cl
  00347	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0034a	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  0034d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00350	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  00353	0f b6 4c 08 02	 movzx	 ecx, BYTE PTR [eax+ecx+2]
  00358	33 d1		 xor	 edx, ecx
  0035a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0035d	23 50 54	 and	 edx, DWORD PTR [eax+84]
  00360	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00363	89 51 48	 mov	 DWORD PTR [ecx+72], edx
  00366	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00369	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  0036c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0036f	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00372	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00375	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  00378	8b 49 6c	 mov	 ecx, DWORD PTR [ecx+108]
  0037b	23 4e 34	 and	 ecx, DWORD PTR [esi+52]
  0037e	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  00381	8b 76 40	 mov	 esi, DWORD PTR [esi+64]
  00384	66 8b 14 42	 mov	 dx, WORD PTR [edx+eax*2]
  00388	66 89 14 4e	 mov	 WORD PTR [esi+ecx*2], dx
  0038c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0038f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00392	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  00395	23 51 34	 and	 edx, DWORD PTR [ecx+52]
  00398	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0039b	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  0039e	0f b7 14 51	 movzx	 edx, WORD PTR [ecx+edx*2]
  003a2	89 55 fc	 mov	 DWORD PTR _hash_head$[ebp], edx
  003a5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003a8	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  003ab	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003ae	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  003b1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003b4	66 8b 52 6c	 mov	 dx, WORD PTR [edx+108]
  003b8	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN5@deflate_sl:

; 2005 :                 }
; 2006 :             } while (--s->prev_length != 0);

  003bc	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003bf	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  003c2	83 e9 01	 sub	 ecx, 1
  003c5	89 4d d8	 mov	 DWORD PTR tv310[ebp], ecx
  003c8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003cb	8b 45 d8	 mov	 eax, DWORD PTR tv310[ebp]
  003ce	89 42 78	 mov	 DWORD PTR [edx+120], eax
  003d1	83 7d d8 00	 cmp	 DWORD PTR tv310[ebp], 0
  003d5	0f 85 3d ff ff
	ff		 jne	 $LN7@deflate_sl

; 2007 :             s->match_available = 0;

  003db	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003de	c7 41 68 00 00
	00 00		 mov	 DWORD PTR [ecx+104], 0

; 2008 :             s->match_length = MIN_MATCH-1;

  003e5	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003e8	c7 42 60 02 00
	00 00		 mov	 DWORD PTR [edx+96], 2

; 2009 :             s->strstart++;

  003ef	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003f2	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  003f5	83 c1 01	 add	 ecx, 1
  003f8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003fb	89 4a 6c	 mov	 DWORD PTR [edx+108], ecx

; 2010 : 
; 2011 :             if (bflush) FLUSH_BLOCK(s, 0);

  003fe	83 7d f8 00	 cmp	 DWORD PTR _bflush$[ebp], 0
  00402	74 6c		 je	 SHORT $LN18@deflate_sl
  00404	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00407	83 78 5c 00	 cmp	 DWORD PTR [eax+92], 0
  0040b	7c 11		 jl	 SHORT $LN34@deflate_sl
  0040d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00410	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00413	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00416	03 50 5c	 add	 edx, DWORD PTR [eax+92]
  00419	89 55 d4	 mov	 DWORD PTR tv330[ebp], edx
  0041c	eb 07		 jmp	 SHORT $LN35@deflate_sl
$LN34@deflate_sl:
  0041e	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv330[ebp], 0
$LN35@deflate_sl:
  00425	6a 00		 push	 0
  00427	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0042a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0042d	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  00430	2b 42 5c	 sub	 eax, DWORD PTR [edx+92]
  00433	50		 push	 eax
  00434	8b 4d d4	 mov	 ecx, DWORD PTR tv330[ebp]
  00437	51		 push	 ecx
  00438	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0043b	52		 push	 edx
  0043c	e8 00 00 00 00	 call	 __tr_flush_block
  00441	83 c4 10	 add	 esp, 16			; 00000010H
  00444	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00447	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0044a	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  0044d	89 50 5c	 mov	 DWORD PTR [eax+92], edx
  00450	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00453	8b 08		 mov	 ecx, DWORD PTR [eax]
  00455	51		 push	 ecx
  00456	e8 00 00 00 00	 call	 _flush_pending
  0045b	83 c4 04	 add	 esp, 4
  0045e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00461	8b 02		 mov	 eax, DWORD PTR [edx]
  00463	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00467	75 07		 jne	 SHORT $LN18@deflate_sl
  00469	33 c0		 xor	 eax, eax
  0046b	e9 53 03 00 00	 jmp	 $LN1@deflate_sl
$LN18@deflate_sl:
  00470	e9 6e 01 00 00	 jmp	 $LN16@deflate_sl
$LN15@deflate_sl:

; 2012 : 
; 2013 :         } else if (s->match_available) {

  00475	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00478	83 79 68 00	 cmp	 DWORD PTR [ecx+104], 0
  0047c	0f 84 39 01 00
	00		 je	 $LN20@deflate_sl

; 2014 :             /* If there was no match at the previous position, output a
; 2015 :              * single literal. If there was a match but the current match
; 2016 :              * is longer, truncate the previous match to a single literal.
; 2017 :              */
; 2018 :             Tracevv((stderr,"%c", s->window[s->strstart-1]));
; 2019 :             _tr_tally_lit(s, s->window[s->strstart-1], bflush);

  00482	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00485	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00488	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0048b	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0048e	8a 44 02 ff	 mov	 al, BYTE PTR [edx+eax-1]
  00492	88 45 eb	 mov	 BYTE PTR _cc$2[ebp], al
  00495	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00498	8b 91 a0 16 00
	00		 mov	 edx, DWORD PTR [ecx+5792]
  0049e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004a1	8b 88 a4 16 00
	00		 mov	 ecx, DWORD PTR [eax+5796]
  004a7	33 c0		 xor	 eax, eax
  004a9	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  004ad	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004b0	8b 91 a0 16 00
	00		 mov	 edx, DWORD PTR [ecx+5792]
  004b6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004b9	8b 88 98 16 00
	00		 mov	 ecx, DWORD PTR [eax+5784]
  004bf	8a 45 eb	 mov	 al, BYTE PTR _cc$2[ebp]
  004c2	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  004c5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004c8	8b 91 a0 16 00
	00		 mov	 edx, DWORD PTR [ecx+5792]
  004ce	83 c2 01	 add	 edx, 1
  004d1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004d4	89 90 a0 16 00
	00		 mov	 DWORD PTR [eax+5792], edx
  004da	0f b6 4d eb	 movzx	 ecx, BYTE PTR _cc$2[ebp]
  004de	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004e1	66 8b 84 8a 94
	00 00 00	 mov	 ax, WORD PTR [edx+ecx*4+148]
  004e9	66 83 c0 01	 add	 ax, 1
  004ed	0f b6 4d eb	 movzx	 ecx, BYTE PTR _cc$2[ebp]
  004f1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004f4	66 89 84 8a 94
	00 00 00	 mov	 WORD PTR [edx+ecx*4+148], ax
  004fc	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004ff	8b 88 9c 16 00
	00		 mov	 ecx, DWORD PTR [eax+5788]
  00505	83 e9 01	 sub	 ecx, 1
  00508	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0050b	39 8a a0 16 00
	00		 cmp	 DWORD PTR [edx+5792], ecx
  00511	75 09		 jne	 SHORT $LN36@deflate_sl
  00513	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR tv378[ebp], 1
  0051a	eb 07		 jmp	 SHORT $LN37@deflate_sl
$LN36@deflate_sl:
  0051c	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv378[ebp], 0
$LN37@deflate_sl:
  00523	8b 45 d0	 mov	 eax, DWORD PTR tv378[ebp]
  00526	89 45 f8	 mov	 DWORD PTR _bflush$[ebp], eax

; 2020 :             if (bflush) {

  00529	83 7d f8 00	 cmp	 DWORD PTR _bflush$[ebp], 0
  0052d	74 5a		 je	 SHORT $LN22@deflate_sl

; 2021 :                 FLUSH_BLOCK_ONLY(s, 0);

  0052f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00532	83 79 5c 00	 cmp	 DWORD PTR [ecx+92], 0
  00536	7c 11		 jl	 SHORT $LN38@deflate_sl
  00538	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0053b	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  0053e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00541	03 41 5c	 add	 eax, DWORD PTR [ecx+92]
  00544	89 45 cc	 mov	 DWORD PTR tv391[ebp], eax
  00547	eb 07		 jmp	 SHORT $LN39@deflate_sl
$LN38@deflate_sl:
  00549	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR tv391[ebp], 0
$LN39@deflate_sl:
  00550	6a 00		 push	 0
  00552	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00555	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00558	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  0055b	2b 48 5c	 sub	 ecx, DWORD PTR [eax+92]
  0055e	51		 push	 ecx
  0055f	8b 55 cc	 mov	 edx, DWORD PTR tv391[ebp]
  00562	52		 push	 edx
  00563	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00566	50		 push	 eax
  00567	e8 00 00 00 00	 call	 __tr_flush_block
  0056c	83 c4 10	 add	 esp, 16			; 00000010H
  0056f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00572	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00575	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00578	89 41 5c	 mov	 DWORD PTR [ecx+92], eax
  0057b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0057e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00580	52		 push	 edx
  00581	e8 00 00 00 00	 call	 _flush_pending
  00586	83 c4 04	 add	 esp, 4
$LN22@deflate_sl:

; 2022 :             }
; 2023 :             s->strstart++;

  00589	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0058c	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  0058f	83 c1 01	 add	 ecx, 1
  00592	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00595	89 4a 6c	 mov	 DWORD PTR [edx+108], ecx

; 2024 :             s->lookahead--;

  00598	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0059b	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0059e	83 e9 01	 sub	 ecx, 1
  005a1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  005a4	89 4a 74	 mov	 DWORD PTR [edx+116], ecx

; 2025 :             if (s->strm->avail_out == 0) return need_more;

  005a7	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005aa	8b 08		 mov	 ecx, DWORD PTR [eax]
  005ac	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  005b0	75 07		 jne	 SHORT $LN23@deflate_sl
  005b2	33 c0		 xor	 eax, eax
  005b4	e9 0a 02 00 00	 jmp	 $LN1@deflate_sl
$LN23@deflate_sl:

; 2026 :         } else {

  005b9	eb 28		 jmp	 SHORT $LN16@deflate_sl
$LN20@deflate_sl:

; 2027 :             /* There is no previous match to compare with, wait for
; 2028 :              * the next step to decide.
; 2029 :              */
; 2030 :             s->match_available = 1;

  005bb	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  005be	c7 42 68 01 00
	00 00		 mov	 DWORD PTR [edx+104], 1

; 2031 :             s->strstart++;

  005c5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005c8	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  005cb	83 c1 01	 add	 ecx, 1
  005ce	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  005d1	89 4a 6c	 mov	 DWORD PTR [edx+108], ecx

; 2032 :             s->lookahead--;

  005d4	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005d7	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  005da	83 e9 01	 sub	 ecx, 1
  005dd	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  005e0	89 4a 74	 mov	 DWORD PTR [edx+116], ecx
$LN16@deflate_sl:

; 2033 :         }
; 2034 :     }

  005e3	e9 39 fa ff ff	 jmp	 $LN4@deflate_sl
$LN3@deflate_sl:

; 2035 :     Assert (flush != Z_NO_FLUSH, "no flush?");
; 2036 :     if (s->match_available) {

  005e8	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005eb	83 78 68 00	 cmp	 DWORD PTR [eax+104], 0
  005ef	0f 84 b1 00 00
	00		 je	 $LN24@deflate_sl

; 2037 :         Tracevv((stderr,"%c", s->window[s->strstart-1]));
; 2038 :         _tr_tally_lit(s, s->window[s->strstart-1], bflush);

  005f5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  005f8	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  005fb	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005fe	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00601	8a 54 11 ff	 mov	 dl, BYTE PTR [ecx+edx-1]
  00605	88 55 ea	 mov	 BYTE PTR _cc$1[ebp], dl
  00608	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0060b	8b 88 a0 16 00
	00		 mov	 ecx, DWORD PTR [eax+5792]
  00611	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00614	8b 82 a4 16 00
	00		 mov	 eax, DWORD PTR [edx+5796]
  0061a	33 d2		 xor	 edx, edx
  0061c	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  00620	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00623	8b 88 a0 16 00
	00		 mov	 ecx, DWORD PTR [eax+5792]
  00629	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0062c	8b 82 98 16 00
	00		 mov	 eax, DWORD PTR [edx+5784]
  00632	8a 55 ea	 mov	 dl, BYTE PTR _cc$1[ebp]
  00635	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  00638	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0063b	8b 88 a0 16 00
	00		 mov	 ecx, DWORD PTR [eax+5792]
  00641	83 c1 01	 add	 ecx, 1
  00644	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00647	89 8a a0 16 00
	00		 mov	 DWORD PTR [edx+5792], ecx
  0064d	0f b6 45 ea	 movzx	 eax, BYTE PTR _cc$1[ebp]
  00651	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00654	66 8b 94 81 94
	00 00 00	 mov	 dx, WORD PTR [ecx+eax*4+148]
  0065c	66 83 c2 01	 add	 dx, 1
  00660	0f b6 45 ea	 movzx	 eax, BYTE PTR _cc$1[ebp]
  00664	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00667	66 89 94 81 94
	00 00 00	 mov	 WORD PTR [ecx+eax*4+148], dx
  0066f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00672	8b 82 9c 16 00
	00		 mov	 eax, DWORD PTR [edx+5788]
  00678	83 e8 01	 sub	 eax, 1
  0067b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0067e	39 81 a0 16 00
	00		 cmp	 DWORD PTR [ecx+5792], eax
  00684	75 09		 jne	 SHORT $LN40@deflate_sl
  00686	c7 45 c8 01 00
	00 00		 mov	 DWORD PTR tv456[ebp], 1
  0068d	eb 07		 jmp	 SHORT $LN41@deflate_sl
$LN40@deflate_sl:
  0068f	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR tv456[ebp], 0
$LN41@deflate_sl:
  00696	8b 55 c8	 mov	 edx, DWORD PTR tv456[ebp]
  00699	89 55 f8	 mov	 DWORD PTR _bflush$[ebp], edx

; 2039 :         s->match_available = 0;

  0069c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0069f	c7 40 68 00 00
	00 00		 mov	 DWORD PTR [eax+104], 0
$LN24@deflate_sl:

; 2040 :     }
; 2041 :     s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;

  006a6	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  006a9	83 79 6c 02	 cmp	 DWORD PTR [ecx+108], 2
  006ad	73 0b		 jae	 SHORT $LN42@deflate_sl
  006af	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  006b2	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  006b5	89 45 c4	 mov	 DWORD PTR tv462[ebp], eax
  006b8	eb 07		 jmp	 SHORT $LN43@deflate_sl
$LN42@deflate_sl:
  006ba	c7 45 c4 02 00
	00 00		 mov	 DWORD PTR tv462[ebp], 2
$LN43@deflate_sl:
  006c1	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  006c4	8b 55 c4	 mov	 edx, DWORD PTR tv462[ebp]
  006c7	89 91 b4 16 00
	00		 mov	 DWORD PTR [ecx+5812], edx

; 2042 :     if (flush == Z_FINISH) {

  006cd	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  006d1	75 76		 jne	 SHORT $LN25@deflate_sl

; 2043 :         FLUSH_BLOCK(s, 1);

  006d3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  006d6	83 78 5c 00	 cmp	 DWORD PTR [eax+92], 0
  006da	7c 11		 jl	 SHORT $LN44@deflate_sl
  006dc	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  006df	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  006e2	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  006e5	03 50 5c	 add	 edx, DWORD PTR [eax+92]
  006e8	89 55 c0	 mov	 DWORD PTR tv475[ebp], edx
  006eb	eb 07		 jmp	 SHORT $LN45@deflate_sl
$LN44@deflate_sl:
  006ed	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR tv475[ebp], 0
$LN45@deflate_sl:
  006f4	6a 01		 push	 1
  006f6	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  006f9	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  006fc	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  006ff	2b 42 5c	 sub	 eax, DWORD PTR [edx+92]
  00702	50		 push	 eax
  00703	8b 4d c0	 mov	 ecx, DWORD PTR tv475[ebp]
  00706	51		 push	 ecx
  00707	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0070a	52		 push	 edx
  0070b	e8 00 00 00 00	 call	 __tr_flush_block
  00710	83 c4 10	 add	 esp, 16			; 00000010H
  00713	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00716	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00719	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  0071c	89 50 5c	 mov	 DWORD PTR [eax+92], edx
  0071f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00722	8b 08		 mov	 ecx, DWORD PTR [eax]
  00724	51		 push	 ecx
  00725	e8 00 00 00 00	 call	 _flush_pending
  0072a	83 c4 04	 add	 esp, 4
  0072d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00730	8b 02		 mov	 eax, DWORD PTR [edx]
  00732	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00736	75 0a		 jne	 SHORT $LN26@deflate_sl
  00738	b8 02 00 00 00	 mov	 eax, 2
  0073d	e9 81 00 00 00	 jmp	 $LN1@deflate_sl
$LN26@deflate_sl:

; 2044 :         return finish_done;

  00742	b8 03 00 00 00	 mov	 eax, 3
  00747	eb 7a		 jmp	 SHORT $LN1@deflate_sl
$LN25@deflate_sl:

; 2045 :     }
; 2046 :     if (s->last_lit)

  00749	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0074c	83 b9 a0 16 00
	00 00		 cmp	 DWORD PTR [ecx+5792], 0
  00753	74 69		 je	 SHORT $LN27@deflate_sl

; 2047 :         FLUSH_BLOCK(s, 0);

  00755	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00758	83 7a 5c 00	 cmp	 DWORD PTR [edx+92], 0
  0075c	7c 11		 jl	 SHORT $LN46@deflate_sl
  0075e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00761	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00764	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00767	03 4a 5c	 add	 ecx, DWORD PTR [edx+92]
  0076a	89 4d bc	 mov	 DWORD PTR tv498[ebp], ecx
  0076d	eb 07		 jmp	 SHORT $LN47@deflate_sl
$LN46@deflate_sl:
  0076f	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv498[ebp], 0
$LN47@deflate_sl:
  00776	6a 00		 push	 0
  00778	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0077b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0077e	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  00781	2b 51 5c	 sub	 edx, DWORD PTR [ecx+92]
  00784	52		 push	 edx
  00785	8b 45 bc	 mov	 eax, DWORD PTR tv498[ebp]
  00788	50		 push	 eax
  00789	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0078c	51		 push	 ecx
  0078d	e8 00 00 00 00	 call	 __tr_flush_block
  00792	83 c4 10	 add	 esp, 16			; 00000010H
  00795	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00798	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0079b	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  0079e	89 4a 5c	 mov	 DWORD PTR [edx+92], ecx
  007a1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  007a4	8b 02		 mov	 eax, DWORD PTR [edx]
  007a6	50		 push	 eax
  007a7	e8 00 00 00 00	 call	 _flush_pending
  007ac	83 c4 04	 add	 esp, 4
  007af	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  007b2	8b 11		 mov	 edx, DWORD PTR [ecx]
  007b4	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  007b8	75 04		 jne	 SHORT $LN27@deflate_sl
  007ba	33 c0		 xor	 eax, eax
  007bc	eb 05		 jmp	 SHORT $LN1@deflate_sl
$LN27@deflate_sl:

; 2048 :     return block_done;

  007be	b8 01 00 00 00	 mov	 eax, 1
$LN1@deflate_sl:

; 2049 : }

  007c3	5f		 pop	 edi
  007c4	5e		 pop	 esi
  007c5	83 c4 44	 add	 esp, 68			; 00000044H
  007c8	3b ec		 cmp	 ebp, esp
  007ca	e8 00 00 00 00	 call	 __RTC_CheckEsp
  007cf	8b e5		 mov	 esp, ebp
  007d1	5d		 pop	 ebp
  007d2	c3		 ret	 0
_deflate_slow ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflate_rle
_TEXT	SEGMENT
tv350 = -52						; size = 4
tv327 = -48						; size = 4
tv304 = -44						; size = 4
tv283 = -40						; size = 4
tv238 = -36						; size = 4
tv221 = -32						; size = 4
_cc$1 = -25						; size = 1
_dist$2 = -24						; size = 2
_len$3 = -17						; size = 1
_strend$ = -16						; size = 4
_scan$ = -12						; size = 4
_prev$ = -8						; size = 4
_bflush$ = -4						; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_rle PROC					; COMDAT

; 2060 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	57		 push	 edi
  00007	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  0000a	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
$LN4@deflate_rl:

; 2061 :     int bflush;             /* set if current block must be flushed */
; 2062 :     uInt prev;              /* byte at distance one to match */
; 2063 :     Bytef *scan, *strend;   /* scan goes up to strend for length of run */
; 2064 : 
; 2065 :     for (;;) {
; 2066 :         /* Make sure that we always have enough lookahead, except
; 2067 :          * at the end of the input file. We need MAX_MATCH bytes
; 2068 :          * for the longest run, plus one for the unrolled loop.
; 2069 :          */
; 2070 :         if (s->lookahead <= MAX_MATCH) {

  00020	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00023	81 78 74 02 01
	00 00		 cmp	 DWORD PTR [eax+116], 258 ; 00000102H
  0002a	77 33		 ja	 SHORT $LN8@deflate_rl

; 2071 :             fill_window(s);

  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _fill_window
  00035	83 c4 04	 add	 esp, 4

; 2072 :             if (s->lookahead <= MAX_MATCH && flush == Z_NO_FLUSH) {

  00038	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0003b	81 7a 74 02 01
	00 00		 cmp	 DWORD PTR [edx+116], 258 ; 00000102H
  00042	77 0d		 ja	 SHORT $LN9@deflate_rl
  00044	83 7d 0c 00	 cmp	 DWORD PTR _flush$[ebp], 0
  00048	75 07		 jne	 SHORT $LN9@deflate_rl

; 2073 :                 return need_more;

  0004a	33 c0		 xor	 eax, eax
  0004c	e9 22 05 00 00	 jmp	 $LN1@deflate_rl
$LN9@deflate_rl:

; 2074 :             }
; 2075 :             if (s->lookahead == 0) break; /* flush the current block */

  00051	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00054	83 78 74 00	 cmp	 DWORD PTR [eax+116], 0
  00058	75 05		 jne	 SHORT $LN8@deflate_rl
  0005a	e9 11 04 00 00	 jmp	 $LN3@deflate_rl
$LN8@deflate_rl:

; 2076 :         }
; 2077 : 
; 2078 :         /* See how many times the previous byte repeats */
; 2079 :         s->match_length = 0;

  0005f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00062	c7 41 60 00 00
	00 00		 mov	 DWORD PTR [ecx+96], 0

; 2080 :         if (s->lookahead >= MIN_MATCH && s->strstart > 0) {

  00069	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0006c	83 7a 74 03	 cmp	 DWORD PTR [edx+116], 3
  00070	0f 82 68 01 00
	00		 jb	 $LN11@deflate_rl
  00076	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00079	83 78 6c 00	 cmp	 DWORD PTR [eax+108], 0
  0007d	0f 86 5b 01 00
	00		 jbe	 $LN11@deflate_rl

; 2081 :             scan = s->window + s->strstart - 1;

  00083	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00086	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00089	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0008c	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  0008f	8d 54 0a ff	 lea	 edx, DWORD PTR [edx+ecx-1]
  00093	89 55 f4	 mov	 DWORD PTR _scan$[ebp], edx

; 2082 :             prev = *scan;

  00096	8b 45 f4	 mov	 eax, DWORD PTR _scan$[ebp]
  00099	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0009c	89 4d f8	 mov	 DWORD PTR _prev$[ebp], ecx

; 2083 :             if (prev == *++scan && prev == *++scan && prev == *++scan) {

  0009f	8b 55 f4	 mov	 edx, DWORD PTR _scan$[ebp]
  000a2	83 c2 01	 add	 edx, 1
  000a5	89 55 f4	 mov	 DWORD PTR _scan$[ebp], edx
  000a8	8b 45 f4	 mov	 eax, DWORD PTR _scan$[ebp]
  000ab	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000ae	39 4d f8	 cmp	 DWORD PTR _prev$[ebp], ecx
  000b1	0f 85 27 01 00
	00		 jne	 $LN11@deflate_rl
  000b7	8b 55 f4	 mov	 edx, DWORD PTR _scan$[ebp]
  000ba	83 c2 01	 add	 edx, 1
  000bd	89 55 f4	 mov	 DWORD PTR _scan$[ebp], edx
  000c0	8b 45 f4	 mov	 eax, DWORD PTR _scan$[ebp]
  000c3	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000c6	39 4d f8	 cmp	 DWORD PTR _prev$[ebp], ecx
  000c9	0f 85 0f 01 00
	00		 jne	 $LN11@deflate_rl
  000cf	8b 55 f4	 mov	 edx, DWORD PTR _scan$[ebp]
  000d2	83 c2 01	 add	 edx, 1
  000d5	89 55 f4	 mov	 DWORD PTR _scan$[ebp], edx
  000d8	8b 45 f4	 mov	 eax, DWORD PTR _scan$[ebp]
  000db	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000de	39 4d f8	 cmp	 DWORD PTR _prev$[ebp], ecx
  000e1	0f 85 f7 00 00
	00		 jne	 $LN11@deflate_rl

; 2084 :                 strend = s->window + s->strstart + MAX_MATCH;

  000e7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000ea	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  000ed	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000f0	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  000f3	8d 84 10 02 01
	00 00		 lea	 eax, DWORD PTR [eax+edx+258]
  000fa	89 45 f0	 mov	 DWORD PTR _strend$[ebp], eax
$LN5@deflate_rl:

; 2085 :                 do {
; 2086 :                 } while (prev == *++scan && prev == *++scan &&
; 2087 :                          prev == *++scan && prev == *++scan &&
; 2088 :                          prev == *++scan && prev == *++scan &&
; 2089 :                          prev == *++scan && prev == *++scan &&

  000fd	8b 4d f4	 mov	 ecx, DWORD PTR _scan$[ebp]
  00100	83 c1 01	 add	 ecx, 1
  00103	89 4d f4	 mov	 DWORD PTR _scan$[ebp], ecx
  00106	8b 55 f4	 mov	 edx, DWORD PTR _scan$[ebp]
  00109	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0010c	39 45 f8	 cmp	 DWORD PTR _prev$[ebp], eax
  0010f	0f 85 9c 00 00
	00		 jne	 $LN6@deflate_rl
  00115	8b 4d f4	 mov	 ecx, DWORD PTR _scan$[ebp]
  00118	83 c1 01	 add	 ecx, 1
  0011b	89 4d f4	 mov	 DWORD PTR _scan$[ebp], ecx
  0011e	8b 55 f4	 mov	 edx, DWORD PTR _scan$[ebp]
  00121	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00124	39 45 f8	 cmp	 DWORD PTR _prev$[ebp], eax
  00127	0f 85 84 00 00
	00		 jne	 $LN6@deflate_rl
  0012d	8b 4d f4	 mov	 ecx, DWORD PTR _scan$[ebp]
  00130	83 c1 01	 add	 ecx, 1
  00133	89 4d f4	 mov	 DWORD PTR _scan$[ebp], ecx
  00136	8b 55 f4	 mov	 edx, DWORD PTR _scan$[ebp]
  00139	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0013c	39 45 f8	 cmp	 DWORD PTR _prev$[ebp], eax
  0013f	75 70		 jne	 SHORT $LN6@deflate_rl
  00141	8b 4d f4	 mov	 ecx, DWORD PTR _scan$[ebp]
  00144	83 c1 01	 add	 ecx, 1
  00147	89 4d f4	 mov	 DWORD PTR _scan$[ebp], ecx
  0014a	8b 55 f4	 mov	 edx, DWORD PTR _scan$[ebp]
  0014d	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00150	39 45 f8	 cmp	 DWORD PTR _prev$[ebp], eax
  00153	75 5c		 jne	 SHORT $LN6@deflate_rl
  00155	8b 4d f4	 mov	 ecx, DWORD PTR _scan$[ebp]
  00158	83 c1 01	 add	 ecx, 1
  0015b	89 4d f4	 mov	 DWORD PTR _scan$[ebp], ecx
  0015e	8b 55 f4	 mov	 edx, DWORD PTR _scan$[ebp]
  00161	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00164	39 45 f8	 cmp	 DWORD PTR _prev$[ebp], eax
  00167	75 48		 jne	 SHORT $LN6@deflate_rl
  00169	8b 4d f4	 mov	 ecx, DWORD PTR _scan$[ebp]
  0016c	83 c1 01	 add	 ecx, 1
  0016f	89 4d f4	 mov	 DWORD PTR _scan$[ebp], ecx
  00172	8b 55 f4	 mov	 edx, DWORD PTR _scan$[ebp]
  00175	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00178	39 45 f8	 cmp	 DWORD PTR _prev$[ebp], eax
  0017b	75 34		 jne	 SHORT $LN6@deflate_rl
  0017d	8b 4d f4	 mov	 ecx, DWORD PTR _scan$[ebp]
  00180	83 c1 01	 add	 ecx, 1
  00183	89 4d f4	 mov	 DWORD PTR _scan$[ebp], ecx
  00186	8b 55 f4	 mov	 edx, DWORD PTR _scan$[ebp]
  00189	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0018c	39 45 f8	 cmp	 DWORD PTR _prev$[ebp], eax
  0018f	75 20		 jne	 SHORT $LN6@deflate_rl
  00191	8b 4d f4	 mov	 ecx, DWORD PTR _scan$[ebp]
  00194	83 c1 01	 add	 ecx, 1
  00197	89 4d f4	 mov	 DWORD PTR _scan$[ebp], ecx
  0019a	8b 55 f4	 mov	 edx, DWORD PTR _scan$[ebp]
  0019d	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  001a0	39 45 f8	 cmp	 DWORD PTR _prev$[ebp], eax
  001a3	75 0c		 jne	 SHORT $LN6@deflate_rl
  001a5	8b 4d f4	 mov	 ecx, DWORD PTR _scan$[ebp]
  001a8	3b 4d f0	 cmp	 ecx, DWORD PTR _strend$[ebp]
  001ab	0f 82 4c ff ff
	ff		 jb	 $LN5@deflate_rl
$LN6@deflate_rl:

; 2090 :                          scan < strend);
; 2091 :                 s->match_length = MAX_MATCH - (uInt)(strend - scan);

  001b1	8b 55 f0	 mov	 edx, DWORD PTR _strend$[ebp]
  001b4	2b 55 f4	 sub	 edx, DWORD PTR _scan$[ebp]
  001b7	b8 02 01 00 00	 mov	 eax, 258		; 00000102H
  001bc	2b c2		 sub	 eax, edx
  001be	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001c1	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 2092 :                 if (s->match_length > s->lookahead)

  001c4	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001c7	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001ca	8b 4a 60	 mov	 ecx, DWORD PTR [edx+96]
  001cd	3b 48 74	 cmp	 ecx, DWORD PTR [eax+116]
  001d0	76 0c		 jbe	 SHORT $LN11@deflate_rl

; 2093 :                     s->match_length = s->lookahead;

  001d2	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001d5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001d8	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  001db	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
$LN11@deflate_rl:

; 2094 :             }
; 2095 :             Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
; 2096 :         }
; 2097 : 
; 2098 :         /* Emit match if have run of MIN_MATCH or longer, else emit literal */
; 2099 :         if (s->match_length >= MIN_MATCH) {

  001de	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001e1	83 7a 60 03	 cmp	 DWORD PTR [edx+96], 3
  001e5	0f 82 4a 01 00
	00		 jb	 $LN15@deflate_rl

; 2100 :             check_match(s, s->strstart, s->strstart - 1, s->match_length);
; 2101 : 
; 2102 :             _tr_tally_dist(s, 1, s->match_length - MIN_MATCH, bflush);

  001eb	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001ee	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  001f1	83 e9 03	 sub	 ecx, 3
  001f4	88 4d ef	 mov	 BYTE PTR _len$3[ebp], cl
  001f7	ba 01 00 00 00	 mov	 edx, 1
  001fc	66 89 55 e8	 mov	 WORD PTR _dist$2[ebp], dx
  00200	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00203	8b 88 a0 16 00
	00		 mov	 ecx, DWORD PTR [eax+5792]
  00209	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0020c	8b 82 a4 16 00
	00		 mov	 eax, DWORD PTR [edx+5796]
  00212	66 8b 55 e8	 mov	 dx, WORD PTR _dist$2[ebp]
  00216	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  0021a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0021d	8b 88 a0 16 00
	00		 mov	 ecx, DWORD PTR [eax+5792]
  00223	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00226	8b 82 98 16 00
	00		 mov	 eax, DWORD PTR [edx+5784]
  0022c	8a 55 ef	 mov	 dl, BYTE PTR _len$3[ebp]
  0022f	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  00232	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00235	8b 88 a0 16 00
	00		 mov	 ecx, DWORD PTR [eax+5792]
  0023b	83 c1 01	 add	 ecx, 1
  0023e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00241	89 8a a0 16 00
	00		 mov	 DWORD PTR [edx+5792], ecx
  00247	66 8b 45 e8	 mov	 ax, WORD PTR _dist$2[ebp]
  0024b	66 83 e8 01	 sub	 ax, 1
  0024f	66 89 45 e8	 mov	 WORD PTR _dist$2[ebp], ax
  00253	0f b6 4d ef	 movzx	 ecx, BYTE PTR _len$3[ebp]
  00257	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR __length_code[ecx]
  0025e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00261	66 8b 8c 90 98
	04 00 00	 mov	 cx, WORD PTR [eax+edx*4+1176]
  00269	66 83 c1 01	 add	 cx, 1
  0026d	0f b6 55 ef	 movzx	 edx, BYTE PTR _len$3[ebp]
  00271	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR __length_code[edx]
  00278	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0027b	66 89 8c 82 98
	04 00 00	 mov	 WORD PTR [edx+eax*4+1176], cx
  00283	0f b7 45 e8	 movzx	 eax, WORD PTR _dist$2[ebp]
  00287	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  0028c	7d 13		 jge	 SHORT $LN24@deflate_rl
  0028e	0f ae e8	 lfence
  00291	0f b7 4d e8	 movzx	 ecx, WORD PTR _dist$2[ebp]
  00295	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR __dist_code[ecx]
  0029c	89 55 e0	 mov	 DWORD PTR tv221[ebp], edx
  0029f	eb 14		 jmp	 SHORT $LN25@deflate_rl
$LN24@deflate_rl:
  002a1	0f ae e8	 lfence
  002a4	0f b7 45 e8	 movzx	 eax, WORD PTR _dist$2[ebp]
  002a8	c1 f8 07	 sar	 eax, 7
  002ab	0f b6 88 00 01
	00 00		 movzx	 ecx, BYTE PTR __dist_code[eax+256]
  002b2	89 4d e0	 mov	 DWORD PTR tv221[ebp], ecx
$LN25@deflate_rl:
  002b5	8b 55 e0	 mov	 edx, DWORD PTR tv221[ebp]
  002b8	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002bb	66 8b 8c 90 88
	09 00 00	 mov	 cx, WORD PTR [eax+edx*4+2440]
  002c3	66 83 c1 01	 add	 cx, 1
  002c7	8b 55 e0	 mov	 edx, DWORD PTR tv221[ebp]
  002ca	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002cd	66 89 8c 90 88
	09 00 00	 mov	 WORD PTR [eax+edx*4+2440], cx
  002d5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002d8	8b 91 9c 16 00
	00		 mov	 edx, DWORD PTR [ecx+5788]
  002de	83 ea 01	 sub	 edx, 1
  002e1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002e4	39 90 a0 16 00
	00		 cmp	 DWORD PTR [eax+5792], edx
  002ea	75 09		 jne	 SHORT $LN26@deflate_rl
  002ec	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR tv238[ebp], 1
  002f3	eb 07		 jmp	 SHORT $LN27@deflate_rl
$LN26@deflate_rl:
  002f5	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv238[ebp], 0
$LN27@deflate_rl:
  002fc	8b 4d dc	 mov	 ecx, DWORD PTR tv238[ebp]
  002ff	89 4d fc	 mov	 DWORD PTR _bflush$[ebp], ecx

; 2103 : 
; 2104 :             s->lookahead -= s->match_length;

  00302	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00305	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00308	8b 4a 74	 mov	 ecx, DWORD PTR [edx+116]
  0030b	2b 48 60	 sub	 ecx, DWORD PTR [eax+96]
  0030e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00311	89 4a 74	 mov	 DWORD PTR [edx+116], ecx

; 2105 :             s->strstart += s->match_length;

  00314	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00317	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  0031a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0031d	03 4a 60	 add	 ecx, DWORD PTR [edx+96]
  00320	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00323	89 48 6c	 mov	 DWORD PTR [eax+108], ecx

; 2106 :             s->match_length = 0;

  00326	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00329	c7 41 60 00 00
	00 00		 mov	 DWORD PTR [ecx+96], 0

; 2107 :         } else {

  00330	e9 c4 00 00 00	 jmp	 $LN16@deflate_rl
$LN15@deflate_rl:

; 2108 :             /* No match, output a literal byte */
; 2109 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 2110 :             _tr_tally_lit (s, s->window[s->strstart], bflush);

  00335	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00338	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  0033b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0033e	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00341	8a 04 02	 mov	 al, BYTE PTR [edx+eax]
  00344	88 45 e7	 mov	 BYTE PTR _cc$1[ebp], al
  00347	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0034a	8b 91 a0 16 00
	00		 mov	 edx, DWORD PTR [ecx+5792]
  00350	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00353	8b 88 a4 16 00
	00		 mov	 ecx, DWORD PTR [eax+5796]
  00359	33 c0		 xor	 eax, eax
  0035b	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  0035f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00362	8b 91 a0 16 00
	00		 mov	 edx, DWORD PTR [ecx+5792]
  00368	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0036b	8b 88 98 16 00
	00		 mov	 ecx, DWORD PTR [eax+5784]
  00371	8a 45 e7	 mov	 al, BYTE PTR _cc$1[ebp]
  00374	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  00377	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0037a	8b 91 a0 16 00
	00		 mov	 edx, DWORD PTR [ecx+5792]
  00380	83 c2 01	 add	 edx, 1
  00383	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00386	89 90 a0 16 00
	00		 mov	 DWORD PTR [eax+5792], edx
  0038c	0f b6 4d e7	 movzx	 ecx, BYTE PTR _cc$1[ebp]
  00390	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00393	66 8b 84 8a 94
	00 00 00	 mov	 ax, WORD PTR [edx+ecx*4+148]
  0039b	66 83 c0 01	 add	 ax, 1
  0039f	0f b6 4d e7	 movzx	 ecx, BYTE PTR _cc$1[ebp]
  003a3	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003a6	66 89 84 8a 94
	00 00 00	 mov	 WORD PTR [edx+ecx*4+148], ax
  003ae	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003b1	8b 88 9c 16 00
	00		 mov	 ecx, DWORD PTR [eax+5788]
  003b7	83 e9 01	 sub	 ecx, 1
  003ba	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003bd	39 8a a0 16 00
	00		 cmp	 DWORD PTR [edx+5792], ecx
  003c3	75 09		 jne	 SHORT $LN28@deflate_rl
  003c5	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR tv283[ebp], 1
  003cc	eb 07		 jmp	 SHORT $LN29@deflate_rl
$LN28@deflate_rl:
  003ce	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv283[ebp], 0
$LN29@deflate_rl:
  003d5	8b 45 d8	 mov	 eax, DWORD PTR tv283[ebp]
  003d8	89 45 fc	 mov	 DWORD PTR _bflush$[ebp], eax

; 2111 :             s->lookahead--;

  003db	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003de	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  003e1	83 ea 01	 sub	 edx, 1
  003e4	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003e7	89 50 74	 mov	 DWORD PTR [eax+116], edx

; 2112 :             s->strstart++;

  003ea	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003ed	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  003f0	83 c2 01	 add	 edx, 1
  003f3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003f6	89 50 6c	 mov	 DWORD PTR [eax+108], edx
$LN16@deflate_rl:

; 2113 :         }
; 2114 :         if (bflush) FLUSH_BLOCK(s, 0);

  003f9	83 7d fc 00	 cmp	 DWORD PTR _bflush$[ebp], 0
  003fd	74 6c		 je	 SHORT $LN17@deflate_rl
  003ff	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00402	83 79 5c 00	 cmp	 DWORD PTR [ecx+92], 0
  00406	7c 11		 jl	 SHORT $LN30@deflate_rl
  00408	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0040b	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  0040e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00411	03 41 5c	 add	 eax, DWORD PTR [ecx+92]
  00414	89 45 d4	 mov	 DWORD PTR tv304[ebp], eax
  00417	eb 07		 jmp	 SHORT $LN31@deflate_rl
$LN30@deflate_rl:
  00419	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv304[ebp], 0
$LN31@deflate_rl:
  00420	6a 00		 push	 0
  00422	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00425	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00428	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  0042b	2b 48 5c	 sub	 ecx, DWORD PTR [eax+92]
  0042e	51		 push	 ecx
  0042f	8b 55 d4	 mov	 edx, DWORD PTR tv304[ebp]
  00432	52		 push	 edx
  00433	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00436	50		 push	 eax
  00437	e8 00 00 00 00	 call	 __tr_flush_block
  0043c	83 c4 10	 add	 esp, 16			; 00000010H
  0043f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00442	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00445	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00448	89 41 5c	 mov	 DWORD PTR [ecx+92], eax
  0044b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0044e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00450	52		 push	 edx
  00451	e8 00 00 00 00	 call	 _flush_pending
  00456	83 c4 04	 add	 esp, 4
  00459	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0045c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0045e	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00462	75 07		 jne	 SHORT $LN17@deflate_rl
  00464	33 c0		 xor	 eax, eax
  00466	e9 08 01 00 00	 jmp	 $LN1@deflate_rl
$LN17@deflate_rl:

; 2115 :     }

  0046b	e9 b0 fb ff ff	 jmp	 $LN4@deflate_rl
$LN3@deflate_rl:

; 2116 :     s->insert = 0;

  00470	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00473	c7 82 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+5812], 0

; 2117 :     if (flush == Z_FINISH) {

  0047d	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  00481	75 76		 jne	 SHORT $LN19@deflate_rl

; 2118 :         FLUSH_BLOCK(s, 1);

  00483	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00486	83 78 5c 00	 cmp	 DWORD PTR [eax+92], 0
  0048a	7c 11		 jl	 SHORT $LN32@deflate_rl
  0048c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0048f	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00492	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00495	03 50 5c	 add	 edx, DWORD PTR [eax+92]
  00498	89 55 d0	 mov	 DWORD PTR tv327[ebp], edx
  0049b	eb 07		 jmp	 SHORT $LN33@deflate_rl
$LN32@deflate_rl:
  0049d	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv327[ebp], 0
$LN33@deflate_rl:
  004a4	6a 01		 push	 1
  004a6	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004a9	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004ac	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  004af	2b 42 5c	 sub	 eax, DWORD PTR [edx+92]
  004b2	50		 push	 eax
  004b3	8b 4d d0	 mov	 ecx, DWORD PTR tv327[ebp]
  004b6	51		 push	 ecx
  004b7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004ba	52		 push	 edx
  004bb	e8 00 00 00 00	 call	 __tr_flush_block
  004c0	83 c4 10	 add	 esp, 16			; 00000010H
  004c3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004c6	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004c9	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  004cc	89 50 5c	 mov	 DWORD PTR [eax+92], edx
  004cf	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004d2	8b 08		 mov	 ecx, DWORD PTR [eax]
  004d4	51		 push	 ecx
  004d5	e8 00 00 00 00	 call	 _flush_pending
  004da	83 c4 04	 add	 esp, 4
  004dd	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004e0	8b 02		 mov	 eax, DWORD PTR [edx]
  004e2	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  004e6	75 0a		 jne	 SHORT $LN20@deflate_rl
  004e8	b8 02 00 00 00	 mov	 eax, 2
  004ed	e9 81 00 00 00	 jmp	 $LN1@deflate_rl
$LN20@deflate_rl:

; 2119 :         return finish_done;

  004f2	b8 03 00 00 00	 mov	 eax, 3
  004f7	eb 7a		 jmp	 SHORT $LN1@deflate_rl
$LN19@deflate_rl:

; 2120 :     }
; 2121 :     if (s->last_lit)

  004f9	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004fc	83 b9 a0 16 00
	00 00		 cmp	 DWORD PTR [ecx+5792], 0
  00503	74 69		 je	 SHORT $LN21@deflate_rl

; 2122 :         FLUSH_BLOCK(s, 0);

  00505	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00508	83 7a 5c 00	 cmp	 DWORD PTR [edx+92], 0
  0050c	7c 11		 jl	 SHORT $LN34@deflate_rl
  0050e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00511	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00514	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00517	03 4a 5c	 add	 ecx, DWORD PTR [edx+92]
  0051a	89 4d cc	 mov	 DWORD PTR tv350[ebp], ecx
  0051d	eb 07		 jmp	 SHORT $LN35@deflate_rl
$LN34@deflate_rl:
  0051f	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR tv350[ebp], 0
$LN35@deflate_rl:
  00526	6a 00		 push	 0
  00528	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0052b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0052e	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  00531	2b 51 5c	 sub	 edx, DWORD PTR [ecx+92]
  00534	52		 push	 edx
  00535	8b 45 cc	 mov	 eax, DWORD PTR tv350[ebp]
  00538	50		 push	 eax
  00539	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0053c	51		 push	 ecx
  0053d	e8 00 00 00 00	 call	 __tr_flush_block
  00542	83 c4 10	 add	 esp, 16			; 00000010H
  00545	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00548	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0054b	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  0054e	89 4a 5c	 mov	 DWORD PTR [edx+92], ecx
  00551	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00554	8b 02		 mov	 eax, DWORD PTR [edx]
  00556	50		 push	 eax
  00557	e8 00 00 00 00	 call	 _flush_pending
  0055c	83 c4 04	 add	 esp, 4
  0055f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00562	8b 11		 mov	 edx, DWORD PTR [ecx]
  00564	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  00568	75 04		 jne	 SHORT $LN21@deflate_rl
  0056a	33 c0		 xor	 eax, eax
  0056c	eb 05		 jmp	 SHORT $LN1@deflate_rl
$LN21@deflate_rl:

; 2123 :     return block_done;

  0056e	b8 01 00 00 00	 mov	 eax, 1
$LN1@deflate_rl:

; 2124 : }

  00573	5f		 pop	 edi
  00574	83 c4 34	 add	 esp, 52			; 00000034H
  00577	3b ec		 cmp	 ebp, esp
  00579	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0057e	8b e5		 mov	 esp, ebp
  00580	5d		 pop	 ebp
  00581	c3		 ret	 0
_deflate_rle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\deflate.c
;	COMDAT _deflate_huff
_TEXT	SEGMENT
tv205 = -24						; size = 4
tv182 = -20						; size = 4
tv159 = -16						; size = 4
tv138 = -12						; size = 4
_cc$1 = -5						; size = 1
_bflush$ = -4						; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_huff PROC					; COMDAT

; 2133 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000e	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00011	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00014	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00017	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001a	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001d	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00022	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
$LN4@deflate_hu:

; 2134 :     int bflush;             /* set if current block must be flushed */
; 2135 : 
; 2136 :     for (;;) {
; 2137 :         /* Make sure that we have a literal to write. */
; 2138 :         if (s->lookahead == 0) {

  00027	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0002a	83 78 74 00	 cmp	 DWORD PTR [eax+116], 0
  0002e	75 27		 jne	 SHORT $LN5@deflate_hu

; 2139 :             fill_window(s);

  00030	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 _fill_window
  00039	83 c4 04	 add	 esp, 4

; 2140 :             if (s->lookahead == 0) {

  0003c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0003f	83 7a 74 00	 cmp	 DWORD PTR [edx+116], 0
  00043	75 12		 jne	 SHORT $LN5@deflate_hu

; 2141 :                 if (flush == Z_NO_FLUSH)

  00045	83 7d 0c 00	 cmp	 DWORD PTR _flush$[ebp], 0
  00049	75 07		 jne	 SHORT $LN7@deflate_hu

; 2142 :                     return need_more;

  0004b	33 c0		 xor	 eax, eax
  0004d	e9 4d 02 00 00	 jmp	 $LN1@deflate_hu
$LN7@deflate_hu:

; 2143 :                 break;      /* flush the current block */

  00052	e9 45 01 00 00	 jmp	 $LN3@deflate_hu
$LN5@deflate_hu:

; 2144 :             }
; 2145 :         }
; 2146 : 
; 2147 :         /* Output a literal byte */
; 2148 :         s->match_length = 0;

  00057	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0005a	c7 40 60 00 00
	00 00		 mov	 DWORD PTR [eax+96], 0

; 2149 :         Tracevv((stderr,"%c", s->window[s->strstart]));
; 2150 :         _tr_tally_lit (s, s->window[s->strstart], bflush);

  00061	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00064	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  00067	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0006a	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0006d	8a 14 11	 mov	 dl, BYTE PTR [ecx+edx]
  00070	88 55 fb	 mov	 BYTE PTR _cc$1[ebp], dl
  00073	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00076	8b 88 a0 16 00
	00		 mov	 ecx, DWORD PTR [eax+5792]
  0007c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0007f	8b 82 a4 16 00
	00		 mov	 eax, DWORD PTR [edx+5796]
  00085	33 d2		 xor	 edx, edx
  00087	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  0008b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0008e	8b 88 a0 16 00
	00		 mov	 ecx, DWORD PTR [eax+5792]
  00094	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00097	8b 82 98 16 00
	00		 mov	 eax, DWORD PTR [edx+5784]
  0009d	8a 55 fb	 mov	 dl, BYTE PTR _cc$1[ebp]
  000a0	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  000a3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000a6	8b 88 a0 16 00
	00		 mov	 ecx, DWORD PTR [eax+5792]
  000ac	83 c1 01	 add	 ecx, 1
  000af	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000b2	89 8a a0 16 00
	00		 mov	 DWORD PTR [edx+5792], ecx
  000b8	0f b6 45 fb	 movzx	 eax, BYTE PTR _cc$1[ebp]
  000bc	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000bf	66 8b 94 81 94
	00 00 00	 mov	 dx, WORD PTR [ecx+eax*4+148]
  000c7	66 83 c2 01	 add	 dx, 1
  000cb	0f b6 45 fb	 movzx	 eax, BYTE PTR _cc$1[ebp]
  000cf	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000d2	66 89 94 81 94
	00 00 00	 mov	 WORD PTR [ecx+eax*4+148], dx
  000da	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000dd	8b 82 9c 16 00
	00		 mov	 eax, DWORD PTR [edx+5788]
  000e3	83 e8 01	 sub	 eax, 1
  000e6	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000e9	39 81 a0 16 00
	00		 cmp	 DWORD PTR [ecx+5792], eax
  000ef	75 09		 jne	 SHORT $LN15@deflate_hu
  000f1	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv138[ebp], 1
  000f8	eb 07		 jmp	 SHORT $LN16@deflate_hu
$LN15@deflate_hu:
  000fa	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv138[ebp], 0
$LN16@deflate_hu:
  00101	8b 55 f4	 mov	 edx, DWORD PTR tv138[ebp]
  00104	89 55 fc	 mov	 DWORD PTR _bflush$[ebp], edx

; 2151 :         s->lookahead--;

  00107	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0010a	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0010d	83 e9 01	 sub	 ecx, 1
  00110	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00113	89 4a 74	 mov	 DWORD PTR [edx+116], ecx

; 2152 :         s->strstart++;

  00116	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00119	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  0011c	83 c1 01	 add	 ecx, 1
  0011f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00122	89 4a 6c	 mov	 DWORD PTR [edx+108], ecx

; 2153 :         if (bflush) FLUSH_BLOCK(s, 0);

  00125	83 7d fc 00	 cmp	 DWORD PTR _bflush$[ebp], 0
  00129	74 6c		 je	 SHORT $LN8@deflate_hu
  0012b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0012e	83 78 5c 00	 cmp	 DWORD PTR [eax+92], 0
  00132	7c 11		 jl	 SHORT $LN17@deflate_hu
  00134	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00137	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0013a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0013d	03 50 5c	 add	 edx, DWORD PTR [eax+92]
  00140	89 55 f0	 mov	 DWORD PTR tv159[ebp], edx
  00143	eb 07		 jmp	 SHORT $LN18@deflate_hu
$LN17@deflate_hu:
  00145	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv159[ebp], 0
$LN18@deflate_hu:
  0014c	6a 00		 push	 0
  0014e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00151	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00154	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  00157	2b 42 5c	 sub	 eax, DWORD PTR [edx+92]
  0015a	50		 push	 eax
  0015b	8b 4d f0	 mov	 ecx, DWORD PTR tv159[ebp]
  0015e	51		 push	 ecx
  0015f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00162	52		 push	 edx
  00163	e8 00 00 00 00	 call	 __tr_flush_block
  00168	83 c4 10	 add	 esp, 16			; 00000010H
  0016b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0016e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00171	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  00174	89 50 5c	 mov	 DWORD PTR [eax+92], edx
  00177	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0017a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0017c	51		 push	 ecx
  0017d	e8 00 00 00 00	 call	 _flush_pending
  00182	83 c4 04	 add	 esp, 4
  00185	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00188	8b 02		 mov	 eax, DWORD PTR [edx]
  0018a	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0018e	75 07		 jne	 SHORT $LN8@deflate_hu
  00190	33 c0		 xor	 eax, eax
  00192	e9 08 01 00 00	 jmp	 $LN1@deflate_hu
$LN8@deflate_hu:

; 2154 :     }

  00197	e9 8b fe ff ff	 jmp	 $LN4@deflate_hu
$LN3@deflate_hu:

; 2155 :     s->insert = 0;

  0019c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0019f	c7 81 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+5812], 0

; 2156 :     if (flush == Z_FINISH) {

  001a9	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  001ad	75 76		 jne	 SHORT $LN10@deflate_hu

; 2157 :         FLUSH_BLOCK(s, 1);

  001af	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001b2	83 7a 5c 00	 cmp	 DWORD PTR [edx+92], 0
  001b6	7c 11		 jl	 SHORT $LN19@deflate_hu
  001b8	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001bb	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  001be	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001c1	03 4a 5c	 add	 ecx, DWORD PTR [edx+92]
  001c4	89 4d ec	 mov	 DWORD PTR tv182[ebp], ecx
  001c7	eb 07		 jmp	 SHORT $LN20@deflate_hu
$LN19@deflate_hu:
  001c9	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv182[ebp], 0
$LN20@deflate_hu:
  001d0	6a 01		 push	 1
  001d2	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001d5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001d8	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  001db	2b 51 5c	 sub	 edx, DWORD PTR [ecx+92]
  001de	52		 push	 edx
  001df	8b 45 ec	 mov	 eax, DWORD PTR tv182[ebp]
  001e2	50		 push	 eax
  001e3	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001e6	51		 push	 ecx
  001e7	e8 00 00 00 00	 call	 __tr_flush_block
  001ec	83 c4 10	 add	 esp, 16			; 00000010H
  001ef	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001f2	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001f5	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  001f8	89 4a 5c	 mov	 DWORD PTR [edx+92], ecx
  001fb	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001fe	8b 02		 mov	 eax, DWORD PTR [edx]
  00200	50		 push	 eax
  00201	e8 00 00 00 00	 call	 _flush_pending
  00206	83 c4 04	 add	 esp, 4
  00209	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0020c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0020e	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  00212	75 0a		 jne	 SHORT $LN11@deflate_hu
  00214	b8 02 00 00 00	 mov	 eax, 2
  00219	e9 81 00 00 00	 jmp	 $LN1@deflate_hu
$LN11@deflate_hu:

; 2158 :         return finish_done;

  0021e	b8 03 00 00 00	 mov	 eax, 3
  00223	eb 7a		 jmp	 SHORT $LN1@deflate_hu
$LN10@deflate_hu:

; 2159 :     }
; 2160 :     if (s->last_lit)

  00225	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00228	83 b8 a0 16 00
	00 00		 cmp	 DWORD PTR [eax+5792], 0
  0022f	74 69		 je	 SHORT $LN12@deflate_hu

; 2161 :         FLUSH_BLOCK(s, 0);

  00231	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00234	83 79 5c 00	 cmp	 DWORD PTR [ecx+92], 0
  00238	7c 11		 jl	 SHORT $LN21@deflate_hu
  0023a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0023d	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00240	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00243	03 41 5c	 add	 eax, DWORD PTR [ecx+92]
  00246	89 45 e8	 mov	 DWORD PTR tv205[ebp], eax
  00249	eb 07		 jmp	 SHORT $LN22@deflate_hu
$LN21@deflate_hu:
  0024b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv205[ebp], 0
$LN22@deflate_hu:
  00252	6a 00		 push	 0
  00254	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00257	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0025a	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  0025d	2b 48 5c	 sub	 ecx, DWORD PTR [eax+92]
  00260	51		 push	 ecx
  00261	8b 55 e8	 mov	 edx, DWORD PTR tv205[ebp]
  00264	52		 push	 edx
  00265	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00268	50		 push	 eax
  00269	e8 00 00 00 00	 call	 __tr_flush_block
  0026e	83 c4 10	 add	 esp, 16			; 00000010H
  00271	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00274	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00277	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  0027a	89 41 5c	 mov	 DWORD PTR [ecx+92], eax
  0027d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00280	8b 11		 mov	 edx, DWORD PTR [ecx]
  00282	52		 push	 edx
  00283	e8 00 00 00 00	 call	 _flush_pending
  00288	83 c4 04	 add	 esp, 4
  0028b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0028e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00290	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00294	75 04		 jne	 SHORT $LN12@deflate_hu
  00296	33 c0		 xor	 eax, eax
  00298	eb 05		 jmp	 SHORT $LN1@deflate_hu
$LN12@deflate_hu:

; 2162 :     return block_done;

  0029a	b8 01 00 00 00	 mov	 eax, 1
$LN1@deflate_hu:

; 2163 : }

  0029f	83 c4 18	 add	 esp, 24			; 00000018H
  002a2	3b ec		 cmp	 ebp, esp
  002a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002a9	8b e5		 mov	 esp, ebp
  002ab	5d		 pop	 ebp
  002ac	c3		 ret	 0
_deflate_huff ENDP
_TEXT	ENDS
END

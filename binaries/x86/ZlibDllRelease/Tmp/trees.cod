; Listing generated by Microsoft (R) Optimizing Compiler Version 19.20.27525.0 

	TITLE	e:\cpython\externals\zlib-1.2.11\trees.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	__length_code
PUBLIC	__dist_code
__length_code DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01cH
__dist_code DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	00H
	DB	00H
	DB	010H
	DB	011H
	DB	012H
	DB	012H
	DB	013H
	DB	013H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
_static_dtree DW 00H
	DW	05H
	DW	010H
	DW	05H
	DW	08H
	DW	05H
	DW	018H
	DW	05H
	DW	04H
	DW	05H
	DW	014H
	DW	05H
	DW	0cH
	DW	05H
	DW	01cH
	DW	05H
	DW	02H
	DW	05H
	DW	012H
	DW	05H
	DW	0aH
	DW	05H
	DW	01aH
	DW	05H
	DW	06H
	DW	05H
	DW	016H
	DW	05H
	DW	0eH
	DW	05H
	DW	01eH
	DW	05H
	DW	01H
	DW	05H
	DW	011H
	DW	05H
	DW	09H
	DW	05H
	DW	019H
	DW	05H
	DW	05H
	DW	05H
	DW	015H
	DW	05H
	DW	0dH
	DW	05H
	DW	01dH
	DW	05H
	DW	03H
	DW	05H
	DW	013H
	DW	05H
	DW	0bH
	DW	05H
	DW	01bH
	DW	05H
	DW	07H
	DW	05H
	DW	017H
	DW	05H
_extra_blbits DD 00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	03H
	DD	07H
	ORG $+4
_extra_lbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	05H
	DD	05H
	DD	00H
	ORG $+4
_base_dist DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	06H
	DD	08H
	DD	0cH
	DD	010H
	DD	018H
	DD	020H
	DD	030H
	DD	040H
	DD	060H
	DD	080H
	DD	0c0H
	DD	0100H
	DD	0180H
	DD	0200H
	DD	0300H
	DD	0400H
	DD	0600H
	DD	0800H
	DD	0c00H
	DD	01000H
	DD	01800H
	DD	02000H
	DD	03000H
	DD	04000H
	DD	06000H
_base_length DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	08H
	DD	0aH
	DD	0cH
	DD	0eH
	DD	010H
	DD	014H
	DD	018H
	DD	01cH
	DD	020H
	DD	028H
	DD	030H
	DD	038H
	DD	040H
	DD	050H
	DD	060H
	DD	070H
	DD	080H
	DD	0a0H
	DD	0c0H
	DD	0e0H
	DD	00H
_static_l_desc DD FLAT:_static_ltree
	DD	FLAT:_extra_lbits
	DD	0101H
	DD	011eH
	DD	0fH
_static_bl_desc DD 00H
	DD	FLAT:_extra_blbits
	DD	00H
	DD	013H
	DD	07H
	ORG $+4
_extra_dbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	06H
	DD	06H
	DD	07H
	DD	07H
	DD	08H
	DD	08H
	DD	09H
	DD	09H
	DD	0aH
	DD	0aH
	DD	0bH
	DD	0bH
	DD	0cH
	DD	0cH
	DD	0dH
	DD	0dH
_static_ltree DW 0cH
	DW	08H
	DW	08cH
	DW	08H
	DW	04cH
	DW	08H
	DW	0ccH
	DW	08H
	DW	02cH
	DW	08H
	DW	0acH
	DW	08H
	DW	06cH
	DW	08H
	DW	0ecH
	DW	08H
	DW	01cH
	DW	08H
	DW	09cH
	DW	08H
	DW	05cH
	DW	08H
	DW	0dcH
	DW	08H
	DW	03cH
	DW	08H
	DW	0bcH
	DW	08H
	DW	07cH
	DW	08H
	DW	0fcH
	DW	08H
	DW	02H
	DW	08H
	DW	082H
	DW	08H
	DW	042H
	DW	08H
	DW	0c2H
	DW	08H
	DW	022H
	DW	08H
	DW	0a2H
	DW	08H
	DW	062H
	DW	08H
	DW	0e2H
	DW	08H
	DW	012H
	DW	08H
	DW	092H
	DW	08H
	DW	052H
	DW	08H
	DW	0d2H
	DW	08H
	DW	032H
	DW	08H
	DW	0b2H
	DW	08H
	DW	072H
	DW	08H
	DW	0f2H
	DW	08H
	DW	0aH
	DW	08H
	DW	08aH
	DW	08H
	DW	04aH
	DW	08H
	DW	0caH
	DW	08H
	DW	02aH
	DW	08H
	DW	0aaH
	DW	08H
	DW	06aH
	DW	08H
	DW	0eaH
	DW	08H
	DW	01aH
	DW	08H
	DW	09aH
	DW	08H
	DW	05aH
	DW	08H
	DW	0daH
	DW	08H
	DW	03aH
	DW	08H
	DW	0baH
	DW	08H
	DW	07aH
	DW	08H
	DW	0faH
	DW	08H
	DW	06H
	DW	08H
	DW	086H
	DW	08H
	DW	046H
	DW	08H
	DW	0c6H
	DW	08H
	DW	026H
	DW	08H
	DW	0a6H
	DW	08H
	DW	066H
	DW	08H
	DW	0e6H
	DW	08H
	DW	016H
	DW	08H
	DW	096H
	DW	08H
	DW	056H
	DW	08H
	DW	0d6H
	DW	08H
	DW	036H
	DW	08H
	DW	0b6H
	DW	08H
	DW	076H
	DW	08H
	DW	0f6H
	DW	08H
	DW	0eH
	DW	08H
	DW	08eH
	DW	08H
	DW	04eH
	DW	08H
	DW	0ceH
	DW	08H
	DW	02eH
	DW	08H
	DW	0aeH
	DW	08H
	DW	06eH
	DW	08H
	DW	0eeH
	DW	08H
	DW	01eH
	DW	08H
	DW	09eH
	DW	08H
	DW	05eH
	DW	08H
	DW	0deH
	DW	08H
	DW	03eH
	DW	08H
	DW	0beH
	DW	08H
	DW	07eH
	DW	08H
	DW	0feH
	DW	08H
	DW	01H
	DW	08H
	DW	081H
	DW	08H
	DW	041H
	DW	08H
	DW	0c1H
	DW	08H
	DW	021H
	DW	08H
	DW	0a1H
	DW	08H
	DW	061H
	DW	08H
	DW	0e1H
	DW	08H
	DW	011H
	DW	08H
	DW	091H
	DW	08H
	DW	051H
	DW	08H
	DW	0d1H
	DW	08H
	DW	031H
	DW	08H
	DW	0b1H
	DW	08H
	DW	071H
	DW	08H
	DW	0f1H
	DW	08H
	DW	09H
	DW	08H
	DW	089H
	DW	08H
	DW	049H
	DW	08H
	DW	0c9H
	DW	08H
	DW	029H
	DW	08H
	DW	0a9H
	DW	08H
	DW	069H
	DW	08H
	DW	0e9H
	DW	08H
	DW	019H
	DW	08H
	DW	099H
	DW	08H
	DW	059H
	DW	08H
	DW	0d9H
	DW	08H
	DW	039H
	DW	08H
	DW	0b9H
	DW	08H
	DW	079H
	DW	08H
	DW	0f9H
	DW	08H
	DW	05H
	DW	08H
	DW	085H
	DW	08H
	DW	045H
	DW	08H
	DW	0c5H
	DW	08H
	DW	025H
	DW	08H
	DW	0a5H
	DW	08H
	DW	065H
	DW	08H
	DW	0e5H
	DW	08H
	DW	015H
	DW	08H
	DW	095H
	DW	08H
	DW	055H
	DW	08H
	DW	0d5H
	DW	08H
	DW	035H
	DW	08H
	DW	0b5H
	DW	08H
	DW	075H
	DW	08H
	DW	0f5H
	DW	08H
	DW	0dH
	DW	08H
	DW	08dH
	DW	08H
	DW	04dH
	DW	08H
	DW	0cdH
	DW	08H
	DW	02dH
	DW	08H
	DW	0adH
	DW	08H
	DW	06dH
	DW	08H
	DW	0edH
	DW	08H
	DW	01dH
	DW	08H
	DW	09dH
	DW	08H
	DW	05dH
	DW	08H
	DW	0ddH
	DW	08H
	DW	03dH
	DW	08H
	DW	0bdH
	DW	08H
	DW	07dH
	DW	08H
	DW	0fdH
	DW	08H
	DW	013H
	DW	09H
	DW	0113H
	DW	09H
	DW	093H
	DW	09H
	DW	0193H
	DW	09H
	DW	053H
	DW	09H
	DW	0153H
	DW	09H
	DW	0d3H
	DW	09H
	DW	01d3H
	DW	09H
	DW	033H
	DW	09H
	DW	0133H
	DW	09H
	DW	0b3H
	DW	09H
	DW	01b3H
	DW	09H
	DW	073H
	DW	09H
	DW	0173H
	DW	09H
	DW	0f3H
	DW	09H
	DW	01f3H
	DW	09H
	DW	0bH
	DW	09H
	DW	010bH
	DW	09H
	DW	08bH
	DW	09H
	DW	018bH
	DW	09H
	DW	04bH
	DW	09H
	DW	014bH
	DW	09H
	DW	0cbH
	DW	09H
	DW	01cbH
	DW	09H
	DW	02bH
	DW	09H
	DW	012bH
	DW	09H
	DW	0abH
	DW	09H
	DW	01abH
	DW	09H
	DW	06bH
	DW	09H
	DW	016bH
	DW	09H
	DW	0ebH
	DW	09H
	DW	01ebH
	DW	09H
	DW	01bH
	DW	09H
	DW	011bH
	DW	09H
	DW	09bH
	DW	09H
	DW	019bH
	DW	09H
	DW	05bH
	DW	09H
	DW	015bH
	DW	09H
	DW	0dbH
	DW	09H
	DW	01dbH
	DW	09H
	DW	03bH
	DW	09H
	DW	013bH
	DW	09H
	DW	0bbH
	DW	09H
	DW	01bbH
	DW	09H
	DW	07bH
	DW	09H
	DW	017bH
	DW	09H
	DW	0fbH
	DW	09H
	DW	01fbH
	DW	09H
	DW	07H
	DW	09H
	DW	0107H
	DW	09H
	DW	087H
	DW	09H
	DW	0187H
	DW	09H
	DW	047H
	DW	09H
	DW	0147H
	DW	09H
	DW	0c7H
	DW	09H
	DW	01c7H
	DW	09H
	DW	027H
	DW	09H
	DW	0127H
	DW	09H
	DW	0a7H
	DW	09H
	DW	01a7H
	DW	09H
	DW	067H
	DW	09H
	DW	0167H
	DW	09H
	DW	0e7H
	DW	09H
	DW	01e7H
	DW	09H
	DW	017H
	DW	09H
	DW	0117H
	DW	09H
	DW	097H
	DW	09H
	DW	0197H
	DW	09H
	DW	057H
	DW	09H
	DW	0157H
	DW	09H
	DW	0d7H
	DW	09H
	DW	01d7H
	DW	09H
	DW	037H
	DW	09H
	DW	0137H
	DW	09H
	DW	0b7H
	DW	09H
	DW	01b7H
	DW	09H
	DW	077H
	DW	09H
	DW	0177H
	DW	09H
	DW	0f7H
	DW	09H
	DW	01f7H
	DW	09H
	DW	0fH
	DW	09H
	DW	010fH
	DW	09H
	DW	08fH
	DW	09H
	DW	018fH
	DW	09H
	DW	04fH
	DW	09H
	DW	014fH
	DW	09H
	DW	0cfH
	DW	09H
	DW	01cfH
	DW	09H
	DW	02fH
	DW	09H
	DW	012fH
	DW	09H
	DW	0afH
	DW	09H
	DW	01afH
	DW	09H
	DW	06fH
	DW	09H
	DW	016fH
	DW	09H
	DW	0efH
	DW	09H
	DW	01efH
	DW	09H
	DW	01fH
	DW	09H
	DW	011fH
	DW	09H
	DW	09fH
	DW	09H
	DW	019fH
	DW	09H
	DW	05fH
	DW	09H
	DW	015fH
	DW	09H
	DW	0dfH
	DW	09H
	DW	01dfH
	DW	09H
	DW	03fH
	DW	09H
	DW	013fH
	DW	09H
	DW	0bfH
	DW	09H
	DW	01bfH
	DW	09H
	DW	07fH
	DW	09H
	DW	017fH
	DW	09H
	DW	0ffH
	DW	09H
	DW	01ffH
	DW	09H
	DW	00H
	DW	07H
	DW	040H
	DW	07H
	DW	020H
	DW	07H
	DW	060H
	DW	07H
	DW	010H
	DW	07H
	DW	050H
	DW	07H
	DW	030H
	DW	07H
	DW	070H
	DW	07H
	DW	08H
	DW	07H
	DW	048H
	DW	07H
	DW	028H
	DW	07H
	DW	068H
	DW	07H
	DW	018H
	DW	07H
	DW	058H
	DW	07H
	DW	038H
	DW	07H
	DW	078H
	DW	07H
	DW	04H
	DW	07H
	DW	044H
	DW	07H
	DW	024H
	DW	07H
	DW	064H
	DW	07H
	DW	014H
	DW	07H
	DW	054H
	DW	07H
	DW	034H
	DW	07H
	DW	074H
	DW	07H
	DW	03H
	DW	08H
	DW	083H
	DW	08H
	DW	043H
	DW	08H
	DW	0c3H
	DW	08H
	DW	023H
	DW	08H
	DW	0a3H
	DW	08H
	DW	063H
	DW	08H
	DW	0e3H
	DW	08H
_static_d_desc DD FLAT:_static_dtree
	DD	FLAT:_extra_dbits
	DD	00H
	DD	01eH
	DD	0fH
_bl_order DB	010H
	DB	011H
	DB	012H
	DB	00H
	DB	08H
	DB	07H
	DB	09H
	DB	06H
	DB	0aH
	DB	05H
	DB	0bH
	DB	04H
	DB	0cH
	DB	03H
	DB	0dH
	DB	02H
	DB	0eH
	DB	01H
	DB	0fH
__95347B96_ctype@h DB 01H
__149DB6BE_basetsd@h DB 01H
__9CFFAB73_corecrt_memcpy_s@h DB 01H
__55B7CB8D_corecrt_wstring@h DB 01H
__2F7506B6_string@h DB 01H
__5BA8817F_winnt@h DB 01H
__8421AFE7_processthreadsapi@h DB 01H
__F192E00B_memoryapi@h DB 01H
__0DF854E2_winerror@h DB 01H
__940BF1C4_winbase@h DB 01H
__78A3E64A_stralign@h DB 01H
__669B3C77_trees@c DB 01H
PUBLIC	__tr_align
PUBLIC	__tr_init
PUBLIC	__tr_flush_block
PUBLIC	__tr_flush_bits
PUBLIC	__tr_stored_block
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\trees.c
;	COMDAT __tr_stored_block
_TEXT	SEGMENT
_val$1 = -8						; size = 4
_len$2 = -4						; size = 4
_s$ = 8							; size = 4
_buf$ = 12						; size = 4
_stored_len$ = 16					; size = 4
_last$ = 20						; size = 4
__tr_stored_block PROC					; COMDAT

; 868  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00019	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 869  :     send_bits(s, (STORED_BLOCK<<1)+last, 3);    /* send block type */

  0001e	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _len$2[ebp], 3
  00025	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0002a	2b 45 fc	 sub	 eax, DWORD PTR _len$2[ebp]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00030	39 81 bc 16 00
	00		 cmp	 DWORD PTR [ecx+5820], eax
  00036	0f 8e bf 00 00
	00		 jle	 $LN2@tr_stored_
  0003c	8b 55 14	 mov	 edx, DWORD PTR _last$[ebp]
  0003f	89 55 f8	 mov	 DWORD PTR _val$1[ebp], edx
  00042	0f b7 45 f8	 movzx	 eax, WORD PTR _val$1[ebp]
  00046	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00049	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  0004f	d3 e0		 shl	 eax, cl
  00051	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00054	0f b7 8a b8 16
	00 00		 movzx	 ecx, WORD PTR [edx+5816]
  0005b	0b c8		 or	 ecx, eax
  0005d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00060	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  00067	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0006a	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  00071	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00077	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0007a	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0007d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00080	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  00083	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00086	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00089	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0008c	83 c1 01	 add	 ecx, 1
  0008f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00092	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  00095	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00098	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  0009f	c1 f9 08	 sar	 ecx, 8
  000a2	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000a5	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000a8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000ab	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  000ae	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  000b1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000b4	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000b7	83 c1 01	 add	 ecx, 1
  000ba	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000bd	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  000c0	0f b7 45 f8	 movzx	 eax, WORD PTR _val$1[ebp]
  000c4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000c7	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000cc	2b 91 bc 16 00
	00		 sub	 edx, DWORD PTR [ecx+5820]
  000d2	8b ca		 mov	 ecx, edx
  000d4	d3 f8		 sar	 eax, cl
  000d6	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000d9	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  000e0	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000e3	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  000e9	8b 4d fc	 mov	 ecx, DWORD PTR _len$2[ebp]
  000ec	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  000f0	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000f3	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  000f9	eb 3a		 jmp	 SHORT $LN3@tr_stored_
$LN2@tr_stored_:
  000fb	0f b7 55 14	 movzx	 edx, WORD PTR _last$[ebp]
  000ff	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00102	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00108	d3 e2		 shl	 edx, cl
  0010a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0010d	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  00114	0b c2		 or	 eax, edx
  00116	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00119	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00120	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00123	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00129	03 45 fc	 add	 eax, DWORD PTR _len$2[ebp]
  0012c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0012f	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN3@tr_stored_:

; 870  :     bi_windup(s);        /* align on byte boundary */

  00135	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00138	52		 push	 edx
  00139	e8 00 00 00 00	 call	 _bi_windup
  0013e	83 c4 04	 add	 esp, 4

; 871  :     put_short(s, (ush)stored_len);

  00141	0f b7 45 10	 movzx	 eax, WORD PTR _stored_len$[ebp]
  00145	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0014a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0014d	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00150	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00153	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00156	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  00159	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0015c	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0015f	83 c0 01	 add	 eax, 1
  00162	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00165	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00168	0f b7 55 10	 movzx	 edx, WORD PTR _stored_len$[ebp]
  0016c	c1 fa 08	 sar	 edx, 8
  0016f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00172	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00175	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00178	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0017b	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  0017e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00181	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00184	83 c2 01	 add	 edx, 1
  00187	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0018a	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 872  :     put_short(s, (ush)~stored_len);

  0018d	8b 4d 10	 mov	 ecx, DWORD PTR _stored_len$[ebp]
  00190	f7 d1		 not	 ecx
  00192	0f b7 d1	 movzx	 edx, cx
  00195	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0019b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0019e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001a1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001a4	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  001a7	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  001aa	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001ad	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  001b0	83 c2 01	 add	 edx, 1
  001b3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001b6	89 50 14	 mov	 DWORD PTR [eax+20], edx
  001b9	8b 4d 10	 mov	 ecx, DWORD PTR _stored_len$[ebp]
  001bc	f7 d1		 not	 ecx
  001be	0f b7 d1	 movzx	 edx, cx
  001c1	c1 fa 08	 sar	 edx, 8
  001c4	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001c7	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001ca	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001cd	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  001d0	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  001d3	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001d6	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  001d9	83 c2 01	 add	 edx, 1
  001dc	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001df	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 873  :     zmemcpy(s->pending_buf + s->pending, (Bytef *)buf, stored_len);

  001e2	8b 4d 10	 mov	 ecx, DWORD PTR _stored_len$[ebp]
  001e5	51		 push	 ecx
  001e6	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  001e9	52		 push	 edx
  001ea	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001ed	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001f0	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001f3	03 4a 14	 add	 ecx, DWORD PTR [edx+20]
  001f6	51		 push	 ecx
  001f7	e8 00 00 00 00	 call	 _memcpy
  001fc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 874  :     s->pending += stored_len;

  001ff	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00202	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00205	03 4d 10	 add	 ecx, DWORD PTR _stored_len$[ebp]
  00208	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0020b	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 875  : #ifdef ZLIB_DEBUG
; 876  :     s->compressed_len = (s->compressed_len + 3 + 7) & (ulg)~7L;
; 877  :     s->compressed_len += (stored_len + 4) << 3;
; 878  :     s->bits_sent += 2*16;
; 879  :     s->bits_sent += stored_len<<3;
; 880  : #endif
; 881  : }

  0020e	83 c4 08	 add	 esp, 8
  00211	3b ec		 cmp	 ebp, esp
  00213	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00218	8b e5		 mov	 esp, ebp
  0021a	5d		 pop	 ebp
  0021b	c3		 ret	 0
__tr_stored_block ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\trees.c
;	COMDAT __tr_flush_bits
_TEXT	SEGMENT
_s$ = 8							; size = 4
__tr_flush_bits PROC					; COMDAT

; 888  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 889  :     bi_flush(s);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 _bi_flush
  00016	83 c4 04	 add	 esp, 4

; 890  : }

  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
__tr_flush_bits ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\trees.c
;	COMDAT __tr_flush_block
_TEXT	SEGMENT
_val$1 = -28						; size = 4
_len$2 = -24						; size = 4
_val$3 = -20						; size = 4
_len$4 = -16						; size = 4
_max_blindex$ = -12					; size = 4
_static_lenb$ = -8					; size = 4
_opt_lenb$ = -4						; size = 4
_s$ = 8							; size = 4
_buf$ = 12						; size = 4
_stored_len$ = 16					; size = 4
_last$ = 20						; size = 4
__tr_flush_block PROC					; COMDAT

; 916  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 917  :     ulg opt_lenb, static_lenb; /* opt_len and static_len in bytes */
; 918  :     int max_blindex = 0;  /* index of last bit length code of non zero freq */

  0002a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _max_blindex$[ebp], 0

; 919  : 
; 920  :     /* Build the Huffman trees unless a stored block is forced */
; 921  :     if (s->level > 0) {

  00031	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00034	83 b8 84 00 00
	00 00		 cmp	 DWORD PTR [eax+132], 0
  0003b	0f 8e 8d 00 00
	00		 jle	 $LN2@tr_flush_b

; 922  : 
; 923  :         /* Check if the file is binary or text */
; 924  :         if (s->strm->data_type == Z_UNKNOWN)

  00041	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00044	8b 11		 mov	 edx, DWORD PTR [ecx]
  00046	83 7a 2c 02	 cmp	 DWORD PTR [edx+44], 2
  0004a	75 14		 jne	 SHORT $LN4@tr_flush_b

; 925  :             s->strm->data_type = detect_data_type(s);

  0004c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 _detect_data_type
  00055	83 c4 04	 add	 esp, 4
  00058	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0005b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005d	89 42 2c	 mov	 DWORD PTR [edx+44], eax
$LN4@tr_flush_b:

; 926  : 
; 927  :         /* Construct the literal and distance trees */
; 928  :         build_tree(s, (tree_desc *)(&(s->l_desc)));

  00060	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00063	05 18 0b 00 00	 add	 eax, 2840		; 00000b18H
  00068	50		 push	 eax
  00069	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0006c	51		 push	 ecx
  0006d	e8 00 00 00 00	 call	 _build_tree
  00072	83 c4 08	 add	 esp, 8

; 929  :         Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
; 930  :                 s->static_len));
; 931  : 
; 932  :         build_tree(s, (tree_desc *)(&(s->d_desc)));

  00075	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00078	81 c2 24 0b 00
	00		 add	 edx, 2852		; 00000b24H
  0007e	52		 push	 edx
  0007f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 _build_tree
  00088	83 c4 08	 add	 esp, 8

; 933  :         Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
; 934  :                 s->static_len));
; 935  :         /* At this point, opt_len and static_len are the total bit lengths of
; 936  :          * the compressed block data, excluding the tree representations.
; 937  :          */
; 938  : 
; 939  :         /* Build the bit length tree for the above two trees, and get the index
; 940  :          * in bl_order of the last bit length code to send.
; 941  :          */
; 942  :         max_blindex = build_bl_tree(s);

  0008b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0008e	51		 push	 ecx
  0008f	e8 00 00 00 00	 call	 _build_bl_tree
  00094	83 c4 04	 add	 esp, 4
  00097	89 45 f4	 mov	 DWORD PTR _max_blindex$[ebp], eax

; 943  : 
; 944  :         /* Determine the best encoding. Compute the block lengths in bytes. */
; 945  :         opt_lenb = (s->opt_len+3+7)>>3;

  0009a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0009d	8b 82 a8 16 00
	00		 mov	 eax, DWORD PTR [edx+5800]
  000a3	83 c0 0a	 add	 eax, 10			; 0000000aH
  000a6	c1 e8 03	 shr	 eax, 3
  000a9	89 45 fc	 mov	 DWORD PTR _opt_lenb$[ebp], eax

; 946  :         static_lenb = (s->static_len+3+7)>>3;

  000ac	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000af	8b 91 ac 16 00
	00		 mov	 edx, DWORD PTR [ecx+5804]
  000b5	83 c2 0a	 add	 edx, 10			; 0000000aH
  000b8	c1 ea 03	 shr	 edx, 3
  000bb	89 55 f8	 mov	 DWORD PTR _static_lenb$[ebp], edx

; 947  : 
; 948  :         Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
; 949  :                 opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
; 950  :                 s->last_lit));
; 951  : 
; 952  :         if (static_lenb <= opt_lenb) opt_lenb = static_lenb;

  000be	8b 45 f8	 mov	 eax, DWORD PTR _static_lenb$[ebp]
  000c1	3b 45 fc	 cmp	 eax, DWORD PTR _opt_lenb$[ebp]
  000c4	77 06		 ja	 SHORT $LN5@tr_flush_b
  000c6	8b 4d f8	 mov	 ecx, DWORD PTR _static_lenb$[ebp]
  000c9	89 4d fc	 mov	 DWORD PTR _opt_lenb$[ebp], ecx
$LN5@tr_flush_b:

; 953  : 
; 954  :     } else {

  000cc	eb 0f		 jmp	 SHORT $LN3@tr_flush_b
$LN2@tr_flush_b:

; 955  :         Assert(buf != (char*)0, "lost buf");
; 956  :         opt_lenb = static_lenb = stored_len + 5; /* force a stored block */

  000ce	8b 55 10	 mov	 edx, DWORD PTR _stored_len$[ebp]
  000d1	83 c2 05	 add	 edx, 5
  000d4	89 55 f8	 mov	 DWORD PTR _static_lenb$[ebp], edx
  000d7	8b 45 f8	 mov	 eax, DWORD PTR _static_lenb$[ebp]
  000da	89 45 fc	 mov	 DWORD PTR _opt_lenb$[ebp], eax
$LN3@tr_flush_b:

; 957  :     }
; 958  : 
; 959  : #ifdef FORCE_STORED
; 960  :     if (buf != (char*)0) { /* force stored block */
; 961  : #else
; 962  :     if (stored_len+4 <= opt_lenb && buf != (char*)0) {

  000dd	8b 4d 10	 mov	 ecx, DWORD PTR _stored_len$[ebp]
  000e0	83 c1 04	 add	 ecx, 4
  000e3	3b 4d fc	 cmp	 ecx, DWORD PTR _opt_lenb$[ebp]
  000e6	77 26		 ja	 SHORT $LN6@tr_flush_b
  000e8	83 7d 0c 00	 cmp	 DWORD PTR _buf$[ebp], 0
  000ec	74 20		 je	 SHORT $LN6@tr_flush_b

; 963  :                        /* 4: two words for the lengths */
; 964  : #endif
; 965  :         /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
; 966  :          * Otherwise we can't have processed more than WSIZE input bytes since
; 967  :          * the last block flush, because compression would have been
; 968  :          * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
; 969  :          * transform a block into a stored block.
; 970  :          */
; 971  :         _tr_stored_block(s, buf, stored_len, last);

  000ee	0f ae e8	 lfence
  000f1	8b 55 14	 mov	 edx, DWORD PTR _last$[ebp]
  000f4	52		 push	 edx
  000f5	8b 45 10	 mov	 eax, DWORD PTR _stored_len$[ebp]
  000f8	50		 push	 eax
  000f9	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  000fc	51		 push	 ecx
  000fd	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00100	52		 push	 edx
  00101	e8 00 00 00 00	 call	 __tr_stored_block
  00106	83 c4 10	 add	 esp, 16			; 00000010H
  00109	e9 ba 02 00 00	 jmp	 $LN7@tr_flush_b
$LN6@tr_flush_b:

; 972  : 
; 973  : #ifdef FORCE_STATIC
; 974  :     } else if (static_lenb >= 0) { /* force static trees */
; 975  : #else
; 976  :     } else if (s->strategy == Z_FIXED || static_lenb == opt_lenb) {

  0010e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00111	83 b8 88 00 00
	00 04		 cmp	 DWORD PTR [eax+136], 4
  00118	74 0c		 je	 SHORT $LN10@tr_flush_b
  0011a	8b 4d f8	 mov	 ecx, DWORD PTR _static_lenb$[ebp]
  0011d	3b 4d fc	 cmp	 ecx, DWORD PTR _opt_lenb$[ebp]
  00120	0f 85 37 01 00
	00		 jne	 $LN8@tr_flush_b
$LN10@tr_flush_b:

; 977  : #endif
; 978  :         send_bits(s, (STATIC_TREES<<1)+last, 3);

  00126	c7 45 f0 03 00
	00 00		 mov	 DWORD PTR _len$4[ebp], 3
  0012d	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00132	2b 55 f0	 sub	 edx, DWORD PTR _len$4[ebp]
  00135	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00138	39 90 bc 16 00
	00		 cmp	 DWORD PTR [eax+5820], edx
  0013e	0f 8e bf 00 00
	00		 jle	 $LN11@tr_flush_b
  00144	8b 4d 14	 mov	 ecx, DWORD PTR _last$[ebp]
  00147	83 c1 02	 add	 ecx, 2
  0014a	89 4d ec	 mov	 DWORD PTR _val$3[ebp], ecx
  0014d	0f b7 55 ec	 movzx	 edx, WORD PTR _val$3[ebp]
  00151	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00154	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0015a	d3 e2		 shl	 edx, cl
  0015c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0015f	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  00166	0b c2		 or	 eax, edx
  00168	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0016b	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00172	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00175	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  0017c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00181	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00184	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00187	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0018a	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0018d	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  00190	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00193	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00196	83 c0 01	 add	 eax, 1
  00199	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0019c	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0019f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001a2	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  001a9	c1 f8 08	 sar	 eax, 8
  001ac	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001af	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  001b2	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001b5	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  001b8	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  001bb	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001be	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  001c1	83 c0 01	 add	 eax, 1
  001c4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001c7	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  001ca	0f b7 55 ec	 movzx	 edx, WORD PTR _val$3[ebp]
  001ce	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001d1	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  001d6	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  001dc	d3 fa		 sar	 edx, cl
  001de	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001e1	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  001e8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001eb	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  001f1	8b 4d f0	 mov	 ecx, DWORD PTR _len$4[ebp]
  001f4	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  001f8	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001fb	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  00201	eb 3f		 jmp	 SHORT $LN12@tr_flush_b
$LN11@tr_flush_b:
  00203	8b 4d 14	 mov	 ecx, DWORD PTR _last$[ebp]
  00206	83 c1 02	 add	 ecx, 2
  00209	0f b7 d1	 movzx	 edx, cx
  0020c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0020f	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00215	d3 e2		 shl	 edx, cl
  00217	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0021a	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  00221	0b c2		 or	 eax, edx
  00223	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00226	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  0022d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00230	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00236	03 45 f0	 add	 eax, DWORD PTR _len$4[ebp]
  00239	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0023c	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN12@tr_flush_b:

; 979  :         compress_block(s, (const ct_data *)static_ltree,

  00242	68 00 00 00 00	 push	 OFFSET _static_dtree
  00247	68 00 00 00 00	 push	 OFFSET _static_ltree
  0024c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0024f	52		 push	 edx
  00250	e8 00 00 00 00	 call	 _compress_block
  00255	83 c4 0c	 add	 esp, 12			; 0000000cH

; 980  :                        (const ct_data *)static_dtree);
; 981  : #ifdef ZLIB_DEBUG
; 982  :         s->compressed_len += 3 + s->static_len;
; 983  : #endif
; 984  :     } else {

  00258	e9 6b 01 00 00	 jmp	 $LN7@tr_flush_b
$LN8@tr_flush_b:

; 985  :         send_bits(s, (DYN_TREES<<1)+last, 3);

  0025d	c7 45 e8 03 00
	00 00		 mov	 DWORD PTR _len$2[ebp], 3
  00264	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00269	2b 45 e8	 sub	 eax, DWORD PTR _len$2[ebp]
  0026c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0026f	39 81 bc 16 00
	00		 cmp	 DWORD PTR [ecx+5820], eax
  00275	0f 8e c2 00 00
	00		 jle	 $LN13@tr_flush_b
  0027b	8b 55 14	 mov	 edx, DWORD PTR _last$[ebp]
  0027e	83 c2 04	 add	 edx, 4
  00281	89 55 e4	 mov	 DWORD PTR _val$1[ebp], edx
  00284	0f b7 45 e4	 movzx	 eax, WORD PTR _val$1[ebp]
  00288	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0028b	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  00291	d3 e0		 shl	 eax, cl
  00293	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00296	0f b7 8a b8 16
	00 00		 movzx	 ecx, WORD PTR [edx+5816]
  0029d	0b c8		 or	 ecx, eax
  0029f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002a2	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  002a9	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002ac	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  002b3	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  002b9	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002bc	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  002bf	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002c2	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  002c5	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  002c8	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002cb	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  002ce	83 c1 01	 add	 ecx, 1
  002d1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002d4	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  002d7	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002da	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  002e1	c1 f9 08	 sar	 ecx, 8
  002e4	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002e7	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  002ea	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002ed	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  002f0	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  002f3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002f6	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  002f9	83 c1 01	 add	 ecx, 1
  002fc	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002ff	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  00302	0f b7 45 e4	 movzx	 eax, WORD PTR _val$1[ebp]
  00306	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00309	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0030e	2b 91 bc 16 00
	00		 sub	 edx, DWORD PTR [ecx+5820]
  00314	8b ca		 mov	 ecx, edx
  00316	d3 f8		 sar	 eax, cl
  00318	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0031b	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00322	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00325	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0032b	8b 4d e8	 mov	 ecx, DWORD PTR _len$2[ebp]
  0032e	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00332	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00335	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  0033b	eb 3f		 jmp	 SHORT $LN14@tr_flush_b
$LN13@tr_flush_b:
  0033d	8b 4d 14	 mov	 ecx, DWORD PTR _last$[ebp]
  00340	83 c1 04	 add	 ecx, 4
  00343	0f b7 d1	 movzx	 edx, cx
  00346	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00349	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0034f	d3 e2		 shl	 edx, cl
  00351	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00354	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  0035b	0b c2		 or	 eax, edx
  0035d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00360	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00367	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0036a	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00370	03 45 e8	 add	 eax, DWORD PTR _len$2[ebp]
  00373	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00376	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN14@tr_flush_b:

; 986  :         send_all_trees(s, s->l_desc.max_code+1, s->d_desc.max_code+1,

  0037c	8b 55 f4	 mov	 edx, DWORD PTR _max_blindex$[ebp]
  0037f	83 c2 01	 add	 edx, 1
  00382	52		 push	 edx
  00383	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00386	8b 88 28 0b 00
	00		 mov	 ecx, DWORD PTR [eax+2856]
  0038c	83 c1 01	 add	 ecx, 1
  0038f	51		 push	 ecx
  00390	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00393	8b 82 1c 0b 00
	00		 mov	 eax, DWORD PTR [edx+2844]
  00399	83 c0 01	 add	 eax, 1
  0039c	50		 push	 eax
  0039d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003a0	51		 push	 ecx
  003a1	e8 00 00 00 00	 call	 _send_all_trees
  003a6	83 c4 10	 add	 esp, 16			; 00000010H

; 987  :                        max_blindex+1);
; 988  :         compress_block(s, (const ct_data *)s->dyn_ltree,

  003a9	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003ac	81 c2 88 09 00
	00		 add	 edx, 2440		; 00000988H
  003b2	52		 push	 edx
  003b3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003b6	05 94 00 00 00	 add	 eax, 148		; 00000094H
  003bb	50		 push	 eax
  003bc	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003bf	51		 push	 ecx
  003c0	e8 00 00 00 00	 call	 _compress_block
  003c5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@tr_flush_b:

; 989  :                        (const ct_data *)s->dyn_dtree);
; 990  : #ifdef ZLIB_DEBUG
; 991  :         s->compressed_len += 3 + s->opt_len;
; 992  : #endif
; 993  :     }
; 994  :     Assert (s->compressed_len == s->bits_sent, "bad compressed size");
; 995  :     /* The above check is made mod 2^32, for files larger than 512 MB
; 996  :      * and uLong implemented on 32 bits.
; 997  :      */
; 998  :     init_block(s);

  003c8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003cb	52		 push	 edx
  003cc	e8 00 00 00 00	 call	 _init_block
  003d1	83 c4 04	 add	 esp, 4

; 999  : 
; 1000 :     if (last) {

  003d4	83 7d 14 00	 cmp	 DWORD PTR _last$[ebp], 0
  003d8	74 0c		 je	 SHORT $LN1@tr_flush_b

; 1001 :         bi_windup(s);

  003da	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003dd	50		 push	 eax
  003de	e8 00 00 00 00	 call	 _bi_windup
  003e3	83 c4 04	 add	 esp, 4
$LN1@tr_flush_b:

; 1002 : #ifdef ZLIB_DEBUG
; 1003 :         s->compressed_len += 7;  /* align on byte boundary */
; 1004 : #endif
; 1005 :     }
; 1006 :     Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
; 1007 :            s->compressed_len-7*last));
; 1008 : }

  003e6	83 c4 1c	 add	 esp, 28			; 0000001cH
  003e9	3b ec		 cmp	 ebp, esp
  003eb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003f0	8b e5		 mov	 esp, ebp
  003f2	5d		 pop	 ebp
  003f3	c3		 ret	 0
__tr_flush_block ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\trees.c
;	COMDAT __tr_init
_TEXT	SEGMENT
_s$ = 8							; size = 4
__tr_init PROC						; COMDAT

; 381  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 382  :     tr_static_init();

  0000d	e8 00 00 00 00	 call	 _tr_static_init

; 383  : 
; 384  :     s->l_desc.dyn_tree = s->dyn_ltree;

  00012	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00015	05 94 00 00 00	 add	 eax, 148		; 00000094H
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0001d	89 81 18 0b 00
	00		 mov	 DWORD PTR [ecx+2840], eax

; 385  :     s->l_desc.stat_desc = &static_l_desc;

  00023	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00026	c7 82 20 0b 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+2848], OFFSET _static_l_desc

; 386  : 
; 387  :     s->d_desc.dyn_tree = s->dyn_dtree;

  00030	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00033	05 88 09 00 00	 add	 eax, 2440		; 00000988H
  00038	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0003b	89 81 24 0b 00
	00		 mov	 DWORD PTR [ecx+2852], eax

; 388  :     s->d_desc.stat_desc = &static_d_desc;

  00041	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00044	c7 82 2c 0b 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+2860], OFFSET _static_d_desc

; 389  : 
; 390  :     s->bl_desc.dyn_tree = s->bl_tree;

  0004e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00051	05 7c 0a 00 00	 add	 eax, 2684		; 00000a7cH
  00056	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00059	89 81 30 0b 00
	00		 mov	 DWORD PTR [ecx+2864], eax

; 391  :     s->bl_desc.stat_desc = &static_bl_desc;

  0005f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00062	c7 82 38 0b 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+2872], OFFSET _static_bl_desc

; 392  : 
; 393  :     s->bi_buf = 0;

  0006c	33 c0		 xor	 eax, eax
  0006e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00071	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax

; 394  :     s->bi_valid = 0;

  00078	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0007b	c7 82 bc 16 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+5820], 0

; 395  : #ifdef ZLIB_DEBUG
; 396  :     s->compressed_len = 0L;
; 397  :     s->bits_sent = 0L;
; 398  : #endif
; 399  : 
; 400  :     /* Initialize the first block of the first file: */
; 401  :     init_block(s);

  00085	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 _init_block
  0008e	83 c4 04	 add	 esp, 4

; 402  : }

  00091	3b ec		 cmp	 ebp, esp
  00093	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
__tr_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\trees.c
;	COMDAT __tr_align
_TEXT	SEGMENT
_val$1 = -16						; size = 4
_len$2 = -12						; size = 4
_val$3 = -8						; size = 4
_len$4 = -4						; size = 4
_s$ = 8							; size = 4
__tr_align PROC						; COMDAT

; 898  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 899  :     send_bits(s, STATIC_TREES<<1, 3);

  00021	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _len$4[ebp], 3
  00028	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0002d	2b 45 fc	 sub	 eax, DWORD PTR _len$4[ebp]
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00033	39 81 bc 16 00
	00		 cmp	 DWORD PTR [ecx+5820], eax
  00039	0f 8e bd 00 00
	00		 jle	 $LN2@tr_align
  0003f	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _val$3[ebp], 2
  00046	0f b7 55 f8	 movzx	 edx, WORD PTR _val$3[ebp]
  0004a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0004d	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00053	d3 e2		 shl	 edx, cl
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00058	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  0005f	0b c2		 or	 eax, edx
  00061	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00064	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  0006b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0006e	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  00075	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0007a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0007d	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00080	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00083	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00086	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  00089	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0008c	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0008f	83 c0 01	 add	 eax, 1
  00092	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00095	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00098	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0009b	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  000a2	c1 f8 08	 sar	 eax, 8
  000a5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000a8	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000ab	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000ae	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  000b1	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  000b4	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000b7	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000ba	83 c0 01	 add	 eax, 1
  000bd	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000c0	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  000c3	0f b7 55 f8	 movzx	 edx, WORD PTR _val$3[ebp]
  000c7	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000ca	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000cf	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  000d5	d3 fa		 sar	 edx, cl
  000d7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000da	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  000e1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000e4	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  000ea	8b 4d fc	 mov	 ecx, DWORD PTR _len$4[ebp]
  000ed	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  000f1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000f4	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  000fa	eb 3b		 jmp	 SHORT $LN3@tr_align
$LN2@tr_align:
  000fc	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000ff	ba 02 00 00 00	 mov	 edx, 2
  00104	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  0010a	d3 e2		 shl	 edx, cl
  0010c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0010f	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  00116	0b ca		 or	 ecx, edx
  00118	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0011b	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  00122	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00125	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0012b	03 4d fc	 add	 ecx, DWORD PTR _len$4[ebp]
  0012e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00131	89 8a bc 16 00
	00		 mov	 DWORD PTR [edx+5820], ecx
$LN3@tr_align:

; 900  :     send_code(s, END_BLOCK, static_ltree);

  00137	b8 04 00 00 00	 mov	 eax, 4
  0013c	c1 e0 08	 shl	 eax, 8
  0013f	0f b7 88 02 00
	00 00		 movzx	 ecx, WORD PTR _static_ltree[eax+2]
  00146	89 4d f4	 mov	 DWORD PTR _len$2[ebp], ecx
  00149	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0014e	2b 55 f4	 sub	 edx, DWORD PTR _len$2[ebp]
  00151	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00154	39 90 bc 16 00
	00		 cmp	 DWORD PTR [eax+5820], edx
  0015a	0f 8e cb 00 00
	00		 jle	 $LN4@tr_align
  00160	b9 04 00 00 00	 mov	 ecx, 4
  00165	c1 e1 08	 shl	 ecx, 8
  00168	0f b7 91 00 00
	00 00		 movzx	 edx, WORD PTR _static_ltree[ecx]
  0016f	89 55 f0	 mov	 DWORD PTR _val$1[ebp], edx
  00172	0f b7 45 f0	 movzx	 eax, WORD PTR _val$1[ebp]
  00176	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00179	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  0017f	d3 e0		 shl	 eax, cl
  00181	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00184	0f b7 8a b8 16
	00 00		 movzx	 ecx, WORD PTR [edx+5816]
  0018b	0b c8		 or	 ecx, eax
  0018d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00190	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  00197	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0019a	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  001a1	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  001a7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001aa	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  001ad	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001b0	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  001b3	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  001b6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001b9	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001bc	83 c1 01	 add	 ecx, 1
  001bf	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001c2	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  001c5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001c8	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  001cf	c1 f9 08	 sar	 ecx, 8
  001d2	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001d5	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  001d8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001db	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  001de	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  001e1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001e4	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001e7	83 c1 01	 add	 ecx, 1
  001ea	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001ed	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  001f0	0f b7 45 f0	 movzx	 eax, WORD PTR _val$1[ebp]
  001f4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001f7	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  001fc	2b 91 bc 16 00
	00		 sub	 edx, DWORD PTR [ecx+5820]
  00202	8b ca		 mov	 ecx, edx
  00204	d3 f8		 sar	 eax, cl
  00206	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00209	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00210	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00213	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00219	8b 4d f4	 mov	 ecx, DWORD PTR _len$2[ebp]
  0021c	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00220	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00223	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  00229	eb 45		 jmp	 SHORT $LN5@tr_align
$LN4@tr_align:
  0022b	b9 04 00 00 00	 mov	 ecx, 4
  00230	c1 e1 08	 shl	 ecx, 8
  00233	0f b7 91 00 00
	00 00		 movzx	 edx, WORD PTR _static_ltree[ecx]
  0023a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0023d	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00243	d3 e2		 shl	 edx, cl
  00245	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00248	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  0024f	0b c2		 or	 eax, edx
  00251	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00254	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  0025b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0025e	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00264	03 45 f4	 add	 eax, DWORD PTR _len$2[ebp]
  00267	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0026a	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN5@tr_align:

; 901  : #ifdef ZLIB_DEBUG
; 902  :     s->compressed_len += 10L; /* 3 for block type, 7 for EOB */
; 903  : #endif
; 904  :     bi_flush(s);

  00270	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00273	52		 push	 edx
  00274	e8 00 00 00 00	 call	 _bi_flush
  00279	83 c4 04	 add	 esp, 4

; 905  : }

  0027c	83 c4 10	 add	 esp, 16			; 00000010H
  0027f	3b ec		 cmp	 ebp, esp
  00281	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00286	8b e5		 mov	 esp, ebp
  00288	5d		 pop	 ebp
  00289	c3		 ret	 0
__tr_align ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\trees.c
;	COMDAT _tr_static_init
_TEXT	SEGMENT
_tr_static_init PROC					; COMDAT

; 233  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 234  : #if defined(GEN_TREES_H) || !defined(STDC)
; 235  :     static int static_init_done = 0;
; 236  :     int n;        /* iterates over tree elements */
; 237  :     int bits;     /* bit counter */
; 238  :     int length;   /* length value */
; 239  :     int code;     /* code value */
; 240  :     int dist;     /* distance index */
; 241  :     ush bl_count[MAX_BITS+1];
; 242  :     /* number of codes at each bit length for an optimal tree */
; 243  : 
; 244  :     if (static_init_done) return;
; 245  : 
; 246  :     /* For some embedded targets, global variables are not initialized: */
; 247  : #ifdef NO_INIT_GLOBAL_POINTERS
; 248  :     static_l_desc.static_tree = static_ltree;
; 249  :     static_l_desc.extra_bits = extra_lbits;
; 250  :     static_d_desc.static_tree = static_dtree;
; 251  :     static_d_desc.extra_bits = extra_dbits;
; 252  :     static_bl_desc.extra_bits = extra_blbits;
; 253  : #endif
; 254  : 
; 255  :     /* Initialize the mapping length (0..255) -> length code (0..28) */
; 256  :     length = 0;
; 257  :     for (code = 0; code < LENGTH_CODES-1; code++) {
; 258  :         base_length[code] = length;
; 259  :         for (n = 0; n < (1<<extra_lbits[code]); n++) {
; 260  :             _length_code[length++] = (uch)code;
; 261  :         }
; 262  :     }
; 263  :     Assert (length == 256, "tr_static_init: length != 256");
; 264  :     /* Note that the length 255 (match length 258) can be represented
; 265  :      * in two different ways: code 284 + 5 bits or code 285, so we
; 266  :      * overwrite length_code[255] to use the best encoding:
; 267  :      */
; 268  :     _length_code[length-1] = (uch)code;
; 269  : 
; 270  :     /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
; 271  :     dist = 0;
; 272  :     for (code = 0 ; code < 16; code++) {
; 273  :         base_dist[code] = dist;
; 274  :         for (n = 0; n < (1<<extra_dbits[code]); n++) {
; 275  :             _dist_code[dist++] = (uch)code;
; 276  :         }
; 277  :     }
; 278  :     Assert (dist == 256, "tr_static_init: dist != 256");
; 279  :     dist >>= 7; /* from now on, all distances are divided by 128 */
; 280  :     for ( ; code < D_CODES; code++) {
; 281  :         base_dist[code] = dist << 7;
; 282  :         for (n = 0; n < (1<<(extra_dbits[code]-7)); n++) {
; 283  :             _dist_code[256 + dist++] = (uch)code;
; 284  :         }
; 285  :     }
; 286  :     Assert (dist == 256, "tr_static_init: 256+dist != 512");
; 287  : 
; 288  :     /* Construct the codes of the static literal tree */
; 289  :     for (bits = 0; bits <= MAX_BITS; bits++) bl_count[bits] = 0;
; 290  :     n = 0;
; 291  :     while (n <= 143) static_ltree[n++].Len = 8, bl_count[8]++;
; 292  :     while (n <= 255) static_ltree[n++].Len = 9, bl_count[9]++;
; 293  :     while (n <= 279) static_ltree[n++].Len = 7, bl_count[7]++;
; 294  :     while (n <= 287) static_ltree[n++].Len = 8, bl_count[8]++;
; 295  :     /* Codes 286 and 287 do not exist, but we must include them in the
; 296  :      * tree construction to get a canonical Huffman tree (longest code
; 297  :      * all ones)
; 298  :      */
; 299  :     gen_codes((ct_data *)static_ltree, L_CODES+1, bl_count);
; 300  : 
; 301  :     /* The static distance tree is trivial: */
; 302  :     for (n = 0; n < D_CODES; n++) {
; 303  :         static_dtree[n].Len = 5;
; 304  :         static_dtree[n].Code = bi_reverse((unsigned)n, 5);
; 305  :     }
; 306  :     static_init_done = 1;
; 307  : 
; 308  : #  ifdef GEN_TREES_H
; 309  :     gen_trees_header();
; 310  : #  endif
; 311  : #endif /* defined(GEN_TREES_H) || !defined(STDC) */
; 312  : }

  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
_tr_static_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\trees.c
;	COMDAT _init_block
_TEXT	SEGMENT
_n$ = -4						; size = 4
_s$ = 8							; size = 4
_init_block PROC					; COMDAT

; 409  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00010	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 410  :     int n; /* iterates over tree elements */
; 411  : 
; 412  :     /* Initialize the trees. */
; 413  :     for (n = 0; n < L_CODES;  n++) s->dyn_ltree[n].Freq = 0;

  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  0001c	eb 09		 jmp	 SHORT $LN4@init_block
$LN2@init_block:
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  00021	83 c0 01	 add	 eax, 1
  00024	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax
$LN4@init_block:
  00027	81 7d fc 1e 01
	00 00		 cmp	 DWORD PTR _n$[ebp], 286	; 0000011eH
  0002e	7d 12		 jge	 SHORT $LN3@init_block
  00030	33 c9		 xor	 ecx, ecx
  00032	8b 55 fc	 mov	 edx, DWORD PTR _n$[ebp]
  00035	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00038	66 89 8c 90 94
	00 00 00	 mov	 WORD PTR [eax+edx*4+148], cx
  00040	eb dc		 jmp	 SHORT $LN2@init_block
$LN3@init_block:

; 414  :     for (n = 0; n < D_CODES;  n++) s->dyn_dtree[n].Freq = 0;

  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  00049	eb 09		 jmp	 SHORT $LN7@init_block
$LN5@init_block:
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  0004e	83 c1 01	 add	 ecx, 1
  00051	89 4d fc	 mov	 DWORD PTR _n$[ebp], ecx
$LN7@init_block:
  00054	83 7d fc 1e	 cmp	 DWORD PTR _n$[ebp], 30	; 0000001eH
  00058	7d 12		 jge	 SHORT $LN6@init_block
  0005a	33 d2		 xor	 edx, edx
  0005c	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  0005f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00062	66 89 94 81 88
	09 00 00	 mov	 WORD PTR [ecx+eax*4+2440], dx
  0006a	eb df		 jmp	 SHORT $LN5@init_block
$LN6@init_block:

; 415  :     for (n = 0; n < BL_CODES; n++) s->bl_tree[n].Freq = 0;

  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  00073	eb 09		 jmp	 SHORT $LN10@init_block
$LN8@init_block:
  00075	8b 55 fc	 mov	 edx, DWORD PTR _n$[ebp]
  00078	83 c2 01	 add	 edx, 1
  0007b	89 55 fc	 mov	 DWORD PTR _n$[ebp], edx
$LN10@init_block:
  0007e	83 7d fc 13	 cmp	 DWORD PTR _n$[ebp], 19	; 00000013H
  00082	7d 12		 jge	 SHORT $LN9@init_block
  00084	33 c0		 xor	 eax, eax
  00086	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  00089	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0008c	66 89 84 8a 7c
	0a 00 00	 mov	 WORD PTR [edx+ecx*4+2684], ax
  00094	eb df		 jmp	 SHORT $LN8@init_block
$LN9@init_block:

; 416  : 
; 417  :     s->dyn_ltree[END_BLOCK].Freq = 1;

  00096	b8 04 00 00 00	 mov	 eax, 4
  0009b	c1 e0 08	 shl	 eax, 8
  0009e	b9 01 00 00 00	 mov	 ecx, 1
  000a3	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000a6	66 89 8c 02 94
	00 00 00	 mov	 WORD PTR [edx+eax+148], cx

; 418  :     s->opt_len = s->static_len = 0L;

  000ae	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000b1	c7 80 ac 16 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+5804], 0
  000bb	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000be	c7 81 a8 16 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+5800], 0

; 419  :     s->last_lit = s->matches = 0;

  000c8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000cb	c7 82 b0 16 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+5808], 0
  000d5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000d8	c7 80 a0 16 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+5792], 0

; 420  : }

  000e2	83 c4 04	 add	 esp, 4
  000e5	3b ec		 cmp	 ebp, esp
  000e7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ec	8b e5		 mov	 esp, ebp
  000ee	5d		 pop	 ebp
  000ef	c3		 ret	 0
_init_block ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\trees.c
;	COMDAT _pqdownheap
_TEXT	SEGMENT
_j$ = -8						; size = 4
_v$ = -4						; size = 4
_s$ = 8							; size = 4
_tree$ = 12						; size = 4
_k$ = 16						; size = 4
_pqdownheap PROC					; COMDAT

; 455  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 456  :     int v = s->heap[k];

  0001f	8b 45 10	 mov	 eax, DWORD PTR _k$[ebp]
  00022	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00025	8b 94 81 5c 0b
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+2908]
  0002c	89 55 fc	 mov	 DWORD PTR _v$[ebp], edx

; 457  :     int j = k << 1;  /* left son of k */

  0002f	8b 45 10	 mov	 eax, DWORD PTR _k$[ebp]
  00032	d1 e0		 shl	 eax, 1
  00034	89 45 f8	 mov	 DWORD PTR _j$[ebp], eax
$LN2@pqdownheap:

; 458  :     while (j <= s->heap_len) {

  00037	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0003a	8b 55 f8	 mov	 edx, DWORD PTR _j$[ebp]
  0003d	3b 91 50 14 00
	00		 cmp	 edx, DWORD PTR [ecx+5200]
  00043	0f 8f 55 01 00
	00		 jg	 $LN3@pqdownheap

; 459  :         /* Set j to the smallest of the two sons: */
; 460  :         if (j < s->heap_len &&

  00049	0f ae e8	 lfence
  0004c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0004f	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00052	3b 88 50 14 00
	00		 cmp	 ecx, DWORD PTR [eax+5200]
  00058	0f 8d 9e 00 00
	00		 jge	 $LN4@pqdownheap
  0005e	0f ae e8	 lfence
  00061	8b 55 f8	 mov	 edx, DWORD PTR _j$[ebp]
  00064	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00067	8b 8c 90 60 0b
	00 00		 mov	 ecx, DWORD PTR [eax+edx*4+2912]
  0006e	8b 55 0c	 mov	 edx, DWORD PTR _tree$[ebp]
  00071	0f b7 04 8a	 movzx	 eax, WORD PTR [edx+ecx*4]
  00075	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00078	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0007b	8b 8c 8a 5c 0b
	00 00		 mov	 ecx, DWORD PTR [edx+ecx*4+2908]
  00082	8b 55 0c	 mov	 edx, DWORD PTR _tree$[ebp]
  00085	0f b7 0c 8a	 movzx	 ecx, WORD PTR [edx+ecx*4]
  00089	3b c1		 cmp	 eax, ecx
  0008b	7c 66		 jl	 SHORT $LN5@pqdownheap
  0008d	0f ae e8	 lfence
  00090	8b 55 f8	 mov	 edx, DWORD PTR _j$[ebp]
  00093	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00096	8b 8c 90 60 0b
	00 00		 mov	 ecx, DWORD PTR [eax+edx*4+2912]
  0009d	8b 55 0c	 mov	 edx, DWORD PTR _tree$[ebp]
  000a0	0f b7 04 8a	 movzx	 eax, WORD PTR [edx+ecx*4]
  000a4	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  000a7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000aa	8b 8c 8a 5c 0b
	00 00		 mov	 ecx, DWORD PTR [edx+ecx*4+2908]
  000b1	8b 55 0c	 mov	 edx, DWORD PTR _tree$[ebp]
  000b4	0f b7 0c 8a	 movzx	 ecx, WORD PTR [edx+ecx*4]
  000b8	3b c1		 cmp	 eax, ecx
  000ba	75 40		 jne	 SHORT $LN4@pqdownheap
  000bc	0f ae e8	 lfence
  000bf	8b 55 f8	 mov	 edx, DWORD PTR _j$[ebp]
  000c2	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000c5	8b 8c 90 60 0b
	00 00		 mov	 ecx, DWORD PTR [eax+edx*4+2912]
  000cc	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000cf	0f b6 84 0a 58
	14 00 00	 movzx	 eax, BYTE PTR [edx+ecx+5208]
  000d7	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  000da	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000dd	8b 8c 8a 5c 0b
	00 00		 mov	 ecx, DWORD PTR [edx+ecx*4+2908]
  000e4	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000e7	0f b6 8c 0a 58
	14 00 00	 movzx	 ecx, BYTE PTR [edx+ecx+5208]
  000ef	3b c1		 cmp	 eax, ecx
  000f1	7f 09		 jg	 SHORT $LN4@pqdownheap
$LN5@pqdownheap:

; 461  :             smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
; 462  :             j++;

  000f3	8b 55 f8	 mov	 edx, DWORD PTR _j$[ebp]
  000f6	83 c2 01	 add	 edx, 1
  000f9	89 55 f8	 mov	 DWORD PTR _j$[ebp], edx
$LN4@pqdownheap:

; 463  :         }
; 464  :         /* Exit if v is smaller than both sons */
; 465  :         if (smaller(tree, v, s->heap[j], s->depth)) break;

  000fc	8b 45 fc	 mov	 eax, DWORD PTR _v$[ebp]
  000ff	8b 4d 0c	 mov	 ecx, DWORD PTR _tree$[ebp]
  00102	0f b7 14 81	 movzx	 edx, WORD PTR [ecx+eax*4]
  00106	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  00109	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0010c	8b 84 81 5c 0b
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+2908]
  00113	8b 4d 0c	 mov	 ecx, DWORD PTR _tree$[ebp]
  00116	0f b7 04 81	 movzx	 eax, WORD PTR [ecx+eax*4]
  0011a	3b d0		 cmp	 edx, eax
  0011c	7c 51		 jl	 SHORT $LN7@pqdownheap
  0011e	0f ae e8	 lfence
  00121	8b 4d fc	 mov	 ecx, DWORD PTR _v$[ebp]
  00124	8b 55 0c	 mov	 edx, DWORD PTR _tree$[ebp]
  00127	0f b7 04 8a	 movzx	 eax, WORD PTR [edx+ecx*4]
  0012b	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0012e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00131	8b 8c 8a 5c 0b
	00 00		 mov	 ecx, DWORD PTR [edx+ecx*4+2908]
  00138	8b 55 0c	 mov	 edx, DWORD PTR _tree$[ebp]
  0013b	0f b7 0c 8a	 movzx	 ecx, WORD PTR [edx+ecx*4]
  0013f	3b c1		 cmp	 eax, ecx
  00141	75 2e		 jne	 SHORT $LN6@pqdownheap
  00143	0f ae e8	 lfence
  00146	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00149	03 55 fc	 add	 edx, DWORD PTR _v$[ebp]
  0014c	0f b6 82 58 14
	00 00		 movzx	 eax, BYTE PTR [edx+5208]
  00153	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00156	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00159	8b 8c 8a 5c 0b
	00 00		 mov	 ecx, DWORD PTR [edx+ecx*4+2908]
  00160	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00163	0f b6 8c 0a 58
	14 00 00	 movzx	 ecx, BYTE PTR [edx+ecx+5208]
  0016b	3b c1		 cmp	 eax, ecx
  0016d	7f 02		 jg	 SHORT $LN6@pqdownheap
$LN7@pqdownheap:
  0016f	eb 2d		 jmp	 SHORT $LN3@pqdownheap
$LN6@pqdownheap:

; 466  : 
; 467  :         /* Exchange v with the smallest son */
; 468  :         s->heap[k] = s->heap[j];  k = j;

  00171	8b 55 10	 mov	 edx, DWORD PTR _k$[ebp]
  00174	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00177	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0017a	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0017d	8b 8c 8e 5c 0b
	00 00		 mov	 ecx, DWORD PTR [esi+ecx*4+2908]
  00184	89 8c 90 5c 0b
	00 00		 mov	 DWORD PTR [eax+edx*4+2908], ecx
  0018b	8b 55 f8	 mov	 edx, DWORD PTR _j$[ebp]
  0018e	89 55 10	 mov	 DWORD PTR _k$[ebp], edx

; 469  : 
; 470  :         /* And continue down the tree, setting j to the left son of k */
; 471  :         j <<= 1;

  00191	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  00194	d1 e0		 shl	 eax, 1
  00196	89 45 f8	 mov	 DWORD PTR _j$[ebp], eax

; 472  :     }

  00199	e9 99 fe ff ff	 jmp	 $LN2@pqdownheap
$LN3@pqdownheap:

; 473  :     s->heap[k] = v;

  0019e	8b 4d 10	 mov	 ecx, DWORD PTR _k$[ebp]
  001a1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001a4	8b 45 fc	 mov	 eax, DWORD PTR _v$[ebp]
  001a7	89 84 8a 5c 0b
	00 00		 mov	 DWORD PTR [edx+ecx*4+2908], eax

; 474  : }

  001ae	5e		 pop	 esi
  001af	83 c4 08	 add	 esp, 8
  001b2	3b ec		 cmp	 ebp, esp
  001b4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b9	8b e5		 mov	 esp, ebp
  001bb	5d		 pop	 ebp
  001bc	c3		 ret	 0
_pqdownheap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\trees.c
;	COMDAT _gen_bitlen
_TEXT	SEGMENT
_overflow$ = -52					; size = 4
_f$ = -48						; size = 2
_xbits$ = -44						; size = 4
_bits$ = -40						; size = 4
_m$ = -36						; size = 4
_n$ = -32						; size = 4
_h$ = -28						; size = 4
_max_length$ = -24					; size = 4
_base$ = -20						; size = 4
_extra$ = -16						; size = 4
_stree$ = -12						; size = 4
_max_code$ = -8						; size = 4
_tree$ = -4						; size = 4
_s$ = 8							; size = 4
_desc$ = 12						; size = 4
_gen_bitlen PROC					; COMDAT

; 489  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	57		 push	 edi
  00007	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  0000a	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 490  :     ct_data *tree        = desc->dyn_tree;

  00020	8b 45 0c	 mov	 eax, DWORD PTR _desc$[ebp]
  00023	8b 08		 mov	 ecx, DWORD PTR [eax]
  00025	89 4d fc	 mov	 DWORD PTR _tree$[ebp], ecx

; 491  :     int max_code         = desc->max_code;

  00028	8b 55 0c	 mov	 edx, DWORD PTR _desc$[ebp]
  0002b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0002e	89 45 f8	 mov	 DWORD PTR _max_code$[ebp], eax

; 492  :     const ct_data *stree = desc->stat_desc->static_tree;

  00031	8b 4d 0c	 mov	 ecx, DWORD PTR _desc$[ebp]
  00034	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00037	8b 02		 mov	 eax, DWORD PTR [edx]
  00039	89 45 f4	 mov	 DWORD PTR _stree$[ebp], eax

; 493  :     const intf *extra    = desc->stat_desc->extra_bits;

  0003c	8b 4d 0c	 mov	 ecx, DWORD PTR _desc$[ebp]
  0003f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00042	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00045	89 45 f0	 mov	 DWORD PTR _extra$[ebp], eax

; 494  :     int base             = desc->stat_desc->extra_base;

  00048	8b 4d 0c	 mov	 ecx, DWORD PTR _desc$[ebp]
  0004b	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0004e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00051	89 45 ec	 mov	 DWORD PTR _base$[ebp], eax

; 495  :     int max_length       = desc->stat_desc->max_length;

  00054	8b 4d 0c	 mov	 ecx, DWORD PTR _desc$[ebp]
  00057	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0005a	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0005d	89 45 e8	 mov	 DWORD PTR _max_length$[ebp], eax

; 496  :     int h;              /* heap index */
; 497  :     int n, m;           /* iterate over the tree elements */
; 498  :     int bits;           /* bit length */
; 499  :     int xbits;          /* extra bits */
; 500  :     ush f;              /* frequency */
; 501  :     int overflow = 0;   /* number of elements with bit length too large */

  00060	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _overflow$[ebp], 0

; 502  : 
; 503  :     for (bits = 0; bits <= MAX_BITS; bits++) s->bl_count[bits] = 0;

  00067	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _bits$[ebp], 0
  0006e	eb 09		 jmp	 SHORT $LN4@gen_bitlen
$LN2@gen_bitlen:
  00070	8b 4d d8	 mov	 ecx, DWORD PTR _bits$[ebp]
  00073	83 c1 01	 add	 ecx, 1
  00076	89 4d d8	 mov	 DWORD PTR _bits$[ebp], ecx
$LN4@gen_bitlen:
  00079	83 7d d8 0f	 cmp	 DWORD PTR _bits$[ebp], 15 ; 0000000fH
  0007d	7f 12		 jg	 SHORT $LN3@gen_bitlen
  0007f	33 d2		 xor	 edx, edx
  00081	8b 45 d8	 mov	 eax, DWORD PTR _bits$[ebp]
  00084	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00087	66 89 94 41 3c
	0b 00 00	 mov	 WORD PTR [ecx+eax*2+2876], dx
  0008f	eb df		 jmp	 SHORT $LN2@gen_bitlen
$LN3@gen_bitlen:

; 504  : 
; 505  :     /* In a first pass, compute the optimal bit lengths (which may
; 506  :      * overflow in the case of the bit length tree).
; 507  :      */
; 508  :     tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

  00091	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00094	8b 82 54 14 00
	00		 mov	 eax, DWORD PTR [edx+5204]
  0009a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0009d	8b 94 81 5c 0b
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+2908]
  000a4	33 c0		 xor	 eax, eax
  000a6	8b 4d fc	 mov	 ecx, DWORD PTR _tree$[ebp]
  000a9	66 89 44 91 02	 mov	 WORD PTR [ecx+edx*4+2], ax

; 509  : 
; 510  :     for (h = s->heap_max+1; h < HEAP_SIZE; h++) {

  000ae	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000b1	8b 82 54 14 00
	00		 mov	 eax, DWORD PTR [edx+5204]
  000b7	83 c0 01	 add	 eax, 1
  000ba	89 45 e4	 mov	 DWORD PTR _h$[ebp], eax
  000bd	eb 09		 jmp	 SHORT $LN7@gen_bitlen
$LN5@gen_bitlen:
  000bf	8b 4d e4	 mov	 ecx, DWORD PTR _h$[ebp]
  000c2	83 c1 01	 add	 ecx, 1
  000c5	89 4d e4	 mov	 DWORD PTR _h$[ebp], ecx
$LN7@gen_bitlen:
  000c8	81 7d e4 3d 02
	00 00		 cmp	 DWORD PTR _h$[ebp], 573	; 0000023dH
  000cf	0f 8d f9 00 00
	00		 jge	 $LN6@gen_bitlen

; 511  :         n = s->heap[h];

  000d5	0f ae e8	 lfence
  000d8	8b 55 e4	 mov	 edx, DWORD PTR _h$[ebp]
  000db	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000de	8b 8c 90 5c 0b
	00 00		 mov	 ecx, DWORD PTR [eax+edx*4+2908]
  000e5	89 4d e0	 mov	 DWORD PTR _n$[ebp], ecx

; 512  :         bits = tree[tree[n].Dad].Len + 1;

  000e8	8b 55 e0	 mov	 edx, DWORD PTR _n$[ebp]
  000eb	8b 45 fc	 mov	 eax, DWORD PTR _tree$[ebp]
  000ee	0f b7 4c 90 02	 movzx	 ecx, WORD PTR [eax+edx*4+2]
  000f3	8b 55 fc	 mov	 edx, DWORD PTR _tree$[ebp]
  000f6	0f b7 44 8a 02	 movzx	 eax, WORD PTR [edx+ecx*4+2]
  000fb	83 c0 01	 add	 eax, 1
  000fe	89 45 d8	 mov	 DWORD PTR _bits$[ebp], eax

; 513  :         if (bits > max_length) bits = max_length, overflow++;

  00101	8b 4d d8	 mov	 ecx, DWORD PTR _bits$[ebp]
  00104	3b 4d e8	 cmp	 ecx, DWORD PTR _max_length$[ebp]
  00107	7e 0f		 jle	 SHORT $LN18@gen_bitlen
  00109	8b 55 e8	 mov	 edx, DWORD PTR _max_length$[ebp]
  0010c	89 55 d8	 mov	 DWORD PTR _bits$[ebp], edx
  0010f	8b 45 cc	 mov	 eax, DWORD PTR _overflow$[ebp]
  00112	83 c0 01	 add	 eax, 1
  00115	89 45 cc	 mov	 DWORD PTR _overflow$[ebp], eax
$LN18@gen_bitlen:

; 514  :         tree[n].Len = (ush)bits;

  00118	8b 4d e0	 mov	 ecx, DWORD PTR _n$[ebp]
  0011b	8b 55 fc	 mov	 edx, DWORD PTR _tree$[ebp]
  0011e	66 8b 45 d8	 mov	 ax, WORD PTR _bits$[ebp]
  00122	66 89 44 8a 02	 mov	 WORD PTR [edx+ecx*4+2], ax

; 515  :         /* We overwrite tree[n].Dad which is no longer needed */
; 516  : 
; 517  :         if (n > max_code) continue; /* not a leaf node */

  00127	8b 4d e0	 mov	 ecx, DWORD PTR _n$[ebp]
  0012a	3b 4d f8	 cmp	 ecx, DWORD PTR _max_code$[ebp]
  0012d	7e 02		 jle	 SHORT $LN19@gen_bitlen
  0012f	eb 8e		 jmp	 SHORT $LN5@gen_bitlen
$LN19@gen_bitlen:

; 518  : 
; 519  :         s->bl_count[bits]++;

  00131	8b 55 d8	 mov	 edx, DWORD PTR _bits$[ebp]
  00134	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00137	66 8b 8c 50 3c
	0b 00 00	 mov	 cx, WORD PTR [eax+edx*2+2876]
  0013f	66 83 c1 01	 add	 cx, 1
  00143	8b 55 d8	 mov	 edx, DWORD PTR _bits$[ebp]
  00146	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00149	66 89 8c 50 3c
	0b 00 00	 mov	 WORD PTR [eax+edx*2+2876], cx

; 520  :         xbits = 0;

  00151	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _xbits$[ebp], 0

; 521  :         if (n >= base) xbits = extra[n-base];

  00158	8b 4d e0	 mov	 ecx, DWORD PTR _n$[ebp]
  0015b	3b 4d ec	 cmp	 ecx, DWORD PTR _base$[ebp]
  0015e	7c 0f		 jl	 SHORT $LN20@gen_bitlen
  00160	8b 55 e0	 mov	 edx, DWORD PTR _n$[ebp]
  00163	2b 55 ec	 sub	 edx, DWORD PTR _base$[ebp]
  00166	8b 45 f0	 mov	 eax, DWORD PTR _extra$[ebp]
  00169	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  0016c	89 4d d4	 mov	 DWORD PTR _xbits$[ebp], ecx
$LN20@gen_bitlen:

; 522  :         f = tree[n].Freq;

  0016f	8b 55 e0	 mov	 edx, DWORD PTR _n$[ebp]
  00172	8b 45 fc	 mov	 eax, DWORD PTR _tree$[ebp]
  00175	66 8b 0c 90	 mov	 cx, WORD PTR [eax+edx*4]
  00179	66 89 4d d0	 mov	 WORD PTR _f$[ebp], cx

; 523  :         s->opt_len += (ulg)f * (unsigned)(bits + xbits);

  0017d	0f b7 55 d0	 movzx	 edx, WORD PTR _f$[ebp]
  00181	8b 45 d8	 mov	 eax, DWORD PTR _bits$[ebp]
  00184	03 45 d4	 add	 eax, DWORD PTR _xbits$[ebp]
  00187	0f af d0	 imul	 edx, eax
  0018a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0018d	03 91 a8 16 00
	00		 add	 edx, DWORD PTR [ecx+5800]
  00193	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00196	89 90 a8 16 00
	00		 mov	 DWORD PTR [eax+5800], edx

; 524  :         if (stree) s->static_len += (ulg)f * (unsigned)(stree[n].Len + xbits);

  0019c	83 7d f4 00	 cmp	 DWORD PTR _stree$[ebp], 0
  001a0	74 27		 je	 SHORT $LN21@gen_bitlen
  001a2	0f b7 4d d0	 movzx	 ecx, WORD PTR _f$[ebp]
  001a6	8b 55 e0	 mov	 edx, DWORD PTR _n$[ebp]
  001a9	8b 45 f4	 mov	 eax, DWORD PTR _stree$[ebp]
  001ac	0f b7 54 90 02	 movzx	 edx, WORD PTR [eax+edx*4+2]
  001b1	03 55 d4	 add	 edx, DWORD PTR _xbits$[ebp]
  001b4	0f af ca	 imul	 ecx, edx
  001b7	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001ba	03 88 ac 16 00
	00		 add	 ecx, DWORD PTR [eax+5804]
  001c0	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001c3	89 8a ac 16 00
	00		 mov	 DWORD PTR [edx+5804], ecx
$LN21@gen_bitlen:

; 525  :     }

  001c9	e9 f1 fe ff ff	 jmp	 $LN5@gen_bitlen
$LN6@gen_bitlen:

; 526  :     if (overflow == 0) return;

  001ce	83 7d cc 00	 cmp	 DWORD PTR _overflow$[ebp], 0
  001d2	75 05		 jne	 SHORT $LN10@gen_bitlen
  001d4	e9 55 01 00 00	 jmp	 $LN1@gen_bitlen
$LN10@gen_bitlen:

; 527  : 
; 528  :     Tracev((stderr,"\nbit length overflow\n"));
; 529  :     /* This happens for example on obj2 and pic of the Calgary corpus */
; 530  : 
; 531  :     /* Find the first bit length which could increase: */
; 532  :     do {
; 533  :         bits = max_length-1;

  001d9	8b 45 e8	 mov	 eax, DWORD PTR _max_length$[ebp]
  001dc	83 e8 01	 sub	 eax, 1
  001df	89 45 d8	 mov	 DWORD PTR _bits$[ebp], eax
$LN11@gen_bitlen:

; 534  :         while (s->bl_count[bits] == 0) bits--;

  001e2	8b 4d d8	 mov	 ecx, DWORD PTR _bits$[ebp]
  001e5	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001e8	0f b7 84 4a 3c
	0b 00 00	 movzx	 eax, WORD PTR [edx+ecx*2+2876]
  001f0	85 c0		 test	 eax, eax
  001f2	75 0b		 jne	 SHORT $LN12@gen_bitlen
  001f4	8b 4d d8	 mov	 ecx, DWORD PTR _bits$[ebp]
  001f7	83 e9 01	 sub	 ecx, 1
  001fa	89 4d d8	 mov	 DWORD PTR _bits$[ebp], ecx
  001fd	eb e3		 jmp	 SHORT $LN11@gen_bitlen
$LN12@gen_bitlen:

; 535  :         s->bl_count[bits]--;      /* move one leaf down the tree */

  001ff	8b 55 d8	 mov	 edx, DWORD PTR _bits$[ebp]
  00202	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00205	66 8b 8c 50 3c
	0b 00 00	 mov	 cx, WORD PTR [eax+edx*2+2876]
  0020d	66 83 e9 01	 sub	 cx, 1
  00211	8b 55 d8	 mov	 edx, DWORD PTR _bits$[ebp]
  00214	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00217	66 89 8c 50 3c
	0b 00 00	 mov	 WORD PTR [eax+edx*2+2876], cx

; 536  :         s->bl_count[bits+1] += 2; /* move one overflow item as its brother */

  0021f	8b 4d d8	 mov	 ecx, DWORD PTR _bits$[ebp]
  00222	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00225	0f b7 84 4a 3e
	0b 00 00	 movzx	 eax, WORD PTR [edx+ecx*2+2878]
  0022d	83 c0 02	 add	 eax, 2
  00230	8b 4d d8	 mov	 ecx, DWORD PTR _bits$[ebp]
  00233	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00236	66 89 84 4a 3e
	0b 00 00	 mov	 WORD PTR [edx+ecx*2+2878], ax

; 537  :         s->bl_count[max_length]--;

  0023e	8b 45 e8	 mov	 eax, DWORD PTR _max_length$[ebp]
  00241	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00244	66 8b 94 41 3c
	0b 00 00	 mov	 dx, WORD PTR [ecx+eax*2+2876]
  0024c	66 83 ea 01	 sub	 dx, 1
  00250	8b 45 e8	 mov	 eax, DWORD PTR _max_length$[ebp]
  00253	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00256	66 89 94 41 3c
	0b 00 00	 mov	 WORD PTR [ecx+eax*2+2876], dx

; 538  :         /* The brother of the overflow item also moves one step up,
; 539  :          * but this does not affect bl_count[max_length]
; 540  :          */
; 541  :         overflow -= 2;

  0025e	8b 55 cc	 mov	 edx, DWORD PTR _overflow$[ebp]
  00261	83 ea 02	 sub	 edx, 2
  00264	89 55 cc	 mov	 DWORD PTR _overflow$[ebp], edx

; 542  :     } while (overflow > 0);

  00267	83 7d cc 00	 cmp	 DWORD PTR _overflow$[ebp], 0
  0026b	0f 8f 68 ff ff
	ff		 jg	 $LN10@gen_bitlen

; 543  : 
; 544  :     /* Now recompute all bit lengths, scanning in increasing frequency.
; 545  :      * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
; 546  :      * lengths instead of fixing only the wrong ones. This idea is taken
; 547  :      * from 'ar' written by Haruhiko Okumura.)
; 548  :      */
; 549  :     for (bits = max_length; bits != 0; bits--) {

  00271	8b 45 e8	 mov	 eax, DWORD PTR _max_length$[ebp]
  00274	89 45 d8	 mov	 DWORD PTR _bits$[ebp], eax
  00277	eb 09		 jmp	 SHORT $LN15@gen_bitlen
$LN13@gen_bitlen:
  00279	8b 4d d8	 mov	 ecx, DWORD PTR _bits$[ebp]
  0027c	83 e9 01	 sub	 ecx, 1
  0027f	89 4d d8	 mov	 DWORD PTR _bits$[ebp], ecx
$LN15@gen_bitlen:
  00282	83 7d d8 00	 cmp	 DWORD PTR _bits$[ebp], 0
  00286	0f 84 a2 00 00
	00		 je	 $LN1@gen_bitlen

; 550  :         n = s->bl_count[bits];

  0028c	8b 55 d8	 mov	 edx, DWORD PTR _bits$[ebp]
  0028f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00292	0f b7 8c 50 3c
	0b 00 00	 movzx	 ecx, WORD PTR [eax+edx*2+2876]
  0029a	89 4d e0	 mov	 DWORD PTR _n$[ebp], ecx
$LN16@gen_bitlen:

; 551  :         while (n != 0) {

  0029d	83 7d e0 00	 cmp	 DWORD PTR _n$[ebp], 0
  002a1	0f 84 82 00 00
	00		 je	 $LN17@gen_bitlen

; 552  :             m = s->heap[--h];

  002a7	0f ae e8	 lfence
  002aa	8b 55 e4	 mov	 edx, DWORD PTR _h$[ebp]
  002ad	83 ea 01	 sub	 edx, 1
  002b0	89 55 e4	 mov	 DWORD PTR _h$[ebp], edx
  002b3	8b 45 e4	 mov	 eax, DWORD PTR _h$[ebp]
  002b6	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002b9	8b 94 81 5c 0b
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+2908]
  002c0	89 55 dc	 mov	 DWORD PTR _m$[ebp], edx

; 553  :             if (m > max_code) continue;

  002c3	8b 45 dc	 mov	 eax, DWORD PTR _m$[ebp]
  002c6	3b 45 f8	 cmp	 eax, DWORD PTR _max_code$[ebp]
  002c9	7e 02		 jle	 SHORT $LN23@gen_bitlen
  002cb	eb d0		 jmp	 SHORT $LN16@gen_bitlen
$LN23@gen_bitlen:

; 554  :             if ((unsigned) tree[m].Len != (unsigned) bits) {

  002cd	8b 4d dc	 mov	 ecx, DWORD PTR _m$[ebp]
  002d0	8b 55 fc	 mov	 edx, DWORD PTR _tree$[ebp]
  002d3	0f b7 44 8a 02	 movzx	 eax, WORD PTR [edx+ecx*4+2]
  002d8	3b 45 d8	 cmp	 eax, DWORD PTR _bits$[ebp]
  002db	74 3e		 je	 SHORT $LN24@gen_bitlen

; 555  :                 Tracev((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
; 556  :                 s->opt_len += ((ulg)bits - tree[m].Len) * tree[m].Freq;

  002dd	8b 4d dc	 mov	 ecx, DWORD PTR _m$[ebp]
  002e0	8b 55 fc	 mov	 edx, DWORD PTR _tree$[ebp]
  002e3	0f b7 44 8a 02	 movzx	 eax, WORD PTR [edx+ecx*4+2]
  002e8	8b 4d d8	 mov	 ecx, DWORD PTR _bits$[ebp]
  002eb	2b c8		 sub	 ecx, eax
  002ed	8b 55 dc	 mov	 edx, DWORD PTR _m$[ebp]
  002f0	8b 45 fc	 mov	 eax, DWORD PTR _tree$[ebp]
  002f3	0f b7 14 90	 movzx	 edx, WORD PTR [eax+edx*4]
  002f7	0f af ca	 imul	 ecx, edx
  002fa	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002fd	03 88 a8 16 00
	00		 add	 ecx, DWORD PTR [eax+5800]
  00303	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00306	89 8a a8 16 00
	00		 mov	 DWORD PTR [edx+5800], ecx

; 557  :                 tree[m].Len = (ush)bits;

  0030c	8b 45 dc	 mov	 eax, DWORD PTR _m$[ebp]
  0030f	8b 4d fc	 mov	 ecx, DWORD PTR _tree$[ebp]
  00312	66 8b 55 d8	 mov	 dx, WORD PTR _bits$[ebp]
  00316	66 89 54 81 02	 mov	 WORD PTR [ecx+eax*4+2], dx
$LN24@gen_bitlen:

; 558  :             }
; 559  :             n--;

  0031b	8b 45 e0	 mov	 eax, DWORD PTR _n$[ebp]
  0031e	83 e8 01	 sub	 eax, 1
  00321	89 45 e0	 mov	 DWORD PTR _n$[ebp], eax

; 560  :         }

  00324	e9 74 ff ff ff	 jmp	 $LN16@gen_bitlen
$LN17@gen_bitlen:

; 561  :     }

  00329	e9 4b ff ff ff	 jmp	 $LN13@gen_bitlen
$LN1@gen_bitlen:

; 562  : }

  0032e	5f		 pop	 edi
  0032f	83 c4 34	 add	 esp, 52			; 00000034H
  00332	3b ec		 cmp	 ebp, esp
  00334	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00339	8b e5		 mov	 esp, ebp
  0033b	5d		 pop	 ebp
  0033c	c3		 ret	 0
_gen_bitlen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\trees.c
;	COMDAT _gen_codes
_TEXT	SEGMENT
tv93 = -58						; size = 2
_len$1 = -56						; size = 4
_n$ = -52						; size = 4
_bits$ = -48						; size = 4
_code$ = -44						; size = 4
_next_code$ = -36					; size = 32
_tree$ = 8						; size = 4
_max_code$ = 12						; size = 4
_bl_count$ = 16						; size = 4
_gen_codes PROC						; COMDAT

; 576  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	57		 push	 edi
  00007	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  0000a	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 577  :     ush next_code[MAX_BITS+1]; /* next code value for each bit length */
; 578  :     unsigned code = 0;         /* running code value */

  00020	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _code$[ebp], 0

; 579  :     int bits;                  /* bit index */
; 580  :     int n;                     /* code index */
; 581  : 
; 582  :     /* The distribution counts are first used to generate the code values
; 583  :      * without bit reversal.
; 584  :      */
; 585  :     for (bits = 1; bits <= MAX_BITS; bits++) {

  00027	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _bits$[ebp], 1
  0002e	eb 09		 jmp	 SHORT $LN4@gen_codes
$LN2@gen_codes:
  00030	8b 45 d0	 mov	 eax, DWORD PTR _bits$[ebp]
  00033	83 c0 01	 add	 eax, 1
  00036	89 45 d0	 mov	 DWORD PTR _bits$[ebp], eax
$LN4@gen_codes:
  00039	83 7d d0 0f	 cmp	 DWORD PTR _bits$[ebp], 15 ; 0000000fH
  0003d	7f 21		 jg	 SHORT $LN3@gen_codes

; 586  :         code = (code + bl_count[bits-1]) << 1;

  0003f	8b 4d d0	 mov	 ecx, DWORD PTR _bits$[ebp]
  00042	8b 55 10	 mov	 edx, DWORD PTR _bl_count$[ebp]
  00045	0f b7 44 4a fe	 movzx	 eax, WORD PTR [edx+ecx*2-2]
  0004a	03 45 d4	 add	 eax, DWORD PTR _code$[ebp]
  0004d	d1 e0		 shl	 eax, 1
  0004f	89 45 d4	 mov	 DWORD PTR _code$[ebp], eax

; 587  :         next_code[bits] = (ush)code;

  00052	8b 4d d0	 mov	 ecx, DWORD PTR _bits$[ebp]
  00055	66 8b 55 d4	 mov	 dx, WORD PTR _code$[ebp]
  00059	66 89 54 4d dc	 mov	 WORD PTR _next_code$[ebp+ecx*2], dx

; 588  :     }

  0005e	eb d0		 jmp	 SHORT $LN2@gen_codes
$LN3@gen_codes:

; 589  :     /* Check that the bit counts in bl_count are consistent. The last code
; 590  :      * must be all ones.
; 591  :      */
; 592  :     Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
; 593  :             "inconsistent bit counts");
; 594  :     Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
; 595  : 
; 596  :     for (n = 0;  n <= max_code; n++) {

  00060	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  00067	eb 09		 jmp	 SHORT $LN7@gen_codes
$LN5@gen_codes:
  00069	8b 45 cc	 mov	 eax, DWORD PTR _n$[ebp]
  0006c	83 c0 01	 add	 eax, 1
  0006f	89 45 cc	 mov	 DWORD PTR _n$[ebp], eax
$LN7@gen_codes:
  00072	8b 4d cc	 mov	 ecx, DWORD PTR _n$[ebp]
  00075	3b 4d 0c	 cmp	 ecx, DWORD PTR _max_code$[ebp]
  00078	7f 56		 jg	 SHORT $LN1@gen_codes

; 597  :         int len = tree[n].Len;

  0007a	0f ae e8	 lfence
  0007d	8b 55 cc	 mov	 edx, DWORD PTR _n$[ebp]
  00080	8b 45 08	 mov	 eax, DWORD PTR _tree$[ebp]
  00083	0f b7 4c 90 02	 movzx	 ecx, WORD PTR [eax+edx*4+2]
  00088	89 4d c8	 mov	 DWORD PTR _len$1[ebp], ecx

; 598  :         if (len == 0) continue;

  0008b	83 7d c8 00	 cmp	 DWORD PTR _len$1[ebp], 0
  0008f	75 02		 jne	 SHORT $LN8@gen_codes
  00091	eb d6		 jmp	 SHORT $LN5@gen_codes
$LN8@gen_codes:

; 599  :         /* Now reverse the bits */
; 600  :         tree[n].Code = (ush)bi_reverse(next_code[len]++, len);

  00093	8b 55 c8	 mov	 edx, DWORD PTR _len$1[ebp]
  00096	66 8b 44 55 dc	 mov	 ax, WORD PTR _next_code$[ebp+edx*2]
  0009b	66 89 45 c6	 mov	 WORD PTR tv93[ebp], ax
  0009f	8b 4d c8	 mov	 ecx, DWORD PTR _len$1[ebp]
  000a2	66 8b 54 4d dc	 mov	 dx, WORD PTR _next_code$[ebp+ecx*2]
  000a7	66 83 c2 01	 add	 dx, 1
  000ab	8b 45 c8	 mov	 eax, DWORD PTR _len$1[ebp]
  000ae	66 89 54 45 dc	 mov	 WORD PTR _next_code$[ebp+eax*2], dx
  000b3	8b 4d c8	 mov	 ecx, DWORD PTR _len$1[ebp]
  000b6	51		 push	 ecx
  000b7	0f b7 55 c6	 movzx	 edx, WORD PTR tv93[ebp]
  000bb	52		 push	 edx
  000bc	e8 00 00 00 00	 call	 _bi_reverse
  000c1	83 c4 08	 add	 esp, 8
  000c4	8b 4d cc	 mov	 ecx, DWORD PTR _n$[ebp]
  000c7	8b 55 08	 mov	 edx, DWORD PTR _tree$[ebp]
  000ca	66 89 04 8a	 mov	 WORD PTR [edx+ecx*4], ax

; 601  : 
; 602  :         Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
; 603  :              n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
; 604  :     }

  000ce	eb 99		 jmp	 SHORT $LN5@gen_codes
$LN1@gen_codes:

; 605  : }

  000d0	52		 push	 edx
  000d1	8b cd		 mov	 ecx, ebp
  000d3	50		 push	 eax
  000d4	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@gen_codes
  000da	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000df	58		 pop	 eax
  000e0	5a		 pop	 edx
  000e1	5f		 pop	 edi
  000e2	83 c4 3c	 add	 esp, 60			; 0000003cH
  000e5	3b ec		 cmp	 ebp, esp
  000e7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ec	8b e5		 mov	 esp, ebp
  000ee	5d		 pop	 ebp
  000ef	c3		 ret	 0
$LN12@gen_codes:
  000f0	01 00 00 00	 DD	 1
  000f4	00 00 00 00	 DD	 $LN11@gen_codes
$LN11@gen_codes:
  000f8	dc ff ff ff	 DD	 -36			; ffffffdcH
  000fc	20 00 00 00	 DD	 32			; 00000020H
  00100	00 00 00 00	 DD	 $LN10@gen_codes
$LN10@gen_codes:
  00104	6e		 DB	 110			; 0000006eH
  00105	65		 DB	 101			; 00000065H
  00106	78		 DB	 120			; 00000078H
  00107	74		 DB	 116			; 00000074H
  00108	5f		 DB	 95			; 0000005fH
  00109	63		 DB	 99			; 00000063H
  0010a	6f		 DB	 111			; 0000006fH
  0010b	64		 DB	 100			; 00000064H
  0010c	65		 DB	 101			; 00000065H
  0010d	00		 DB	 0
_gen_codes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\trees.c
;	COMDAT _build_tree
_TEXT	SEGMENT
tv244 = -56						; size = 4
tv223 = -52						; size = 4
tv187 = -48						; size = 4
tv181 = -44						; size = 4
tv95 = -40						; size = 4
tv132 = -36						; size = 4
tv81 = -32						; size = 4
_node$ = -28						; size = 4
_max_code$ = -24					; size = 4
_m$ = -20						; size = 4
_n$ = -16						; size = 4
_elems$ = -12						; size = 4
_stree$ = -8						; size = 4
_tree$ = -4						; size = 4
_s$ = 8							; size = 4
_desc$ = 12						; size = 4
_build_tree PROC					; COMDAT

; 618  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d c8	 lea	 edi, DWORD PTR [ebp-56]
  0000b	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 619  :     ct_data *tree         = desc->dyn_tree;

  00021	8b 45 0c	 mov	 eax, DWORD PTR _desc$[ebp]
  00024	8b 08		 mov	 ecx, DWORD PTR [eax]
  00026	89 4d fc	 mov	 DWORD PTR _tree$[ebp], ecx

; 620  :     const ct_data *stree  = desc->stat_desc->static_tree;

  00029	8b 55 0c	 mov	 edx, DWORD PTR _desc$[ebp]
  0002c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0002f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00031	89 4d f8	 mov	 DWORD PTR _stree$[ebp], ecx

; 621  :     int elems             = desc->stat_desc->elems;

  00034	8b 55 0c	 mov	 edx, DWORD PTR _desc$[ebp]
  00037	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0003a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0003d	89 4d f4	 mov	 DWORD PTR _elems$[ebp], ecx

; 622  :     int n, m;          /* iterate over heap elements */
; 623  :     int max_code = -1; /* largest code with non zero frequency */

  00040	c7 45 e8 ff ff
	ff ff		 mov	 DWORD PTR _max_code$[ebp], -1

; 624  :     int node;          /* new node being created */
; 625  : 
; 626  :     /* Construct the initial heap, with least frequent element in
; 627  :      * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
; 628  :      * heap[0] is not used.
; 629  :      */
; 630  :     s->heap_len = 0, s->heap_max = HEAP_SIZE;

  00047	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0004a	c7 82 50 14 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+5200], 0
  00054	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00057	c7 80 54 14 00
	00 3d 02 00 00	 mov	 DWORD PTR [eax+5204], 573 ; 0000023dH

; 631  : 
; 632  :     for (n = 0; n < elems; n++) {

  00061	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  00068	eb 09		 jmp	 SHORT $LN4@build_tree
$LN2@build_tree:
  0006a	8b 4d f0	 mov	 ecx, DWORD PTR _n$[ebp]
  0006d	83 c1 01	 add	 ecx, 1
  00070	89 4d f0	 mov	 DWORD PTR _n$[ebp], ecx
$LN4@build_tree:
  00073	8b 55 f0	 mov	 edx, DWORD PTR _n$[ebp]
  00076	3b 55 f4	 cmp	 edx, DWORD PTR _elems$[ebp]
  00079	7d 5d		 jge	 SHORT $LN5@build_tree

; 633  :         if (tree[n].Freq != 0) {

  0007b	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  0007e	8b 4d fc	 mov	 ecx, DWORD PTR _tree$[ebp]
  00081	0f b7 14 81	 movzx	 edx, WORD PTR [ecx+eax*4]
  00085	85 d2		 test	 edx, edx
  00087	74 40		 je	 SHORT $LN13@build_tree

; 634  :             s->heap[++(s->heap_len)] = max_code = n;

  00089	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  0008c	89 45 e8	 mov	 DWORD PTR _max_code$[ebp], eax
  0008f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00092	8b 91 50 14 00
	00		 mov	 edx, DWORD PTR [ecx+5200]
  00098	83 c2 01	 add	 edx, 1
  0009b	89 55 e0	 mov	 DWORD PTR tv81[ebp], edx
  0009e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000a1	8b 4d e0	 mov	 ecx, DWORD PTR tv81[ebp]
  000a4	89 88 50 14 00
	00		 mov	 DWORD PTR [eax+5200], ecx
  000aa	8b 55 e0	 mov	 edx, DWORD PTR tv81[ebp]
  000ad	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000b0	8b 4d e8	 mov	 ecx, DWORD PTR _max_code$[ebp]
  000b3	89 8c 90 5c 0b
	00 00		 mov	 DWORD PTR [eax+edx*4+2908], ecx

; 635  :             s->depth[n] = 0;

  000ba	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000bd	03 55 f0	 add	 edx, DWORD PTR _n$[ebp]
  000c0	c6 82 58 14 00
	00 00		 mov	 BYTE PTR [edx+5208], 0

; 636  :         } else {

  000c7	eb 0d		 jmp	 SHORT $LN14@build_tree
$LN13@build_tree:

; 637  :             tree[n].Len = 0;

  000c9	33 c0		 xor	 eax, eax
  000cb	8b 4d f0	 mov	 ecx, DWORD PTR _n$[ebp]
  000ce	8b 55 fc	 mov	 edx, DWORD PTR _tree$[ebp]
  000d1	66 89 44 8a 02	 mov	 WORD PTR [edx+ecx*4+2], ax
$LN14@build_tree:

; 638  :         }
; 639  :     }

  000d6	eb 92		 jmp	 SHORT $LN2@build_tree
$LN5@build_tree:

; 640  : 
; 641  :     /* The pkzip format requires that at least one distance code exists,
; 642  :      * and that at least one bit should be sent even if there is only one
; 643  :      * possible code. So to avoid special checks later on we force at least
; 644  :      * two codes of non zero frequency.
; 645  :      */
; 646  :     while (s->heap_len < 2) {

  000d8	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000db	83 b8 50 14 00
	00 02		 cmp	 DWORD PTR [eax+5200], 2
  000e2	0f 8d aa 00 00
	00		 jge	 $LN6@build_tree

; 647  :         node = s->heap[++(s->heap_len)] = (max_code < 2 ? ++max_code : 0);

  000e8	83 7d e8 02	 cmp	 DWORD PTR _max_code$[ebp], 2
  000ec	7d 11		 jge	 SHORT $LN17@build_tree
  000ee	8b 4d e8	 mov	 ecx, DWORD PTR _max_code$[ebp]
  000f1	83 c1 01	 add	 ecx, 1
  000f4	89 4d e8	 mov	 DWORD PTR _max_code$[ebp], ecx
  000f7	8b 55 e8	 mov	 edx, DWORD PTR _max_code$[ebp]
  000fa	89 55 dc	 mov	 DWORD PTR tv132[ebp], edx
  000fd	eb 07		 jmp	 SHORT $LN18@build_tree
$LN17@build_tree:
  000ff	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv132[ebp], 0
$LN18@build_tree:
  00106	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00109	8b 88 50 14 00
	00		 mov	 ecx, DWORD PTR [eax+5200]
  0010f	83 c1 01	 add	 ecx, 1
  00112	89 4d d8	 mov	 DWORD PTR tv95[ebp], ecx
  00115	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00118	8b 45 d8	 mov	 eax, DWORD PTR tv95[ebp]
  0011b	89 82 50 14 00
	00		 mov	 DWORD PTR [edx+5200], eax
  00121	8b 4d d8	 mov	 ecx, DWORD PTR tv95[ebp]
  00124	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00127	8b 45 dc	 mov	 eax, DWORD PTR tv132[ebp]
  0012a	89 84 8a 5c 0b
	00 00		 mov	 DWORD PTR [edx+ecx*4+2908], eax
  00131	8b 4d dc	 mov	 ecx, DWORD PTR tv132[ebp]
  00134	89 4d e4	 mov	 DWORD PTR _node$[ebp], ecx

; 648  :         tree[node].Freq = 1;

  00137	ba 01 00 00 00	 mov	 edx, 1
  0013c	8b 45 e4	 mov	 eax, DWORD PTR _node$[ebp]
  0013f	8b 4d fc	 mov	 ecx, DWORD PTR _tree$[ebp]
  00142	66 89 14 81	 mov	 WORD PTR [ecx+eax*4], dx

; 649  :         s->depth[node] = 0;

  00146	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00149	03 55 e4	 add	 edx, DWORD PTR _node$[ebp]
  0014c	c6 82 58 14 00
	00 00		 mov	 BYTE PTR [edx+5208], 0

; 650  :         s->opt_len--; if (stree) s->static_len -= stree[node].Len;

  00153	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00156	8b 88 a8 16 00
	00		 mov	 ecx, DWORD PTR [eax+5800]
  0015c	83 e9 01	 sub	 ecx, 1
  0015f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00162	89 8a a8 16 00
	00		 mov	 DWORD PTR [edx+5800], ecx
  00168	83 7d f8 00	 cmp	 DWORD PTR _stree$[ebp], 0
  0016c	74 1f		 je	 SHORT $LN15@build_tree
  0016e	8b 45 e4	 mov	 eax, DWORD PTR _node$[ebp]
  00171	8b 4d f8	 mov	 ecx, DWORD PTR _stree$[ebp]
  00174	0f b7 54 81 02	 movzx	 edx, WORD PTR [ecx+eax*4+2]
  00179	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0017c	8b 88 ac 16 00
	00		 mov	 ecx, DWORD PTR [eax+5804]
  00182	2b ca		 sub	 ecx, edx
  00184	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00187	89 8a ac 16 00
	00		 mov	 DWORD PTR [edx+5804], ecx
$LN15@build_tree:

; 651  :         /* node is 0 or 1 so it does not have extra bits */
; 652  :     }

  0018d	e9 46 ff ff ff	 jmp	 $LN5@build_tree
$LN6@build_tree:

; 653  :     desc->max_code = max_code;

  00192	8b 45 0c	 mov	 eax, DWORD PTR _desc$[ebp]
  00195	8b 4d e8	 mov	 ecx, DWORD PTR _max_code$[ebp]
  00198	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 654  : 
; 655  :     /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
; 656  :      * establish sub-heaps of increasing lengths:
; 657  :      */
; 658  :     for (n = s->heap_len/2; n >= 1; n--) pqdownheap(s, tree, n);

  0019b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0019e	8b 82 50 14 00
	00		 mov	 eax, DWORD PTR [edx+5200]
  001a4	99		 cdq
  001a5	2b c2		 sub	 eax, edx
  001a7	d1 f8		 sar	 eax, 1
  001a9	89 45 f0	 mov	 DWORD PTR _n$[ebp], eax
  001ac	eb 09		 jmp	 SHORT $LN9@build_tree
$LN7@build_tree:
  001ae	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  001b1	83 e8 01	 sub	 eax, 1
  001b4	89 45 f0	 mov	 DWORD PTR _n$[ebp], eax
$LN9@build_tree:
  001b7	83 7d f0 01	 cmp	 DWORD PTR _n$[ebp], 1
  001bb	7c 19		 jl	 SHORT $LN8@build_tree
  001bd	0f ae e8	 lfence
  001c0	8b 4d f0	 mov	 ecx, DWORD PTR _n$[ebp]
  001c3	51		 push	 ecx
  001c4	8b 55 fc	 mov	 edx, DWORD PTR _tree$[ebp]
  001c7	52		 push	 edx
  001c8	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001cb	50		 push	 eax
  001cc	e8 00 00 00 00	 call	 _pqdownheap
  001d1	83 c4 0c	 add	 esp, 12			; 0000000cH
  001d4	eb d8		 jmp	 SHORT $LN7@build_tree
$LN8@build_tree:

; 659  : 
; 660  :     /* Construct the Huffman tree by repeatedly combining the least two
; 661  :      * frequent nodes.
; 662  :      */
; 663  :     node = elems;              /* next internal node of the tree */

  001d6	8b 4d f4	 mov	 ecx, DWORD PTR _elems$[ebp]
  001d9	89 4d e4	 mov	 DWORD PTR _node$[ebp], ecx
$LN12@build_tree:

; 664  :     do {
; 665  :         pqremove(s, tree, n);  /* n = node of least frequency */

  001dc	ba 04 00 00 00	 mov	 edx, 4
  001e1	c1 e2 00	 shl	 edx, 0
  001e4	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001e7	8b 8c 10 5c 0b
	00 00		 mov	 ecx, DWORD PTR [eax+edx+2908]
  001ee	89 4d f0	 mov	 DWORD PTR _n$[ebp], ecx
  001f1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001f4	8b 82 50 14 00
	00		 mov	 eax, DWORD PTR [edx+5200]
  001fa	b9 04 00 00 00	 mov	 ecx, 4
  001ff	c1 e1 00	 shl	 ecx, 0
  00202	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00205	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  00208	8b 84 86 5c 0b
	00 00		 mov	 eax, DWORD PTR [esi+eax*4+2908]
  0020f	89 84 0a 5c 0b
	00 00		 mov	 DWORD PTR [edx+ecx+2908], eax
  00216	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00219	8b 91 50 14 00
	00		 mov	 edx, DWORD PTR [ecx+5200]
  0021f	83 ea 01	 sub	 edx, 1
  00222	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00225	89 90 50 14 00
	00		 mov	 DWORD PTR [eax+5200], edx
  0022b	6a 01		 push	 1
  0022d	8b 4d fc	 mov	 ecx, DWORD PTR _tree$[ebp]
  00230	51		 push	 ecx
  00231	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00234	52		 push	 edx
  00235	e8 00 00 00 00	 call	 _pqdownheap
  0023a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 666  :         m = s->heap[SMALLEST]; /* m = node of next least frequency */

  0023d	b8 04 00 00 00	 mov	 eax, 4
  00242	c1 e0 00	 shl	 eax, 0
  00245	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00248	8b 94 01 5c 0b
	00 00		 mov	 edx, DWORD PTR [ecx+eax+2908]
  0024f	89 55 ec	 mov	 DWORD PTR _m$[ebp], edx

; 667  : 
; 668  :         s->heap[--(s->heap_max)] = n; /* keep the nodes sorted by frequency */

  00252	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00255	8b 88 54 14 00
	00		 mov	 ecx, DWORD PTR [eax+5204]
  0025b	83 e9 01	 sub	 ecx, 1
  0025e	89 4d d4	 mov	 DWORD PTR tv181[ebp], ecx
  00261	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00264	8b 45 d4	 mov	 eax, DWORD PTR tv181[ebp]
  00267	89 82 54 14 00
	00		 mov	 DWORD PTR [edx+5204], eax
  0026d	8b 4d d4	 mov	 ecx, DWORD PTR tv181[ebp]
  00270	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00273	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  00276	89 84 8a 5c 0b
	00 00		 mov	 DWORD PTR [edx+ecx*4+2908], eax

; 669  :         s->heap[--(s->heap_max)] = m;

  0027d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00280	8b 91 54 14 00
	00		 mov	 edx, DWORD PTR [ecx+5204]
  00286	83 ea 01	 sub	 edx, 1
  00289	89 55 d0	 mov	 DWORD PTR tv187[ebp], edx
  0028c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0028f	8b 4d d0	 mov	 ecx, DWORD PTR tv187[ebp]
  00292	89 88 54 14 00
	00		 mov	 DWORD PTR [eax+5204], ecx
  00298	8b 55 d0	 mov	 edx, DWORD PTR tv187[ebp]
  0029b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0029e	8b 4d ec	 mov	 ecx, DWORD PTR _m$[ebp]
  002a1	89 8c 90 5c 0b
	00 00		 mov	 DWORD PTR [eax+edx*4+2908], ecx

; 670  : 
; 671  :         /* Create a new node father of n and m */
; 672  :         tree[node].Freq = tree[n].Freq + tree[m].Freq;

  002a8	8b 55 f0	 mov	 edx, DWORD PTR _n$[ebp]
  002ab	8b 45 fc	 mov	 eax, DWORD PTR _tree$[ebp]
  002ae	0f b7 0c 90	 movzx	 ecx, WORD PTR [eax+edx*4]
  002b2	8b 55 ec	 mov	 edx, DWORD PTR _m$[ebp]
  002b5	8b 45 fc	 mov	 eax, DWORD PTR _tree$[ebp]
  002b8	0f b7 14 90	 movzx	 edx, WORD PTR [eax+edx*4]
  002bc	03 ca		 add	 ecx, edx
  002be	8b 45 e4	 mov	 eax, DWORD PTR _node$[ebp]
  002c1	8b 55 fc	 mov	 edx, DWORD PTR _tree$[ebp]
  002c4	66 89 0c 82	 mov	 WORD PTR [edx+eax*4], cx

; 673  :         s->depth[node] = (uch)((s->depth[n] >= s->depth[m] ?

  002c8	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002cb	03 45 f0	 add	 eax, DWORD PTR _n$[ebp]
  002ce	0f b6 88 58 14
	00 00		 movzx	 ecx, BYTE PTR [eax+5208]
  002d5	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002d8	03 55 ec	 add	 edx, DWORD PTR _m$[ebp]
  002db	0f b6 82 58 14
	00 00		 movzx	 eax, BYTE PTR [edx+5208]
  002e2	3b c8		 cmp	 ecx, eax
  002e4	7c 12		 jl	 SHORT $LN19@build_tree
  002e6	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002e9	03 4d f0	 add	 ecx, DWORD PTR _n$[ebp]
  002ec	0f b6 91 58 14
	00 00		 movzx	 edx, BYTE PTR [ecx+5208]
  002f3	89 55 cc	 mov	 DWORD PTR tv223[ebp], edx
  002f6	eb 10		 jmp	 SHORT $LN20@build_tree
$LN19@build_tree:
  002f8	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002fb	03 45 ec	 add	 eax, DWORD PTR _m$[ebp]
  002fe	0f b6 88 58 14
	00 00		 movzx	 ecx, BYTE PTR [eax+5208]
  00305	89 4d cc	 mov	 DWORD PTR tv223[ebp], ecx
$LN20@build_tree:
  00308	8b 55 cc	 mov	 edx, DWORD PTR tv223[ebp]
  0030b	83 c2 01	 add	 edx, 1
  0030e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00311	03 45 e4	 add	 eax, DWORD PTR _node$[ebp]
  00314	88 90 58 14 00
	00		 mov	 BYTE PTR [eax+5208], dl

; 674  :                                 s->depth[n] : s->depth[m]) + 1);
; 675  :         tree[n].Dad = tree[m].Dad = (ush)node;

  0031a	8b 4d ec	 mov	 ecx, DWORD PTR _m$[ebp]
  0031d	8b 55 fc	 mov	 edx, DWORD PTR _tree$[ebp]
  00320	66 8b 45 e4	 mov	 ax, WORD PTR _node$[ebp]
  00324	66 89 44 8a 02	 mov	 WORD PTR [edx+ecx*4+2], ax
  00329	8b 4d f0	 mov	 ecx, DWORD PTR _n$[ebp]
  0032c	8b 55 fc	 mov	 edx, DWORD PTR _tree$[ebp]
  0032f	66 8b 45 e4	 mov	 ax, WORD PTR _node$[ebp]
  00333	66 89 44 8a 02	 mov	 WORD PTR [edx+ecx*4+2], ax

; 676  : #ifdef DUMP_BL_TREE
; 677  :         if (tree == s->bl_tree) {
; 678  :             fprintf(stderr,"\nnode %d(%d), sons %d(%d) %d(%d)",
; 679  :                     node, tree[node].Freq, n, tree[n].Freq, m, tree[m].Freq);
; 680  :         }
; 681  : #endif
; 682  :         /* and insert the new node in the heap */
; 683  :         s->heap[SMALLEST] = node++;

  00338	b9 04 00 00 00	 mov	 ecx, 4
  0033d	c1 e1 00	 shl	 ecx, 0
  00340	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00343	8b 45 e4	 mov	 eax, DWORD PTR _node$[ebp]
  00346	89 84 0a 5c 0b
	00 00		 mov	 DWORD PTR [edx+ecx+2908], eax
  0034d	8b 4d e4	 mov	 ecx, DWORD PTR _node$[ebp]
  00350	83 c1 01	 add	 ecx, 1
  00353	89 4d e4	 mov	 DWORD PTR _node$[ebp], ecx

; 684  :         pqdownheap(s, tree, SMALLEST);

  00356	6a 01		 push	 1
  00358	8b 55 fc	 mov	 edx, DWORD PTR _tree$[ebp]
  0035b	52		 push	 edx
  0035c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0035f	50		 push	 eax
  00360	e8 00 00 00 00	 call	 _pqdownheap
  00365	83 c4 0c	 add	 esp, 12			; 0000000cH

; 685  : 
; 686  :     } while (s->heap_len >= 2);

  00368	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0036b	83 b9 50 14 00
	00 02		 cmp	 DWORD PTR [ecx+5200], 2
  00372	0f 8d 64 fe ff
	ff		 jge	 $LN12@build_tree

; 687  : 
; 688  :     s->heap[--(s->heap_max)] = s->heap[SMALLEST];

  00378	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0037b	8b 82 54 14 00
	00		 mov	 eax, DWORD PTR [edx+5204]
  00381	83 e8 01	 sub	 eax, 1
  00384	89 45 c8	 mov	 DWORD PTR tv244[ebp], eax
  00387	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0038a	8b 55 c8	 mov	 edx, DWORD PTR tv244[ebp]
  0038d	89 91 54 14 00
	00		 mov	 DWORD PTR [ecx+5204], edx
  00393	b8 04 00 00 00	 mov	 eax, 4
  00398	c1 e0 00	 shl	 eax, 0
  0039b	8b 4d c8	 mov	 ecx, DWORD PTR tv244[ebp]
  0039e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003a1	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  003a4	8b 84 06 5c 0b
	00 00		 mov	 eax, DWORD PTR [esi+eax+2908]
  003ab	89 84 8a 5c 0b
	00 00		 mov	 DWORD PTR [edx+ecx*4+2908], eax

; 689  : 
; 690  :     /* At this point, the fields freq and dad are set. We can now
; 691  :      * generate the bit lengths.
; 692  :      */
; 693  :     gen_bitlen(s, (tree_desc *)desc);

  003b2	8b 4d 0c	 mov	 ecx, DWORD PTR _desc$[ebp]
  003b5	51		 push	 ecx
  003b6	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003b9	52		 push	 edx
  003ba	e8 00 00 00 00	 call	 _gen_bitlen
  003bf	83 c4 08	 add	 esp, 8

; 694  : 
; 695  :     /* The field len is now set, we can generate the bit codes */
; 696  :     gen_codes ((ct_data *)tree, max_code, s->bl_count);

  003c2	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003c5	05 3c 0b 00 00	 add	 eax, 2876		; 00000b3cH
  003ca	50		 push	 eax
  003cb	8b 4d e8	 mov	 ecx, DWORD PTR _max_code$[ebp]
  003ce	51		 push	 ecx
  003cf	8b 55 fc	 mov	 edx, DWORD PTR _tree$[ebp]
  003d2	52		 push	 edx
  003d3	e8 00 00 00 00	 call	 _gen_codes
  003d8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 697  : }

  003db	5f		 pop	 edi
  003dc	5e		 pop	 esi
  003dd	83 c4 38	 add	 esp, 56			; 00000038H
  003e0	3b ec		 cmp	 ebp, esp
  003e2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003e7	8b e5		 mov	 esp, ebp
  003e9	5d		 pop	 ebp
  003ea	c3		 ret	 0
_build_tree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\trees.c
;	COMDAT _scan_tree
_TEXT	SEGMENT
_min_count$ = -28					; size = 4
_max_count$ = -24					; size = 4
_count$ = -20						; size = 4
_nextlen$ = -16						; size = 4
_curlen$ = -12						; size = 4
_prevlen$ = -8						; size = 4
_n$ = -4						; size = 4
_s$ = 8							; size = 4
_tree$ = 12						; size = 4
_max_code$ = 16						; size = 4
_scan_tree PROC						; COMDAT

; 707  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 708  :     int n;                     /* iterates over all tree elements */
; 709  :     int prevlen = -1;          /* last emitted length */

  0002a	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _prevlen$[ebp], -1

; 710  :     int curlen;                /* length of current code */
; 711  :     int nextlen = tree[0].Len; /* length of next code */

  00031	b8 04 00 00 00	 mov	 eax, 4
  00036	6b c8 00	 imul	 ecx, eax, 0
  00039	8b 55 0c	 mov	 edx, DWORD PTR _tree$[ebp]
  0003c	0f b7 44 0a 02	 movzx	 eax, WORD PTR [edx+ecx+2]
  00041	89 45 f0	 mov	 DWORD PTR _nextlen$[ebp], eax

; 712  :     int count = 0;             /* repeat count of the current code */

  00044	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 713  :     int max_count = 7;         /* max repeat count */

  0004b	c7 45 e8 07 00
	00 00		 mov	 DWORD PTR _max_count$[ebp], 7

; 714  :     int min_count = 4;         /* min repeat count */

  00052	c7 45 e4 04 00
	00 00		 mov	 DWORD PTR _min_count$[ebp], 4

; 715  : 
; 716  :     if (nextlen == 0) max_count = 138, min_count = 3;

  00059	83 7d f0 00	 cmp	 DWORD PTR _nextlen$[ebp], 0
  0005d	75 0e		 jne	 SHORT $LN5@scan_tree
  0005f	c7 45 e8 8a 00
	00 00		 mov	 DWORD PTR _max_count$[ebp], 138 ; 0000008aH
  00066	c7 45 e4 03 00
	00 00		 mov	 DWORD PTR _min_count$[ebp], 3
$LN5@scan_tree:

; 717  :     tree[max_code+1].Len = (ush)0xffff; /* guard */

  0006d	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  00072	8b 55 10	 mov	 edx, DWORD PTR _max_code$[ebp]
  00075	8b 45 0c	 mov	 eax, DWORD PTR _tree$[ebp]
  00078	66 89 4c 90 06	 mov	 WORD PTR [eax+edx*4+6], cx

; 718  : 
; 719  :     for (n = 0; n <= max_code; n++) {

  0007d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  00084	eb 09		 jmp	 SHORT $LN4@scan_tree
$LN2@scan_tree:
  00086	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  00089	83 c1 01	 add	 ecx, 1
  0008c	89 4d fc	 mov	 DWORD PTR _n$[ebp], ecx
$LN4@scan_tree:
  0008f	8b 55 fc	 mov	 edx, DWORD PTR _n$[ebp]
  00092	3b 55 10	 cmp	 edx, DWORD PTR _max_code$[ebp]
  00095	0f 8f 64 01 00
	00		 jg	 $LN1@scan_tree

; 720  :         curlen = nextlen; nextlen = tree[n+1].Len;

  0009b	8b 45 f0	 mov	 eax, DWORD PTR _nextlen$[ebp]
  0009e	89 45 f4	 mov	 DWORD PTR _curlen$[ebp], eax
  000a1	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  000a4	8b 55 0c	 mov	 edx, DWORD PTR _tree$[ebp]
  000a7	0f b7 44 8a 06	 movzx	 eax, WORD PTR [edx+ecx*4+6]
  000ac	89 45 f0	 mov	 DWORD PTR _nextlen$[ebp], eax

; 721  :         if (++count < max_count && curlen == nextlen) {

  000af	8b 4d ec	 mov	 ecx, DWORD PTR _count$[ebp]
  000b2	83 c1 01	 add	 ecx, 1
  000b5	89 4d ec	 mov	 DWORD PTR _count$[ebp], ecx
  000b8	8b 55 ec	 mov	 edx, DWORD PTR _count$[ebp]
  000bb	3b 55 e8	 cmp	 edx, DWORD PTR _max_count$[ebp]
  000be	7d 0f		 jge	 SHORT $LN6@scan_tree
  000c0	8b 45 f4	 mov	 eax, DWORD PTR _curlen$[ebp]
  000c3	3b 45 f0	 cmp	 eax, DWORD PTR _nextlen$[ebp]
  000c6	75 07		 jne	 SHORT $LN6@scan_tree

; 722  :             continue;

  000c8	eb bc		 jmp	 SHORT $LN2@scan_tree
  000ca	e9 e2 00 00 00	 jmp	 $LN7@scan_tree
$LN6@scan_tree:

; 723  :         } else if (count < min_count) {

  000cf	8b 4d ec	 mov	 ecx, DWORD PTR _count$[ebp]
  000d2	3b 4d e4	 cmp	 ecx, DWORD PTR _min_count$[ebp]
  000d5	7d 24		 jge	 SHORT $LN8@scan_tree

; 724  :             s->bl_tree[curlen].Freq += count;

  000d7	8b 55 f4	 mov	 edx, DWORD PTR _curlen$[ebp]
  000da	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000dd	0f b7 8c 90 7c
	0a 00 00	 movzx	 ecx, WORD PTR [eax+edx*4+2684]
  000e5	03 4d ec	 add	 ecx, DWORD PTR _count$[ebp]
  000e8	8b 55 f4	 mov	 edx, DWORD PTR _curlen$[ebp]
  000eb	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000ee	66 89 8c 90 7c
	0a 00 00	 mov	 WORD PTR [eax+edx*4+2684], cx
  000f6	e9 b6 00 00 00	 jmp	 $LN7@scan_tree
$LN8@scan_tree:

; 725  :         } else if (curlen != 0) {

  000fb	83 7d f4 00	 cmp	 DWORD PTR _curlen$[ebp], 0
  000ff	74 54		 je	 SHORT $LN10@scan_tree

; 726  :             if (curlen != prevlen) s->bl_tree[curlen].Freq++;

  00101	8b 4d f4	 mov	 ecx, DWORD PTR _curlen$[ebp]
  00104	3b 4d f8	 cmp	 ecx, DWORD PTR _prevlen$[ebp]
  00107	74 20		 je	 SHORT $LN12@scan_tree
  00109	8b 55 f4	 mov	 edx, DWORD PTR _curlen$[ebp]
  0010c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0010f	66 8b 8c 90 7c
	0a 00 00	 mov	 cx, WORD PTR [eax+edx*4+2684]
  00117	66 83 c1 01	 add	 cx, 1
  0011b	8b 55 f4	 mov	 edx, DWORD PTR _curlen$[ebp]
  0011e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00121	66 89 8c 90 7c
	0a 00 00	 mov	 WORD PTR [eax+edx*4+2684], cx
$LN12@scan_tree:

; 727  :             s->bl_tree[REP_3_6].Freq++;

  00129	b9 04 00 00 00	 mov	 ecx, 4
  0012e	c1 e1 04	 shl	 ecx, 4
  00131	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00134	66 8b 84 0a 7c
	0a 00 00	 mov	 ax, WORD PTR [edx+ecx+2684]
  0013c	66 83 c0 01	 add	 ax, 1
  00140	b9 04 00 00 00	 mov	 ecx, 4
  00145	c1 e1 04	 shl	 ecx, 4
  00148	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0014b	66 89 84 0a 7c
	0a 00 00	 mov	 WORD PTR [edx+ecx+2684], ax
  00153	eb 5c		 jmp	 SHORT $LN7@scan_tree
$LN10@scan_tree:

; 728  :         } else if (count <= 10) {

  00155	83 7d ec 0a	 cmp	 DWORD PTR _count$[ebp], 10 ; 0000000aH
  00159	7f 2c		 jg	 SHORT $LN13@scan_tree

; 729  :             s->bl_tree[REPZ_3_10].Freq++;

  0015b	b8 04 00 00 00	 mov	 eax, 4
  00160	6b c8 11	 imul	 ecx, eax, 17
  00163	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00166	66 8b 84 0a 7c
	0a 00 00	 mov	 ax, WORD PTR [edx+ecx+2684]
  0016e	66 83 c0 01	 add	 ax, 1
  00172	b9 04 00 00 00	 mov	 ecx, 4
  00177	6b d1 11	 imul	 edx, ecx, 17
  0017a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0017d	66 89 84 11 7c
	0a 00 00	 mov	 WORD PTR [ecx+edx+2684], ax

; 730  :         } else {

  00185	eb 2a		 jmp	 SHORT $LN7@scan_tree
$LN13@scan_tree:

; 731  :             s->bl_tree[REPZ_11_138].Freq++;

  00187	ba 04 00 00 00	 mov	 edx, 4
  0018c	6b c2 12	 imul	 eax, edx, 18
  0018f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00192	66 8b 94 01 7c
	0a 00 00	 mov	 dx, WORD PTR [ecx+eax+2684]
  0019a	66 83 c2 01	 add	 dx, 1
  0019e	b8 04 00 00 00	 mov	 eax, 4
  001a3	6b c8 12	 imul	 ecx, eax, 18
  001a6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001a9	66 89 94 08 7c
	0a 00 00	 mov	 WORD PTR [eax+ecx+2684], dx
$LN7@scan_tree:

; 732  :         }
; 733  :         count = 0; prevlen = curlen;

  001b1	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  001b8	8b 4d f4	 mov	 ecx, DWORD PTR _curlen$[ebp]
  001bb	89 4d f8	 mov	 DWORD PTR _prevlen$[ebp], ecx

; 734  :         if (nextlen == 0) {

  001be	83 7d f0 00	 cmp	 DWORD PTR _nextlen$[ebp], 0
  001c2	75 10		 jne	 SHORT $LN15@scan_tree

; 735  :             max_count = 138, min_count = 3;

  001c4	c7 45 e8 8a 00
	00 00		 mov	 DWORD PTR _max_count$[ebp], 138 ; 0000008aH
  001cb	c7 45 e4 03 00
	00 00		 mov	 DWORD PTR _min_count$[ebp], 3
  001d2	eb 26		 jmp	 SHORT $LN16@scan_tree
$LN15@scan_tree:

; 736  :         } else if (curlen == nextlen) {

  001d4	8b 55 f4	 mov	 edx, DWORD PTR _curlen$[ebp]
  001d7	3b 55 f0	 cmp	 edx, DWORD PTR _nextlen$[ebp]
  001da	75 10		 jne	 SHORT $LN17@scan_tree

; 737  :             max_count = 6, min_count = 3;

  001dc	c7 45 e8 06 00
	00 00		 mov	 DWORD PTR _max_count$[ebp], 6
  001e3	c7 45 e4 03 00
	00 00		 mov	 DWORD PTR _min_count$[ebp], 3

; 738  :         } else {

  001ea	eb 0e		 jmp	 SHORT $LN16@scan_tree
$LN17@scan_tree:

; 739  :             max_count = 7, min_count = 4;

  001ec	c7 45 e8 07 00
	00 00		 mov	 DWORD PTR _max_count$[ebp], 7
  001f3	c7 45 e4 04 00
	00 00		 mov	 DWORD PTR _min_count$[ebp], 4
$LN16@scan_tree:

; 740  :         }
; 741  :     }

  001fa	e9 87 fe ff ff	 jmp	 $LN2@scan_tree
$LN1@scan_tree:

; 742  : }

  001ff	83 c4 1c	 add	 esp, 28			; 0000001cH
  00202	3b ec		 cmp	 ebp, esp
  00204	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00209	8b e5		 mov	 esp, ebp
  0020b	5d		 pop	 ebp
  0020c	c3		 ret	 0
_scan_tree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\trees.c
;	COMDAT _send_tree
_TEXT	SEGMENT
_val$1 = -92						; size = 4
_len$2 = -88						; size = 4
_val$3 = -84						; size = 4
_len$4 = -80						; size = 4
_val$5 = -76						; size = 4
_len$6 = -72						; size = 4
_val$7 = -68						; size = 4
_len$8 = -64						; size = 4
_val$9 = -60						; size = 4
_len$10 = -56						; size = 4
_val$11 = -52						; size = 4
_len$12 = -48						; size = 4
_val$13 = -44						; size = 4
_len$14 = -40						; size = 4
_val$15 = -36						; size = 4
_len$16 = -32						; size = 4
_min_count$ = -28					; size = 4
_max_count$ = -24					; size = 4
_count$ = -20						; size = 4
_nextlen$ = -16						; size = 4
_curlen$ = -12						; size = 4
_prevlen$ = -8						; size = 4
_n$ = -4						; size = 4
_s$ = 8							; size = 4
_tree$ = 12						; size = 4
_max_code$ = 16						; size = 4
_send_tree PROC						; COMDAT

; 752  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	57		 push	 edi
  00007	8d 7d a4	 lea	 edi, DWORD PTR [ebp-92]
  0000a	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 753  :     int n;                     /* iterates over all tree elements */
; 754  :     int prevlen = -1;          /* last emitted length */

  00020	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _prevlen$[ebp], -1

; 755  :     int curlen;                /* length of current code */
; 756  :     int nextlen = tree[0].Len; /* length of next code */

  00027	b8 04 00 00 00	 mov	 eax, 4
  0002c	6b c8 00	 imul	 ecx, eax, 0
  0002f	8b 55 0c	 mov	 edx, DWORD PTR _tree$[ebp]
  00032	0f b7 44 0a 02	 movzx	 eax, WORD PTR [edx+ecx+2]
  00037	89 45 f0	 mov	 DWORD PTR _nextlen$[ebp], eax

; 757  :     int count = 0;             /* repeat count of the current code */

  0003a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 758  :     int max_count = 7;         /* max repeat count */

  00041	c7 45 e8 07 00
	00 00		 mov	 DWORD PTR _max_count$[ebp], 7

; 759  :     int min_count = 4;         /* min repeat count */

  00048	c7 45 e4 04 00
	00 00		 mov	 DWORD PTR _min_count$[ebp], 4

; 760  : 
; 761  :     /* tree[max_code+1].Len = -1; */  /* guard already set */
; 762  :     if (nextlen == 0) max_count = 138, min_count = 3;

  0004f	83 7d f0 00	 cmp	 DWORD PTR _nextlen$[ebp], 0
  00053	75 0e		 jne	 SHORT $LN8@send_tree
  00055	c7 45 e8 8a 00
	00 00		 mov	 DWORD PTR _max_count$[ebp], 138 ; 0000008aH
  0005c	c7 45 e4 03 00
	00 00		 mov	 DWORD PTR _min_count$[ebp], 3
$LN8@send_tree:

; 763  : 
; 764  :     for (n = 0; n <= max_code; n++) {

  00063	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  0006a	eb 09		 jmp	 SHORT $LN4@send_tree
$LN2@send_tree:
  0006c	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  0006f	83 c1 01	 add	 ecx, 1
  00072	89 4d fc	 mov	 DWORD PTR _n$[ebp], ecx
$LN4@send_tree:
  00075	8b 55 fc	 mov	 edx, DWORD PTR _n$[ebp]
  00078	3b 55 10	 cmp	 edx, DWORD PTR _max_code$[ebp]
  0007b	0f 8f 61 0a 00
	00		 jg	 $LN1@send_tree

; 765  :         curlen = nextlen; nextlen = tree[n+1].Len;

  00081	8b 45 f0	 mov	 eax, DWORD PTR _nextlen$[ebp]
  00084	89 45 f4	 mov	 DWORD PTR _curlen$[ebp], eax
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  0008a	8b 55 0c	 mov	 edx, DWORD PTR _tree$[ebp]
  0008d	0f b7 44 8a 06	 movzx	 eax, WORD PTR [edx+ecx*4+6]
  00092	89 45 f0	 mov	 DWORD PTR _nextlen$[ebp], eax

; 766  :         if (++count < max_count && curlen == nextlen) {

  00095	8b 4d ec	 mov	 ecx, DWORD PTR _count$[ebp]
  00098	83 c1 01	 add	 ecx, 1
  0009b	89 4d ec	 mov	 DWORD PTR _count$[ebp], ecx
  0009e	8b 55 ec	 mov	 edx, DWORD PTR _count$[ebp]
  000a1	3b 55 e8	 cmp	 edx, DWORD PTR _max_count$[ebp]
  000a4	7d 0f		 jge	 SHORT $LN9@send_tree
  000a6	8b 45 f4	 mov	 eax, DWORD PTR _curlen$[ebp]
  000a9	3b 45 f0	 cmp	 eax, DWORD PTR _nextlen$[ebp]
  000ac	75 07		 jne	 SHORT $LN9@send_tree

; 767  :             continue;

  000ae	eb bc		 jmp	 SHORT $LN2@send_tree
  000b0	e9 df 09 00 00	 jmp	 $LN10@send_tree
$LN9@send_tree:

; 768  :         } else if (count < min_count) {

  000b5	8b 4d ec	 mov	 ecx, DWORD PTR _count$[ebp]
  000b8	3b 4d e4	 cmp	 ecx, DWORD PTR _min_count$[ebp]
  000bb	0f 8d 47 01 00
	00		 jge	 $LN11@send_tree
$LN7@send_tree:

; 769  :             do { send_code(s, curlen, s->bl_tree); } while (--count != 0);

  000c1	8b 55 f4	 mov	 edx, DWORD PTR _curlen$[ebp]
  000c4	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000c7	0f b7 8c 90 7e
	0a 00 00	 movzx	 ecx, WORD PTR [eax+edx*4+2686]
  000cf	89 4d e0	 mov	 DWORD PTR _len$16[ebp], ecx
  000d2	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000d7	2b 55 e0	 sub	 edx, DWORD PTR _len$16[ebp]
  000da	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000dd	39 90 bc 16 00
	00		 cmp	 DWORD PTR [eax+5820], edx
  000e3	0f 8e c7 00 00
	00		 jle	 $LN13@send_tree
  000e9	8b 4d f4	 mov	 ecx, DWORD PTR _curlen$[ebp]
  000ec	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000ef	0f b7 84 8a 7c
	0a 00 00	 movzx	 eax, WORD PTR [edx+ecx*4+2684]
  000f7	89 45 dc	 mov	 DWORD PTR _val$15[ebp], eax
  000fa	0f b7 55 dc	 movzx	 edx, WORD PTR _val$15[ebp]
  000fe	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00101	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00107	d3 e2		 shl	 edx, cl
  00109	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0010c	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  00113	0b c2		 or	 eax, edx
  00115	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00118	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  0011f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00122	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  00129	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0012e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00131	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00134	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00137	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0013a	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  0013d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00140	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00143	83 c0 01	 add	 eax, 1
  00146	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00149	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0014c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0014f	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  00156	c1 f8 08	 sar	 eax, 8
  00159	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0015c	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0015f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00162	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00165	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  00168	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0016b	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0016e	83 c0 01	 add	 eax, 1
  00171	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00174	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00177	0f b7 55 dc	 movzx	 edx, WORD PTR _val$15[ebp]
  0017b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0017e	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00183	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  00189	d3 fa		 sar	 edx, cl
  0018b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0018e	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  00195	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00198	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0019e	8b 4d e0	 mov	 ecx, DWORD PTR _len$16[ebp]
  001a1	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  001a5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001a8	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  001ae	eb 44		 jmp	 SHORT $LN5@send_tree
$LN13@send_tree:
  001b0	8b 4d f4	 mov	 ecx, DWORD PTR _curlen$[ebp]
  001b3	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001b6	0f b7 84 8a 7c
	0a 00 00	 movzx	 eax, WORD PTR [edx+ecx*4+2684]
  001be	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001c1	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  001c7	d3 e0		 shl	 eax, cl
  001c9	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001cc	0f b7 8a b8 16
	00 00		 movzx	 ecx, WORD PTR [edx+5816]
  001d3	0b c8		 or	 ecx, eax
  001d5	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001d8	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  001df	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001e2	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  001e8	03 4d e0	 add	 ecx, DWORD PTR _len$16[ebp]
  001eb	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001ee	89 8a bc 16 00
	00		 mov	 DWORD PTR [edx+5820], ecx
$LN5@send_tree:
  001f4	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  001f7	83 e8 01	 sub	 eax, 1
  001fa	89 45 ec	 mov	 DWORD PTR _count$[ebp], eax
  001fd	0f 85 be fe ff
	ff		 jne	 $LN7@send_tree

; 770  : 
; 771  :         } else if (curlen != 0) {

  00203	e9 8c 08 00 00	 jmp	 $LN10@send_tree
$LN11@send_tree:
  00208	83 7d f4 00	 cmp	 DWORD PTR _curlen$[ebp], 0
  0020c	0f 84 b1 03 00
	00		 je	 $LN15@send_tree

; 772  :             if (curlen != prevlen) {

  00212	8b 4d f4	 mov	 ecx, DWORD PTR _curlen$[ebp]
  00215	3b 4d f8	 cmp	 ecx, DWORD PTR _prevlen$[ebp]
  00218	0f 84 3c 01 00
	00		 je	 $LN17@send_tree

; 773  :                 send_code(s, curlen, s->bl_tree); count--;

  0021e	8b 55 f4	 mov	 edx, DWORD PTR _curlen$[ebp]
  00221	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00224	0f b7 8c 90 7e
	0a 00 00	 movzx	 ecx, WORD PTR [eax+edx*4+2686]
  0022c	89 4d d8	 mov	 DWORD PTR _len$14[ebp], ecx
  0022f	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00234	2b 55 d8	 sub	 edx, DWORD PTR _len$14[ebp]
  00237	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0023a	39 90 bc 16 00
	00		 cmp	 DWORD PTR [eax+5820], edx
  00240	0f 8e c7 00 00
	00		 jle	 $LN18@send_tree
  00246	8b 4d f4	 mov	 ecx, DWORD PTR _curlen$[ebp]
  00249	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0024c	0f b7 84 8a 7c
	0a 00 00	 movzx	 eax, WORD PTR [edx+ecx*4+2684]
  00254	89 45 d4	 mov	 DWORD PTR _val$13[ebp], eax
  00257	0f b7 55 d4	 movzx	 edx, WORD PTR _val$13[ebp]
  0025b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0025e	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00264	d3 e2		 shl	 edx, cl
  00266	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00269	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  00270	0b c2		 or	 eax, edx
  00272	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00275	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  0027c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0027f	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  00286	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0028b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0028e	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00291	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00294	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00297	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  0029a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0029d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  002a0	83 c0 01	 add	 eax, 1
  002a3	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002a6	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  002a9	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002ac	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  002b3	c1 f8 08	 sar	 eax, 8
  002b6	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002b9	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  002bc	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002bf	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  002c2	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  002c5	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002c8	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  002cb	83 c0 01	 add	 eax, 1
  002ce	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002d1	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  002d4	0f b7 55 d4	 movzx	 edx, WORD PTR _val$13[ebp]
  002d8	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002db	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  002e0	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  002e6	d3 fa		 sar	 edx, cl
  002e8	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002eb	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  002f2	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002f5	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  002fb	8b 4d d8	 mov	 ecx, DWORD PTR _len$14[ebp]
  002fe	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00302	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00305	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  0030b	eb 44		 jmp	 SHORT $LN19@send_tree
$LN18@send_tree:
  0030d	8b 4d f4	 mov	 ecx, DWORD PTR _curlen$[ebp]
  00310	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00313	0f b7 84 8a 7c
	0a 00 00	 movzx	 eax, WORD PTR [edx+ecx*4+2684]
  0031b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0031e	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  00324	d3 e0		 shl	 eax, cl
  00326	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00329	0f b7 8a b8 16
	00 00		 movzx	 ecx, WORD PTR [edx+5816]
  00330	0b c8		 or	 ecx, eax
  00332	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00335	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  0033c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0033f	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00345	03 4d d8	 add	 ecx, DWORD PTR _len$14[ebp]
  00348	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0034b	89 8a bc 16 00
	00		 mov	 DWORD PTR [edx+5820], ecx
$LN19@send_tree:
  00351	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  00354	83 e8 01	 sub	 eax, 1
  00357	89 45 ec	 mov	 DWORD PTR _count$[ebp], eax
$LN17@send_tree:

; 774  :             }
; 775  :             Assert(count >= 3 && count <= 6, " 3_6?");
; 776  :             send_code(s, REP_3_6, s->bl_tree); send_bits(s, count-3, 2);

  0035a	b9 04 00 00 00	 mov	 ecx, 4
  0035f	c1 e1 04	 shl	 ecx, 4
  00362	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00365	0f b7 84 0a 7e
	0a 00 00	 movzx	 eax, WORD PTR [edx+ecx+2686]
  0036d	89 45 d0	 mov	 DWORD PTR _len$12[ebp], eax
  00370	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00375	2b 4d d0	 sub	 ecx, DWORD PTR _len$12[ebp]
  00378	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0037b	39 8a bc 16 00
	00		 cmp	 DWORD PTR [edx+5820], ecx
  00381	0f 8e cf 00 00
	00		 jle	 $LN20@send_tree
  00387	b8 04 00 00 00	 mov	 eax, 4
  0038c	c1 e0 04	 shl	 eax, 4
  0038f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00392	0f b7 94 01 7c
	0a 00 00	 movzx	 edx, WORD PTR [ecx+eax+2684]
  0039a	89 55 cc	 mov	 DWORD PTR _val$11[ebp], edx
  0039d	0f b7 45 cc	 movzx	 eax, WORD PTR _val$11[ebp]
  003a1	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003a4	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  003aa	d3 e0		 shl	 eax, cl
  003ac	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003af	0f b7 8a b8 16
	00 00		 movzx	 ecx, WORD PTR [edx+5816]
  003b6	0b c8		 or	 ecx, eax
  003b8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003bb	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  003c2	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003c5	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  003cc	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  003d2	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003d5	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  003d8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003db	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  003de	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  003e1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003e4	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  003e7	83 c1 01	 add	 ecx, 1
  003ea	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003ed	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  003f0	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003f3	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  003fa	c1 f9 08	 sar	 ecx, 8
  003fd	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00400	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00403	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00406	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  00409	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  0040c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0040f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00412	83 c1 01	 add	 ecx, 1
  00415	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00418	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  0041b	0f b7 45 cc	 movzx	 eax, WORD PTR _val$11[ebp]
  0041f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00422	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00427	2b 91 bc 16 00
	00		 sub	 edx, DWORD PTR [ecx+5820]
  0042d	8b ca		 mov	 ecx, edx
  0042f	d3 f8		 sar	 eax, cl
  00431	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00434	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  0043b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0043e	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00444	8b 4d d0	 mov	 ecx, DWORD PTR _len$12[ebp]
  00447	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  0044b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0044e	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  00454	eb 49		 jmp	 SHORT $LN21@send_tree
$LN20@send_tree:
  00456	b9 04 00 00 00	 mov	 ecx, 4
  0045b	c1 e1 04	 shl	 ecx, 4
  0045e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00461	0f b7 84 0a 7c
	0a 00 00	 movzx	 eax, WORD PTR [edx+ecx+2684]
  00469	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0046c	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  00472	d3 e0		 shl	 eax, cl
  00474	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00477	0f b7 8a b8 16
	00 00		 movzx	 ecx, WORD PTR [edx+5816]
  0047e	0b c8		 or	 ecx, eax
  00480	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00483	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  0048a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0048d	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00493	03 4d d0	 add	 ecx, DWORD PTR _len$12[ebp]
  00496	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00499	89 8a bc 16 00
	00		 mov	 DWORD PTR [edx+5820], ecx
$LN21@send_tree:
  0049f	c7 45 c8 02 00
	00 00		 mov	 DWORD PTR _len$10[ebp], 2
  004a6	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  004ab	2b 45 c8	 sub	 eax, DWORD PTR _len$10[ebp]
  004ae	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004b1	39 81 bc 16 00
	00		 cmp	 DWORD PTR [ecx+5820], eax
  004b7	0f 8e c2 00 00
	00		 jle	 $LN22@send_tree
  004bd	8b 55 ec	 mov	 edx, DWORD PTR _count$[ebp]
  004c0	83 ea 03	 sub	 edx, 3
  004c3	89 55 c4	 mov	 DWORD PTR _val$9[ebp], edx
  004c6	0f b7 45 c4	 movzx	 eax, WORD PTR _val$9[ebp]
  004ca	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004cd	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  004d3	d3 e0		 shl	 eax, cl
  004d5	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004d8	0f b7 8a b8 16
	00 00		 movzx	 ecx, WORD PTR [edx+5816]
  004df	0b c8		 or	 ecx, eax
  004e1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004e4	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  004eb	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004ee	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  004f5	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  004fb	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004fe	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00501	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00504	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  00507	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  0050a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0050d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00510	83 c1 01	 add	 ecx, 1
  00513	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00516	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  00519	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0051c	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  00523	c1 f9 08	 sar	 ecx, 8
  00526	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00529	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0052c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0052f	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  00532	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00535	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00538	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0053b	83 c1 01	 add	 ecx, 1
  0053e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00541	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  00544	0f b7 45 c4	 movzx	 eax, WORD PTR _val$9[ebp]
  00548	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0054b	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00550	2b 91 bc 16 00
	00		 sub	 edx, DWORD PTR [ecx+5820]
  00556	8b ca		 mov	 ecx, edx
  00558	d3 f8		 sar	 eax, cl
  0055a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0055d	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00564	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00567	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0056d	8b 4d c8	 mov	 ecx, DWORD PTR _len$10[ebp]
  00570	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00574	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00577	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  0057d	eb 3f		 jmp	 SHORT $LN23@send_tree
$LN22@send_tree:
  0057f	8b 4d ec	 mov	 ecx, DWORD PTR _count$[ebp]
  00582	83 e9 03	 sub	 ecx, 3
  00585	0f b7 d1	 movzx	 edx, cx
  00588	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0058b	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00591	d3 e2		 shl	 edx, cl
  00593	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00596	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  0059d	0b c2		 or	 eax, edx
  0059f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  005a2	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  005a9	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  005ac	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  005b2	03 45 c8	 add	 eax, DWORD PTR _len$10[ebp]
  005b5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  005b8	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN23@send_tree:
  005be	e9 d1 04 00 00	 jmp	 $LN10@send_tree
$LN15@send_tree:

; 777  : 
; 778  :         } else if (count <= 10) {

  005c3	83 7d ec 0a	 cmp	 DWORD PTR _count$[ebp], 10 ; 0000000aH
  005c7	0f 8f 66 02 00
	00		 jg	 $LN24@send_tree

; 779  :             send_code(s, REPZ_3_10, s->bl_tree); send_bits(s, count-3, 3);

  005cd	ba 04 00 00 00	 mov	 edx, 4
  005d2	6b c2 11	 imul	 eax, edx, 17
  005d5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  005d8	0f b7 94 01 7e
	0a 00 00	 movzx	 edx, WORD PTR [ecx+eax+2686]
  005e0	89 55 c0	 mov	 DWORD PTR _len$8[ebp], edx
  005e3	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  005e8	2b 45 c0	 sub	 eax, DWORD PTR _len$8[ebp]
  005eb	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  005ee	39 81 bc 16 00
	00		 cmp	 DWORD PTR [ecx+5820], eax
  005f4	0f 8e cf 00 00
	00		 jle	 $LN26@send_tree
  005fa	ba 04 00 00 00	 mov	 edx, 4
  005ff	6b c2 11	 imul	 eax, edx, 17
  00602	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00605	0f b7 94 01 7c
	0a 00 00	 movzx	 edx, WORD PTR [ecx+eax+2684]
  0060d	89 55 bc	 mov	 DWORD PTR _val$7[ebp], edx
  00610	0f b7 45 bc	 movzx	 eax, WORD PTR _val$7[ebp]
  00614	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00617	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  0061d	d3 e0		 shl	 eax, cl
  0061f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00622	0f b7 8a b8 16
	00 00		 movzx	 ecx, WORD PTR [edx+5816]
  00629	0b c8		 or	 ecx, eax
  0062b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0062e	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  00635	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00638	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  0063f	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00645	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00648	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0064b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0064e	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  00651	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00654	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00657	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0065a	83 c1 01	 add	 ecx, 1
  0065d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00660	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  00663	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00666	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  0066d	c1 f9 08	 sar	 ecx, 8
  00670	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00673	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00676	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00679	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  0067c	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  0067f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00682	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00685	83 c1 01	 add	 ecx, 1
  00688	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0068b	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  0068e	0f b7 45 bc	 movzx	 eax, WORD PTR _val$7[ebp]
  00692	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00695	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0069a	2b 91 bc 16 00
	00		 sub	 edx, DWORD PTR [ecx+5820]
  006a0	8b ca		 mov	 ecx, edx
  006a2	d3 f8		 sar	 eax, cl
  006a4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  006a7	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  006ae	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  006b1	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  006b7	8b 4d c0	 mov	 ecx, DWORD PTR _len$8[ebp]
  006ba	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  006be	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  006c1	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  006c7	eb 49		 jmp	 SHORT $LN27@send_tree
$LN26@send_tree:
  006c9	b9 04 00 00 00	 mov	 ecx, 4
  006ce	6b d1 11	 imul	 edx, ecx, 17
  006d1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  006d4	0f b7 94 10 7c
	0a 00 00	 movzx	 edx, WORD PTR [eax+edx+2684]
  006dc	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  006df	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  006e5	d3 e2		 shl	 edx, cl
  006e7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  006ea	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  006f1	0b c2		 or	 eax, edx
  006f3	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  006f6	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  006fd	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00700	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00706	03 45 c0	 add	 eax, DWORD PTR _len$8[ebp]
  00709	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0070c	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN27@send_tree:
  00712	c7 45 b8 03 00
	00 00		 mov	 DWORD PTR _len$6[ebp], 3
  00719	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0071e	2b 55 b8	 sub	 edx, DWORD PTR _len$6[ebp]
  00721	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00724	39 90 bc 16 00
	00		 cmp	 DWORD PTR [eax+5820], edx
  0072a	0f 8e bf 00 00
	00		 jle	 $LN28@send_tree
  00730	8b 4d ec	 mov	 ecx, DWORD PTR _count$[ebp]
  00733	83 e9 03	 sub	 ecx, 3
  00736	89 4d b4	 mov	 DWORD PTR _val$5[ebp], ecx
  00739	0f b7 55 b4	 movzx	 edx, WORD PTR _val$5[ebp]
  0073d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00740	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00746	d3 e2		 shl	 edx, cl
  00748	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0074b	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  00752	0b c2		 or	 eax, edx
  00754	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00757	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  0075e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00761	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  00768	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0076d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00770	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00773	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00776	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00779	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  0077c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0077f	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00782	83 c0 01	 add	 eax, 1
  00785	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00788	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0078b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0078e	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  00795	c1 f8 08	 sar	 eax, 8
  00798	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0079b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0079e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  007a1	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  007a4	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  007a7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  007aa	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  007ad	83 c0 01	 add	 eax, 1
  007b0	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  007b3	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  007b6	0f b7 55 b4	 movzx	 edx, WORD PTR _val$5[ebp]
  007ba	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  007bd	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  007c2	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  007c8	d3 fa		 sar	 edx, cl
  007ca	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  007cd	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  007d4	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  007d7	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  007dd	8b 4d b8	 mov	 ecx, DWORD PTR _len$6[ebp]
  007e0	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  007e4	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  007e7	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  007ed	eb 3f		 jmp	 SHORT $LN29@send_tree
$LN28@send_tree:
  007ef	8b 4d ec	 mov	 ecx, DWORD PTR _count$[ebp]
  007f2	83 e9 03	 sub	 ecx, 3
  007f5	0f b7 d1	 movzx	 edx, cx
  007f8	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  007fb	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00801	d3 e2		 shl	 edx, cl
  00803	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00806	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  0080d	0b c2		 or	 eax, edx
  0080f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00812	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00819	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0081c	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00822	03 45 b8	 add	 eax, DWORD PTR _len$6[ebp]
  00825	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00828	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN29@send_tree:

; 780  : 
; 781  :         } else {

  0082e	e9 61 02 00 00	 jmp	 $LN10@send_tree
$LN24@send_tree:

; 782  :             send_code(s, REPZ_11_138, s->bl_tree); send_bits(s, count-11, 7);

  00833	ba 04 00 00 00	 mov	 edx, 4
  00838	6b c2 12	 imul	 eax, edx, 18
  0083b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0083e	0f b7 94 01 7e
	0a 00 00	 movzx	 edx, WORD PTR [ecx+eax+2686]
  00846	89 55 b0	 mov	 DWORD PTR _len$4[ebp], edx
  00849	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0084e	2b 45 b0	 sub	 eax, DWORD PTR _len$4[ebp]
  00851	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00854	39 81 bc 16 00
	00		 cmp	 DWORD PTR [ecx+5820], eax
  0085a	0f 8e cf 00 00
	00		 jle	 $LN30@send_tree
  00860	ba 04 00 00 00	 mov	 edx, 4
  00865	6b c2 12	 imul	 eax, edx, 18
  00868	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0086b	0f b7 94 01 7c
	0a 00 00	 movzx	 edx, WORD PTR [ecx+eax+2684]
  00873	89 55 ac	 mov	 DWORD PTR _val$3[ebp], edx
  00876	0f b7 45 ac	 movzx	 eax, WORD PTR _val$3[ebp]
  0087a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0087d	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  00883	d3 e0		 shl	 eax, cl
  00885	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00888	0f b7 8a b8 16
	00 00		 movzx	 ecx, WORD PTR [edx+5816]
  0088f	0b c8		 or	 ecx, eax
  00891	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00894	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  0089b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0089e	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  008a5	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  008ab	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  008ae	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  008b1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  008b4	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  008b7	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  008ba	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  008bd	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  008c0	83 c1 01	 add	 ecx, 1
  008c3	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  008c6	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  008c9	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  008cc	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  008d3	c1 f9 08	 sar	 ecx, 8
  008d6	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  008d9	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  008dc	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  008df	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  008e2	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  008e5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  008e8	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  008eb	83 c1 01	 add	 ecx, 1
  008ee	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  008f1	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  008f4	0f b7 45 ac	 movzx	 eax, WORD PTR _val$3[ebp]
  008f8	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  008fb	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00900	2b 91 bc 16 00
	00		 sub	 edx, DWORD PTR [ecx+5820]
  00906	8b ca		 mov	 ecx, edx
  00908	d3 f8		 sar	 eax, cl
  0090a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0090d	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00914	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00917	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0091d	8b 4d b0	 mov	 ecx, DWORD PTR _len$4[ebp]
  00920	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00924	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00927	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  0092d	eb 49		 jmp	 SHORT $LN31@send_tree
$LN30@send_tree:
  0092f	b9 04 00 00 00	 mov	 ecx, 4
  00934	6b d1 12	 imul	 edx, ecx, 18
  00937	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0093a	0f b7 94 10 7c
	0a 00 00	 movzx	 edx, WORD PTR [eax+edx+2684]
  00942	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00945	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0094b	d3 e2		 shl	 edx, cl
  0094d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00950	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  00957	0b c2		 or	 eax, edx
  00959	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0095c	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00963	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00966	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0096c	03 45 b0	 add	 eax, DWORD PTR _len$4[ebp]
  0096f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00972	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN31@send_tree:
  00978	c7 45 a8 07 00
	00 00		 mov	 DWORD PTR _len$2[ebp], 7
  0097f	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00984	2b 55 a8	 sub	 edx, DWORD PTR _len$2[ebp]
  00987	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0098a	39 90 bc 16 00
	00		 cmp	 DWORD PTR [eax+5820], edx
  00990	0f 8e bf 00 00
	00		 jle	 $LN32@send_tree
  00996	8b 4d ec	 mov	 ecx, DWORD PTR _count$[ebp]
  00999	83 e9 0b	 sub	 ecx, 11			; 0000000bH
  0099c	89 4d a4	 mov	 DWORD PTR _val$1[ebp], ecx
  0099f	0f b7 55 a4	 movzx	 edx, WORD PTR _val$1[ebp]
  009a3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  009a6	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  009ac	d3 e2		 shl	 edx, cl
  009ae	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  009b1	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  009b8	0b c2		 or	 eax, edx
  009ba	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  009bd	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  009c4	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  009c7	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  009ce	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  009d3	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  009d6	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  009d9	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  009dc	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  009df	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  009e2	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  009e5	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  009e8	83 c0 01	 add	 eax, 1
  009eb	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  009ee	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  009f1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  009f4	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  009fb	c1 f8 08	 sar	 eax, 8
  009fe	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00a01	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00a04	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00a07	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00a0a	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  00a0d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00a10	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00a13	83 c0 01	 add	 eax, 1
  00a16	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00a19	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00a1c	0f b7 55 a4	 movzx	 edx, WORD PTR _val$1[ebp]
  00a20	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00a23	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00a28	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  00a2e	d3 fa		 sar	 edx, cl
  00a30	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00a33	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  00a3a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00a3d	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00a43	8b 4d a8	 mov	 ecx, DWORD PTR _len$2[ebp]
  00a46	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00a4a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00a4d	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  00a53	eb 3f		 jmp	 SHORT $LN10@send_tree
$LN32@send_tree:
  00a55	8b 4d ec	 mov	 ecx, DWORD PTR _count$[ebp]
  00a58	83 e9 0b	 sub	 ecx, 11			; 0000000bH
  00a5b	0f b7 d1	 movzx	 edx, cx
  00a5e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00a61	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00a67	d3 e2		 shl	 edx, cl
  00a69	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00a6c	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  00a73	0b c2		 or	 eax, edx
  00a75	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00a78	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00a7f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00a82	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00a88	03 45 a8	 add	 eax, DWORD PTR _len$2[ebp]
  00a8b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00a8e	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN10@send_tree:

; 783  :         }
; 784  :         count = 0; prevlen = curlen;

  00a94	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00a9b	8b 55 f4	 mov	 edx, DWORD PTR _curlen$[ebp]
  00a9e	89 55 f8	 mov	 DWORD PTR _prevlen$[ebp], edx

; 785  :         if (nextlen == 0) {

  00aa1	83 7d f0 00	 cmp	 DWORD PTR _nextlen$[ebp], 0
  00aa5	75 10		 jne	 SHORT $LN34@send_tree

; 786  :             max_count = 138, min_count = 3;

  00aa7	c7 45 e8 8a 00
	00 00		 mov	 DWORD PTR _max_count$[ebp], 138 ; 0000008aH
  00aae	c7 45 e4 03 00
	00 00		 mov	 DWORD PTR _min_count$[ebp], 3
  00ab5	eb 26		 jmp	 SHORT $LN35@send_tree
$LN34@send_tree:

; 787  :         } else if (curlen == nextlen) {

  00ab7	8b 45 f4	 mov	 eax, DWORD PTR _curlen$[ebp]
  00aba	3b 45 f0	 cmp	 eax, DWORD PTR _nextlen$[ebp]
  00abd	75 10		 jne	 SHORT $LN36@send_tree

; 788  :             max_count = 6, min_count = 3;

  00abf	c7 45 e8 06 00
	00 00		 mov	 DWORD PTR _max_count$[ebp], 6
  00ac6	c7 45 e4 03 00
	00 00		 mov	 DWORD PTR _min_count$[ebp], 3

; 789  :         } else {

  00acd	eb 0e		 jmp	 SHORT $LN35@send_tree
$LN36@send_tree:

; 790  :             max_count = 7, min_count = 4;

  00acf	c7 45 e8 07 00
	00 00		 mov	 DWORD PTR _max_count$[ebp], 7
  00ad6	c7 45 e4 04 00
	00 00		 mov	 DWORD PTR _min_count$[ebp], 4
$LN35@send_tree:

; 791  :         }
; 792  :     }

  00add	e9 8a f5 ff ff	 jmp	 $LN2@send_tree
$LN1@send_tree:

; 793  : }

  00ae2	5f		 pop	 edi
  00ae3	83 c4 5c	 add	 esp, 92			; 0000005cH
  00ae6	3b ec		 cmp	 ebp, esp
  00ae8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00aed	8b e5		 mov	 esp, ebp
  00aef	5d		 pop	 ebp
  00af0	c3		 ret	 0
_send_tree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\trees.c
;	COMDAT _build_bl_tree
_TEXT	SEGMENT
_max_blindex$ = -4					; size = 4
_s$ = 8							; size = 4
_build_bl_tree PROC					; COMDAT

; 801  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00010	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 802  :     int max_blindex;  /* index of last bit length code of non zero freq */
; 803  : 
; 804  :     /* Determine the bit length frequencies for literal and distance trees */
; 805  :     scan_tree(s, (ct_data *)s->dyn_ltree, s->l_desc.max_code);

  00015	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00018	8b 88 1c 0b 00
	00		 mov	 ecx, DWORD PTR [eax+2844]
  0001e	51		 push	 ecx
  0001f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00022	81 c2 94 00 00
	00		 add	 edx, 148		; 00000094H
  00028	52		 push	 edx
  00029	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 _scan_tree
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH

; 806  :     scan_tree(s, (ct_data *)s->dyn_dtree, s->d_desc.max_code);

  00035	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00038	8b 91 28 0b 00
	00		 mov	 edx, DWORD PTR [ecx+2856]
  0003e	52		 push	 edx
  0003f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00042	05 88 09 00 00	 add	 eax, 2440		; 00000988H
  00047	50		 push	 eax
  00048	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 _scan_tree
  00051	83 c4 0c	 add	 esp, 12			; 0000000cH

; 807  : 
; 808  :     /* Build the bit length tree: */
; 809  :     build_tree(s, (tree_desc *)(&(s->bl_desc)));

  00054	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00057	81 c2 30 0b 00
	00		 add	 edx, 2864		; 00000b30H
  0005d	52		 push	 edx
  0005e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 _build_tree
  00067	83 c4 08	 add	 esp, 8

; 810  :     /* opt_len now includes the length of the tree representations, except
; 811  :      * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
; 812  :      */
; 813  : 
; 814  :     /* Determine the number of bit length codes to send. The pkzip format
; 815  :      * requires that at least 4 bit length codes be sent. (appnote.txt says
; 816  :      * 3 but the actual value used is 4.)
; 817  :      */
; 818  :     for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {

  0006a	c7 45 fc 12 00
	00 00		 mov	 DWORD PTR _max_blindex$[ebp], 18 ; 00000012H
  00071	eb 09		 jmp	 SHORT $LN4@build_bl_t
$LN2@build_bl_t:
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _max_blindex$[ebp]
  00076	83 e9 01	 sub	 ecx, 1
  00079	89 4d fc	 mov	 DWORD PTR _max_blindex$[ebp], ecx
$LN4@build_bl_t:
  0007c	83 7d fc 03	 cmp	 DWORD PTR _max_blindex$[ebp], 3
  00080	7c 20		 jl	 SHORT $LN3@build_bl_t

; 819  :         if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;

  00082	0f ae e8	 lfence
  00085	8b 55 fc	 mov	 edx, DWORD PTR _max_blindex$[ebp]
  00088	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _bl_order[edx]
  0008f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00092	0f b7 94 81 7e
	0a 00 00	 movzx	 edx, WORD PTR [ecx+eax*4+2686]
  0009a	85 d2		 test	 edx, edx
  0009c	74 02		 je	 SHORT $LN5@build_bl_t
  0009e	eb 02		 jmp	 SHORT $LN3@build_bl_t
$LN5@build_bl_t:

; 820  :     }

  000a0	eb d1		 jmp	 SHORT $LN2@build_bl_t
$LN3@build_bl_t:

; 821  :     /* Update opt_len to include the bit length tree and counts */
; 822  :     s->opt_len += 3*((ulg)max_blindex+1) + 5+5+4;

  000a2	8b 45 fc	 mov	 eax, DWORD PTR _max_blindex$[ebp]
  000a5	83 c0 01	 add	 eax, 1
  000a8	6b c8 03	 imul	 ecx, eax, 3
  000ab	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000ae	8b 82 a8 16 00
	00		 mov	 eax, DWORD PTR [edx+5800]
  000b4	8d 4c 01 0e	 lea	 ecx, DWORD PTR [ecx+eax+14]
  000b8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000bb	89 8a a8 16 00
	00		 mov	 DWORD PTR [edx+5800], ecx

; 823  :     Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
; 824  :             s->opt_len, s->static_len));
; 825  : 
; 826  :     return max_blindex;

  000c1	8b 45 fc	 mov	 eax, DWORD PTR _max_blindex$[ebp]

; 827  : }

  000c4	83 c4 04	 add	 esp, 4
  000c7	3b ec		 cmp	 ebp, esp
  000c9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c3		 ret	 0
_build_bl_tree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\trees.c
;	COMDAT _send_all_trees
_TEXT	SEGMENT
_val$1 = -36						; size = 4
_len$2 = -32						; size = 4
_val$3 = -28						; size = 4
_len$4 = -24						; size = 4
_val$5 = -20						; size = 4
_len$6 = -16						; size = 4
_val$7 = -12						; size = 4
_len$8 = -8						; size = 4
_rank$ = -4						; size = 4
_s$ = 8							; size = 4
_lcodes$ = 12						; size = 4
_dcodes$ = 16						; size = 4
_blcodes$ = 20						; size = 4
_send_all_trees PROC					; COMDAT

; 837  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0000e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00011	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00014	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00017	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0001a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00020	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00023	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00026	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0002b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 838  :     int rank;                    /* index in bl_order */
; 839  : 
; 840  :     Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
; 841  :     Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
; 842  :             "too many codes");
; 843  :     Tracev((stderr, "\nbl counts: "));
; 844  :     send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */

  00030	c7 45 f8 05 00
	00 00		 mov	 DWORD PTR _len$8[ebp], 5
  00037	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0003c	2b 45 f8	 sub	 eax, DWORD PTR _len$8[ebp]
  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00042	39 81 bc 16 00
	00		 cmp	 DWORD PTR [ecx+5820], eax
  00048	0f 8e c5 00 00
	00		 jle	 $LN5@send_all_t
  0004e	8b 55 0c	 mov	 edx, DWORD PTR _lcodes$[ebp]
  00051	81 ea 01 01 00
	00		 sub	 edx, 257		; 00000101H
  00057	89 55 f4	 mov	 DWORD PTR _val$7[ebp], edx
  0005a	0f b7 45 f4	 movzx	 eax, WORD PTR _val$7[ebp]
  0005e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00061	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  00067	d3 e0		 shl	 eax, cl
  00069	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0006c	0f b7 8a b8 16
	00 00		 movzx	 ecx, WORD PTR [edx+5816]
  00073	0b c8		 or	 ecx, eax
  00075	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00078	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  0007f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00082	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  00089	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0008f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00092	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00095	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00098	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  0009b	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  0009e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000a1	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000a4	83 c1 01	 add	 ecx, 1
  000a7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000aa	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  000ad	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000b0	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  000b7	c1 f9 08	 sar	 ecx, 8
  000ba	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000bd	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000c0	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000c3	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  000c6	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  000c9	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000cc	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000cf	83 c1 01	 add	 ecx, 1
  000d2	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000d5	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  000d8	0f b7 45 f4	 movzx	 eax, WORD PTR _val$7[ebp]
  000dc	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000df	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000e4	2b 91 bc 16 00
	00		 sub	 edx, DWORD PTR [ecx+5820]
  000ea	8b ca		 mov	 ecx, edx
  000ec	d3 f8		 sar	 eax, cl
  000ee	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000f1	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  000f8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000fb	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00101	8b 4d f8	 mov	 ecx, DWORD PTR _len$8[ebp]
  00104	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00108	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0010b	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  00111	eb 42		 jmp	 SHORT $LN6@send_all_t
$LN5@send_all_t:
  00113	8b 4d 0c	 mov	 ecx, DWORD PTR _lcodes$[ebp]
  00116	81 e9 01 01 00
	00		 sub	 ecx, 257		; 00000101H
  0011c	0f b7 d1	 movzx	 edx, cx
  0011f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00122	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00128	d3 e2		 shl	 edx, cl
  0012a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0012d	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  00134	0b c2		 or	 eax, edx
  00136	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00139	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00140	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00143	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00149	03 45 f8	 add	 eax, DWORD PTR _len$8[ebp]
  0014c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0014f	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN6@send_all_t:

; 845  :     send_bits(s, dcodes-1,   5);

  00155	c7 45 f0 05 00
	00 00		 mov	 DWORD PTR _len$6[ebp], 5
  0015c	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00161	2b 55 f0	 sub	 edx, DWORD PTR _len$6[ebp]
  00164	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00167	39 90 bc 16 00
	00		 cmp	 DWORD PTR [eax+5820], edx
  0016d	0f 8e bf 00 00
	00		 jle	 $LN7@send_all_t
  00173	8b 4d 10	 mov	 ecx, DWORD PTR _dcodes$[ebp]
  00176	83 e9 01	 sub	 ecx, 1
  00179	89 4d ec	 mov	 DWORD PTR _val$5[ebp], ecx
  0017c	0f b7 55 ec	 movzx	 edx, WORD PTR _val$5[ebp]
  00180	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00183	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00189	d3 e2		 shl	 edx, cl
  0018b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0018e	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  00195	0b c2		 or	 eax, edx
  00197	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0019a	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  001a1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001a4	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  001ab	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001b0	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001b3	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  001b6	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001b9	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  001bc	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  001bf	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001c2	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  001c5	83 c0 01	 add	 eax, 1
  001c8	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001cb	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  001ce	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001d1	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  001d8	c1 f8 08	 sar	 eax, 8
  001db	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001de	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  001e1	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001e4	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  001e7	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  001ea	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001ed	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  001f0	83 c0 01	 add	 eax, 1
  001f3	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001f6	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  001f9	0f b7 55 ec	 movzx	 edx, WORD PTR _val$5[ebp]
  001fd	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00200	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00205	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  0020b	d3 fa		 sar	 edx, cl
  0020d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00210	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  00217	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0021a	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00220	8b 4d f0	 mov	 ecx, DWORD PTR _len$6[ebp]
  00223	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00227	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0022a	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  00230	eb 3f		 jmp	 SHORT $LN8@send_all_t
$LN7@send_all_t:
  00232	8b 4d 10	 mov	 ecx, DWORD PTR _dcodes$[ebp]
  00235	83 e9 01	 sub	 ecx, 1
  00238	0f b7 d1	 movzx	 edx, cx
  0023b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0023e	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00244	d3 e2		 shl	 edx, cl
  00246	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00249	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  00250	0b c2		 or	 eax, edx
  00252	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00255	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  0025c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0025f	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00265	03 45 f0	 add	 eax, DWORD PTR _len$6[ebp]
  00268	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0026b	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN8@send_all_t:

; 846  :     send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */

  00271	c7 45 e8 04 00
	00 00		 mov	 DWORD PTR _len$4[ebp], 4
  00278	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0027d	2b 55 e8	 sub	 edx, DWORD PTR _len$4[ebp]
  00280	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00283	39 90 bc 16 00
	00		 cmp	 DWORD PTR [eax+5820], edx
  00289	0f 8e bf 00 00
	00		 jle	 $LN9@send_all_t
  0028f	8b 4d 14	 mov	 ecx, DWORD PTR _blcodes$[ebp]
  00292	83 e9 04	 sub	 ecx, 4
  00295	89 4d e4	 mov	 DWORD PTR _val$3[ebp], ecx
  00298	0f b7 55 e4	 movzx	 edx, WORD PTR _val$3[ebp]
  0029c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0029f	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  002a5	d3 e2		 shl	 edx, cl
  002a7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002aa	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  002b1	0b c2		 or	 eax, edx
  002b3	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002b6	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  002bd	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002c0	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  002c7	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  002cc	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002cf	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  002d2	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002d5	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  002d8	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  002db	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002de	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  002e1	83 c0 01	 add	 eax, 1
  002e4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002e7	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  002ea	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002ed	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  002f4	c1 f8 08	 sar	 eax, 8
  002f7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002fa	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  002fd	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00300	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00303	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  00306	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00309	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0030c	83 c0 01	 add	 eax, 1
  0030f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00312	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00315	0f b7 55 e4	 movzx	 edx, WORD PTR _val$3[ebp]
  00319	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0031c	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00321	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  00327	d3 fa		 sar	 edx, cl
  00329	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0032c	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  00333	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00336	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0033c	8b 4d e8	 mov	 ecx, DWORD PTR _len$4[ebp]
  0033f	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00343	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00346	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  0034c	eb 3f		 jmp	 SHORT $LN10@send_all_t
$LN9@send_all_t:
  0034e	8b 4d 14	 mov	 ecx, DWORD PTR _blcodes$[ebp]
  00351	83 e9 04	 sub	 ecx, 4
  00354	0f b7 d1	 movzx	 edx, cx
  00357	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0035a	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00360	d3 e2		 shl	 edx, cl
  00362	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00365	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  0036c	0b c2		 or	 eax, edx
  0036e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00371	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00378	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0037b	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00381	03 45 e8	 add	 eax, DWORD PTR _len$4[ebp]
  00384	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00387	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN10@send_all_t:

; 847  :     for (rank = 0; rank < blcodes; rank++) {

  0038d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _rank$[ebp], 0
  00394	eb 09		 jmp	 SHORT $LN4@send_all_t
$LN2@send_all_t:
  00396	8b 55 fc	 mov	 edx, DWORD PTR _rank$[ebp]
  00399	83 c2 01	 add	 edx, 1
  0039c	89 55 fc	 mov	 DWORD PTR _rank$[ebp], edx
$LN4@send_all_t:
  0039f	8b 45 fc	 mov	 eax, DWORD PTR _rank$[ebp]
  003a2	3b 45 14	 cmp	 eax, DWORD PTR _blcodes$[ebp]
  003a5	0f 8d 42 01 00
	00		 jge	 $LN3@send_all_t

; 848  :         Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
; 849  :         send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);

  003ab	c7 45 e0 03 00
	00 00		 mov	 DWORD PTR _len$2[ebp], 3
  003b2	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  003b7	2b 4d e0	 sub	 ecx, DWORD PTR _len$2[ebp]
  003ba	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003bd	39 8a bc 16 00
	00		 cmp	 DWORD PTR [edx+5820], ecx
  003c3	0f 8e d1 00 00
	00		 jle	 $LN11@send_all_t
  003c9	0f ae e8	 lfence
  003cc	8b 45 fc	 mov	 eax, DWORD PTR _rank$[ebp]
  003cf	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _bl_order[eax]
  003d6	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003d9	0f b7 84 8a 7e
	0a 00 00	 movzx	 eax, WORD PTR [edx+ecx*4+2686]
  003e1	89 45 dc	 mov	 DWORD PTR _val$1[ebp], eax
  003e4	0f b7 55 dc	 movzx	 edx, WORD PTR _val$1[ebp]
  003e8	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003eb	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  003f1	d3 e2		 shl	 edx, cl
  003f3	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003f6	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  003fd	0b c2		 or	 eax, edx
  003ff	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00402	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00409	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0040c	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  00413	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00418	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0041b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0041e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00421	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00424	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  00427	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0042a	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0042d	83 c0 01	 add	 eax, 1
  00430	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00433	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00436	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00439	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  00440	c1 f8 08	 sar	 eax, 8
  00443	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00446	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00449	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0044c	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0044f	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  00452	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00455	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00458	83 c0 01	 add	 eax, 1
  0045b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0045e	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00461	0f b7 55 dc	 movzx	 edx, WORD PTR _val$1[ebp]
  00465	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00468	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0046d	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  00473	d3 fa		 sar	 edx, cl
  00475	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00478	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  0047f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00482	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00488	8b 4d e0	 mov	 ecx, DWORD PTR _len$2[ebp]
  0048b	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  0048f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00492	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  00498	eb 4e		 jmp	 SHORT $LN12@send_all_t
$LN11@send_all_t:
  0049a	0f ae e8	 lfence
  0049d	8b 4d fc	 mov	 ecx, DWORD PTR _rank$[ebp]
  004a0	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _bl_order[ecx]
  004a7	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004aa	0f b7 94 90 7e
	0a 00 00	 movzx	 edx, WORD PTR [eax+edx*4+2686]
  004b2	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004b5	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  004bb	d3 e2		 shl	 edx, cl
  004bd	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004c0	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  004c7	0b c2		 or	 eax, edx
  004c9	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004cc	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  004d3	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004d6	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  004dc	03 45 e0	 add	 eax, DWORD PTR _len$2[ebp]
  004df	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004e2	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN12@send_all_t:

; 850  :     }

  004e8	e9 a9 fe ff ff	 jmp	 $LN2@send_all_t
$LN3@send_all_t:

; 851  :     Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));
; 852  : 
; 853  :     send_tree(s, (ct_data *)s->dyn_ltree, lcodes-1); /* literal tree */

  004ed	8b 55 0c	 mov	 edx, DWORD PTR _lcodes$[ebp]
  004f0	83 ea 01	 sub	 edx, 1
  004f3	52		 push	 edx
  004f4	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004f7	05 94 00 00 00	 add	 eax, 148		; 00000094H
  004fc	50		 push	 eax
  004fd	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00500	51		 push	 ecx
  00501	e8 00 00 00 00	 call	 _send_tree
  00506	83 c4 0c	 add	 esp, 12			; 0000000cH

; 854  :     Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));
; 855  : 
; 856  :     send_tree(s, (ct_data *)s->dyn_dtree, dcodes-1); /* distance tree */

  00509	8b 55 10	 mov	 edx, DWORD PTR _dcodes$[ebp]
  0050c	83 ea 01	 sub	 edx, 1
  0050f	52		 push	 edx
  00510	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00513	05 88 09 00 00	 add	 eax, 2440		; 00000988H
  00518	50		 push	 eax
  00519	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0051c	51		 push	 ecx
  0051d	e8 00 00 00 00	 call	 _send_tree
  00522	83 c4 0c	 add	 esp, 12			; 0000000cH

; 857  :     Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
; 858  : }

  00525	83 c4 24	 add	 esp, 36			; 00000024H
  00528	3b ec		 cmp	 ebp, esp
  0052a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0052f	8b e5		 mov	 esp, ebp
  00531	5d		 pop	 ebp
  00532	c3		 ret	 0
_send_all_trees ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\trees.c
;	COMDAT _compress_block
_TEXT	SEGMENT
tv317 = -72						; size = 4
_val$1 = -68						; size = 4
_len$2 = -64						; size = 4
_val$3 = -60						; size = 4
_len$4 = -56						; size = 4
_val$5 = -52						; size = 4
_len$6 = -48						; size = 4
_val$7 = -44						; size = 4
_len$8 = -40						; size = 4
_val$9 = -36						; size = 4
_len$10 = -32						; size = 4
_val$11 = -28						; size = 4
_len$12 = -24						; size = 4
_extra$ = -20						; size = 4
_code$ = -16						; size = 4
_lx$ = -12						; size = 4
_lc$ = -8						; size = 4
_dist$ = -4						; size = 4
_s$ = 8							; size = 4
_ltree$ = 12						; size = 4
_dtree$ = 16						; size = 4
_compress_block PROC					; COMDAT

; 1068 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	57		 push	 edi
  00007	8d 7d b8	 lea	 edi, DWORD PTR [ebp-72]
  0000a	b9 12 00 00 00	 mov	 ecx, 18			; 00000012H
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1069 :     unsigned dist;      /* distance of matched string */
; 1070 :     int lc;             /* match length or unmatched char (if dist == 0) */
; 1071 :     unsigned lx = 0;    /* running index in l_buf */

  00020	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _lx$[ebp], 0

; 1072 :     unsigned code;      /* the code to send */
; 1073 :     int extra;          /* number of extra bits to send */
; 1074 : 
; 1075 :     if (s->last_lit != 0) do {

  00027	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0002a	83 b8 a0 16 00
	00 00		 cmp	 DWORD PTR [eax+5792], 0
  00031	0f 84 8e 06 00
	00		 je	 $LN5@compress_b
$LN4@compress_b:

; 1076 :         dist = s->d_buf[lx];

  00037	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0003a	8b 91 a4 16 00
	00		 mov	 edx, DWORD PTR [ecx+5796]
  00040	8b 45 f4	 mov	 eax, DWORD PTR _lx$[ebp]
  00043	0f b7 0c 42	 movzx	 ecx, WORD PTR [edx+eax*2]
  00047	89 4d fc	 mov	 DWORD PTR _dist$[ebp], ecx

; 1077 :         lc = s->l_buf[lx++];

  0004a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0004d	8b 82 98 16 00
	00		 mov	 eax, DWORD PTR [edx+5784]
  00053	8b 4d f4	 mov	 ecx, DWORD PTR _lx$[ebp]
  00056	0f b6 14 08	 movzx	 edx, BYTE PTR [eax+ecx]
  0005a	89 55 f8	 mov	 DWORD PTR _lc$[ebp], edx
  0005d	8b 45 f4	 mov	 eax, DWORD PTR _lx$[ebp]
  00060	83 c0 01	 add	 eax, 1
  00063	89 45 f4	 mov	 DWORD PTR _lx$[ebp], eax

; 1078 :         if (dist == 0) {

  00066	83 7d fc 00	 cmp	 DWORD PTR _dist$[ebp], 0
  0006a	0f 85 30 01 00
	00		 jne	 $LN6@compress_b

; 1079 :             send_code(s, lc, ltree); /* send a literal byte */

  00070	8b 4d f8	 mov	 ecx, DWORD PTR _lc$[ebp]
  00073	8b 55 0c	 mov	 edx, DWORD PTR _ltree$[ebp]
  00076	0f b7 44 8a 02	 movzx	 eax, WORD PTR [edx+ecx*4+2]
  0007b	89 45 e8	 mov	 DWORD PTR _len$12[ebp], eax
  0007e	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00083	2b 4d e8	 sub	 ecx, DWORD PTR _len$12[ebp]
  00086	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00089	39 8a bc 16 00
	00		 cmp	 DWORD PTR [edx+5820], ecx
  0008f	0f 8e c6 00 00
	00		 jle	 $LN8@compress_b
  00095	8b 45 f8	 mov	 eax, DWORD PTR _lc$[ebp]
  00098	8b 4d 0c	 mov	 ecx, DWORD PTR _ltree$[ebp]
  0009b	0f b7 14 81	 movzx	 edx, WORD PTR [ecx+eax*4]
  0009f	89 55 e4	 mov	 DWORD PTR _val$11[ebp], edx
  000a2	0f b7 45 e4	 movzx	 eax, WORD PTR _val$11[ebp]
  000a6	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000a9	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  000af	d3 e0		 shl	 eax, cl
  000b1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000b4	0f b7 8a b8 16
	00 00		 movzx	 ecx, WORD PTR [edx+5816]
  000bb	0b c8		 or	 ecx, eax
  000bd	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000c0	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  000c7	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000ca	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  000d1	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  000d7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000da	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000dd	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000e0	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  000e3	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  000e6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000e9	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000ec	83 c1 01	 add	 ecx, 1
  000ef	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000f2	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  000f5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000f8	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  000ff	c1 f9 08	 sar	 ecx, 8
  00102	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00105	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00108	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0010b	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  0010e	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00111	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00114	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00117	83 c1 01	 add	 ecx, 1
  0011a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0011d	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  00120	0f b7 45 e4	 movzx	 eax, WORD PTR _val$11[ebp]
  00124	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00127	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0012c	2b 91 bc 16 00
	00		 sub	 edx, DWORD PTR [ecx+5820]
  00132	8b ca		 mov	 ecx, edx
  00134	d3 f8		 sar	 eax, cl
  00136	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00139	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00140	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00143	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00149	8b 4d e8	 mov	 ecx, DWORD PTR _len$12[ebp]
  0014c	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00150	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00153	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  00159	eb 40		 jmp	 SHORT $LN9@compress_b
$LN8@compress_b:
  0015b	8b 4d f8	 mov	 ecx, DWORD PTR _lc$[ebp]
  0015e	8b 55 0c	 mov	 edx, DWORD PTR _ltree$[ebp]
  00161	0f b7 04 8a	 movzx	 eax, WORD PTR [edx+ecx*4]
  00165	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00168	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  0016e	d3 e0		 shl	 eax, cl
  00170	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00173	0f b7 8a b8 16
	00 00		 movzx	 ecx, WORD PTR [edx+5816]
  0017a	0b c8		 or	 ecx, eax
  0017c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0017f	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  00186	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00189	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0018f	03 4d e8	 add	 ecx, DWORD PTR _len$12[ebp]
  00192	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00195	89 8a bc 16 00
	00		 mov	 DWORD PTR [edx+5820], ecx
$LN9@compress_b:

; 1080 :             Tracecv(isgraph(lc), (stderr," '%c' ", lc));
; 1081 :         } else {

  0019b	e9 13 05 00 00	 jmp	 $LN2@compress_b
$LN6@compress_b:

; 1082 :             /* Here, lc is the match length - MIN_MATCH */
; 1083 :             code = _length_code[lc];

  001a0	8b 45 f8	 mov	 eax, DWORD PTR _lc$[ebp]
  001a3	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR __length_code[eax]
  001aa	89 4d f0	 mov	 DWORD PTR _code$[ebp], ecx

; 1084 :             send_code(s, code+LITERALS+1, ltree); /* send the length code */

  001ad	8b 55 f0	 mov	 edx, DWORD PTR _code$[ebp]
  001b0	8b 45 0c	 mov	 eax, DWORD PTR _ltree$[ebp]
  001b3	0f b7 8c 90 06
	04 00 00	 movzx	 ecx, WORD PTR [eax+edx*4+1030]
  001bb	89 4d e0	 mov	 DWORD PTR _len$10[ebp], ecx
  001be	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  001c3	2b 55 e0	 sub	 edx, DWORD PTR _len$10[ebp]
  001c6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001c9	39 90 bc 16 00
	00		 cmp	 DWORD PTR [eax+5820], edx
  001cf	0f 8e c7 00 00
	00		 jle	 $LN10@compress_b
  001d5	8b 4d f0	 mov	 ecx, DWORD PTR _code$[ebp]
  001d8	8b 55 0c	 mov	 edx, DWORD PTR _ltree$[ebp]
  001db	0f b7 84 8a 04
	04 00 00	 movzx	 eax, WORD PTR [edx+ecx*4+1028]
  001e3	89 45 dc	 mov	 DWORD PTR _val$9[ebp], eax
  001e6	0f b7 55 dc	 movzx	 edx, WORD PTR _val$9[ebp]
  001ea	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001ed	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  001f3	d3 e2		 shl	 edx, cl
  001f5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001f8	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  001ff	0b c2		 or	 eax, edx
  00201	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00204	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  0020b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0020e	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  00215	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0021a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0021d	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00220	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00223	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00226	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  00229	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0022c	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0022f	83 c0 01	 add	 eax, 1
  00232	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00235	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00238	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0023b	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  00242	c1 f8 08	 sar	 eax, 8
  00245	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00248	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0024b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0024e	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00251	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  00254	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00257	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0025a	83 c0 01	 add	 eax, 1
  0025d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00260	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00263	0f b7 55 dc	 movzx	 edx, WORD PTR _val$9[ebp]
  00267	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0026a	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0026f	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  00275	d3 fa		 sar	 edx, cl
  00277	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0027a	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  00281	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00284	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0028a	8b 4d e0	 mov	 ecx, DWORD PTR _len$10[ebp]
  0028d	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00291	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00294	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  0029a	eb 44		 jmp	 SHORT $LN11@compress_b
$LN10@compress_b:
  0029c	8b 4d f0	 mov	 ecx, DWORD PTR _code$[ebp]
  0029f	8b 55 0c	 mov	 edx, DWORD PTR _ltree$[ebp]
  002a2	0f b7 84 8a 04
	04 00 00	 movzx	 eax, WORD PTR [edx+ecx*4+1028]
  002aa	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002ad	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  002b3	d3 e0		 shl	 eax, cl
  002b5	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002b8	0f b7 8a b8 16
	00 00		 movzx	 ecx, WORD PTR [edx+5816]
  002bf	0b c8		 or	 ecx, eax
  002c1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002c4	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  002cb	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002ce	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  002d4	03 4d e0	 add	 ecx, DWORD PTR _len$10[ebp]
  002d7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002da	89 8a bc 16 00
	00		 mov	 DWORD PTR [edx+5820], ecx
$LN11@compress_b:

; 1085 :             extra = extra_lbits[code];

  002e0	8b 45 f0	 mov	 eax, DWORD PTR _code$[ebp]
  002e3	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _extra_lbits[eax*4]
  002ea	89 4d ec	 mov	 DWORD PTR _extra$[ebp], ecx

; 1086 :             if (extra != 0) {

  002ed	83 7d ec 00	 cmp	 DWORD PTR _extra$[ebp], 0
  002f1	0f 84 23 01 00
	00		 je	 $LN12@compress_b

; 1087 :                 lc -= base_length[code];

  002f7	8b 55 f0	 mov	 edx, DWORD PTR _code$[ebp]
  002fa	8b 45 f8	 mov	 eax, DWORD PTR _lc$[ebp]
  002fd	2b 04 95 00 00
	00 00		 sub	 eax, DWORD PTR _base_length[edx*4]
  00304	89 45 f8	 mov	 DWORD PTR _lc$[ebp], eax

; 1088 :                 send_bits(s, lc, extra);       /* send the extra length bits */

  00307	8b 4d ec	 mov	 ecx, DWORD PTR _extra$[ebp]
  0030a	89 4d d8	 mov	 DWORD PTR _len$8[ebp], ecx
  0030d	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00312	2b 55 d8	 sub	 edx, DWORD PTR _len$8[ebp]
  00315	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00318	39 90 bc 16 00
	00		 cmp	 DWORD PTR [eax+5820], edx
  0031e	0f 8e bc 00 00
	00		 jle	 $LN13@compress_b
  00324	8b 4d f8	 mov	 ecx, DWORD PTR _lc$[ebp]
  00327	89 4d d4	 mov	 DWORD PTR _val$7[ebp], ecx
  0032a	0f b7 55 d4	 movzx	 edx, WORD PTR _val$7[ebp]
  0032e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00331	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00337	d3 e2		 shl	 edx, cl
  00339	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0033c	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  00343	0b c2		 or	 eax, edx
  00345	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00348	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  0034f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00352	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  00359	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0035e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00361	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00364	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00367	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0036a	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  0036d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00370	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00373	83 c0 01	 add	 eax, 1
  00376	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00379	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0037c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0037f	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  00386	c1 f8 08	 sar	 eax, 8
  00389	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0038c	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0038f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00392	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00395	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  00398	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0039b	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0039e	83 c0 01	 add	 eax, 1
  003a1	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003a4	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  003a7	0f b7 55 d4	 movzx	 edx, WORD PTR _val$7[ebp]
  003ab	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003ae	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  003b3	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  003b9	d3 fa		 sar	 edx, cl
  003bb	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003be	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  003c5	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003c8	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  003ce	8b 4d d8	 mov	 ecx, DWORD PTR _len$8[ebp]
  003d1	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  003d5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003d8	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  003de	eb 3a		 jmp	 SHORT $LN12@compress_b
$LN13@compress_b:
  003e0	0f b7 55 f8	 movzx	 edx, WORD PTR _lc$[ebp]
  003e4	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003e7	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  003ed	d3 e2		 shl	 edx, cl
  003ef	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003f2	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  003f9	0b c2		 or	 eax, edx
  003fb	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003fe	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00405	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00408	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0040e	03 45 d8	 add	 eax, DWORD PTR _len$8[ebp]
  00411	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00414	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN12@compress_b:

; 1089 :             }
; 1090 :             dist--; /* dist is now the match distance - 1 */

  0041a	8b 55 fc	 mov	 edx, DWORD PTR _dist$[ebp]
  0041d	83 ea 01	 sub	 edx, 1
  00420	89 55 fc	 mov	 DWORD PTR _dist$[ebp], edx

; 1091 :             code = d_code(dist);

  00423	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _dist$[ebp], 256 ; 00000100H
  0042a	73 0f		 jae	 SHORT $LN23@compress_b
  0042c	8b 45 fc	 mov	 eax, DWORD PTR _dist$[ebp]
  0042f	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR __dist_code[eax]
  00436	89 4d b8	 mov	 DWORD PTR tv317[ebp], ecx
  00439	eb 10		 jmp	 SHORT $LN24@compress_b
$LN23@compress_b:
  0043b	8b 55 fc	 mov	 edx, DWORD PTR _dist$[ebp]
  0043e	c1 ea 07	 shr	 edx, 7
  00441	0f b6 82 00 01
	00 00		 movzx	 eax, BYTE PTR __dist_code[edx+256]
  00448	89 45 b8	 mov	 DWORD PTR tv317[ebp], eax
$LN24@compress_b:
  0044b	8b 4d b8	 mov	 ecx, DWORD PTR tv317[ebp]
  0044e	89 4d f0	 mov	 DWORD PTR _code$[ebp], ecx

; 1092 :             Assert (code < D_CODES, "bad d_code");
; 1093 : 
; 1094 :             send_code(s, code, dtree);       /* send the distance code */

  00451	8b 55 f0	 mov	 edx, DWORD PTR _code$[ebp]
  00454	8b 45 10	 mov	 eax, DWORD PTR _dtree$[ebp]
  00457	0f b7 4c 90 02	 movzx	 ecx, WORD PTR [eax+edx*4+2]
  0045c	89 4d d0	 mov	 DWORD PTR _len$6[ebp], ecx
  0045f	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00464	2b 55 d0	 sub	 edx, DWORD PTR _len$6[ebp]
  00467	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0046a	39 90 bc 16 00
	00		 cmp	 DWORD PTR [eax+5820], edx
  00470	0f 8e c3 00 00
	00		 jle	 $LN15@compress_b
  00476	8b 4d f0	 mov	 ecx, DWORD PTR _code$[ebp]
  00479	8b 55 10	 mov	 edx, DWORD PTR _dtree$[ebp]
  0047c	0f b7 04 8a	 movzx	 eax, WORD PTR [edx+ecx*4]
  00480	89 45 cc	 mov	 DWORD PTR _val$5[ebp], eax
  00483	0f b7 55 cc	 movzx	 edx, WORD PTR _val$5[ebp]
  00487	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0048a	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00490	d3 e2		 shl	 edx, cl
  00492	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00495	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  0049c	0b c2		 or	 eax, edx
  0049e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004a1	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  004a8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004ab	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  004b2	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  004b7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004ba	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  004bd	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004c0	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  004c3	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  004c6	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004c9	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  004cc	83 c0 01	 add	 eax, 1
  004cf	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004d2	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  004d5	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004d8	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  004df	c1 f8 08	 sar	 eax, 8
  004e2	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004e5	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  004e8	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004eb	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  004ee	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  004f1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004f4	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  004f7	83 c0 01	 add	 eax, 1
  004fa	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004fd	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00500	0f b7 55 cc	 movzx	 edx, WORD PTR _val$5[ebp]
  00504	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00507	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0050c	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  00512	d3 fa		 sar	 edx, cl
  00514	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00517	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  0051e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00521	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00527	8b 4d d0	 mov	 ecx, DWORD PTR _len$6[ebp]
  0052a	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  0052e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00531	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  00537	eb 40		 jmp	 SHORT $LN16@compress_b
$LN15@compress_b:
  00539	8b 4d f0	 mov	 ecx, DWORD PTR _code$[ebp]
  0053c	8b 55 10	 mov	 edx, DWORD PTR _dtree$[ebp]
  0053f	0f b7 04 8a	 movzx	 eax, WORD PTR [edx+ecx*4]
  00543	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00546	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  0054c	d3 e0		 shl	 eax, cl
  0054e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00551	0f b7 8a b8 16
	00 00		 movzx	 ecx, WORD PTR [edx+5816]
  00558	0b c8		 or	 ecx, eax
  0055a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0055d	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  00564	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00567	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0056d	03 4d d0	 add	 ecx, DWORD PTR _len$6[ebp]
  00570	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00573	89 8a bc 16 00
	00		 mov	 DWORD PTR [edx+5820], ecx
$LN16@compress_b:

; 1095 :             extra = extra_dbits[code];

  00579	8b 45 f0	 mov	 eax, DWORD PTR _code$[ebp]
  0057c	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _extra_dbits[eax*4]
  00583	89 4d ec	 mov	 DWORD PTR _extra$[ebp], ecx

; 1096 :             if (extra != 0) {

  00586	83 7d ec 00	 cmp	 DWORD PTR _extra$[ebp], 0
  0058a	0f 84 23 01 00
	00		 je	 $LN2@compress_b

; 1097 :                 dist -= (unsigned)base_dist[code];

  00590	8b 55 f0	 mov	 edx, DWORD PTR _code$[ebp]
  00593	8b 45 fc	 mov	 eax, DWORD PTR _dist$[ebp]
  00596	2b 04 95 00 00
	00 00		 sub	 eax, DWORD PTR _base_dist[edx*4]
  0059d	89 45 fc	 mov	 DWORD PTR _dist$[ebp], eax

; 1098 :                 send_bits(s, dist, extra);   /* send the extra distance bits */

  005a0	8b 4d ec	 mov	 ecx, DWORD PTR _extra$[ebp]
  005a3	89 4d c8	 mov	 DWORD PTR _len$4[ebp], ecx
  005a6	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  005ab	2b 55 c8	 sub	 edx, DWORD PTR _len$4[ebp]
  005ae	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005b1	39 90 bc 16 00
	00		 cmp	 DWORD PTR [eax+5820], edx
  005b7	0f 8e bc 00 00
	00		 jle	 $LN18@compress_b
  005bd	8b 4d fc	 mov	 ecx, DWORD PTR _dist$[ebp]
  005c0	89 4d c4	 mov	 DWORD PTR _val$3[ebp], ecx
  005c3	0f b7 55 c4	 movzx	 edx, WORD PTR _val$3[ebp]
  005c7	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005ca	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  005d0	d3 e2		 shl	 edx, cl
  005d2	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  005d5	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  005dc	0b c2		 or	 eax, edx
  005de	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  005e1	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  005e8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  005eb	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  005f2	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  005f7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  005fa	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  005fd	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00600	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00603	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  00606	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00609	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0060c	83 c0 01	 add	 eax, 1
  0060f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00612	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00615	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00618	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  0061f	c1 f8 08	 sar	 eax, 8
  00622	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00625	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00628	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0062b	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0062e	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  00631	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00634	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00637	83 c0 01	 add	 eax, 1
  0063a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0063d	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00640	0f b7 55 c4	 movzx	 edx, WORD PTR _val$3[ebp]
  00644	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00647	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0064c	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  00652	d3 fa		 sar	 edx, cl
  00654	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00657	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  0065e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00661	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00667	8b 4d c8	 mov	 ecx, DWORD PTR _len$4[ebp]
  0066a	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  0066e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00671	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  00677	eb 3a		 jmp	 SHORT $LN2@compress_b
$LN18@compress_b:
  00679	0f b7 55 fc	 movzx	 edx, WORD PTR _dist$[ebp]
  0067d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00680	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00686	d3 e2		 shl	 edx, cl
  00688	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0068b	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  00692	0b c2		 or	 eax, edx
  00694	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00697	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  0069e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  006a1	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  006a7	03 45 c8	 add	 eax, DWORD PTR _len$4[ebp]
  006aa	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  006ad	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN2@compress_b:

; 1099 :             }
; 1100 :         } /* literal or match pair ? */
; 1101 : 
; 1102 :         /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
; 1103 :         Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
; 1104 :                "pendingBuf overflow");
; 1105 : 
; 1106 :     } while (lx < s->last_lit);

  006b3	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  006b6	8b 45 f4	 mov	 eax, DWORD PTR _lx$[ebp]
  006b9	3b 82 a0 16 00
	00		 cmp	 eax, DWORD PTR [edx+5792]
  006bf	0f 82 72 f9 ff
	ff		 jb	 $LN4@compress_b
$LN5@compress_b:

; 1107 : 
; 1108 :     send_code(s, END_BLOCK, ltree);

  006c5	b9 04 00 00 00	 mov	 ecx, 4
  006ca	c1 e1 08	 shl	 ecx, 8
  006cd	8b 55 0c	 mov	 edx, DWORD PTR _ltree$[ebp]
  006d0	0f b7 44 0a 02	 movzx	 eax, WORD PTR [edx+ecx+2]
  006d5	89 45 c0	 mov	 DWORD PTR _len$2[ebp], eax
  006d8	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  006dd	2b 4d c0	 sub	 ecx, DWORD PTR _len$2[ebp]
  006e0	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  006e3	39 8a bc 16 00
	00		 cmp	 DWORD PTR [edx+5820], ecx
  006e9	0f 8e cb 00 00
	00		 jle	 $LN20@compress_b
  006ef	b8 04 00 00 00	 mov	 eax, 4
  006f4	c1 e0 08	 shl	 eax, 8
  006f7	8b 4d 0c	 mov	 ecx, DWORD PTR _ltree$[ebp]
  006fa	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  006fe	89 55 bc	 mov	 DWORD PTR _val$1[ebp], edx
  00701	0f b7 45 bc	 movzx	 eax, WORD PTR _val$1[ebp]
  00705	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00708	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  0070e	d3 e0		 shl	 eax, cl
  00710	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00713	0f b7 8a b8 16
	00 00		 movzx	 ecx, WORD PTR [edx+5816]
  0071a	0b c8		 or	 ecx, eax
  0071c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0071f	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  00726	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00729	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  00730	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00736	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00739	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0073c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0073f	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  00742	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00745	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00748	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0074b	83 c1 01	 add	 ecx, 1
  0074e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00751	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  00754	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00757	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  0075e	c1 f9 08	 sar	 ecx, 8
  00761	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00764	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00767	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0076a	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  0076d	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00770	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00773	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00776	83 c1 01	 add	 ecx, 1
  00779	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0077c	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  0077f	0f b7 45 bc	 movzx	 eax, WORD PTR _val$1[ebp]
  00783	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00786	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0078b	2b 91 bc 16 00
	00		 sub	 edx, DWORD PTR [ecx+5820]
  00791	8b ca		 mov	 ecx, edx
  00793	d3 f8		 sar	 eax, cl
  00795	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00798	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  0079f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  007a2	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  007a8	8b 4d c0	 mov	 ecx, DWORD PTR _len$2[ebp]
  007ab	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  007af	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  007b2	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  007b8	eb 45		 jmp	 SHORT $LN1@compress_b
$LN20@compress_b:
  007ba	b9 04 00 00 00	 mov	 ecx, 4
  007bf	c1 e1 08	 shl	 ecx, 8
  007c2	8b 55 0c	 mov	 edx, DWORD PTR _ltree$[ebp]
  007c5	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  007c9	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  007cc	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  007d2	d3 e0		 shl	 eax, cl
  007d4	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  007d7	0f b7 8a b8 16
	00 00		 movzx	 ecx, WORD PTR [edx+5816]
  007de	0b c8		 or	 ecx, eax
  007e0	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  007e3	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  007ea	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  007ed	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  007f3	03 4d c0	 add	 ecx, DWORD PTR _len$2[ebp]
  007f6	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  007f9	89 8a bc 16 00
	00		 mov	 DWORD PTR [edx+5820], ecx
$LN1@compress_b:

; 1109 : }

  007ff	5f		 pop	 edi
  00800	83 c4 48	 add	 esp, 72			; 00000048H
  00803	3b ec		 cmp	 ebp, esp
  00805	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0080a	8b e5		 mov	 esp, ebp
  0080c	5d		 pop	 ebp
  0080d	c3		 ret	 0
_compress_block ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\trees.c
;	COMDAT _detect_data_type
_TEXT	SEGMENT
_n$ = -8						; size = 4
_black_mask$ = -4					; size = 4
_s$ = 8							; size = 4
_detect_data_type PROC					; COMDAT

; 1126 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00019	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1127 :     /* black_mask is the bit mask of black-listed bytes
; 1128 :      * set bits 0..6, 14..25, and 28..31
; 1129 :      * 0xf3ffc07f = binary 11110011111111111100000001111111
; 1130 :      */
; 1131 :     unsigned long black_mask = 0xf3ffc07fUL;

  0001e	c7 45 fc 7f c0
	ff f3		 mov	 DWORD PTR _black_mask$[ebp], -201342849 ; f3ffc07fH

; 1132 :     int n;
; 1133 : 
; 1134 :     /* Check for non-textual ("black-listed") bytes. */
; 1135 :     for (n = 0; n <= 31; n++, black_mask >>= 1)

  00025	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  0002c	eb 11		 jmp	 SHORT $LN4@detect_dat
$LN2@detect_dat:
  0002e	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00031	83 c0 01	 add	 eax, 1
  00034	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax
  00037	8b 4d fc	 mov	 ecx, DWORD PTR _black_mask$[ebp]
  0003a	d1 e9		 shr	 ecx, 1
  0003c	89 4d fc	 mov	 DWORD PTR _black_mask$[ebp], ecx
$LN4@detect_dat:
  0003f	83 7d f8 1f	 cmp	 DWORD PTR _n$[ebp], 31	; 0000001fH
  00043	7f 23		 jg	 SHORT $LN3@detect_dat

; 1136 :         if ((black_mask & 1) && (s->dyn_ltree[n].Freq != 0))

  00045	8b 55 fc	 mov	 edx, DWORD PTR _black_mask$[ebp]
  00048	83 e2 01	 and	 edx, 1
  0004b	74 19		 je	 SHORT $LN8@detect_dat
  0004d	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00050	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00053	0f b7 94 81 94
	00 00 00	 movzx	 edx, WORD PTR [ecx+eax*4+148]
  0005b	85 d2		 test	 edx, edx
  0005d	74 07		 je	 SHORT $LN8@detect_dat

; 1137 :             return Z_BINARY;

  0005f	33 c0		 xor	 eax, eax
  00061	e9 86 00 00 00	 jmp	 $LN1@detect_dat
$LN8@detect_dat:
  00066	eb c6		 jmp	 SHORT $LN2@detect_dat
$LN3@detect_dat:

; 1138 : 
; 1139 :     /* Check for textual ("white-listed") bytes. */
; 1140 :     if (s->dyn_ltree[9].Freq != 0 || s->dyn_ltree[10].Freq != 0
; 1141 :             || s->dyn_ltree[13].Freq != 0)

  00068	b8 04 00 00 00	 mov	 eax, 4
  0006d	6b c8 09	 imul	 ecx, eax, 9
  00070	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00073	0f b7 84 0a 94
	00 00 00	 movzx	 eax, WORD PTR [edx+ecx+148]
  0007b	85 c0		 test	 eax, eax
  0007d	75 2e		 jne	 SHORT $LN10@detect_dat
  0007f	b9 04 00 00 00	 mov	 ecx, 4
  00084	6b d1 0a	 imul	 edx, ecx, 10
  00087	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0008a	0f b7 8c 10 94
	00 00 00	 movzx	 ecx, WORD PTR [eax+edx+148]
  00092	85 c9		 test	 ecx, ecx
  00094	75 17		 jne	 SHORT $LN10@detect_dat
  00096	ba 04 00 00 00	 mov	 edx, 4
  0009b	6b c2 0d	 imul	 eax, edx, 13
  0009e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000a1	0f b7 94 01 94
	00 00 00	 movzx	 edx, WORD PTR [ecx+eax+148]
  000a9	85 d2		 test	 edx, edx
  000ab	74 07		 je	 SHORT $LN9@detect_dat
$LN10@detect_dat:

; 1142 :         return Z_TEXT;

  000ad	b8 01 00 00 00	 mov	 eax, 1
  000b2	eb 38		 jmp	 SHORT $LN1@detect_dat
$LN9@detect_dat:

; 1143 :     for (n = 32; n < LITERALS; n++)

  000b4	c7 45 f8 20 00
	00 00		 mov	 DWORD PTR _n$[ebp], 32	; 00000020H
  000bb	eb 09		 jmp	 SHORT $LN7@detect_dat
$LN5@detect_dat:
  000bd	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  000c0	83 c0 01	 add	 eax, 1
  000c3	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax
$LN7@detect_dat:
  000c6	81 7d f8 00 01
	00 00		 cmp	 DWORD PTR _n$[ebp], 256	; 00000100H
  000cd	7d 1b		 jge	 SHORT $LN6@detect_dat

; 1144 :         if (s->dyn_ltree[n].Freq != 0)

  000cf	8b 4d f8	 mov	 ecx, DWORD PTR _n$[ebp]
  000d2	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000d5	0f b7 84 8a 94
	00 00 00	 movzx	 eax, WORD PTR [edx+ecx*4+148]
  000dd	85 c0		 test	 eax, eax
  000df	74 07		 je	 SHORT $LN11@detect_dat

; 1145 :             return Z_TEXT;

  000e1	b8 01 00 00 00	 mov	 eax, 1
  000e6	eb 04		 jmp	 SHORT $LN1@detect_dat
$LN11@detect_dat:
  000e8	eb d3		 jmp	 SHORT $LN5@detect_dat
$LN6@detect_dat:

; 1146 : 
; 1147 :     /* There are no "black-listed" or "white-listed" bytes:
; 1148 :      * this stream either is empty or has tolerated ("gray-listed") bytes only.
; 1149 :      */
; 1150 :     return Z_BINARY;

  000ea	33 c0		 xor	 eax, eax
$LN1@detect_dat:

; 1151 : }

  000ec	83 c4 08	 add	 esp, 8
  000ef	3b ec		 cmp	 ebp, esp
  000f1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f6	8b e5		 mov	 esp, ebp
  000f8	5d		 pop	 ebp
  000f9	c3		 ret	 0
_detect_data_type ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\trees.c
;	COMDAT _bi_reverse
_TEXT	SEGMENT
_res$ = -4						; size = 4
_code$ = 8						; size = 4
_len$ = 12						; size = 4
_bi_reverse PROC					; COMDAT

; 1161 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00010	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1162 :     register unsigned res = 0;

  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _res$[ebp], 0
$LN4@bi_reverse:

; 1163 :     do {
; 1164 :         res |= code & 1;

  0001c	8b 45 08	 mov	 eax, DWORD PTR _code$[ebp]
  0001f	83 e0 01	 and	 eax, 1
  00022	0b 45 fc	 or	 eax, DWORD PTR _res$[ebp]
  00025	89 45 fc	 mov	 DWORD PTR _res$[ebp], eax

; 1165 :         code >>= 1, res <<= 1;

  00028	8b 4d 08	 mov	 ecx, DWORD PTR _code$[ebp]
  0002b	d1 e9		 shr	 ecx, 1
  0002d	89 4d 08	 mov	 DWORD PTR _code$[ebp], ecx
  00030	8b 55 fc	 mov	 edx, DWORD PTR _res$[ebp]
  00033	d1 e2		 shl	 edx, 1
  00035	89 55 fc	 mov	 DWORD PTR _res$[ebp], edx

; 1166 :     } while (--len > 0);

  00038	8b 45 0c	 mov	 eax, DWORD PTR _len$[ebp]
  0003b	83 e8 01	 sub	 eax, 1
  0003e	89 45 0c	 mov	 DWORD PTR _len$[ebp], eax
  00041	83 7d 0c 00	 cmp	 DWORD PTR _len$[ebp], 0
  00045	7f d5		 jg	 SHORT $LN4@bi_reverse

; 1167 :     return res >> 1;

  00047	8b 45 fc	 mov	 eax, DWORD PTR _res$[ebp]
  0004a	d1 e8		 shr	 eax, 1

; 1168 : }

  0004c	83 c4 04	 add	 esp, 4
  0004f	3b ec		 cmp	 ebp, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
_bi_reverse ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\trees.c
;	COMDAT _bi_flush
_TEXT	SEGMENT
_s$ = 8							; size = 4
_bi_flush PROC						; COMDAT

; 1175 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1176 :     if (s->bi_valid == 16) {

  0000d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00010	83 b8 bc 16 00
	00 10		 cmp	 DWORD PTR [eax+5820], 16 ; 00000010H
  00017	75 74		 jne	 SHORT $LN2@bi_flush

; 1177 :         put_short(s, s->bi_buf);

  00019	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0001c	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  00023	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00029	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0002c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0002f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00032	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00035	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  00038	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0003b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0003e	83 c2 01	 add	 edx, 1
  00041	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00044	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00047	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0004a	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  00051	c1 fa 08	 sar	 edx, 8
  00054	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00057	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0005a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0005d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00060	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  00063	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00066	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00069	83 c2 01	 add	 edx, 1
  0006c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0006f	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 1178 :         s->bi_buf = 0;

  00072	33 c9		 xor	 ecx, ecx
  00074	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00077	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx

; 1179 :         s->bi_valid = 0;

  0007e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00081	c7 80 bc 16 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+5820], 0
  0008b	eb 60		 jmp	 SHORT $LN1@bi_flush
$LN2@bi_flush:

; 1180 :     } else if (s->bi_valid >= 8) {

  0008d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00090	83 b9 bc 16 00
	00 08		 cmp	 DWORD PTR [ecx+5820], 8
  00097	7c 54		 jl	 SHORT $LN1@bi_flush

; 1181 :         put_byte(s, (Byte)s->bi_buf);

  00099	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0009c	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0009f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000a2	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000a5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000a8	8a 89 b8 16 00
	00		 mov	 cl, BYTE PTR [ecx+5816]
  000ae	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  000b1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000b4	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000b7	83 c0 01	 add	 eax, 1
  000ba	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000bd	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 1182 :         s->bi_buf >>= 8;

  000c0	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000c3	66 8b 82 b8 16
	00 00		 mov	 ax, WORD PTR [edx+5816]
  000ca	66 c1 e8 08	 shr	 ax, 8
  000ce	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000d1	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax

; 1183 :         s->bi_valid -= 8;

  000d8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000db	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  000e1	83 e8 08	 sub	 eax, 8
  000e4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000e7	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN1@bi_flush:

; 1184 :     }
; 1185 : }

  000ed	3b ec		 cmp	 ebp, esp
  000ef	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f4	5d		 pop	 ebp
  000f5	c3		 ret	 0
_bi_flush ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\trees.c
;	COMDAT _bi_windup
_TEXT	SEGMENT
_s$ = 8							; size = 4
_bi_windup PROC						; COMDAT

; 1192 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1193 :     if (s->bi_valid > 8) {

  0000d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00010	83 b8 bc 16 00
	00 08		 cmp	 DWORD PTR [eax+5820], 8
  00017	7e 5b		 jle	 SHORT $LN2@bi_windup

; 1194 :         put_short(s, s->bi_buf);

  00019	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0001c	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  00023	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00029	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0002c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0002f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00032	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00035	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  00038	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0003b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0003e	83 c2 01	 add	 edx, 1
  00041	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00044	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00047	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0004a	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  00051	c1 fa 08	 sar	 edx, 8
  00054	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00057	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0005a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0005d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00060	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  00063	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00066	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00069	83 c2 01	 add	 edx, 1
  0006c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0006f	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00072	eb 33		 jmp	 SHORT $LN3@bi_windup
$LN2@bi_windup:

; 1195 :     } else if (s->bi_valid > 0) {

  00074	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00077	83 b9 bc 16 00
	00 00		 cmp	 DWORD PTR [ecx+5820], 0
  0007e	7e 27		 jle	 SHORT $LN3@bi_windup

; 1196 :         put_byte(s, (Byte)s->bi_buf);

  00080	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00083	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00086	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00089	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0008c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0008f	8a 89 b8 16 00
	00		 mov	 cl, BYTE PTR [ecx+5816]
  00095	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00098	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0009b	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0009e	83 c0 01	 add	 eax, 1
  000a1	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000a4	89 41 14	 mov	 DWORD PTR [ecx+20], eax
$LN3@bi_windup:

; 1197 :     }
; 1198 :     s->bi_buf = 0;

  000a7	33 d2		 xor	 edx, edx
  000a9	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000ac	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx

; 1199 :     s->bi_valid = 0;

  000b3	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000b6	c7 81 bc 16 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+5820], 0

; 1200 : #ifdef ZLIB_DEBUG
; 1201 :     s->bits_sent = (s->bits_sent+7) & ~7;
; 1202 : #endif
; 1203 : }

  000c0	3b ec		 cmp	 ebp, esp
  000c2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
_bi_windup ENDP
_TEXT	ENDS
END

; Listing generated by Microsoft (R) Optimizing Compiler Version 19.20.27525.0 

	TITLE	e:\cpython\externals\zlib-1.2.11\contrib\minizip\ioapi.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_03HMFOOINA@r?$CLb@			; `string'
PUBLIC	??_C@_02GMLFBBN@wb@				; `string'
EXTRN	__fseeki64:PROC
EXTRN	_fread:PROC
EXTRN	__ftelli64:PROC
EXTRN	_fwrite:PROC
EXTRN	_fseek:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	_ferror:PROC
EXTRN	_ftell:PROC
;	COMDAT ??_C@_02GMLFBBN@wb@
CONST	SEGMENT
??_C@_02GMLFBBN@wb@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03HMFOOINA@r?$CLb@
CONST	SEGMENT
??_C@_03HMFOOINA@r?$CLb@ DB 'r+b', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
__DB664BEB_corecrt_stdio_config@h DB 01H
__E28BBA23_corecrt_wstdio@h DB 01H
__4A1C29A8_stdio@h DB 01H
__95347B96_ctype@h DB 01H
__149DB6BE_basetsd@h DB 01H
__9CFFAB73_corecrt_memcpy_s@h DB 01H
__55B7CB8D_corecrt_wstring@h DB 01H
__2F7506B6_string@h DB 01H
__5BA8817F_winnt@h DB 01H
__8421AFE7_processthreadsapi@h DB 01H
__F192E00B_memoryapi@h DB 01H
__0DF854E2_winerror@h DB 01H
__940BF1C4_winbase@h DB 01H
__78A3E64A_stralign@h DB 01H
__925E5E46_ioapi@c DB 01H
PUBLIC	_fill_fopen64_filefunc
PUBLIC	_fill_zlib_filefunc64_32_def_from_filefunc32
PUBLIC	_call_ztell64
PUBLIC	_call_zseek64
PUBLIC	_call_zopen64
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\ioapi.c
;	COMDAT _call_zopen64
_TEXT	SEGMENT
_pfilefunc$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_call_zopen64 PROC					; COMDAT

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00009	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 33   :     if (pfilefunc->zfile_func64.zopen64_file != NULL)

  0000e	8b 45 08	 mov	 eax, DWORD PTR _pfilefunc$[ebp]
  00011	83 38 00	 cmp	 DWORD PTR [eax], 0
  00014	74 26		 je	 SHORT $LN2@call_zopen

; 34   :         return (*(pfilefunc->zfile_func64.zopen64_file)) (pfilefunc->zfile_func64.opaque,filename,mode);

  00016	8b f4		 mov	 esi, esp
  00018	8b 4d 10	 mov	 ecx, DWORD PTR _mode$[ebp]
  0001b	51		 push	 ecx
  0001c	8b 55 0c	 mov	 edx, DWORD PTR _filename$[ebp]
  0001f	52		 push	 edx
  00020	8b 45 08	 mov	 eax, DWORD PTR _pfilefunc$[ebp]
  00023	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00026	51		 push	 ecx
  00027	8b 55 08	 mov	 edx, DWORD PTR _pfilefunc$[ebp]
  0002a	8b 02		 mov	 eax, DWORD PTR [edx]
  0002c	ff d0		 call	 eax
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00031	3b f4		 cmp	 esi, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	eb 25		 jmp	 SHORT $LN1@call_zopen
  0003a	eb 23		 jmp	 SHORT $LN1@call_zopen
$LN2@call_zopen:

; 35   :     else
; 36   :     {
; 37   :         return (*(pfilefunc->zopen32_file))(pfilefunc->zfile_func64.opaque,(const char*)filename,mode);

  0003c	8b f4		 mov	 esi, esp
  0003e	8b 4d 10	 mov	 ecx, DWORD PTR _mode$[ebp]
  00041	51		 push	 ecx
  00042	8b 55 0c	 mov	 edx, DWORD PTR _filename$[ebp]
  00045	52		 push	 edx
  00046	8b 45 08	 mov	 eax, DWORD PTR _pfilefunc$[ebp]
  00049	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0004c	51		 push	 ecx
  0004d	8b 55 08	 mov	 edx, DWORD PTR _pfilefunc$[ebp]
  00050	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00053	ff d0		 call	 eax
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH
  00058	3b f4		 cmp	 esi, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@call_zopen:

; 38   :     }
; 39   : }

  0005f	5e		 pop	 esi
  00060	3b ec		 cmp	 ebp, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
_call_zopen64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\ioapi.c
;	COMDAT _call_zseek64
_TEXT	SEGMENT
tv135 = -12						; size = 8
_offsetTruncated$1 = -4					; size = 4
_pfilefunc$ = 8						; size = 4
_filestream$ = 12					; size = 4
_offset$ = 16						; size = 8
_origin$ = 24						; size = 4
_call_zseek64 PROC					; COMDAT

; 42   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00021	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 43   :     if (pfilefunc->zfile_func64.zseek64_file != NULL)

  00026	8b 45 08	 mov	 eax, DWORD PTR _pfilefunc$[ebp]
  00029	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0002d	74 2f		 je	 SHORT $LN2@call_zseek

; 44   :         return (*(pfilefunc->zfile_func64.zseek64_file)) (pfilefunc->zfile_func64.opaque,filestream,offset,origin);

  0002f	8b f4		 mov	 esi, esp
  00031	8b 4d 18	 mov	 ecx, DWORD PTR _origin$[ebp]
  00034	51		 push	 ecx
  00035	8b 55 14	 mov	 edx, DWORD PTR _offset$[ebp+4]
  00038	52		 push	 edx
  00039	8b 45 10	 mov	 eax, DWORD PTR _offset$[ebp]
  0003c	50		 push	 eax
  0003d	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00040	51		 push	 ecx
  00041	8b 55 08	 mov	 edx, DWORD PTR _pfilefunc$[ebp]
  00044	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00047	50		 push	 eax
  00048	8b 4d 08	 mov	 ecx, DWORD PTR _pfilefunc$[ebp]
  0004b	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0004e	ff d2		 call	 edx
  00050	83 c4 14	 add	 esp, 20			; 00000014H
  00053	3b f4		 cmp	 esi, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	eb 51		 jmp	 SHORT $LN1@call_zseek
  0005c	eb 4f		 jmp	 SHORT $LN1@call_zseek
$LN2@call_zseek:

; 45   :     else
; 46   :     {
; 47   :         uLong offsetTruncated = (uLong)offset;

  0005e	8b 45 10	 mov	 eax, DWORD PTR _offset$[ebp]
  00061	89 45 fc	 mov	 DWORD PTR _offsetTruncated$1[ebp], eax

; 48   :         if (offsetTruncated != offset)

  00064	8b 4d fc	 mov	 ecx, DWORD PTR _offsetTruncated$1[ebp]
  00067	33 d2		 xor	 edx, edx
  00069	89 4d f4	 mov	 DWORD PTR tv135[ebp], ecx
  0006c	89 55 f8	 mov	 DWORD PTR tv135[ebp+4], edx
  0006f	8b 45 f4	 mov	 eax, DWORD PTR tv135[ebp]
  00072	3b 45 10	 cmp	 eax, DWORD PTR _offset$[ebp]
  00075	75 08		 jne	 SHORT $LN9@call_zseek
  00077	8b 4d f8	 mov	 ecx, DWORD PTR tv135[ebp+4]
  0007a	3b 4d 14	 cmp	 ecx, DWORD PTR _offset$[ebp+4]
  0007d	74 07		 je	 SHORT $LN4@call_zseek
$LN9@call_zseek:

; 49   :             return -1;

  0007f	83 c8 ff	 or	 eax, -1
  00082	eb 29		 jmp	 SHORT $LN1@call_zseek
  00084	eb 27		 jmp	 SHORT $LN1@call_zseek
$LN4@call_zseek:

; 50   :         else
; 51   :             return (*(pfilefunc->zseek32_file))(pfilefunc->zfile_func64.opaque,filestream,offsetTruncated,origin);

  00086	8b f4		 mov	 esi, esp
  00088	8b 55 18	 mov	 edx, DWORD PTR _origin$[ebp]
  0008b	52		 push	 edx
  0008c	8b 45 fc	 mov	 eax, DWORD PTR _offsetTruncated$1[ebp]
  0008f	50		 push	 eax
  00090	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00093	51		 push	 ecx
  00094	8b 55 08	 mov	 edx, DWORD PTR _pfilefunc$[ebp]
  00097	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0009a	50		 push	 eax
  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _pfilefunc$[ebp]
  0009e	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  000a1	ff d2		 call	 edx
  000a3	83 c4 10	 add	 esp, 16			; 00000010H
  000a6	3b f4		 cmp	 esi, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@call_zseek:

; 52   :     }
; 53   : }

  000ad	5e		 pop	 esi
  000ae	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b1	3b ec		 cmp	 ebp, esp
  000b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c3		 ret	 0
_call_zseek64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\ioapi.c
;	COMDAT _call_ztell64
_TEXT	SEGMENT
_tell_uLong$1 = -4					; size = 4
_pfilefunc$ = 8						; size = 4
_filestream$ = 12					; size = 4
_call_ztell64 PROC					; COMDAT

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00011	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 57   :     if (pfilefunc->zfile_func64.zseek64_file != NULL)

  00016	8b 45 08	 mov	 eax, DWORD PTR _pfilefunc$[ebp]
  00019	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0001d	74 23		 je	 SHORT $LN2@call_ztell

; 58   :         return (*(pfilefunc->zfile_func64.ztell64_file)) (pfilefunc->zfile_func64.opaque,filestream);

  0001f	8b f4		 mov	 esi, esp
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00024	51		 push	 ecx
  00025	8b 55 08	 mov	 edx, DWORD PTR _pfilefunc$[ebp]
  00028	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _pfilefunc$[ebp]
  0002f	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00032	ff d2		 call	 edx
  00034	83 c4 08	 add	 esp, 8
  00037	3b f4		 cmp	 esi, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	eb 39		 jmp	 SHORT $LN1@call_ztell
  00040	eb 37		 jmp	 SHORT $LN1@call_ztell
$LN2@call_ztell:

; 59   :     else
; 60   :     {
; 61   :         uLong tell_uLong = (*(pfilefunc->ztell32_file))(pfilefunc->zfile_func64.opaque,filestream);

  00042	8b f4		 mov	 esi, esp
  00044	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  00047	50		 push	 eax
  00048	8b 4d 08	 mov	 ecx, DWORD PTR _pfilefunc$[ebp]
  0004b	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0004e	52		 push	 edx
  0004f	8b 45 08	 mov	 eax, DWORD PTR _pfilefunc$[ebp]
  00052	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00055	ff d1		 call	 ecx
  00057	83 c4 08	 add	 esp, 8
  0005a	3b f4		 cmp	 esi, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	89 45 fc	 mov	 DWORD PTR _tell_uLong$1[ebp], eax

; 62   :         if ((tell_uLong) == MAXU32)

  00064	83 7d fc ff	 cmp	 DWORD PTR _tell_uLong$1[ebp], -1
  00068	75 0a		 jne	 SHORT $LN4@call_ztell

; 63   :             return (ZPOS64_T)-1;

  0006a	83 c8 ff	 or	 eax, -1
  0006d	83 ca ff	 or	 edx, -1
  00070	eb 07		 jmp	 SHORT $LN1@call_ztell
  00072	eb 05		 jmp	 SHORT $LN1@call_ztell
$LN4@call_ztell:

; 64   :         else
; 65   :             return tell_uLong;

  00074	33 d2		 xor	 edx, edx
  00076	8b 45 fc	 mov	 eax, DWORD PTR _tell_uLong$1[ebp]
$LN1@call_ztell:

; 66   :     }
; 67   : }

  00079	5e		 pop	 esi
  0007a	83 c4 04	 add	 esp, 4
  0007d	3b ec		 cmp	 ebp, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
_call_ztell64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\ioapi.c
;	COMDAT _fill_zlib_filefunc64_32_def_from_filefunc32
_TEXT	SEGMENT
_p_filefunc64_32$ = 8					; size = 4
_p_filefunc32$ = 12					; size = 4
_fill_zlib_filefunc64_32_def_from_filefunc32 PROC	; COMDAT

; 70   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 71   :     p_filefunc64_32->zfile_func64.zopen64_file = NULL;

  0000d	8b 45 08	 mov	 eax, DWORD PTR _p_filefunc64_32$[ebp]
  00010	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 72   :     p_filefunc64_32->zopen32_file = p_filefunc32->zopen_file;

  00016	8b 4d 08	 mov	 ecx, DWORD PTR _p_filefunc64_32$[ebp]
  00019	8b 55 0c	 mov	 edx, DWORD PTR _p_filefunc32$[ebp]
  0001c	8b 02		 mov	 eax, DWORD PTR [edx]
  0001e	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 73   :     p_filefunc64_32->zfile_func64.zerror_file = p_filefunc32->zerror_file;

  00021	8b 4d 08	 mov	 ecx, DWORD PTR _p_filefunc64_32$[ebp]
  00024	8b 55 0c	 mov	 edx, DWORD PTR _p_filefunc32$[ebp]
  00027	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0002a	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 74   :     p_filefunc64_32->zfile_func64.zread_file = p_filefunc32->zread_file;

  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _p_filefunc64_32$[ebp]
  00030	8b 55 0c	 mov	 edx, DWORD PTR _p_filefunc32$[ebp]
  00033	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00036	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 75   :     p_filefunc64_32->zfile_func64.zwrite_file = p_filefunc32->zwrite_file;

  00039	8b 4d 08	 mov	 ecx, DWORD PTR _p_filefunc64_32$[ebp]
  0003c	8b 55 0c	 mov	 edx, DWORD PTR _p_filefunc32$[ebp]
  0003f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00042	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 76   :     p_filefunc64_32->zfile_func64.ztell64_file = NULL;

  00045	8b 4d 08	 mov	 ecx, DWORD PTR _p_filefunc64_32$[ebp]
  00048	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 77   :     p_filefunc64_32->zfile_func64.zseek64_file = NULL;

  0004f	8b 55 08	 mov	 edx, DWORD PTR _p_filefunc64_32$[ebp]
  00052	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0

; 78   :     p_filefunc64_32->zfile_func64.zclose_file = p_filefunc32->zclose_file;

  00059	8b 45 08	 mov	 eax, DWORD PTR _p_filefunc64_32$[ebp]
  0005c	8b 4d 0c	 mov	 ecx, DWORD PTR _p_filefunc32$[ebp]
  0005f	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00062	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 79   :     p_filefunc64_32->zfile_func64.zerror_file = p_filefunc32->zerror_file;

  00065	8b 45 08	 mov	 eax, DWORD PTR _p_filefunc64_32$[ebp]
  00068	8b 4d 0c	 mov	 ecx, DWORD PTR _p_filefunc32$[ebp]
  0006b	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0006e	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 80   :     p_filefunc64_32->zfile_func64.opaque = p_filefunc32->opaque;

  00071	8b 45 08	 mov	 eax, DWORD PTR _p_filefunc64_32$[ebp]
  00074	8b 4d 0c	 mov	 ecx, DWORD PTR _p_filefunc32$[ebp]
  00077	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0007a	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 81   :     p_filefunc64_32->zseek32_file = p_filefunc32->zseek_file;

  0007d	8b 45 08	 mov	 eax, DWORD PTR _p_filefunc64_32$[ebp]
  00080	8b 4d 0c	 mov	 ecx, DWORD PTR _p_filefunc32$[ebp]
  00083	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00086	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 82   :     p_filefunc64_32->ztell32_file = p_filefunc32->ztell_file;

  00089	8b 45 08	 mov	 eax, DWORD PTR _p_filefunc64_32$[ebp]
  0008c	8b 4d 0c	 mov	 ecx, DWORD PTR _p_filefunc32$[ebp]
  0008f	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00092	89 50 24	 mov	 DWORD PTR [eax+36], edx

; 83   : }

  00095	3b ec		 cmp	 ebp, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
_fill_zlib_filefunc64_32_def_from_filefunc32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\ioapi.c
;	COMDAT _fopen_file_func
_TEXT	SEGMENT
_mode_fopen$ = -8					; size = 4
_file$ = -4						; size = 4
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_fopen_file_func PROC					; COMDAT

; 96   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00019	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 97   :     FILE* file = NULL;

  0001e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _file$[ebp], 0

; 98   :     const char* mode_fopen = NULL;

  00025	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], 0

; 99   :     if ((mode & ZLIB_FILEFUNC_MODE_READWRITEFILTER)==ZLIB_FILEFUNC_MODE_READ)

  0002c	8b 45 10	 mov	 eax, DWORD PTR _mode$[ebp]
  0002f	83 e0 03	 and	 eax, 3
  00032	83 f8 01	 cmp	 eax, 1
  00035	75 09		 jne	 SHORT $LN2@fopen_file

; 100  :         mode_fopen = "rb";

  00037	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], OFFSET ??_C@_02JDPG@rb@
  0003e	eb 20		 jmp	 SHORT $LN3@fopen_file
$LN2@fopen_file:

; 101  :     else
; 102  :     if (mode & ZLIB_FILEFUNC_MODE_EXISTING)

  00040	8b 4d 10	 mov	 ecx, DWORD PTR _mode$[ebp]
  00043	83 e1 04	 and	 ecx, 4
  00046	74 09		 je	 SHORT $LN4@fopen_file

; 103  :         mode_fopen = "r+b";

  00048	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], OFFSET ??_C@_03HMFOOINA@r?$CLb@
  0004f	eb 0f		 jmp	 SHORT $LN3@fopen_file
$LN4@fopen_file:

; 104  :     else
; 105  :     if (mode & ZLIB_FILEFUNC_MODE_CREATE)

  00051	8b 55 10	 mov	 edx, DWORD PTR _mode$[ebp]
  00054	83 e2 08	 and	 edx, 8
  00057	74 07		 je	 SHORT $LN3@fopen_file

; 106  :         mode_fopen = "wb";

  00059	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], OFFSET ??_C@_02GMLFBBN@wb@
$LN3@fopen_file:

; 107  : 
; 108  :     if ((filename!=NULL) && (mode_fopen != NULL))

  00060	83 7d 0c 00	 cmp	 DWORD PTR _filename$[ebp], 0
  00064	74 19		 je	 SHORT $LN7@fopen_file
  00066	83 7d f8 00	 cmp	 DWORD PTR _mode_fopen$[ebp], 0
  0006a	74 13		 je	 SHORT $LN7@fopen_file

; 109  :         file = fopen(filename, mode_fopen);

  0006c	8b 45 f8	 mov	 eax, DWORD PTR _mode_fopen$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 0c	 mov	 ecx, DWORD PTR _filename$[ebp]
  00073	51		 push	 ecx
  00074	e8 00 00 00 00	 call	 _fopen
  00079	83 c4 08	 add	 esp, 8
  0007c	89 45 fc	 mov	 DWORD PTR _file$[ebp], eax
$LN7@fopen_file:

; 110  :     return file;

  0007f	8b 45 fc	 mov	 eax, DWORD PTR _file$[ebp]

; 111  : }

  00082	83 c4 08	 add	 esp, 8
  00085	3b ec		 cmp	 ebp, esp
  00087	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
_fopen_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\ioapi.c
;	COMDAT _fopen64_file_func
_TEXT	SEGMENT
_mode_fopen$ = -8					; size = 4
_file$ = -4						; size = 4
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_fopen64_file_func PROC					; COMDAT

; 114  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00019	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 115  :     FILE* file = NULL;

  0001e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _file$[ebp], 0

; 116  :     const char* mode_fopen = NULL;

  00025	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], 0

; 117  :     if ((mode & ZLIB_FILEFUNC_MODE_READWRITEFILTER)==ZLIB_FILEFUNC_MODE_READ)

  0002c	8b 45 10	 mov	 eax, DWORD PTR _mode$[ebp]
  0002f	83 e0 03	 and	 eax, 3
  00032	83 f8 01	 cmp	 eax, 1
  00035	75 09		 jne	 SHORT $LN2@fopen64_fi

; 118  :         mode_fopen = "rb";

  00037	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], OFFSET ??_C@_02JDPG@rb@
  0003e	eb 20		 jmp	 SHORT $LN3@fopen64_fi
$LN2@fopen64_fi:

; 119  :     else
; 120  :     if (mode & ZLIB_FILEFUNC_MODE_EXISTING)

  00040	8b 4d 10	 mov	 ecx, DWORD PTR _mode$[ebp]
  00043	83 e1 04	 and	 ecx, 4
  00046	74 09		 je	 SHORT $LN4@fopen64_fi

; 121  :         mode_fopen = "r+b";

  00048	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], OFFSET ??_C@_03HMFOOINA@r?$CLb@
  0004f	eb 0f		 jmp	 SHORT $LN3@fopen64_fi
$LN4@fopen64_fi:

; 122  :     else
; 123  :     if (mode & ZLIB_FILEFUNC_MODE_CREATE)

  00051	8b 55 10	 mov	 edx, DWORD PTR _mode$[ebp]
  00054	83 e2 08	 and	 edx, 8
  00057	74 07		 je	 SHORT $LN3@fopen64_fi

; 124  :         mode_fopen = "wb";

  00059	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], OFFSET ??_C@_02GMLFBBN@wb@
$LN3@fopen64_fi:

; 125  : 
; 126  :     if ((filename!=NULL) && (mode_fopen != NULL))

  00060	83 7d 0c 00	 cmp	 DWORD PTR _filename$[ebp], 0
  00064	74 19		 je	 SHORT $LN7@fopen64_fi
  00066	83 7d f8 00	 cmp	 DWORD PTR _mode_fopen$[ebp], 0
  0006a	74 13		 je	 SHORT $LN7@fopen64_fi

; 127  :         file = FOPEN_FUNC((const char*)filename, mode_fopen);

  0006c	8b 45 f8	 mov	 eax, DWORD PTR _mode_fopen$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 0c	 mov	 ecx, DWORD PTR _filename$[ebp]
  00073	51		 push	 ecx
  00074	e8 00 00 00 00	 call	 _fopen
  00079	83 c4 08	 add	 esp, 8
  0007c	89 45 fc	 mov	 DWORD PTR _file$[ebp], eax
$LN7@fopen64_fi:

; 128  :     return file;

  0007f	8b 45 fc	 mov	 eax, DWORD PTR _file$[ebp]

; 129  : }

  00082	83 c4 08	 add	 esp, 8
  00085	3b ec		 cmp	 ebp, esp
  00087	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
_fopen64_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\ioapi.c
;	COMDAT _fread_file_func
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_buf$ = 16						; size = 4
_size$ = 20						; size = 4
_fread_file_func PROC					; COMDAT

; 133  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00010	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 134  :     uLong ret;
; 135  :     ret = (uLong)fread(buf, 1, (size_t)size, (FILE *)stream);

  00015	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 14	 mov	 ecx, DWORD PTR _size$[ebp]
  0001c	51		 push	 ecx
  0001d	6a 01		 push	 1
  0001f	8b 55 10	 mov	 edx, DWORD PTR _buf$[ebp]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 _fread
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 136  :     return ret;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]

; 137  : }

  00031	83 c4 04	 add	 esp, 4
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_fread_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\ioapi.c
;	COMDAT _fwrite_file_func
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_buf$ = 16						; size = 4
_size$ = 20						; size = 4
_fwrite_file_func PROC					; COMDAT

; 140  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00010	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 141  :     uLong ret;
; 142  :     ret = (uLong)fwrite(buf, 1, (size_t)size, (FILE *)stream);

  00015	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 14	 mov	 ecx, DWORD PTR _size$[ebp]
  0001c	51		 push	 ecx
  0001d	6a 01		 push	 1
  0001f	8b 55 10	 mov	 edx, DWORD PTR _buf$[ebp]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 _fwrite
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 143  :     return ret;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]

; 144  : }

  00031	83 c4 04	 add	 esp, 4
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_fwrite_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\ioapi.c
;	COMDAT _ftell_file_func
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_ftell_file_func PROC					; COMDAT

; 147  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00010	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 148  :     long ret;
; 149  :     ret = ftell((FILE *)stream);

  00015	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 _ftell
  0001e	83 c4 04	 add	 esp, 4
  00021	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 150  :     return ret;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]

; 151  : }

  00027	83 c4 04	 add	 esp, 4
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
_ftell_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\ioapi.c
;	COMDAT _ftell64_file_func
_TEXT	SEGMENT
_ret$ = -8						; size = 8
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_ftell64_file_func PROC					; COMDAT

; 155  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00019	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 156  :     ZPOS64_T ret;
; 157  :     ret = FTELLO_FUNC((FILE *)stream);

  0001e	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 __ftelli64
  00027	83 c4 04	 add	 esp, 4
  0002a	89 45 f8	 mov	 DWORD PTR _ret$[ebp], eax
  0002d	89 55 fc	 mov	 DWORD PTR _ret$[ebp+4], edx

; 158  :     return ret;

  00030	8b 45 f8	 mov	 eax, DWORD PTR _ret$[ebp]
  00033	8b 55 fc	 mov	 edx, DWORD PTR _ret$[ebp+4]

; 159  : }

  00036	83 c4 08	 add	 esp, 8
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
_ftell64_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\ioapi.c
;	COMDAT _fseek_file_func
_TEXT	SEGMENT
tv64 = -12						; size = 4
_ret$ = -8						; size = 4
_fseek_origin$ = -4					; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_offset$ = 16						; size = 4
_origin$ = 20						; size = 4
_fseek_file_func PROC					; COMDAT

; 162  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 163  :     int fseek_origin=0;

  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fseek_origin$[ebp], 0

; 164  :     long ret;
; 165  :     switch (origin)

  0002c	8b 45 14	 mov	 eax, DWORD PTR _origin$[ebp]
  0002f	89 45 f4	 mov	 DWORD PTR tv64[ebp], eax
  00032	83 7d f4 00	 cmp	 DWORD PTR tv64[ebp], 0
  00036	74 20		 je	 SHORT $LN6@fseek_file
  00038	83 7d f4 01	 cmp	 DWORD PTR tv64[ebp], 1
  0003c	74 08		 je	 SHORT $LN4@fseek_file
  0003e	83 7d f4 02	 cmp	 DWORD PTR tv64[ebp], 2
  00042	74 0b		 je	 SHORT $LN5@fseek_file
  00044	eb 1b		 jmp	 SHORT $LN7@fseek_file
$LN4@fseek_file:

; 166  :     {
; 167  :     case ZLIB_FILEFUNC_SEEK_CUR :
; 168  :         fseek_origin = SEEK_CUR;

  00046	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _fseek_origin$[ebp], 1

; 169  :         break;

  0004d	eb 17		 jmp	 SHORT $LN2@fseek_file
$LN5@fseek_file:

; 170  :     case ZLIB_FILEFUNC_SEEK_END :
; 171  :         fseek_origin = SEEK_END;

  0004f	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _fseek_origin$[ebp], 2

; 172  :         break;

  00056	eb 0e		 jmp	 SHORT $LN2@fseek_file
$LN6@fseek_file:

; 173  :     case ZLIB_FILEFUNC_SEEK_SET :
; 174  :         fseek_origin = SEEK_SET;

  00058	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fseek_origin$[ebp], 0

; 175  :         break;

  0005f	eb 05		 jmp	 SHORT $LN2@fseek_file
$LN7@fseek_file:

; 176  :     default: return -1;

  00061	83 c8 ff	 or	 eax, -1
  00064	eb 29		 jmp	 SHORT $LN1@fseek_file
$LN2@fseek_file:

; 177  :     }
; 178  :     ret = 0;

  00066	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0

; 179  :     if (fseek((FILE *)stream, offset, fseek_origin) != 0)

  0006d	8b 4d fc	 mov	 ecx, DWORD PTR _fseek_origin$[ebp]
  00070	51		 push	 ecx
  00071	8b 55 10	 mov	 edx, DWORD PTR _offset$[ebp]
  00074	52		 push	 edx
  00075	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 _fseek
  0007e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00081	85 c0		 test	 eax, eax
  00083	74 07		 je	 SHORT $LN8@fseek_file

; 180  :         ret = -1;

  00085	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1
$LN8@fseek_file:

; 181  :     return ret;

  0008c	8b 45 f8	 mov	 eax, DWORD PTR _ret$[ebp]
$LN1@fseek_file:

; 182  : }

  0008f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00092	3b ec		 cmp	 ebp, esp
  00094	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
_fseek_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\ioapi.c
;	COMDAT _fseek64_file_func
_TEXT	SEGMENT
tv64 = -12						; size = 4
_ret$ = -8						; size = 4
_fseek_origin$ = -4					; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_offset$ = 16						; size = 8
_origin$ = 24						; size = 4
_fseek64_file_func PROC					; COMDAT

; 185  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 186  :     int fseek_origin=0;

  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fseek_origin$[ebp], 0

; 187  :     long ret;
; 188  :     switch (origin)

  0002c	8b 45 18	 mov	 eax, DWORD PTR _origin$[ebp]
  0002f	89 45 f4	 mov	 DWORD PTR tv64[ebp], eax
  00032	83 7d f4 00	 cmp	 DWORD PTR tv64[ebp], 0
  00036	74 20		 je	 SHORT $LN6@fseek64_fi
  00038	83 7d f4 01	 cmp	 DWORD PTR tv64[ebp], 1
  0003c	74 08		 je	 SHORT $LN4@fseek64_fi
  0003e	83 7d f4 02	 cmp	 DWORD PTR tv64[ebp], 2
  00042	74 0b		 je	 SHORT $LN5@fseek64_fi
  00044	eb 1b		 jmp	 SHORT $LN7@fseek64_fi
$LN4@fseek64_fi:

; 189  :     {
; 190  :     case ZLIB_FILEFUNC_SEEK_CUR :
; 191  :         fseek_origin = SEEK_CUR;

  00046	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _fseek_origin$[ebp], 1

; 192  :         break;

  0004d	eb 17		 jmp	 SHORT $LN2@fseek64_fi
$LN5@fseek64_fi:

; 193  :     case ZLIB_FILEFUNC_SEEK_END :
; 194  :         fseek_origin = SEEK_END;

  0004f	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _fseek_origin$[ebp], 2

; 195  :         break;

  00056	eb 0e		 jmp	 SHORT $LN2@fseek64_fi
$LN6@fseek64_fi:

; 196  :     case ZLIB_FILEFUNC_SEEK_SET :
; 197  :         fseek_origin = SEEK_SET;

  00058	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fseek_origin$[ebp], 0

; 198  :         break;

  0005f	eb 05		 jmp	 SHORT $LN2@fseek64_fi
$LN7@fseek64_fi:

; 199  :     default: return -1;

  00061	83 c8 ff	 or	 eax, -1
  00064	eb 2d		 jmp	 SHORT $LN1@fseek64_fi
$LN2@fseek64_fi:

; 200  :     }
; 201  :     ret = 0;

  00066	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0

; 202  : 
; 203  :     if(FSEEKO_FUNC((FILE *)stream, offset, fseek_origin) != 0)

  0006d	8b 4d fc	 mov	 ecx, DWORD PTR _fseek_origin$[ebp]
  00070	51		 push	 ecx
  00071	8b 55 14	 mov	 edx, DWORD PTR _offset$[ebp+4]
  00074	52		 push	 edx
  00075	8b 45 10	 mov	 eax, DWORD PTR _offset$[ebp]
  00078	50		 push	 eax
  00079	8b 4d 0c	 mov	 ecx, DWORD PTR _stream$[ebp]
  0007c	51		 push	 ecx
  0007d	e8 00 00 00 00	 call	 __fseeki64
  00082	83 c4 10	 add	 esp, 16			; 00000010H
  00085	85 c0		 test	 eax, eax
  00087	74 07		 je	 SHORT $LN8@fseek64_fi

; 204  :                         ret = -1;

  00089	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1
$LN8@fseek64_fi:

; 205  : 
; 206  :     return ret;

  00090	8b 45 f8	 mov	 eax, DWORD PTR _ret$[ebp]
$LN1@fseek64_fi:

; 207  : }

  00093	83 c4 0c	 add	 esp, 12			; 0000000cH
  00096	3b ec		 cmp	 ebp, esp
  00098	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
_fseek64_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\ioapi.c
;	COMDAT _fclose_file_func
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_fclose_file_func PROC					; COMDAT

; 211  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00010	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 212  :     int ret;
; 213  :     ret = fclose((FILE *)stream);

  00015	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 _fclose
  0001e	83 c4 04	 add	 esp, 4
  00021	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 214  :     return ret;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]

; 215  : }

  00027	83 c4 04	 add	 esp, 4
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
_fclose_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\ioapi.c
;	COMDAT _ferror_file_func
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_ferror_file_func PROC					; COMDAT

; 218  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00010	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 219  :     int ret;
; 220  :     ret = ferror((FILE *)stream);

  00015	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 _ferror
  0001e	83 c4 04	 add	 esp, 4
  00021	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 221  :     return ret;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]

; 222  : }

  00027	83 c4 04	 add	 esp, 4
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
_ferror_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\ioapi.c
;	COMDAT _fill_fopen64_filefunc
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_fill_fopen64_filefunc PROC				; COMDAT

; 238  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 239  :     pzlib_filefunc_def->zopen64_file = fopen64_file_func;

  0000d	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00010	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET _fopen64_file_func

; 240  :     pzlib_filefunc_def->zread_file = fread_file_func;

  00016	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00019	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET _fread_file_func

; 241  :     pzlib_filefunc_def->zwrite_file = fwrite_file_func;

  00020	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00023	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET _fwrite_file_func

; 242  :     pzlib_filefunc_def->ztell64_file = ftell64_file_func;

  0002a	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  0002d	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _ftell64_file_func

; 243  :     pzlib_filefunc_def->zseek64_file = fseek64_file_func;

  00034	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00037	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], OFFSET _fseek64_file_func

; 244  :     pzlib_filefunc_def->zclose_file = fclose_file_func;

  0003e	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00041	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], OFFSET _fclose_file_func

; 245  :     pzlib_filefunc_def->zerror_file = ferror_file_func;

  00048	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  0004b	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET _ferror_file_func

; 246  :     pzlib_filefunc_def->opaque = NULL;

  00052	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00055	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 247  : }

  0005c	3b ec		 cmp	 ebp, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
_fill_fopen64_filefunc ENDP
_TEXT	ENDS
END

; Listing generated by Microsoft (R) Optimizing Compiler Version 19.20.27525.0 

	TITLE	e:\cpython\externals\zlib-1.2.11\compress.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_06CJNJFBNP@1?42?411@			; `string'
CONST	ENDS
;	COMDAT ??_C@_06CJNJFBNP@1?42?411@
CONST	SEGMENT
??_C@_06CJNJFBNP@1?42?411@ DB '1.2.11', 00H		; `string'
__95347B96_ctype@h DB 01H
__149DB6BE_basetsd@h DB 01H
__9CFFAB73_corecrt_memcpy_s@h DB 01H
__55B7CB8D_corecrt_wstring@h DB 01H
__2F7506B6_string@h DB 01H
__5BA8817F_winnt@h DB 01H
__8421AFE7_processthreadsapi@h DB 01H
__F192E00B_memoryapi@h DB 01H
__0DF854E2_winerror@h DB 01H
__940BF1C4_winbase@h DB 01H
__78A3E64A_stralign@h DB 01H
__0603D84E_compress@c DB 01H
PUBLIC	_compressBound@4
PUBLIC	_compress@16
PUBLIC	_compress2@20
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\compress.c
;	COMDAT _compress2@20
_TEXT	SEGMENT
tv86 = -92						; size = 4
tv80 = -88						; size = 4
tv76 = -84						; size = 4
tv72 = -80						; size = 4
_left$ = -76						; size = 4
_max$ = -72						; size = 4
_err$ = -68						; size = 4
_stream$ = -60						; size = 56
_dest$ = 8						; size = 4
_destLen$ = 12						; size = 4
_source$ = 16						; size = 4
_sourceLen$ = 20					; size = 4
_level$ = 24						; size = 4
_compress2@20 PROC					; COMDAT

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	57		 push	 edi
  00007	8d 7d a4	 lea	 edi, DWORD PTR [ebp-92]
  0000a	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 29   :     z_stream stream;
; 30   :     int err;
; 31   :     const uInt max = (uInt)-1;

  00020	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR _max$[ebp], -1

; 32   :     uLong left;
; 33   : 
; 34   :     left = *destLen;

  00027	8b 45 0c	 mov	 eax, DWORD PTR _destLen$[ebp]
  0002a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002c	89 4d b4	 mov	 DWORD PTR _left$[ebp], ecx

; 35   :     *destLen = 0;

  0002f	8b 55 0c	 mov	 edx, DWORD PTR _destLen$[ebp]
  00032	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 36   : 
; 37   :     stream.zalloc = (alloc_func)0;

  00038	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _stream$[ebp+32], 0

; 38   :     stream.zfree = (free_func)0;

  0003f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _stream$[ebp+36], 0

; 39   :     stream.opaque = (voidpf)0;

  00046	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _stream$[ebp+40], 0

; 40   : 
; 41   :     err = deflateInit(&stream, level);

  0004d	6a 38		 push	 56			; 00000038H
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_06CJNJFBNP@1?42?411@
  00054	8b 45 18	 mov	 eax, DWORD PTR _level$[ebp]
  00057	50		 push	 eax
  00058	8d 4d c4	 lea	 ecx, DWORD PTR _stream$[ebp]
  0005b	51		 push	 ecx
  0005c	e8 00 00 00 00	 call	 _deflateInit_@16
  00061	89 45 bc	 mov	 DWORD PTR _err$[ebp], eax

; 42   :     if (err != Z_OK) return err;

  00064	83 7d bc 00	 cmp	 DWORD PTR _err$[ebp], 0
  00068	74 08		 je	 SHORT $LN5@compress2
  0006a	8b 45 bc	 mov	 eax, DWORD PTR _err$[ebp]
  0006d	e9 c9 00 00 00	 jmp	 $LN1@compress2
$LN5@compress2:

; 43   : 
; 44   :     stream.next_out = dest;

  00072	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  00075	89 55 d0	 mov	 DWORD PTR _stream$[ebp+12], edx

; 45   :     stream.avail_out = 0;

  00078	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _stream$[ebp+16], 0

; 46   :     stream.next_in = (z_const Bytef *)source;

  0007f	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00082	89 45 c4	 mov	 DWORD PTR _stream$[ebp], eax

; 47   :     stream.avail_in = 0;

  00085	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _stream$[ebp+4], 0
$LN4@compress2:

; 48   : 
; 49   :     do {
; 50   :         if (stream.avail_out == 0) {

  0008c	83 7d d4 00	 cmp	 DWORD PTR _stream$[ebp+16], 0
  00090	75 25		 jne	 SHORT $LN6@compress2

; 51   :             stream.avail_out = left > (uLong)max ? max : (uInt)left;

  00092	8b 4d b4	 mov	 ecx, DWORD PTR _left$[ebp]
  00095	3b 4d b8	 cmp	 ecx, DWORD PTR _max$[ebp]
  00098	76 08		 jbe	 SHORT $LN9@compress2
  0009a	8b 55 b8	 mov	 edx, DWORD PTR _max$[ebp]
  0009d	89 55 b0	 mov	 DWORD PTR tv72[ebp], edx
  000a0	eb 06		 jmp	 SHORT $LN10@compress2
$LN9@compress2:
  000a2	8b 45 b4	 mov	 eax, DWORD PTR _left$[ebp]
  000a5	89 45 b0	 mov	 DWORD PTR tv72[ebp], eax
$LN10@compress2:
  000a8	8b 4d b0	 mov	 ecx, DWORD PTR tv72[ebp]
  000ab	89 4d d4	 mov	 DWORD PTR _stream$[ebp+16], ecx

; 52   :             left -= stream.avail_out;

  000ae	8b 55 b4	 mov	 edx, DWORD PTR _left$[ebp]
  000b1	2b 55 d4	 sub	 edx, DWORD PTR _stream$[ebp+16]
  000b4	89 55 b4	 mov	 DWORD PTR _left$[ebp], edx
$LN6@compress2:

; 53   :         }
; 54   :         if (stream.avail_in == 0) {

  000b7	83 7d c8 00	 cmp	 DWORD PTR _stream$[ebp+4], 0
  000bb	75 25		 jne	 SHORT $LN7@compress2

; 55   :             stream.avail_in = sourceLen > (uLong)max ? max : (uInt)sourceLen;

  000bd	8b 45 14	 mov	 eax, DWORD PTR _sourceLen$[ebp]
  000c0	3b 45 b8	 cmp	 eax, DWORD PTR _max$[ebp]
  000c3	76 08		 jbe	 SHORT $LN11@compress2
  000c5	8b 4d b8	 mov	 ecx, DWORD PTR _max$[ebp]
  000c8	89 4d ac	 mov	 DWORD PTR tv76[ebp], ecx
  000cb	eb 06		 jmp	 SHORT $LN12@compress2
$LN11@compress2:
  000cd	8b 55 14	 mov	 edx, DWORD PTR _sourceLen$[ebp]
  000d0	89 55 ac	 mov	 DWORD PTR tv76[ebp], edx
$LN12@compress2:
  000d3	8b 45 ac	 mov	 eax, DWORD PTR tv76[ebp]
  000d6	89 45 c8	 mov	 DWORD PTR _stream$[ebp+4], eax

; 56   :             sourceLen -= stream.avail_in;

  000d9	8b 4d 14	 mov	 ecx, DWORD PTR _sourceLen$[ebp]
  000dc	2b 4d c8	 sub	 ecx, DWORD PTR _stream$[ebp+4]
  000df	89 4d 14	 mov	 DWORD PTR _sourceLen$[ebp], ecx
$LN7@compress2:

; 57   :         }
; 58   :         err = deflate(&stream, sourceLen ? Z_NO_FLUSH : Z_FINISH);

  000e2	83 7d 14 00	 cmp	 DWORD PTR _sourceLen$[ebp], 0
  000e6	74 09		 je	 SHORT $LN13@compress2
  000e8	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
  000ef	eb 07		 jmp	 SHORT $LN14@compress2
$LN13@compress2:
  000f1	c7 45 a8 04 00
	00 00		 mov	 DWORD PTR tv80[ebp], 4
$LN14@compress2:
  000f8	8b 55 a8	 mov	 edx, DWORD PTR tv80[ebp]
  000fb	52		 push	 edx
  000fc	8d 45 c4	 lea	 eax, DWORD PTR _stream$[ebp]
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 _deflate@8
  00105	89 45 bc	 mov	 DWORD PTR _err$[ebp], eax

; 59   :     } while (err == Z_OK);

  00108	83 7d bc 00	 cmp	 DWORD PTR _err$[ebp], 0
  0010c	0f 84 7a ff ff
	ff		 je	 $LN4@compress2

; 60   : 
; 61   :     *destLen = stream.total_out;

  00112	8b 4d 0c	 mov	 ecx, DWORD PTR _destLen$[ebp]
  00115	8b 55 d8	 mov	 edx, DWORD PTR _stream$[ebp+20]
  00118	89 11		 mov	 DWORD PTR [ecx], edx

; 62   :     deflateEnd(&stream);

  0011a	8d 45 c4	 lea	 eax, DWORD PTR _stream$[ebp]
  0011d	50		 push	 eax
  0011e	e8 00 00 00 00	 call	 _deflateEnd@4

; 63   :     return err == Z_STREAM_END ? Z_OK : err;

  00123	83 7d bc 01	 cmp	 DWORD PTR _err$[ebp], 1
  00127	75 09		 jne	 SHORT $LN15@compress2
  00129	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv86[ebp], 0
  00130	eb 06		 jmp	 SHORT $LN16@compress2
$LN15@compress2:
  00132	8b 4d bc	 mov	 ecx, DWORD PTR _err$[ebp]
  00135	89 4d a4	 mov	 DWORD PTR tv86[ebp], ecx
$LN16@compress2:
  00138	8b 45 a4	 mov	 eax, DWORD PTR tv86[ebp]
$LN1@compress2:

; 64   : }

  0013b	52		 push	 edx
  0013c	8b cd		 mov	 ecx, ebp
  0013e	50		 push	 eax
  0013f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN20@compress2
  00145	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0014a	58		 pop	 eax
  0014b	5a		 pop	 edx
  0014c	5f		 pop	 edi
  0014d	83 c4 5c	 add	 esp, 92			; 0000005cH
  00150	3b ec		 cmp	 ebp, esp
  00152	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00157	8b e5		 mov	 esp, ebp
  00159	5d		 pop	 ebp
  0015a	c2 14 00	 ret	 20			; 00000014H
  0015d	0f 1f 00	 npad	 3
$LN20@compress2:
  00160	01 00 00 00	 DD	 1
  00164	00 00 00 00	 DD	 $LN19@compress2
$LN19@compress2:
  00168	c4 ff ff ff	 DD	 -60			; ffffffc4H
  0016c	38 00 00 00	 DD	 56			; 00000038H
  00170	00 00 00 00	 DD	 $LN18@compress2
$LN18@compress2:
  00174	73		 DB	 115			; 00000073H
  00175	74		 DB	 116			; 00000074H
  00176	72		 DB	 114			; 00000072H
  00177	65		 DB	 101			; 00000065H
  00178	61		 DB	 97			; 00000061H
  00179	6d		 DB	 109			; 0000006dH
  0017a	00		 DB	 0
_compress2@20 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\compress.c
;	COMDAT _compress@16
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_destLen$ = 12						; size = 4
_source$ = 16						; size = 4
_sourceLen$ = 20					; size = 4
_compress@16 PROC					; COMDAT

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 74   :     return compress2(dest, destLen, source, sourceLen, Z_DEFAULT_COMPRESSION);

  0000d	6a ff		 push	 -1
  0000f	8b 45 14	 mov	 eax, DWORD PTR _sourceLen$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR _source$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR _destLen$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 08	 mov	 eax, DWORD PTR _dest$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 _compress2@20

; 75   : }

  00024	3b ec		 cmp	 ebp, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	5d		 pop	 ebp
  0002c	c2 10 00	 ret	 16			; 00000010H
_compress@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\compress.c
;	COMDAT _compressBound@4
_TEXT	SEGMENT
_sourceLen$ = 8						; size = 4
_compressBound@4 PROC					; COMDAT

; 83   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 84   :     return sourceLen + (sourceLen >> 12) + (sourceLen >> 14) +

  0000d	8b 45 08	 mov	 eax, DWORD PTR _sourceLen$[ebp]
  00010	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  00013	03 45 08	 add	 eax, DWORD PTR _sourceLen$[ebp]
  00016	8b 4d 08	 mov	 ecx, DWORD PTR _sourceLen$[ebp]
  00019	c1 e9 0e	 shr	 ecx, 14			; 0000000eH
  0001c	03 c1		 add	 eax, ecx
  0001e	8b 55 08	 mov	 edx, DWORD PTR _sourceLen$[ebp]
  00021	c1 ea 19	 shr	 edx, 25			; 00000019H
  00024	8d 44 10 0d	 lea	 eax, DWORD PTR [eax+edx+13]

; 85   :            (sourceLen >> 25) + 13;
; 86   : }

  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
_compressBound@4 ENDP
_TEXT	ENDS
END

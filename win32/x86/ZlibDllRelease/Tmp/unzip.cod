; Listing generated by Microsoft (R) Optimizing Compiler Version 19.20.27525.0 

	TITLE	e:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	_unz_copyright
EXTRN	_strcmp:PROC
	ORG $+1
_unz_copyright DB ' unzip 1.01 Copyright 1998-2004 Gilles Vollant - http:'
	DB	'//www.winimage.com/zLibDll', 00H
__DB664BEB_corecrt_stdio_config@h DB 01H
__E28BBA23_corecrt_wstdio@h DB 01H
__4A1C29A8_stdio@h DB 01H
__9CFFAB73_corecrt_memcpy_s@h DB 01H
__55B7CB8D_corecrt_wstring@h DB 01H
__2F7506B6_string@h DB 01H
__95347B96_ctype@h DB 01H
__149DB6BE_basetsd@h DB 01H
__5BA8817F_winnt@h DB 01H
__8421AFE7_processthreadsapi@h DB 01H
__F192E00B_memoryapi@h DB 01H
__0DF854E2_winerror@h DB 01H
__940BF1C4_winbase@h DB 01H
__78A3E64A_stralign@h DB 01H
__D0AA5D20_unzip@c DB 01H
PUBLIC	_unzGetGlobalComment@12
PUBLIC	_unzCloseCurrentFile@4
PUBLIC	_unzGetLocalExtrafield@12
PUBLIC	_unzeof@4
PUBLIC	_unztell64@4
PUBLIC	_unztell@4
PUBLIC	_unzReadCurrentFile@12
PUBLIC	_unzGetCurrentFileZStreamPos64@4
PUBLIC	_unzOpenCurrentFile2@16
PUBLIC	_unzOpenCurrentFilePassword@8
PUBLIC	_unzOpenCurrentFile@4
PUBLIC	_unzOpenCurrentFile3@20
PUBLIC	_unzGoToFilePos@8
PUBLIC	_unzGoToFilePos64@8
PUBLIC	_unzGetFilePos@8
PUBLIC	_unzGetFilePos64@8
PUBLIC	_unzLocateFile@12
PUBLIC	_unzGoToNextFile@4
PUBLIC	_unzGoToFirstFile@4
PUBLIC	_unzGetCurrentFileInfo@32
PUBLIC	_unzGetCurrentFileInfo64@32
PUBLIC	_unzGetGlobalInfo@8
PUBLIC	_unzGetGlobalInfo64@8
PUBLIC	_unzClose@4
PUBLIC	_unzOpen64@4
PUBLIC	_unzOpen@4
PUBLIC	_unzOpen2_64@8
PUBLIC	_unzOpen2@8
PUBLIC	_unzStringFileNameCompare@12
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unz64local_getByte
_TEXT	SEGMENT
_err$ = -16						; size = 4
_c$ = -5						; size = 1
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_pi$ = 16						; size = 4
_unz64local_getByte PROC				; COMDAT

; 213  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000f	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00012	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00015	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00018	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 214  :     unsigned char c;
; 215  :     int err = (int)ZREAD64(*pzlib_filefunc_def,filestream,&c,1);

  00022	8b f4		 mov	 esi, esp
  00024	6a 01		 push	 1
  00026	8d 45 fb	 lea	 eax, DWORD PTR _c$[ebp]
  00029	50		 push	 eax
  0002a	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  0002d	51		 push	 ecx
  0002e	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00031	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00034	50		 push	 eax
  00035	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00038	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0003b	ff d2		 call	 edx
  0003d	83 c4 10	 add	 esp, 16			; 00000010H
  00040	3b f4		 cmp	 esi, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	89 45 f0	 mov	 DWORD PTR _err$[ebp], eax

; 216  :     if (err==1)

  0004a	83 7d f0 01	 cmp	 DWORD PTR _err$[ebp], 1
  0004e	75 0f		 jne	 SHORT $LN2@unz64local

; 217  :     {
; 218  :         *pi = (int)c;

  00050	0f b6 45 fb	 movzx	 eax, BYTE PTR _c$[ebp]
  00054	8b 4d 10	 mov	 ecx, DWORD PTR _pi$[ebp]
  00057	89 01		 mov	 DWORD PTR [ecx], eax

; 219  :         return UNZ_OK;

  00059	33 c0		 xor	 eax, eax
  0005b	eb 2e		 jmp	 SHORT $LN1@unz64local

; 220  :     }

  0005d	eb 2c		 jmp	 SHORT $LN1@unz64local
$LN2@unz64local:

; 221  :     else
; 222  :     {
; 223  :         if (ZERROR64(*pzlib_filefunc_def,filestream))

  0005f	8b f4		 mov	 esi, esp
  00061	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  00064	52		 push	 edx
  00065	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00068	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0006b	51		 push	 ecx
  0006c	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0006f	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00072	ff d0		 call	 eax
  00074	83 c4 08	 add	 esp, 8
  00077	3b f4		 cmp	 esi, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	85 c0		 test	 eax, eax
  00080	74 07		 je	 SHORT $LN4@unz64local

; 224  :             return UNZ_ERRNO;

  00082	83 c8 ff	 or	 eax, -1
  00085	eb 04		 jmp	 SHORT $LN1@unz64local
  00087	eb 02		 jmp	 SHORT $LN1@unz64local
$LN4@unz64local:

; 225  :         else
; 226  :             return UNZ_EOF;

  00089	33 c0		 xor	 eax, eax
$LN1@unz64local:

; 227  :     }
; 228  : }

  0008b	52		 push	 edx
  0008c	8b cd		 mov	 ecx, ebp
  0008e	50		 push	 eax
  0008f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@unz64local
  00095	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009a	58		 pop	 eax
  0009b	5a		 pop	 edx
  0009c	5e		 pop	 esi
  0009d	83 c4 10	 add	 esp, 16			; 00000010H
  000a0	3b ec		 cmp	 ebp, esp
  000a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c3		 ret	 0
  000ab	90		 npad	 1
$LN11@unz64local:
  000ac	01 00 00 00	 DD	 1
  000b0	00 00 00 00	 DD	 $LN10@unz64local
$LN10@unz64local:
  000b4	fb ff ff ff	 DD	 -5			; fffffffbH
  000b8	01 00 00 00	 DD	 1
  000bc	00 00 00 00	 DD	 $LN9@unz64local
$LN9@unz64local:
  000c0	63		 DB	 99			; 00000063H
  000c1	00		 DB	 0
_unz64local_getByte ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unz64local_getShort
_TEXT	SEGMENT
_err$ = -20						; size = 4
_i$ = -12						; size = 4
_x$ = -4						; size = 4
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_pX$ = 16						; size = 4
_unz64local_getShort PROC				; COMDAT

; 242  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001a	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 243  :     uLong x ;
; 244  :     int i = 0;

  00024	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 245  :     int err;
; 246  : 
; 247  :     err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  0002b	8d 45 f4	 lea	 eax, DWORD PTR _i$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00032	51		 push	 ecx
  00033	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00036	52		 push	 edx
  00037	e8 00 00 00 00	 call	 _unz64local_getByte
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003f	89 45 ec	 mov	 DWORD PTR _err$[ebp], eax

; 248  :     x = (uLong)i;

  00042	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00045	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 249  : 
; 250  :     if (err==UNZ_OK)

  00048	83 7d ec 00	 cmp	 DWORD PTR _err$[ebp], 0
  0004c	75 17		 jne	 SHORT $LN2@unz64local

; 251  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  0004e	8d 4d f4	 lea	 ecx, DWORD PTR _i$[ebp]
  00051	51		 push	 ecx
  00052	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  00055	52		 push	 edx
  00056	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 _unz64local_getByte
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00062	89 45 ec	 mov	 DWORD PTR _err$[ebp], eax
$LN2@unz64local:

; 252  :     x |= ((uLong)i)<<8;

  00065	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00068	c1 e1 08	 shl	 ecx, 8
  0006b	0b 4d fc	 or	 ecx, DWORD PTR _x$[ebp]
  0006e	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 253  : 
; 254  :     if (err==UNZ_OK)

  00071	83 7d ec 00	 cmp	 DWORD PTR _err$[ebp], 0
  00075	75 0a		 jne	 SHORT $LN3@unz64local

; 255  :         *pX = x;

  00077	8b 55 10	 mov	 edx, DWORD PTR _pX$[ebp]
  0007a	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  0007d	89 02		 mov	 DWORD PTR [edx], eax
  0007f	eb 09		 jmp	 SHORT $LN4@unz64local
$LN3@unz64local:

; 256  :     else
; 257  :         *pX = 0;

  00081	8b 4d 10	 mov	 ecx, DWORD PTR _pX$[ebp]
  00084	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN4@unz64local:

; 258  :     return err;

  0008a	8b 45 ec	 mov	 eax, DWORD PTR _err$[ebp]

; 259  : }

  0008d	52		 push	 edx
  0008e	8b cd		 mov	 ecx, ebp
  00090	50		 push	 eax
  00091	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@unz64local
  00097	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009c	58		 pop	 eax
  0009d	5a		 pop	 edx
  0009e	83 c4 14	 add	 esp, 20			; 00000014H
  000a1	3b ec		 cmp	 ebp, esp
  000a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
$LN9@unz64local:
  000ac	01 00 00 00	 DD	 1
  000b0	00 00 00 00	 DD	 $LN8@unz64local
$LN8@unz64local:
  000b4	f4 ff ff ff	 DD	 -12			; fffffff4H
  000b8	04 00 00 00	 DD	 4
  000bc	00 00 00 00	 DD	 $LN7@unz64local
$LN7@unz64local:
  000c0	69		 DB	 105			; 00000069H
  000c1	00		 DB	 0
_unz64local_getShort ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unz64local_getLong
_TEXT	SEGMENT
_err$ = -20						; size = 4
_i$ = -12						; size = 4
_x$ = -4						; size = 4
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_pX$ = 16						; size = 4
_unz64local_getLong PROC				; COMDAT

; 269  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001a	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 270  :     uLong x ;
; 271  :     int i = 0;

  00024	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 272  :     int err;
; 273  : 
; 274  :     err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  0002b	8d 45 f4	 lea	 eax, DWORD PTR _i$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00032	51		 push	 ecx
  00033	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00036	52		 push	 edx
  00037	e8 00 00 00 00	 call	 _unz64local_getByte
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003f	89 45 ec	 mov	 DWORD PTR _err$[ebp], eax

; 275  :     x = (uLong)i;

  00042	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00045	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 276  : 
; 277  :     if (err==UNZ_OK)

  00048	83 7d ec 00	 cmp	 DWORD PTR _err$[ebp], 0
  0004c	75 17		 jne	 SHORT $LN2@unz64local

; 278  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  0004e	8d 4d f4	 lea	 ecx, DWORD PTR _i$[ebp]
  00051	51		 push	 ecx
  00052	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  00055	52		 push	 edx
  00056	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 _unz64local_getByte
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00062	89 45 ec	 mov	 DWORD PTR _err$[ebp], eax
$LN2@unz64local:

; 279  :     x |= ((uLong)i)<<8;

  00065	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00068	c1 e1 08	 shl	 ecx, 8
  0006b	0b 4d fc	 or	 ecx, DWORD PTR _x$[ebp]
  0006e	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 280  : 
; 281  :     if (err==UNZ_OK)

  00071	83 7d ec 00	 cmp	 DWORD PTR _err$[ebp], 0
  00075	75 17		 jne	 SHORT $LN3@unz64local

; 282  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00077	8d 55 f4	 lea	 edx, DWORD PTR _i$[ebp]
  0007a	52		 push	 edx
  0007b	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00082	51		 push	 ecx
  00083	e8 00 00 00 00	 call	 _unz64local_getByte
  00088	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008b	89 45 ec	 mov	 DWORD PTR _err$[ebp], eax
$LN3@unz64local:

; 283  :     x |= ((uLong)i)<<16;

  0008e	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00091	c1 e2 10	 shl	 edx, 16			; 00000010H
  00094	0b 55 fc	 or	 edx, DWORD PTR _x$[ebp]
  00097	89 55 fc	 mov	 DWORD PTR _x$[ebp], edx

; 284  : 
; 285  :     if (err==UNZ_OK)

  0009a	83 7d ec 00	 cmp	 DWORD PTR _err$[ebp], 0
  0009e	75 17		 jne	 SHORT $LN4@unz64local

; 286  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  000a0	8d 45 f4	 lea	 eax, DWORD PTR _i$[ebp]
  000a3	50		 push	 eax
  000a4	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  000a7	51		 push	 ecx
  000a8	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  000ab	52		 push	 edx
  000ac	e8 00 00 00 00	 call	 _unz64local_getByte
  000b1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b4	89 45 ec	 mov	 DWORD PTR _err$[ebp], eax
$LN4@unz64local:

; 287  :     x += ((uLong)i)<<24;

  000b7	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  000ba	c1 e0 18	 shl	 eax, 24			; 00000018H
  000bd	03 45 fc	 add	 eax, DWORD PTR _x$[ebp]
  000c0	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 288  : 
; 289  :     if (err==UNZ_OK)

  000c3	83 7d ec 00	 cmp	 DWORD PTR _err$[ebp], 0
  000c7	75 0a		 jne	 SHORT $LN5@unz64local

; 290  :         *pX = x;

  000c9	8b 4d 10	 mov	 ecx, DWORD PTR _pX$[ebp]
  000cc	8b 55 fc	 mov	 edx, DWORD PTR _x$[ebp]
  000cf	89 11		 mov	 DWORD PTR [ecx], edx
  000d1	eb 09		 jmp	 SHORT $LN6@unz64local
$LN5@unz64local:

; 291  :     else
; 292  :         *pX = 0;

  000d3	8b 45 10	 mov	 eax, DWORD PTR _pX$[ebp]
  000d6	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN6@unz64local:

; 293  :     return err;

  000dc	8b 45 ec	 mov	 eax, DWORD PTR _err$[ebp]

; 294  : }

  000df	52		 push	 edx
  000e0	8b cd		 mov	 ecx, ebp
  000e2	50		 push	 eax
  000e3	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@unz64local
  000e9	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ee	58		 pop	 eax
  000ef	5a		 pop	 edx
  000f0	83 c4 14	 add	 esp, 20			; 00000014H
  000f3	3b ec		 cmp	 ebp, esp
  000f5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fa	8b e5		 mov	 esp, ebp
  000fc	5d		 pop	 ebp
  000fd	c3		 ret	 0
  000fe	66 90		 npad	 2
$LN11@unz64local:
  00100	01 00 00 00	 DD	 1
  00104	00 00 00 00	 DD	 $LN10@unz64local
$LN10@unz64local:
  00108	f4 ff ff ff	 DD	 -12			; fffffff4H
  0010c	04 00 00 00	 DD	 4
  00110	00 00 00 00	 DD	 $LN9@unz64local
$LN9@unz64local:
  00114	69		 DB	 105			; 00000069H
  00115	00		 DB	 0
_unz64local_getLong ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unz64local_getLong64
_TEXT	SEGMENT
_err$ = -24						; size = 4
_i$ = -16						; size = 4
_x$ = -8						; size = 8
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_pX$ = 16						; size = 4
_unz64local_getLong64 PROC				; COMDAT

; 305  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000e	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00011	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00014	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00017	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001a	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001d	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00022	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 306  :     ZPOS64_T x ;
; 307  :     int i = 0;

  00027	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 308  :     int err;
; 309  : 
; 310  :     err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  0002e	8d 45 f0	 lea	 eax, DWORD PTR _i$[ebp]
  00031	50		 push	 eax
  00032	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00035	51		 push	 ecx
  00036	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 _unz64local_getByte
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00042	89 45 e8	 mov	 DWORD PTR _err$[ebp], eax

; 311  :     x = (ZPOS64_T)i;

  00045	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00048	99		 cdq
  00049	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  0004c	89 55 fc	 mov	 DWORD PTR _x$[ebp+4], edx

; 312  : 
; 313  :     if (err==UNZ_OK)

  0004f	83 7d e8 00	 cmp	 DWORD PTR _err$[ebp], 0
  00053	75 17		 jne	 SHORT $LN2@unz64local

; 314  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00055	8d 45 f0	 lea	 eax, DWORD PTR _i$[ebp]
  00058	50		 push	 eax
  00059	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  0005c	51		 push	 ecx
  0005d	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 _unz64local_getByte
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	89 45 e8	 mov	 DWORD PTR _err$[ebp], eax
$LN2@unz64local:

; 315  :     x |= ((ZPOS64_T)i)<<8;

  0006c	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0006f	99		 cdq
  00070	b1 08		 mov	 cl, 8
  00072	e8 00 00 00 00	 call	 __allshl
  00077	0b 45 f8	 or	 eax, DWORD PTR _x$[ebp]
  0007a	0b 55 fc	 or	 edx, DWORD PTR _x$[ebp+4]
  0007d	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  00080	89 55 fc	 mov	 DWORD PTR _x$[ebp+4], edx

; 316  : 
; 317  :     if (err==UNZ_OK)

  00083	83 7d e8 00	 cmp	 DWORD PTR _err$[ebp], 0
  00087	75 17		 jne	 SHORT $LN3@unz64local

; 318  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00089	8d 45 f0	 lea	 eax, DWORD PTR _i$[ebp]
  0008c	50		 push	 eax
  0008d	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00090	51		 push	 ecx
  00091	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00094	52		 push	 edx
  00095	e8 00 00 00 00	 call	 _unz64local_getByte
  0009a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009d	89 45 e8	 mov	 DWORD PTR _err$[ebp], eax
$LN3@unz64local:

; 319  :     x |= ((ZPOS64_T)i)<<16;

  000a0	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  000a3	99		 cdq
  000a4	b1 10		 mov	 cl, 16			; 00000010H
  000a6	e8 00 00 00 00	 call	 __allshl
  000ab	0b 45 f8	 or	 eax, DWORD PTR _x$[ebp]
  000ae	0b 55 fc	 or	 edx, DWORD PTR _x$[ebp+4]
  000b1	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  000b4	89 55 fc	 mov	 DWORD PTR _x$[ebp+4], edx

; 320  : 
; 321  :     if (err==UNZ_OK)

  000b7	83 7d e8 00	 cmp	 DWORD PTR _err$[ebp], 0
  000bb	75 17		 jne	 SHORT $LN4@unz64local

; 322  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  000bd	8d 45 f0	 lea	 eax, DWORD PTR _i$[ebp]
  000c0	50		 push	 eax
  000c1	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  000c4	51		 push	 ecx
  000c5	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  000c8	52		 push	 edx
  000c9	e8 00 00 00 00	 call	 _unz64local_getByte
  000ce	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d1	89 45 e8	 mov	 DWORD PTR _err$[ebp], eax
$LN4@unz64local:

; 323  :     x |= ((ZPOS64_T)i)<<24;

  000d4	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  000d7	99		 cdq
  000d8	b1 18		 mov	 cl, 24			; 00000018H
  000da	e8 00 00 00 00	 call	 __allshl
  000df	0b 45 f8	 or	 eax, DWORD PTR _x$[ebp]
  000e2	0b 55 fc	 or	 edx, DWORD PTR _x$[ebp+4]
  000e5	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  000e8	89 55 fc	 mov	 DWORD PTR _x$[ebp+4], edx

; 324  : 
; 325  :     if (err==UNZ_OK)

  000eb	83 7d e8 00	 cmp	 DWORD PTR _err$[ebp], 0
  000ef	75 17		 jne	 SHORT $LN5@unz64local

; 326  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  000f1	8d 45 f0	 lea	 eax, DWORD PTR _i$[ebp]
  000f4	50		 push	 eax
  000f5	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  000f8	51		 push	 ecx
  000f9	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  000fc	52		 push	 edx
  000fd	e8 00 00 00 00	 call	 _unz64local_getByte
  00102	83 c4 0c	 add	 esp, 12			; 0000000cH
  00105	89 45 e8	 mov	 DWORD PTR _err$[ebp], eax
$LN5@unz64local:

; 327  :     x |= ((ZPOS64_T)i)<<32;

  00108	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0010b	99		 cdq
  0010c	b1 20		 mov	 cl, 32			; 00000020H
  0010e	e8 00 00 00 00	 call	 __allshl
  00113	0b 45 f8	 or	 eax, DWORD PTR _x$[ebp]
  00116	0b 55 fc	 or	 edx, DWORD PTR _x$[ebp+4]
  00119	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  0011c	89 55 fc	 mov	 DWORD PTR _x$[ebp+4], edx

; 328  : 
; 329  :     if (err==UNZ_OK)

  0011f	83 7d e8 00	 cmp	 DWORD PTR _err$[ebp], 0
  00123	75 17		 jne	 SHORT $LN6@unz64local

; 330  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00125	8d 45 f0	 lea	 eax, DWORD PTR _i$[ebp]
  00128	50		 push	 eax
  00129	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  0012c	51		 push	 ecx
  0012d	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00130	52		 push	 edx
  00131	e8 00 00 00 00	 call	 _unz64local_getByte
  00136	83 c4 0c	 add	 esp, 12			; 0000000cH
  00139	89 45 e8	 mov	 DWORD PTR _err$[ebp], eax
$LN6@unz64local:

; 331  :     x |= ((ZPOS64_T)i)<<40;

  0013c	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0013f	99		 cdq
  00140	b1 28		 mov	 cl, 40			; 00000028H
  00142	e8 00 00 00 00	 call	 __allshl
  00147	0b 45 f8	 or	 eax, DWORD PTR _x$[ebp]
  0014a	0b 55 fc	 or	 edx, DWORD PTR _x$[ebp+4]
  0014d	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  00150	89 55 fc	 mov	 DWORD PTR _x$[ebp+4], edx

; 332  : 
; 333  :     if (err==UNZ_OK)

  00153	83 7d e8 00	 cmp	 DWORD PTR _err$[ebp], 0
  00157	75 17		 jne	 SHORT $LN7@unz64local

; 334  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00159	8d 45 f0	 lea	 eax, DWORD PTR _i$[ebp]
  0015c	50		 push	 eax
  0015d	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00160	51		 push	 ecx
  00161	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00164	52		 push	 edx
  00165	e8 00 00 00 00	 call	 _unz64local_getByte
  0016a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0016d	89 45 e8	 mov	 DWORD PTR _err$[ebp], eax
$LN7@unz64local:

; 335  :     x |= ((ZPOS64_T)i)<<48;

  00170	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00173	99		 cdq
  00174	b1 30		 mov	 cl, 48			; 00000030H
  00176	e8 00 00 00 00	 call	 __allshl
  0017b	0b 45 f8	 or	 eax, DWORD PTR _x$[ebp]
  0017e	0b 55 fc	 or	 edx, DWORD PTR _x$[ebp+4]
  00181	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  00184	89 55 fc	 mov	 DWORD PTR _x$[ebp+4], edx

; 336  : 
; 337  :     if (err==UNZ_OK)

  00187	83 7d e8 00	 cmp	 DWORD PTR _err$[ebp], 0
  0018b	75 17		 jne	 SHORT $LN8@unz64local

; 338  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  0018d	8d 45 f0	 lea	 eax, DWORD PTR _i$[ebp]
  00190	50		 push	 eax
  00191	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00194	51		 push	 ecx
  00195	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00198	52		 push	 edx
  00199	e8 00 00 00 00	 call	 _unz64local_getByte
  0019e	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a1	89 45 e8	 mov	 DWORD PTR _err$[ebp], eax
$LN8@unz64local:

; 339  :     x |= ((ZPOS64_T)i)<<56;

  001a4	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  001a7	99		 cdq
  001a8	b1 38		 mov	 cl, 56			; 00000038H
  001aa	e8 00 00 00 00	 call	 __allshl
  001af	0b 45 f8	 or	 eax, DWORD PTR _x$[ebp]
  001b2	0b 55 fc	 or	 edx, DWORD PTR _x$[ebp+4]
  001b5	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  001b8	89 55 fc	 mov	 DWORD PTR _x$[ebp+4], edx

; 340  : 
; 341  :     if (err==UNZ_OK)

  001bb	83 7d e8 00	 cmp	 DWORD PTR _err$[ebp], 0
  001bf	75 10		 jne	 SHORT $LN9@unz64local

; 342  :         *pX = x;

  001c1	8b 45 10	 mov	 eax, DWORD PTR _pX$[ebp]
  001c4	8b 4d f8	 mov	 ecx, DWORD PTR _x$[ebp]
  001c7	89 08		 mov	 DWORD PTR [eax], ecx
  001c9	8b 55 fc	 mov	 edx, DWORD PTR _x$[ebp+4]
  001cc	89 50 04	 mov	 DWORD PTR [eax+4], edx
  001cf	eb 10		 jmp	 SHORT $LN10@unz64local
$LN9@unz64local:

; 343  :     else
; 344  :         *pX = 0;

  001d1	8b 45 10	 mov	 eax, DWORD PTR _pX$[ebp]
  001d4	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  001da	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN10@unz64local:

; 345  :     return err;

  001e1	8b 45 e8	 mov	 eax, DWORD PTR _err$[ebp]

; 346  : }

  001e4	52		 push	 edx
  001e5	8b cd		 mov	 ecx, ebp
  001e7	50		 push	 eax
  001e8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN15@unz64local
  001ee	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001f3	58		 pop	 eax
  001f4	5a		 pop	 edx
  001f5	83 c4 18	 add	 esp, 24			; 00000018H
  001f8	3b ec		 cmp	 ebp, esp
  001fa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001ff	8b e5		 mov	 esp, ebp
  00201	5d		 pop	 ebp
  00202	c3		 ret	 0
  00203	90		 npad	 1
$LN15@unz64local:
  00204	01 00 00 00	 DD	 1
  00208	00 00 00 00	 DD	 $LN14@unz64local
$LN14@unz64local:
  0020c	f0 ff ff ff	 DD	 -16			; fffffff0H
  00210	04 00 00 00	 DD	 4
  00214	00 00 00 00	 DD	 $LN13@unz64local
$LN13@unz64local:
  00218	69		 DB	 105			; 00000069H
  00219	00		 DB	 0
_unz64local_getLong64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _strcmpcasenosensitive_internal
_TEXT	SEGMENT
tv84 = -8						; size = 4
_c2$1 = -2						; size = 1
_c1$2 = -1						; size = 1
_fileName1$ = 8						; size = 4
_fileName2$ = 12					; size = 4
_strcmpcasenosensitive_internal PROC			; COMDAT

; 350  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00019	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
$LN4@strcmpcase:

; 351  :     for (;;)
; 352  :     {
; 353  :         char c1=*(fileName1++);

  0001e	8b 45 08	 mov	 eax, DWORD PTR _fileName1$[ebp]
  00021	8a 08		 mov	 cl, BYTE PTR [eax]
  00023	88 4d ff	 mov	 BYTE PTR _c1$2[ebp], cl
  00026	8b 55 08	 mov	 edx, DWORD PTR _fileName1$[ebp]
  00029	83 c2 01	 add	 edx, 1
  0002c	89 55 08	 mov	 DWORD PTR _fileName1$[ebp], edx

; 354  :         char c2=*(fileName2++);

  0002f	8b 45 0c	 mov	 eax, DWORD PTR _fileName2$[ebp]
  00032	8a 08		 mov	 cl, BYTE PTR [eax]
  00034	88 4d fe	 mov	 BYTE PTR _c2$1[ebp], cl
  00037	8b 55 0c	 mov	 edx, DWORD PTR _fileName2$[ebp]
  0003a	83 c2 01	 add	 edx, 1
  0003d	89 55 0c	 mov	 DWORD PTR _fileName2$[ebp], edx

; 355  :         if ((c1>='a') && (c1<='z'))

  00040	0f be 45 ff	 movsx	 eax, BYTE PTR _c1$2[ebp]
  00044	83 f8 61	 cmp	 eax, 97			; 00000061H
  00047	7c 13		 jl	 SHORT $LN5@strcmpcase
  00049	0f be 4d ff	 movsx	 ecx, BYTE PTR _c1$2[ebp]
  0004d	83 f9 7a	 cmp	 ecx, 122		; 0000007aH
  00050	7f 0a		 jg	 SHORT $LN5@strcmpcase

; 356  :             c1 -= 0x20;

  00052	0f be 55 ff	 movsx	 edx, BYTE PTR _c1$2[ebp]
  00056	83 ea 20	 sub	 edx, 32			; 00000020H
  00059	88 55 ff	 mov	 BYTE PTR _c1$2[ebp], dl
$LN5@strcmpcase:

; 357  :         if ((c2>='a') && (c2<='z'))

  0005c	0f be 45 fe	 movsx	 eax, BYTE PTR _c2$1[ebp]
  00060	83 f8 61	 cmp	 eax, 97			; 00000061H
  00063	7c 13		 jl	 SHORT $LN6@strcmpcase
  00065	0f be 4d fe	 movsx	 ecx, BYTE PTR _c2$1[ebp]
  00069	83 f9 7a	 cmp	 ecx, 122		; 0000007aH
  0006c	7f 0a		 jg	 SHORT $LN6@strcmpcase

; 358  :             c2 -= 0x20;

  0006e	0f be 55 fe	 movsx	 edx, BYTE PTR _c2$1[ebp]
  00072	83 ea 20	 sub	 edx, 32			; 00000020H
  00075	88 55 fe	 mov	 BYTE PTR _c2$1[ebp], dl
$LN6@strcmpcase:

; 359  :         if (c1=='\0')

  00078	0f be 45 ff	 movsx	 eax, BYTE PTR _c1$2[ebp]
  0007c	85 c0		 test	 eax, eax
  0007e	75 1d		 jne	 SHORT $LN7@strcmpcase

; 360  :             return ((c2=='\0') ? 0 : -1);

  00080	0f be 4d fe	 movsx	 ecx, BYTE PTR _c2$1[ebp]
  00084	85 c9		 test	 ecx, ecx
  00086	75 09		 jne	 SHORT $LN12@strcmpcase
  00088	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
  0008f	eb 07		 jmp	 SHORT $LN13@strcmpcase
$LN12@strcmpcase:
  00091	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR tv84[ebp], -1
$LN13@strcmpcase:
  00098	8b 45 f8	 mov	 eax, DWORD PTR tv84[ebp]
  0009b	eb 38		 jmp	 SHORT $LN1@strcmpcase
$LN7@strcmpcase:

; 361  :         if (c2=='\0')

  0009d	0f be 55 fe	 movsx	 edx, BYTE PTR _c2$1[ebp]
  000a1	85 d2		 test	 edx, edx
  000a3	75 07		 jne	 SHORT $LN8@strcmpcase

; 362  :             return 1;

  000a5	b8 01 00 00 00	 mov	 eax, 1
  000aa	eb 29		 jmp	 SHORT $LN1@strcmpcase
$LN8@strcmpcase:

; 363  :         if (c1<c2)

  000ac	0f be 45 ff	 movsx	 eax, BYTE PTR _c1$2[ebp]
  000b0	0f be 4d fe	 movsx	 ecx, BYTE PTR _c2$1[ebp]
  000b4	3b c1		 cmp	 eax, ecx
  000b6	7d 05		 jge	 SHORT $LN9@strcmpcase

; 364  :             return -1;

  000b8	83 c8 ff	 or	 eax, -1
  000bb	eb 18		 jmp	 SHORT $LN1@strcmpcase
$LN9@strcmpcase:

; 365  :         if (c1>c2)

  000bd	0f be 55 ff	 movsx	 edx, BYTE PTR _c1$2[ebp]
  000c1	0f be 45 fe	 movsx	 eax, BYTE PTR _c2$1[ebp]
  000c5	3b d0		 cmp	 edx, eax
  000c7	7e 07		 jle	 SHORT $LN10@strcmpcase

; 366  :             return 1;

  000c9	b8 01 00 00 00	 mov	 eax, 1
  000ce	eb 05		 jmp	 SHORT $LN1@strcmpcase
$LN10@strcmpcase:

; 367  :     }

  000d0	e9 49 ff ff ff	 jmp	 $LN4@strcmpcase
$LN1@strcmpcase:

; 368  : }

  000d5	83 c4 08	 add	 esp, 8
  000d8	3b ec		 cmp	 ebp, esp
  000da	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000df	8b e5		 mov	 esp, ebp
  000e1	5d		 pop	 ebp
  000e2	c3		 ret	 0
_strcmpcasenosensitive_internal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unzStringFileNameCompare@12
_TEXT	SEGMENT
_fileName1$ = 8						; size = 4
_fileName2$ = 12					; size = 4
_iCaseSensitivity$ = 16					; size = 4
_unzStringFileNameCompare@12 PROC			; COMDAT

; 394  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 395  :     if (iCaseSensitivity==0)

  0000d	83 7d 10 00	 cmp	 DWORD PTR _iCaseSensitivity$[ebp], 0
  00011	75 07		 jne	 SHORT $LN2@unzStringF

; 396  :         iCaseSensitivity=CASESENSITIVITYDEFAULTVALUE;

  00013	c7 45 10 02 00
	00 00		 mov	 DWORD PTR _iCaseSensitivity$[ebp], 2
$LN2@unzStringF:

; 397  : 
; 398  :     if (iCaseSensitivity==1)

  0001a	83 7d 10 01	 cmp	 DWORD PTR _iCaseSensitivity$[ebp], 1
  0001e	75 12		 jne	 SHORT $LN3@unzStringF

; 399  :         return strcmp(fileName1,fileName2);

  00020	8b 45 0c	 mov	 eax, DWORD PTR _fileName2$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _fileName1$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 _strcmp
  0002d	83 c4 08	 add	 esp, 8
  00030	eb 10		 jmp	 SHORT $LN1@unzStringF
$LN3@unzStringF:

; 400  : 
; 401  :     return STRCMPCASENOSENTIVEFUNCTION(fileName1,fileName2);

  00032	8b 55 0c	 mov	 edx, DWORD PTR _fileName2$[ebp]
  00035	52		 push	 edx
  00036	8b 45 08	 mov	 eax, DWORD PTR _fileName1$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 _strcmpcasenosensitive_internal
  0003f	83 c4 08	 add	 esp, 8
$LN1@unzStringF:

; 402  : }

  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	5d		 pop	 ebp
  0004a	c2 0c 00	 ret	 12			; 0000000cH
_unzStringFileNameCompare@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unz64local_SearchCentralDir
_TEXT	SEGMENT
tv140 = -80						; size = 4
tv139 = -76						; size = 4
tv89 = -72						; size = 4
tv222 = -68						; size = 8
tv198 = -60						; size = 8
_i$1 = -52						; size = 4
_uReadPos$2 = -48					; size = 8
_uReadSize$3 = -40					; size = 4
_uPosFound$ = -36					; size = 8
_uMaxBack$ = -28					; size = 8
_uBackRead$ = -20					; size = 8
_uSizeFile$ = -12					; size = 8
_buf$ = -4						; size = 4
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_unz64local_SearchCentralDir PROC			; COMDAT

; 414  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d b0	 lea	 edi, DWORD PTR [ebp-80]
  0000b	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 415  :     unsigned char* buf;
; 416  :     ZPOS64_T uSizeFile;
; 417  :     ZPOS64_T uBackRead;
; 418  :     ZPOS64_T uMaxBack=0xffff; /* maximum size of global comment */

  00021	c7 45 e4 ff ff
	00 00		 mov	 DWORD PTR _uMaxBack$[ebp], 65535 ; 0000ffffH
  00028	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _uMaxBack$[ebp+4], 0

; 419  :     ZPOS64_T uPosFound=0;

  0002f	0f 57 c0	 xorps	 xmm0, xmm0
  00032	66 0f 13 45 dc	 movlpd	 QWORD PTR _uPosFound$[ebp], xmm0

; 420  : 
; 421  :     if (ZSEEK64(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  00037	6a 02		 push	 2
  00039	6a 00		 push	 0
  0003b	6a 00		 push	 0
  0003d	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  00040	50		 push	 eax
  00041	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 _call_zseek64
  0004a	83 c4 14	 add	 esp, 20			; 00000014H
  0004d	85 c0		 test	 eax, eax
  0004f	74 09		 je	 SHORT $LN7@unz64local

; 422  :         return 0;

  00051	33 c0		 xor	 eax, eax
  00053	33 d2		 xor	 edx, edx
  00055	e9 16 02 00 00	 jmp	 $LN1@unz64local
$LN7@unz64local:

; 423  : 
; 424  : 
; 425  :     uSizeFile = ZTELL64(*pzlib_filefunc_def,filestream);

  0005a	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  0005d	52		 push	 edx
  0005e	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 _call_ztell64
  00067	83 c4 08	 add	 esp, 8
  0006a	89 45 f4	 mov	 DWORD PTR _uSizeFile$[ebp], eax
  0006d	89 55 f8	 mov	 DWORD PTR _uSizeFile$[ebp+4], edx

; 426  : 
; 427  :     if (uMaxBack>uSizeFile)

  00070	8b 4d e8	 mov	 ecx, DWORD PTR _uMaxBack$[ebp+4]
  00073	3b 4d f8	 cmp	 ecx, DWORD PTR _uSizeFile$[ebp+4]
  00076	72 16		 jb	 SHORT $LN8@unz64local
  00078	77 08		 ja	 SHORT $LN24@unz64local
  0007a	8b 55 e4	 mov	 edx, DWORD PTR _uMaxBack$[ebp]
  0007d	3b 55 f4	 cmp	 edx, DWORD PTR _uSizeFile$[ebp]
  00080	76 0c		 jbe	 SHORT $LN8@unz64local
$LN24@unz64local:

; 428  :         uMaxBack = uSizeFile;

  00082	8b 45 f4	 mov	 eax, DWORD PTR _uSizeFile$[ebp]
  00085	89 45 e4	 mov	 DWORD PTR _uMaxBack$[ebp], eax
  00088	8b 4d f8	 mov	 ecx, DWORD PTR _uSizeFile$[ebp+4]
  0008b	89 4d e8	 mov	 DWORD PTR _uMaxBack$[ebp+4], ecx
$LN8@unz64local:

; 429  : 
; 430  :     buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  0008e	68 04 04 00 00	 push	 1028			; 00000404H
  00093	e8 00 00 00 00	 call	 _malloc
  00098	83 c4 04	 add	 esp, 4
  0009b	89 45 fc	 mov	 DWORD PTR _buf$[ebp], eax

; 431  :     if (buf==NULL)

  0009e	83 7d fc 00	 cmp	 DWORD PTR _buf$[ebp], 0
  000a2	75 09		 jne	 SHORT $LN9@unz64local

; 432  :         return 0;

  000a4	33 c0		 xor	 eax, eax
  000a6	33 d2		 xor	 edx, edx
  000a8	e9 c3 01 00 00	 jmp	 $LN1@unz64local
$LN9@unz64local:

; 433  : 
; 434  :     uBackRead = 4;

  000ad	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR _uBackRead$[ebp], 4
  000b4	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _uBackRead$[ebp+4], 0
$LN2@unz64local:

; 435  :     while (uBackRead<uMaxBack)

  000bb	8b 55 f0	 mov	 edx, DWORD PTR _uBackRead$[ebp+4]
  000be	3b 55 e8	 cmp	 edx, DWORD PTR _uMaxBack$[ebp+4]
  000c1	0f 87 91 01 00
	00		 ja	 $LN3@unz64local
  000c7	72 0c		 jb	 SHORT $LN25@unz64local
  000c9	8b 45 ec	 mov	 eax, DWORD PTR _uBackRead$[ebp]
  000cc	3b 45 e4	 cmp	 eax, DWORD PTR _uMaxBack$[ebp]
  000cf	0f 83 83 01 00
	00		 jae	 $LN3@unz64local
$LN25@unz64local:

; 436  :     {
; 437  :         uLong uReadSize;
; 438  :         ZPOS64_T uReadPos ;
; 439  :         int i;
; 440  :         if (uBackRead+BUFREADCOMMENT>uMaxBack)

  000d5	0f ae e8	 lfence
  000d8	8b 4d ec	 mov	 ecx, DWORD PTR _uBackRead$[ebp]
  000db	81 c1 00 04 00
	00		 add	 ecx, 1024		; 00000400H
  000e1	8b 55 f0	 mov	 edx, DWORD PTR _uBackRead$[ebp+4]
  000e4	83 d2 00	 adc	 edx, 0
  000e7	89 4d c4	 mov	 DWORD PTR tv198[ebp], ecx
  000ea	89 55 c8	 mov	 DWORD PTR tv198[ebp+4], edx
  000ed	8b 45 c8	 mov	 eax, DWORD PTR tv198[ebp+4]
  000f0	3b 45 e8	 cmp	 eax, DWORD PTR _uMaxBack$[ebp+4]
  000f3	72 18		 jb	 SHORT $LN10@unz64local
  000f5	77 08		 ja	 SHORT $LN26@unz64local
  000f7	8b 4d c4	 mov	 ecx, DWORD PTR tv198[ebp]
  000fa	3b 4d e4	 cmp	 ecx, DWORD PTR _uMaxBack$[ebp]
  000fd	76 0e		 jbe	 SHORT $LN10@unz64local
$LN26@unz64local:

; 441  :             uBackRead = uMaxBack;

  000ff	8b 55 e4	 mov	 edx, DWORD PTR _uMaxBack$[ebp]
  00102	89 55 ec	 mov	 DWORD PTR _uBackRead$[ebp], edx
  00105	8b 45 e8	 mov	 eax, DWORD PTR _uMaxBack$[ebp+4]
  00108	89 45 f0	 mov	 DWORD PTR _uBackRead$[ebp+4], eax
  0010b	eb 15		 jmp	 SHORT $LN11@unz64local
$LN10@unz64local:

; 442  :         else
; 443  :             uBackRead+=BUFREADCOMMENT;

  0010d	8b 4d ec	 mov	 ecx, DWORD PTR _uBackRead$[ebp]
  00110	81 c1 00 04 00
	00		 add	 ecx, 1024		; 00000400H
  00116	8b 55 f0	 mov	 edx, DWORD PTR _uBackRead$[ebp+4]
  00119	83 d2 00	 adc	 edx, 0
  0011c	89 4d ec	 mov	 DWORD PTR _uBackRead$[ebp], ecx
  0011f	89 55 f0	 mov	 DWORD PTR _uBackRead$[ebp+4], edx
$LN11@unz64local:

; 444  :         uReadPos = uSizeFile-uBackRead ;

  00122	8b 45 f4	 mov	 eax, DWORD PTR _uSizeFile$[ebp]
  00125	2b 45 ec	 sub	 eax, DWORD PTR _uBackRead$[ebp]
  00128	8b 4d f8	 mov	 ecx, DWORD PTR _uSizeFile$[ebp+4]
  0012b	1b 4d f0	 sbb	 ecx, DWORD PTR _uBackRead$[ebp+4]
  0012e	89 45 d0	 mov	 DWORD PTR _uReadPos$2[ebp], eax
  00131	89 4d d4	 mov	 DWORD PTR _uReadPos$2[ebp+4], ecx

; 445  : 
; 446  :         uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?

  00134	8b 55 f4	 mov	 edx, DWORD PTR _uSizeFile$[ebp]
  00137	2b 55 d0	 sub	 edx, DWORD PTR _uReadPos$2[ebp]
  0013a	8b 45 f8	 mov	 eax, DWORD PTR _uSizeFile$[ebp+4]
  0013d	1b 45 d4	 sbb	 eax, DWORD PTR _uReadPos$2[ebp+4]
  00140	89 55 bc	 mov	 DWORD PTR tv222[ebp], edx
  00143	89 45 c0	 mov	 DWORD PTR tv222[ebp+4], eax
  00146	83 7d c0 00	 cmp	 DWORD PTR tv222[ebp+4], 0
  0014a	72 14		 jb	 SHORT $LN18@unz64local
  0014c	77 09		 ja	 SHORT $LN27@unz64local
  0014e	81 7d bc 04 04
	00 00		 cmp	 DWORD PTR tv222[ebp], 1028 ; 00000404H
  00155	76 09		 jbe	 SHORT $LN18@unz64local
$LN27@unz64local:
  00157	c7 45 b8 04 04
	00 00		 mov	 DWORD PTR tv89[ebp], 1028 ; 00000404H
  0015e	eb 09		 jmp	 SHORT $LN19@unz64local
$LN18@unz64local:
  00160	8b 4d f4	 mov	 ecx, DWORD PTR _uSizeFile$[ebp]
  00163	2b 4d d0	 sub	 ecx, DWORD PTR _uReadPos$2[ebp]
  00166	89 4d b8	 mov	 DWORD PTR tv89[ebp], ecx
$LN19@unz64local:
  00169	8b 55 b8	 mov	 edx, DWORD PTR tv89[ebp]
  0016c	89 55 d8	 mov	 DWORD PTR _uReadSize$3[ebp], edx

; 447  :                      (BUFREADCOMMENT+4) : (uLong)(uSizeFile-uReadPos);
; 448  :         if (ZSEEK64(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0016f	6a 00		 push	 0
  00171	8b 45 d4	 mov	 eax, DWORD PTR _uReadPos$2[ebp+4]
  00174	50		 push	 eax
  00175	8b 4d d0	 mov	 ecx, DWORD PTR _uReadPos$2[ebp]
  00178	51		 push	 ecx
  00179	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  0017c	52		 push	 edx
  0017d	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00180	50		 push	 eax
  00181	e8 00 00 00 00	 call	 _call_zseek64
  00186	83 c4 14	 add	 esp, 20			; 00000014H
  00189	85 c0		 test	 eax, eax
  0018b	74 05		 je	 SHORT $LN12@unz64local

; 449  :             break;

  0018d	e9 c6 00 00 00	 jmp	 $LN3@unz64local
$LN12@unz64local:

; 450  : 
; 451  :         if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  00192	0f ae e8	 lfence
  00195	8b f4		 mov	 esi, esp
  00197	8b 4d d8	 mov	 ecx, DWORD PTR _uReadSize$3[ebp]
  0019a	51		 push	 ecx
  0019b	8b 55 fc	 mov	 edx, DWORD PTR _buf$[ebp]
  0019e	52		 push	 edx
  0019f	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  001a2	50		 push	 eax
  001a3	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  001a6	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  001a9	52		 push	 edx
  001aa	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  001ad	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001b0	ff d1		 call	 ecx
  001b2	83 c4 10	 add	 esp, 16			; 00000010H
  001b5	3b f4		 cmp	 esi, esp
  001b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001bc	3b 45 d8	 cmp	 eax, DWORD PTR _uReadSize$3[ebp]
  001bf	74 05		 je	 SHORT $LN13@unz64local

; 452  :             break;

  001c1	e9 92 00 00 00	 jmp	 $LN3@unz64local
$LN13@unz64local:

; 453  : 
; 454  :         for (i=(int)uReadSize-3; (i--)>0;)

  001c6	8b 55 d8	 mov	 edx, DWORD PTR _uReadSize$3[ebp]
  001c9	83 ea 03	 sub	 edx, 3
  001cc	89 55 cc	 mov	 DWORD PTR _i$1[ebp], edx
$LN6@unz64local:
  001cf	8b 45 cc	 mov	 eax, DWORD PTR _i$1[ebp]
  001d2	89 45 b4	 mov	 DWORD PTR tv139[ebp], eax
  001d5	8b 4d cc	 mov	 ecx, DWORD PTR _i$1[ebp]
  001d8	83 e9 01	 sub	 ecx, 1
  001db	89 4d cc	 mov	 DWORD PTR _i$1[ebp], ecx
  001de	83 7d b4 00	 cmp	 DWORD PTR tv139[ebp], 0
  001e2	7e 09		 jle	 SHORT $LN20@unz64local
  001e4	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv140[ebp], 1
  001eb	eb 07		 jmp	 SHORT $LN21@unz64local
$LN20@unz64local:
  001ed	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv140[ebp], 0
$LN21@unz64local:
  001f4	83 7d b0 00	 cmp	 DWORD PTR tv140[ebp], 0
  001f8	74 4f		 je	 SHORT $LN5@unz64local

; 455  :             if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) &&
; 456  :                 ((*(buf+i+2))==0x05) && ((*(buf+i+3))==0x06))

  001fa	8b 55 fc	 mov	 edx, DWORD PTR _buf$[ebp]
  001fd	03 55 cc	 add	 edx, DWORD PTR _i$1[ebp]
  00200	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00203	83 f8 50	 cmp	 eax, 80			; 00000050H
  00206	75 3f		 jne	 SHORT $LN14@unz64local
  00208	8b 4d fc	 mov	 ecx, DWORD PTR _buf$[ebp]
  0020b	03 4d cc	 add	 ecx, DWORD PTR _i$1[ebp]
  0020e	0f b6 51 01	 movzx	 edx, BYTE PTR [ecx+1]
  00212	83 fa 4b	 cmp	 edx, 75			; 0000004bH
  00215	75 30		 jne	 SHORT $LN14@unz64local
  00217	8b 45 fc	 mov	 eax, DWORD PTR _buf$[ebp]
  0021a	03 45 cc	 add	 eax, DWORD PTR _i$1[ebp]
  0021d	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00221	83 f9 05	 cmp	 ecx, 5
  00224	75 21		 jne	 SHORT $LN14@unz64local
  00226	8b 55 fc	 mov	 edx, DWORD PTR _buf$[ebp]
  00229	03 55 cc	 add	 edx, DWORD PTR _i$1[ebp]
  0022c	0f b6 42 03	 movzx	 eax, BYTE PTR [edx+3]
  00230	83 f8 06	 cmp	 eax, 6
  00233	75 12		 jne	 SHORT $LN14@unz64local

; 457  :             {
; 458  :                 uPosFound = uReadPos+i;

  00235	8b 45 cc	 mov	 eax, DWORD PTR _i$1[ebp]
  00238	99		 cdq
  00239	03 45 d0	 add	 eax, DWORD PTR _uReadPos$2[ebp]
  0023c	13 55 d4	 adc	 edx, DWORD PTR _uReadPos$2[ebp+4]
  0023f	89 45 dc	 mov	 DWORD PTR _uPosFound$[ebp], eax
  00242	89 55 e0	 mov	 DWORD PTR _uPosFound$[ebp+4], edx

; 459  :                 break;

  00245	eb 02		 jmp	 SHORT $LN5@unz64local
$LN14@unz64local:

; 460  :             }

  00247	eb 86		 jmp	 SHORT $LN6@unz64local
$LN5@unz64local:

; 461  : 
; 462  :         if (uPosFound!=0)

  00249	8b 4d dc	 mov	 ecx, DWORD PTR _uPosFound$[ebp]
  0024c	0b 4d e0	 or	 ecx, DWORD PTR _uPosFound$[ebp+4]
  0024f	74 02		 je	 SHORT $LN15@unz64local

; 463  :             break;

  00251	eb 05		 jmp	 SHORT $LN3@unz64local
$LN15@unz64local:

; 464  :     }

  00253	e9 63 fe ff ff	 jmp	 $LN2@unz64local
$LN3@unz64local:

; 465  :     TRYFREE(buf);

  00258	83 7d fc 00	 cmp	 DWORD PTR _buf$[ebp], 0
  0025c	74 0c		 je	 SHORT $LN16@unz64local
  0025e	8b 55 fc	 mov	 edx, DWORD PTR _buf$[ebp]
  00261	52		 push	 edx
  00262	e8 00 00 00 00	 call	 _free
  00267	83 c4 04	 add	 esp, 4
$LN16@unz64local:

; 466  :     return uPosFound;

  0026a	8b 45 dc	 mov	 eax, DWORD PTR _uPosFound$[ebp]
  0026d	8b 55 e0	 mov	 edx, DWORD PTR _uPosFound$[ebp+4]
$LN1@unz64local:

; 467  : }

  00270	5f		 pop	 edi
  00271	5e		 pop	 esi
  00272	83 c4 50	 add	 esp, 80			; 00000050H
  00275	3b ec		 cmp	 ebp, esp
  00277	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0027c	8b e5		 mov	 esp, ebp
  0027e	5d		 pop	 ebp
  0027f	c3		 ret	 0
_unz64local_SearchCentralDir ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unz64local_SearchCentralDir64
_TEXT	SEGMENT
tv140 = -108						; size = 4
tv139 = -104						; size = 4
tv89 = -100						; size = 4
tv263 = -96						; size = 8
tv239 = -88						; size = 8
_i$1 = -80						; size = 4
_uReadPos$2 = -76					; size = 8
_uReadSize$3 = -68					; size = 4
_relativeOffset$ = -60					; size = 8
_uL$ = -44						; size = 4
_uPosFound$ = -36					; size = 8
_uMaxBack$ = -28					; size = 8
_uBackRead$ = -20					; size = 8
_uSizeFile$ = -12					; size = 8
_buf$ = -4						; size = 4
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_unz64local_SearchCentralDir64 PROC			; COMDAT

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d 94	 lea	 edi, DWORD PTR [ebp-108]
  0000b	b9 1b 00 00 00	 mov	 ecx, 27			; 0000001bH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 481  :     unsigned char* buf;
; 482  :     ZPOS64_T uSizeFile;
; 483  :     ZPOS64_T uBackRead;
; 484  :     ZPOS64_T uMaxBack=0xffff; /* maximum size of global comment */

  00021	c7 45 e4 ff ff
	00 00		 mov	 DWORD PTR _uMaxBack$[ebp], 65535 ; 0000ffffH
  00028	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _uMaxBack$[ebp+4], 0

; 485  :     ZPOS64_T uPosFound=0;

  0002f	0f 57 c0	 xorps	 xmm0, xmm0
  00032	66 0f 13 45 dc	 movlpd	 QWORD PTR _uPosFound$[ebp], xmm0

; 486  :     uLong uL;
; 487  :                 ZPOS64_T relativeOffset;
; 488  : 
; 489  :     if (ZSEEK64(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  00037	6a 02		 push	 2
  00039	6a 00		 push	 0
  0003b	6a 00		 push	 0
  0003d	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  00040	50		 push	 eax
  00041	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 _call_zseek64
  0004a	83 c4 14	 add	 esp, 20			; 00000014H
  0004d	85 c0		 test	 eax, eax
  0004f	74 09		 je	 SHORT $LN7@unz64local

; 490  :         return 0;

  00051	33 c0		 xor	 eax, eax
  00053	33 d2		 xor	 edx, edx
  00055	e9 3b 03 00 00	 jmp	 $LN1@unz64local
$LN7@unz64local:

; 491  : 
; 492  : 
; 493  :     uSizeFile = ZTELL64(*pzlib_filefunc_def,filestream);

  0005a	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  0005d	52		 push	 edx
  0005e	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 _call_ztell64
  00067	83 c4 08	 add	 esp, 8
  0006a	89 45 f4	 mov	 DWORD PTR _uSizeFile$[ebp], eax
  0006d	89 55 f8	 mov	 DWORD PTR _uSizeFile$[ebp+4], edx

; 494  : 
; 495  :     if (uMaxBack>uSizeFile)

  00070	8b 4d e8	 mov	 ecx, DWORD PTR _uMaxBack$[ebp+4]
  00073	3b 4d f8	 cmp	 ecx, DWORD PTR _uSizeFile$[ebp+4]
  00076	72 16		 jb	 SHORT $LN8@unz64local
  00078	77 08		 ja	 SHORT $LN35@unz64local
  0007a	8b 55 e4	 mov	 edx, DWORD PTR _uMaxBack$[ebp]
  0007d	3b 55 f4	 cmp	 edx, DWORD PTR _uSizeFile$[ebp]
  00080	76 0c		 jbe	 SHORT $LN8@unz64local
$LN35@unz64local:

; 496  :         uMaxBack = uSizeFile;

  00082	8b 45 f4	 mov	 eax, DWORD PTR _uSizeFile$[ebp]
  00085	89 45 e4	 mov	 DWORD PTR _uMaxBack$[ebp], eax
  00088	8b 4d f8	 mov	 ecx, DWORD PTR _uSizeFile$[ebp+4]
  0008b	89 4d e8	 mov	 DWORD PTR _uMaxBack$[ebp+4], ecx
$LN8@unz64local:

; 497  : 
; 498  :     buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  0008e	68 04 04 00 00	 push	 1028			; 00000404H
  00093	e8 00 00 00 00	 call	 _malloc
  00098	83 c4 04	 add	 esp, 4
  0009b	89 45 fc	 mov	 DWORD PTR _buf$[ebp], eax

; 499  :     if (buf==NULL)

  0009e	83 7d fc 00	 cmp	 DWORD PTR _buf$[ebp], 0
  000a2	75 09		 jne	 SHORT $LN9@unz64local

; 500  :         return 0;

  000a4	33 c0		 xor	 eax, eax
  000a6	33 d2		 xor	 edx, edx
  000a8	e9 e8 02 00 00	 jmp	 $LN1@unz64local
$LN9@unz64local:

; 501  : 
; 502  :     uBackRead = 4;

  000ad	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR _uBackRead$[ebp], 4
  000b4	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _uBackRead$[ebp+4], 0
$LN2@unz64local:

; 503  :     while (uBackRead<uMaxBack)

  000bb	8b 55 f0	 mov	 edx, DWORD PTR _uBackRead$[ebp+4]
  000be	3b 55 e8	 cmp	 edx, DWORD PTR _uMaxBack$[ebp+4]
  000c1	0f 87 91 01 00
	00		 ja	 $LN3@unz64local
  000c7	72 0c		 jb	 SHORT $LN36@unz64local
  000c9	8b 45 ec	 mov	 eax, DWORD PTR _uBackRead$[ebp]
  000cc	3b 45 e4	 cmp	 eax, DWORD PTR _uMaxBack$[ebp]
  000cf	0f 83 83 01 00
	00		 jae	 $LN3@unz64local
$LN36@unz64local:

; 504  :     {
; 505  :         uLong uReadSize;
; 506  :         ZPOS64_T uReadPos;
; 507  :         int i;
; 508  :         if (uBackRead+BUFREADCOMMENT>uMaxBack)

  000d5	0f ae e8	 lfence
  000d8	8b 4d ec	 mov	 ecx, DWORD PTR _uBackRead$[ebp]
  000db	81 c1 00 04 00
	00		 add	 ecx, 1024		; 00000400H
  000e1	8b 55 f0	 mov	 edx, DWORD PTR _uBackRead$[ebp+4]
  000e4	83 d2 00	 adc	 edx, 0
  000e7	89 4d a8	 mov	 DWORD PTR tv239[ebp], ecx
  000ea	89 55 ac	 mov	 DWORD PTR tv239[ebp+4], edx
  000ed	8b 45 ac	 mov	 eax, DWORD PTR tv239[ebp+4]
  000f0	3b 45 e8	 cmp	 eax, DWORD PTR _uMaxBack$[ebp+4]
  000f3	72 18		 jb	 SHORT $LN10@unz64local
  000f5	77 08		 ja	 SHORT $LN37@unz64local
  000f7	8b 4d a8	 mov	 ecx, DWORD PTR tv239[ebp]
  000fa	3b 4d e4	 cmp	 ecx, DWORD PTR _uMaxBack$[ebp]
  000fd	76 0e		 jbe	 SHORT $LN10@unz64local
$LN37@unz64local:

; 509  :             uBackRead = uMaxBack;

  000ff	8b 55 e4	 mov	 edx, DWORD PTR _uMaxBack$[ebp]
  00102	89 55 ec	 mov	 DWORD PTR _uBackRead$[ebp], edx
  00105	8b 45 e8	 mov	 eax, DWORD PTR _uMaxBack$[ebp+4]
  00108	89 45 f0	 mov	 DWORD PTR _uBackRead$[ebp+4], eax
  0010b	eb 15		 jmp	 SHORT $LN11@unz64local
$LN10@unz64local:

; 510  :         else
; 511  :             uBackRead+=BUFREADCOMMENT;

  0010d	8b 4d ec	 mov	 ecx, DWORD PTR _uBackRead$[ebp]
  00110	81 c1 00 04 00
	00		 add	 ecx, 1024		; 00000400H
  00116	8b 55 f0	 mov	 edx, DWORD PTR _uBackRead$[ebp+4]
  00119	83 d2 00	 adc	 edx, 0
  0011c	89 4d ec	 mov	 DWORD PTR _uBackRead$[ebp], ecx
  0011f	89 55 f0	 mov	 DWORD PTR _uBackRead$[ebp+4], edx
$LN11@unz64local:

; 512  :         uReadPos = uSizeFile-uBackRead ;

  00122	8b 45 f4	 mov	 eax, DWORD PTR _uSizeFile$[ebp]
  00125	2b 45 ec	 sub	 eax, DWORD PTR _uBackRead$[ebp]
  00128	8b 4d f8	 mov	 ecx, DWORD PTR _uSizeFile$[ebp+4]
  0012b	1b 4d f0	 sbb	 ecx, DWORD PTR _uBackRead$[ebp+4]
  0012e	89 45 b4	 mov	 DWORD PTR _uReadPos$2[ebp], eax
  00131	89 4d b8	 mov	 DWORD PTR _uReadPos$2[ebp+4], ecx

; 513  : 
; 514  :         uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?

  00134	8b 55 f4	 mov	 edx, DWORD PTR _uSizeFile$[ebp]
  00137	2b 55 b4	 sub	 edx, DWORD PTR _uReadPos$2[ebp]
  0013a	8b 45 f8	 mov	 eax, DWORD PTR _uSizeFile$[ebp+4]
  0013d	1b 45 b8	 sbb	 eax, DWORD PTR _uReadPos$2[ebp+4]
  00140	89 55 a0	 mov	 DWORD PTR tv263[ebp], edx
  00143	89 45 a4	 mov	 DWORD PTR tv263[ebp+4], eax
  00146	83 7d a4 00	 cmp	 DWORD PTR tv263[ebp+4], 0
  0014a	72 14		 jb	 SHORT $LN29@unz64local
  0014c	77 09		 ja	 SHORT $LN38@unz64local
  0014e	81 7d a0 04 04
	00 00		 cmp	 DWORD PTR tv263[ebp], 1028 ; 00000404H
  00155	76 09		 jbe	 SHORT $LN29@unz64local
$LN38@unz64local:
  00157	c7 45 9c 04 04
	00 00		 mov	 DWORD PTR tv89[ebp], 1028 ; 00000404H
  0015e	eb 09		 jmp	 SHORT $LN30@unz64local
$LN29@unz64local:
  00160	8b 4d f4	 mov	 ecx, DWORD PTR _uSizeFile$[ebp]
  00163	2b 4d b4	 sub	 ecx, DWORD PTR _uReadPos$2[ebp]
  00166	89 4d 9c	 mov	 DWORD PTR tv89[ebp], ecx
$LN30@unz64local:
  00169	8b 55 9c	 mov	 edx, DWORD PTR tv89[ebp]
  0016c	89 55 bc	 mov	 DWORD PTR _uReadSize$3[ebp], edx

; 515  :                      (BUFREADCOMMENT+4) : (uLong)(uSizeFile-uReadPos);
; 516  :         if (ZSEEK64(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0016f	6a 00		 push	 0
  00171	8b 45 b8	 mov	 eax, DWORD PTR _uReadPos$2[ebp+4]
  00174	50		 push	 eax
  00175	8b 4d b4	 mov	 ecx, DWORD PTR _uReadPos$2[ebp]
  00178	51		 push	 ecx
  00179	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  0017c	52		 push	 edx
  0017d	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00180	50		 push	 eax
  00181	e8 00 00 00 00	 call	 _call_zseek64
  00186	83 c4 14	 add	 esp, 20			; 00000014H
  00189	85 c0		 test	 eax, eax
  0018b	74 05		 je	 SHORT $LN12@unz64local

; 517  :             break;

  0018d	e9 c6 00 00 00	 jmp	 $LN3@unz64local
$LN12@unz64local:

; 518  : 
; 519  :         if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  00192	0f ae e8	 lfence
  00195	8b f4		 mov	 esi, esp
  00197	8b 4d bc	 mov	 ecx, DWORD PTR _uReadSize$3[ebp]
  0019a	51		 push	 ecx
  0019b	8b 55 fc	 mov	 edx, DWORD PTR _buf$[ebp]
  0019e	52		 push	 edx
  0019f	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  001a2	50		 push	 eax
  001a3	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  001a6	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  001a9	52		 push	 edx
  001aa	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  001ad	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001b0	ff d1		 call	 ecx
  001b2	83 c4 10	 add	 esp, 16			; 00000010H
  001b5	3b f4		 cmp	 esi, esp
  001b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001bc	3b 45 bc	 cmp	 eax, DWORD PTR _uReadSize$3[ebp]
  001bf	74 05		 je	 SHORT $LN13@unz64local

; 520  :             break;

  001c1	e9 92 00 00 00	 jmp	 $LN3@unz64local
$LN13@unz64local:

; 521  : 
; 522  :         for (i=(int)uReadSize-3; (i--)>0;)

  001c6	8b 55 bc	 mov	 edx, DWORD PTR _uReadSize$3[ebp]
  001c9	83 ea 03	 sub	 edx, 3
  001cc	89 55 b0	 mov	 DWORD PTR _i$1[ebp], edx
$LN6@unz64local:
  001cf	8b 45 b0	 mov	 eax, DWORD PTR _i$1[ebp]
  001d2	89 45 98	 mov	 DWORD PTR tv139[ebp], eax
  001d5	8b 4d b0	 mov	 ecx, DWORD PTR _i$1[ebp]
  001d8	83 e9 01	 sub	 ecx, 1
  001db	89 4d b0	 mov	 DWORD PTR _i$1[ebp], ecx
  001de	83 7d 98 00	 cmp	 DWORD PTR tv139[ebp], 0
  001e2	7e 09		 jle	 SHORT $LN31@unz64local
  001e4	c7 45 94 01 00
	00 00		 mov	 DWORD PTR tv140[ebp], 1
  001eb	eb 07		 jmp	 SHORT $LN32@unz64local
$LN31@unz64local:
  001ed	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv140[ebp], 0
$LN32@unz64local:
  001f4	83 7d 94 00	 cmp	 DWORD PTR tv140[ebp], 0
  001f8	74 4f		 je	 SHORT $LN5@unz64local

; 523  :             if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) &&
; 524  :                 ((*(buf+i+2))==0x06) && ((*(buf+i+3))==0x07))

  001fa	8b 55 fc	 mov	 edx, DWORD PTR _buf$[ebp]
  001fd	03 55 b0	 add	 edx, DWORD PTR _i$1[ebp]
  00200	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00203	83 f8 50	 cmp	 eax, 80			; 00000050H
  00206	75 3f		 jne	 SHORT $LN14@unz64local
  00208	8b 4d fc	 mov	 ecx, DWORD PTR _buf$[ebp]
  0020b	03 4d b0	 add	 ecx, DWORD PTR _i$1[ebp]
  0020e	0f b6 51 01	 movzx	 edx, BYTE PTR [ecx+1]
  00212	83 fa 4b	 cmp	 edx, 75			; 0000004bH
  00215	75 30		 jne	 SHORT $LN14@unz64local
  00217	8b 45 fc	 mov	 eax, DWORD PTR _buf$[ebp]
  0021a	03 45 b0	 add	 eax, DWORD PTR _i$1[ebp]
  0021d	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00221	83 f9 06	 cmp	 ecx, 6
  00224	75 21		 jne	 SHORT $LN14@unz64local
  00226	8b 55 fc	 mov	 edx, DWORD PTR _buf$[ebp]
  00229	03 55 b0	 add	 edx, DWORD PTR _i$1[ebp]
  0022c	0f b6 42 03	 movzx	 eax, BYTE PTR [edx+3]
  00230	83 f8 07	 cmp	 eax, 7
  00233	75 12		 jne	 SHORT $LN14@unz64local

; 525  :             {
; 526  :                 uPosFound = uReadPos+i;

  00235	8b 45 b0	 mov	 eax, DWORD PTR _i$1[ebp]
  00238	99		 cdq
  00239	03 45 b4	 add	 eax, DWORD PTR _uReadPos$2[ebp]
  0023c	13 55 b8	 adc	 edx, DWORD PTR _uReadPos$2[ebp+4]
  0023f	89 45 dc	 mov	 DWORD PTR _uPosFound$[ebp], eax
  00242	89 55 e0	 mov	 DWORD PTR _uPosFound$[ebp+4], edx

; 527  :                 break;

  00245	eb 02		 jmp	 SHORT $LN5@unz64local
$LN14@unz64local:

; 528  :             }

  00247	eb 86		 jmp	 SHORT $LN6@unz64local
$LN5@unz64local:

; 529  : 
; 530  :         if (uPosFound!=0)

  00249	8b 4d dc	 mov	 ecx, DWORD PTR _uPosFound$[ebp]
  0024c	0b 4d e0	 or	 ecx, DWORD PTR _uPosFound$[ebp+4]
  0024f	74 02		 je	 SHORT $LN15@unz64local

; 531  :             break;

  00251	eb 05		 jmp	 SHORT $LN3@unz64local
$LN15@unz64local:

; 532  :     }

  00253	e9 63 fe ff ff	 jmp	 $LN2@unz64local
$LN3@unz64local:

; 533  :     TRYFREE(buf);

  00258	83 7d fc 00	 cmp	 DWORD PTR _buf$[ebp], 0
  0025c	74 0c		 je	 SHORT $LN16@unz64local
  0025e	8b 55 fc	 mov	 edx, DWORD PTR _buf$[ebp]
  00261	52		 push	 edx
  00262	e8 00 00 00 00	 call	 _free
  00267	83 c4 04	 add	 esp, 4
$LN16@unz64local:

; 534  :     if (uPosFound == 0)

  0026a	8b 45 dc	 mov	 eax, DWORD PTR _uPosFound$[ebp]
  0026d	0b 45 e0	 or	 eax, DWORD PTR _uPosFound$[ebp+4]
  00270	75 09		 jne	 SHORT $LN17@unz64local

; 535  :         return 0;

  00272	33 c0		 xor	 eax, eax
  00274	33 d2		 xor	 edx, edx
  00276	e9 1a 01 00 00	 jmp	 $LN1@unz64local
$LN17@unz64local:

; 536  : 
; 537  :     /* Zip64 end of central directory locator */
; 538  :     if (ZSEEK64(*pzlib_filefunc_def,filestream, uPosFound,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0027b	6a 00		 push	 0
  0027d	8b 4d e0	 mov	 ecx, DWORD PTR _uPosFound$[ebp+4]
  00280	51		 push	 ecx
  00281	8b 55 dc	 mov	 edx, DWORD PTR _uPosFound$[ebp]
  00284	52		 push	 edx
  00285	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  00288	50		 push	 eax
  00289	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0028c	51		 push	 ecx
  0028d	e8 00 00 00 00	 call	 _call_zseek64
  00292	83 c4 14	 add	 esp, 20			; 00000014H
  00295	85 c0		 test	 eax, eax
  00297	74 09		 je	 SHORT $LN18@unz64local

; 539  :         return 0;

  00299	33 c0		 xor	 eax, eax
  0029b	33 d2		 xor	 edx, edx
  0029d	e9 f3 00 00 00	 jmp	 $LN1@unz64local
$LN18@unz64local:

; 540  : 
; 541  :     /* the signature, already checked */
; 542  :     if (unz64local_getLong(pzlib_filefunc_def,filestream,&uL)!=UNZ_OK)

  002a2	8d 55 d4	 lea	 edx, DWORD PTR _uL$[ebp]
  002a5	52		 push	 edx
  002a6	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  002a9	50		 push	 eax
  002aa	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  002ad	51		 push	 ecx
  002ae	e8 00 00 00 00	 call	 _unz64local_getLong
  002b3	83 c4 0c	 add	 esp, 12			; 0000000cH
  002b6	85 c0		 test	 eax, eax
  002b8	74 09		 je	 SHORT $LN19@unz64local

; 543  :         return 0;

  002ba	33 c0		 xor	 eax, eax
  002bc	33 d2		 xor	 edx, edx
  002be	e9 d2 00 00 00	 jmp	 $LN1@unz64local
$LN19@unz64local:

; 544  : 
; 545  :     /* number of the disk with the start of the zip64 end of  central directory */
; 546  :     if (unz64local_getLong(pzlib_filefunc_def,filestream,&uL)!=UNZ_OK)

  002c3	8d 55 d4	 lea	 edx, DWORD PTR _uL$[ebp]
  002c6	52		 push	 edx
  002c7	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  002ca	50		 push	 eax
  002cb	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  002ce	51		 push	 ecx
  002cf	e8 00 00 00 00	 call	 _unz64local_getLong
  002d4	83 c4 0c	 add	 esp, 12			; 0000000cH
  002d7	85 c0		 test	 eax, eax
  002d9	74 09		 je	 SHORT $LN20@unz64local

; 547  :         return 0;

  002db	33 c0		 xor	 eax, eax
  002dd	33 d2		 xor	 edx, edx
  002df	e9 b1 00 00 00	 jmp	 $LN1@unz64local
$LN20@unz64local:

; 548  :     if (uL != 0)

  002e4	83 7d d4 00	 cmp	 DWORD PTR _uL$[ebp], 0
  002e8	74 09		 je	 SHORT $LN21@unz64local

; 549  :         return 0;

  002ea	33 c0		 xor	 eax, eax
  002ec	33 d2		 xor	 edx, edx
  002ee	e9 a2 00 00 00	 jmp	 $LN1@unz64local
$LN21@unz64local:

; 550  : 
; 551  :     /* relative offset of the zip64 end of central directory record */
; 552  :     if (unz64local_getLong64(pzlib_filefunc_def,filestream,&relativeOffset)!=UNZ_OK)

  002f3	8d 55 c4	 lea	 edx, DWORD PTR _relativeOffset$[ebp]
  002f6	52		 push	 edx
  002f7	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  002fa	50		 push	 eax
  002fb	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  002fe	51		 push	 ecx
  002ff	e8 00 00 00 00	 call	 _unz64local_getLong64
  00304	83 c4 0c	 add	 esp, 12			; 0000000cH
  00307	85 c0		 test	 eax, eax
  00309	74 09		 je	 SHORT $LN22@unz64local

; 553  :         return 0;

  0030b	33 c0		 xor	 eax, eax
  0030d	33 d2		 xor	 edx, edx
  0030f	e9 81 00 00 00	 jmp	 $LN1@unz64local
$LN22@unz64local:

; 554  : 
; 555  :     /* total number of disks */
; 556  :     if (unz64local_getLong(pzlib_filefunc_def,filestream,&uL)!=UNZ_OK)

  00314	8d 55 d4	 lea	 edx, DWORD PTR _uL$[ebp]
  00317	52		 push	 edx
  00318	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  0031b	50		 push	 eax
  0031c	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0031f	51		 push	 ecx
  00320	e8 00 00 00 00	 call	 _unz64local_getLong
  00325	83 c4 0c	 add	 esp, 12			; 0000000cH
  00328	85 c0		 test	 eax, eax
  0032a	74 06		 je	 SHORT $LN23@unz64local

; 557  :         return 0;

  0032c	33 c0		 xor	 eax, eax
  0032e	33 d2		 xor	 edx, edx
  00330	eb 63		 jmp	 SHORT $LN1@unz64local
$LN23@unz64local:

; 558  :     if (uL != 1)

  00332	83 7d d4 01	 cmp	 DWORD PTR _uL$[ebp], 1
  00336	74 06		 je	 SHORT $LN24@unz64local

; 559  :         return 0;

  00338	33 c0		 xor	 eax, eax
  0033a	33 d2		 xor	 edx, edx
  0033c	eb 57		 jmp	 SHORT $LN1@unz64local
$LN24@unz64local:

; 560  : 
; 561  :     /* Goto end of central directory record */
; 562  :     if (ZSEEK64(*pzlib_filefunc_def,filestream, relativeOffset,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0033e	6a 00		 push	 0
  00340	8b 55 c8	 mov	 edx, DWORD PTR _relativeOffset$[ebp+4]
  00343	52		 push	 edx
  00344	8b 45 c4	 mov	 eax, DWORD PTR _relativeOffset$[ebp]
  00347	50		 push	 eax
  00348	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  0034b	51		 push	 ecx
  0034c	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0034f	52		 push	 edx
  00350	e8 00 00 00 00	 call	 _call_zseek64
  00355	83 c4 14	 add	 esp, 20			; 00000014H
  00358	85 c0		 test	 eax, eax
  0035a	74 06		 je	 SHORT $LN25@unz64local

; 563  :         return 0;

  0035c	33 c0		 xor	 eax, eax
  0035e	33 d2		 xor	 edx, edx
  00360	eb 33		 jmp	 SHORT $LN1@unz64local
$LN25@unz64local:

; 564  : 
; 565  :      /* the signature */
; 566  :     if (unz64local_getLong(pzlib_filefunc_def,filestream,&uL)!=UNZ_OK)

  00362	8d 45 d4	 lea	 eax, DWORD PTR _uL$[ebp]
  00365	50		 push	 eax
  00366	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00369	51		 push	 ecx
  0036a	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0036d	52		 push	 edx
  0036e	e8 00 00 00 00	 call	 _unz64local_getLong
  00373	83 c4 0c	 add	 esp, 12			; 0000000cH
  00376	85 c0		 test	 eax, eax
  00378	74 06		 je	 SHORT $LN26@unz64local

; 567  :         return 0;

  0037a	33 c0		 xor	 eax, eax
  0037c	33 d2		 xor	 edx, edx
  0037e	eb 15		 jmp	 SHORT $LN1@unz64local
$LN26@unz64local:

; 568  : 
; 569  :     if (uL != 0x06064b50)

  00380	81 7d d4 50 4b
	06 06		 cmp	 DWORD PTR _uL$[ebp], 101075792 ; 06064b50H
  00387	74 06		 je	 SHORT $LN27@unz64local

; 570  :         return 0;

  00389	33 c0		 xor	 eax, eax
  0038b	33 d2		 xor	 edx, edx
  0038d	eb 06		 jmp	 SHORT $LN1@unz64local
$LN27@unz64local:

; 571  : 
; 572  :     return relativeOffset;

  0038f	8b 45 c4	 mov	 eax, DWORD PTR _relativeOffset$[ebp]
  00392	8b 55 c8	 mov	 edx, DWORD PTR _relativeOffset$[ebp+4]
$LN1@unz64local:

; 573  : }

  00395	52		 push	 edx
  00396	8b cd		 mov	 ecx, ebp
  00398	50		 push	 eax
  00399	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN42@unz64local
  0039f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  003a4	58		 pop	 eax
  003a5	5a		 pop	 edx
  003a6	5f		 pop	 edi
  003a7	5e		 pop	 esi
  003a8	83 c4 6c	 add	 esp, 108		; 0000006cH
  003ab	3b ec		 cmp	 ebp, esp
  003ad	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003b2	8b e5		 mov	 esp, ebp
  003b4	5d		 pop	 ebp
  003b5	c3		 ret	 0
  003b6	66 90		 npad	 2
$LN42@unz64local:
  003b8	02 00 00 00	 DD	 2
  003bc	00 00 00 00	 DD	 $LN41@unz64local
$LN41@unz64local:
  003c0	d4 ff ff ff	 DD	 -44			; ffffffd4H
  003c4	04 00 00 00	 DD	 4
  003c8	00 00 00 00	 DD	 $LN39@unz64local
  003cc	c4 ff ff ff	 DD	 -60			; ffffffc4H
  003d0	08 00 00 00	 DD	 8
  003d4	00 00 00 00	 DD	 $LN40@unz64local
$LN40@unz64local:
  003d8	72		 DB	 114			; 00000072H
  003d9	65		 DB	 101			; 00000065H
  003da	6c		 DB	 108			; 0000006cH
  003db	61		 DB	 97			; 00000061H
  003dc	74		 DB	 116			; 00000074H
  003dd	69		 DB	 105			; 00000069H
  003de	76		 DB	 118			; 00000076H
  003df	65		 DB	 101			; 00000065H
  003e0	4f		 DB	 79			; 0000004fH
  003e1	66		 DB	 102			; 00000066H
  003e2	66		 DB	 102			; 00000066H
  003e3	73		 DB	 115			; 00000073H
  003e4	65		 DB	 101			; 00000065H
  003e5	74		 DB	 116			; 00000074H
  003e6	00		 DB	 0
$LN39@unz64local:
  003e7	75		 DB	 117			; 00000075H
  003e8	4c		 DB	 76			; 0000004cH
  003e9	00		 DB	 0
_unz64local_SearchCentralDir64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unzOpenInternal
_TEXT	SEGMENT
tv415 = -352						; size = 8
_uL64$1 = -340						; size = 8
_uS$2 = -324						; size = 4
_err$ = -316						; size = 4
_number_entry_CD$ = -308				; size = 8
_number_disk_with_CD$ = -292				; size = 4
_number_disk$ = -280					; size = 4
_uL$ = -268						; size = 4
_central_pos$ = -260					; size = 8
_s$ = -252						; size = 4
_us$ = -244						; size = 240
_path$ = 8						; size = 4
_pzlib_filefunc64_32_def$ = 12				; size = 4
_is64bitOpenFunction$ = 16				; size = 4
_unzOpenInternal PROC					; COMDAT

; 587  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 60 01 00
	00		 sub	 esp, 352		; 00000160H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd a0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-352]
  00011	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00022	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 588  :     unz64_s us;
; 589  :     unz64_s *s;
; 590  :     ZPOS64_T central_pos;
; 591  :     uLong   uL;
; 592  : 
; 593  :     uLong number_disk;          /* number of the current dist, used for
; 594  :                                    spaning ZIP, unsupported, always 0*/
; 595  :     uLong number_disk_with_CD;  /* number the the disk with central dir, used
; 596  :                                    for spaning ZIP, unsupported, always 0*/
; 597  :     ZPOS64_T number_entry_CD;      /* total number of entries in
; 598  :                                    the central dir
; 599  :                                    (same than number_entry on nospan) */
; 600  : 
; 601  :     int err=UNZ_OK;

  00027	c7 85 c4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _err$[ebp], 0

; 602  : 
; 603  :     if (unz_copyright[0]!=' ')

  00031	b8 01 00 00 00	 mov	 eax, 1
  00036	6b c8 00	 imul	 ecx, eax, 0
  00039	0f be 91 00 00
	00 00		 movsx	 edx, BYTE PTR _unz_copyright[ecx]
  00040	83 fa 20	 cmp	 edx, 32			; 00000020H
  00043	74 07		 je	 SHORT $LN2@unzOpenInt

; 604  :         return NULL;

  00045	33 c0		 xor	 eax, eax
  00047	e9 2a 06 00 00	 jmp	 $LN1@unzOpenInt
$LN2@unzOpenInt:

; 605  : 
; 606  :     us.z_filefunc.zseek32_file = NULL;

  0004c	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _us$[ebp+40], 0

; 607  :     us.z_filefunc.ztell32_file = NULL;

  00056	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _us$[ebp+36], 0

; 608  :     if (pzlib_filefunc64_32_def==NULL)

  00060	83 7d 0c 00	 cmp	 DWORD PTR _pzlib_filefunc64_32_def$[ebp], 0
  00064	75 11		 jne	 SHORT $LN3@unzOpenInt

; 609  :         fill_fopen64_filefunc(&us.z_filefunc.zfile_func64);

  00066	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 _fill_fopen64_filefunc
  00072	83 c4 04	 add	 esp, 4
  00075	eb 10		 jmp	 SHORT $LN4@unzOpenInt
$LN3@unzOpenInt:

; 610  :     else
; 611  :         us.z_filefunc = *pzlib_filefunc64_32_def;

  00077	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0007c	8b 75 0c	 mov	 esi, DWORD PTR _pzlib_filefunc64_32_def$[ebp]
  0007f	8d bd 0c ff ff
	ff		 lea	 edi, DWORD PTR _us$[ebp]
  00085	f3 a5		 rep movsd
$LN4@unzOpenInt:

; 612  :     us.is64bitOpenFunction = is64bitOpenFunction;

  00087	8b 4d 10	 mov	 ecx, DWORD PTR _is64bitOpenFunction$[ebp]
  0008a	89 8d 38 ff ff
	ff		 mov	 DWORD PTR _us$[ebp+44], ecx

; 613  : 
; 614  : 
; 615  : 
; 616  :     us.filestream = ZOPEN64(us.z_filefunc,

  00090	6a 05		 push	 5
  00092	8b 55 08	 mov	 edx, DWORD PTR _path$[ebp]
  00095	52		 push	 edx
  00096	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 _call_zopen64
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a5	89 85 3c ff ff
	ff		 mov	 DWORD PTR _us$[ebp+48], eax

; 617  :                                                  path,
; 618  :                                                  ZLIB_FILEFUNC_MODE_READ |
; 619  :                                                  ZLIB_FILEFUNC_MODE_EXISTING);
; 620  :     if (us.filestream==NULL)

  000ab	83 bd 3c ff ff
	ff 00		 cmp	 DWORD PTR _us$[ebp+48], 0
  000b2	75 07		 jne	 SHORT $LN5@unzOpenInt

; 621  :         return NULL;

  000b4	33 c0		 xor	 eax, eax
  000b6	e9 bb 05 00 00	 jmp	 $LN1@unzOpenInt
$LN5@unzOpenInt:

; 622  : 
; 623  :     central_pos = unz64local_SearchCentralDir64(&us.z_filefunc,us.filestream);

  000bb	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR _us$[ebp+48]
  000c1	51		 push	 ecx
  000c2	8d 95 0c ff ff
	ff		 lea	 edx, DWORD PTR _us$[ebp]
  000c8	52		 push	 edx
  000c9	e8 00 00 00 00	 call	 _unz64local_SearchCentralDir64
  000ce	83 c4 08	 add	 esp, 8
  000d1	89 85 fc fe ff
	ff		 mov	 DWORD PTR _central_pos$[ebp], eax
  000d7	89 95 00 ff ff
	ff		 mov	 DWORD PTR _central_pos$[ebp+4], edx

; 624  :     if (central_pos)

  000dd	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _central_pos$[ebp]
  000e3	0b 85 00 ff ff
	ff		 or	 eax, DWORD PTR _central_pos$[ebp+4]
  000e9	0f 84 2d 02 00
	00		 je	 $LN6@unzOpenInt

; 625  :     {
; 626  :         uLong uS;
; 627  :         ZPOS64_T uL64;
; 628  : 
; 629  :         us.isZip64 = 1;

  000ef	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _us$[ebp+232], 1

; 630  : 
; 631  :         if (ZSEEK64(us.z_filefunc, us.filestream,
; 632  :                                       central_pos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  000f6	6a 00		 push	 0
  000f8	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _central_pos$[ebp+4]
  000fe	51		 push	 ecx
  000ff	8b 95 fc fe ff
	ff		 mov	 edx, DWORD PTR _central_pos$[ebp]
  00105	52		 push	 edx
  00106	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _us$[ebp+48]
  0010c	50		 push	 eax
  0010d	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _us$[ebp]
  00113	51		 push	 ecx
  00114	e8 00 00 00 00	 call	 _call_zseek64
  00119	83 c4 14	 add	 esp, 20			; 00000014H
  0011c	85 c0		 test	 eax, eax
  0011e	74 0a		 je	 SHORT $LN8@unzOpenInt

; 633  :         err=UNZ_ERRNO;

  00120	c7 85 c4 fe ff
	ff ff ff ff ff	 mov	 DWORD PTR _err$[ebp], -1
$LN8@unzOpenInt:

; 634  : 
; 635  :         /* the signature, already checked */
; 636  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  0012a	8d 95 f4 fe ff
	ff		 lea	 edx, DWORD PTR _uL$[ebp]
  00130	52		 push	 edx
  00131	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _us$[ebp+48]
  00137	50		 push	 eax
  00138	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _us$[ebp]
  0013e	51		 push	 ecx
  0013f	e8 00 00 00 00	 call	 _unz64local_getLong
  00144	83 c4 0c	 add	 esp, 12			; 0000000cH
  00147	85 c0		 test	 eax, eax
  00149	74 0a		 je	 SHORT $LN9@unzOpenInt

; 637  :             err=UNZ_ERRNO;

  0014b	c7 85 c4 fe ff
	ff ff ff ff ff	 mov	 DWORD PTR _err$[ebp], -1
$LN9@unzOpenInt:

; 638  : 
; 639  :         /* size of zip64 end of central directory record */
; 640  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&uL64)!=UNZ_OK)

  00155	8d 95 ac fe ff
	ff		 lea	 edx, DWORD PTR _uL64$1[ebp]
  0015b	52		 push	 edx
  0015c	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _us$[ebp+48]
  00162	50		 push	 eax
  00163	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _us$[ebp]
  00169	51		 push	 ecx
  0016a	e8 00 00 00 00	 call	 _unz64local_getLong64
  0016f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00172	85 c0		 test	 eax, eax
  00174	74 0a		 je	 SHORT $LN10@unzOpenInt

; 641  :             err=UNZ_ERRNO;

  00176	c7 85 c4 fe ff
	ff ff ff ff ff	 mov	 DWORD PTR _err$[ebp], -1
$LN10@unzOpenInt:

; 642  : 
; 643  :         /* version made by */
; 644  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&uS)!=UNZ_OK)

  00180	8d 95 bc fe ff
	ff		 lea	 edx, DWORD PTR _uS$2[ebp]
  00186	52		 push	 edx
  00187	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _us$[ebp+48]
  0018d	50		 push	 eax
  0018e	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _us$[ebp]
  00194	51		 push	 ecx
  00195	e8 00 00 00 00	 call	 _unz64local_getShort
  0019a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0019d	85 c0		 test	 eax, eax
  0019f	74 0a		 je	 SHORT $LN11@unzOpenInt

; 645  :             err=UNZ_ERRNO;

  001a1	c7 85 c4 fe ff
	ff ff ff ff ff	 mov	 DWORD PTR _err$[ebp], -1
$LN11@unzOpenInt:

; 646  : 
; 647  :         /* version needed to extract */
; 648  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&uS)!=UNZ_OK)

  001ab	8d 95 bc fe ff
	ff		 lea	 edx, DWORD PTR _uS$2[ebp]
  001b1	52		 push	 edx
  001b2	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _us$[ebp+48]
  001b8	50		 push	 eax
  001b9	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _us$[ebp]
  001bf	51		 push	 ecx
  001c0	e8 00 00 00 00	 call	 _unz64local_getShort
  001c5	83 c4 0c	 add	 esp, 12			; 0000000cH
  001c8	85 c0		 test	 eax, eax
  001ca	74 0a		 je	 SHORT $LN12@unzOpenInt

; 649  :             err=UNZ_ERRNO;

  001cc	c7 85 c4 fe ff
	ff ff ff ff ff	 mov	 DWORD PTR _err$[ebp], -1
$LN12@unzOpenInt:

; 650  : 
; 651  :         /* number of this disk */
; 652  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&number_disk)!=UNZ_OK)

  001d6	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR _number_disk$[ebp]
  001dc	52		 push	 edx
  001dd	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _us$[ebp+48]
  001e3	50		 push	 eax
  001e4	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _us$[ebp]
  001ea	51		 push	 ecx
  001eb	e8 00 00 00 00	 call	 _unz64local_getLong
  001f0	83 c4 0c	 add	 esp, 12			; 0000000cH
  001f3	85 c0		 test	 eax, eax
  001f5	74 0a		 je	 SHORT $LN13@unzOpenInt

; 653  :             err=UNZ_ERRNO;

  001f7	c7 85 c4 fe ff
	ff ff ff ff ff	 mov	 DWORD PTR _err$[ebp], -1
$LN13@unzOpenInt:

; 654  : 
; 655  :         /* number of the disk with the start of the central directory */
; 656  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&number_disk_with_CD)!=UNZ_OK)

  00201	8d 95 dc fe ff
	ff		 lea	 edx, DWORD PTR _number_disk_with_CD$[ebp]
  00207	52		 push	 edx
  00208	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _us$[ebp+48]
  0020e	50		 push	 eax
  0020f	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _us$[ebp]
  00215	51		 push	 ecx
  00216	e8 00 00 00 00	 call	 _unz64local_getLong
  0021b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0021e	85 c0		 test	 eax, eax
  00220	74 0a		 je	 SHORT $LN14@unzOpenInt

; 657  :             err=UNZ_ERRNO;

  00222	c7 85 c4 fe ff
	ff ff ff ff ff	 mov	 DWORD PTR _err$[ebp], -1
$LN14@unzOpenInt:

; 658  : 
; 659  :         /* total number of entries in the central directory on this disk */
; 660  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&us.gi.number_entry)!=UNZ_OK)

  0022c	8d 95 44 ff ff
	ff		 lea	 edx, DWORD PTR _us$[ebp+56]
  00232	52		 push	 edx
  00233	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _us$[ebp+48]
  00239	50		 push	 eax
  0023a	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _us$[ebp]
  00240	51		 push	 ecx
  00241	e8 00 00 00 00	 call	 _unz64local_getLong64
  00246	83 c4 0c	 add	 esp, 12			; 0000000cH
  00249	85 c0		 test	 eax, eax
  0024b	74 0a		 je	 SHORT $LN15@unzOpenInt

; 661  :             err=UNZ_ERRNO;

  0024d	c7 85 c4 fe ff
	ff ff ff ff ff	 mov	 DWORD PTR _err$[ebp], -1
$LN15@unzOpenInt:

; 662  : 
; 663  :         /* total number of entries in the central directory */
; 664  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&number_entry_CD)!=UNZ_OK)

  00257	8d 95 cc fe ff
	ff		 lea	 edx, DWORD PTR _number_entry_CD$[ebp]
  0025d	52		 push	 edx
  0025e	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _us$[ebp+48]
  00264	50		 push	 eax
  00265	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _us$[ebp]
  0026b	51		 push	 ecx
  0026c	e8 00 00 00 00	 call	 _unz64local_getLong64
  00271	83 c4 0c	 add	 esp, 12			; 0000000cH
  00274	85 c0		 test	 eax, eax
  00276	74 0a		 je	 SHORT $LN16@unzOpenInt

; 665  :             err=UNZ_ERRNO;

  00278	c7 85 c4 fe ff
	ff ff ff ff ff	 mov	 DWORD PTR _err$[ebp], -1
$LN16@unzOpenInt:

; 666  : 
; 667  :         if ((number_entry_CD!=us.gi.number_entry) ||
; 668  :             (number_disk_with_CD!=0) ||

  00282	8b 95 cc fe ff
	ff		 mov	 edx, DWORD PTR _number_entry_CD$[ebp]
  00288	3b 95 44 ff ff
	ff		 cmp	 edx, DWORD PTR _us$[ebp+56]
  0028e	75 20		 jne	 SHORT $LN18@unzOpenInt
  00290	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _number_entry_CD$[ebp+4]
  00296	3b 85 48 ff ff
	ff		 cmp	 eax, DWORD PTR _us$[ebp+60]
  0029c	75 12		 jne	 SHORT $LN18@unzOpenInt
  0029e	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR _number_disk_with_CD$[ebp], 0
  002a5	75 09		 jne	 SHORT $LN18@unzOpenInt
  002a7	83 bd e8 fe ff
	ff 00		 cmp	 DWORD PTR _number_disk$[ebp], 0
  002ae	74 0a		 je	 SHORT $LN17@unzOpenInt
$LN18@unzOpenInt:

; 669  :             (number_disk!=0))
; 670  :             err=UNZ_BADZIPFILE;

  002b0	c7 85 c4 fe ff
	ff 99 ff ff ff	 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN17@unzOpenInt:

; 671  : 
; 672  :         /* size of the central directory */
; 673  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&us.size_central_dir)!=UNZ_OK)

  002ba	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _us$[ebp+112]
  002c0	51		 push	 ecx
  002c1	8b 95 3c ff ff
	ff		 mov	 edx, DWORD PTR _us$[ebp+48]
  002c7	52		 push	 edx
  002c8	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  002ce	50		 push	 eax
  002cf	e8 00 00 00 00	 call	 _unz64local_getLong64
  002d4	83 c4 0c	 add	 esp, 12			; 0000000cH
  002d7	85 c0		 test	 eax, eax
  002d9	74 0a		 je	 SHORT $LN19@unzOpenInt

; 674  :             err=UNZ_ERRNO;

  002db	c7 85 c4 fe ff
	ff ff ff ff ff	 mov	 DWORD PTR _err$[ebp], -1
$LN19@unzOpenInt:

; 675  : 
; 676  :         /* offset of start of central directory with respect to the
; 677  :           starting disk number */
; 678  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&us.offset_central_dir)!=UNZ_OK)

  002e5	8d 4d 84	 lea	 ecx, DWORD PTR _us$[ebp+120]
  002e8	51		 push	 ecx
  002e9	8b 95 3c ff ff
	ff		 mov	 edx, DWORD PTR _us$[ebp+48]
  002ef	52		 push	 edx
  002f0	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  002f6	50		 push	 eax
  002f7	e8 00 00 00 00	 call	 _unz64local_getLong64
  002fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  002ff	85 c0		 test	 eax, eax
  00301	74 0a		 je	 SHORT $LN20@unzOpenInt

; 679  :             err=UNZ_ERRNO;

  00303	c7 85 c4 fe ff
	ff ff ff ff ff	 mov	 DWORD PTR _err$[ebp], -1
$LN20@unzOpenInt:

; 680  : 
; 681  :         us.gi.size_comment = 0;

  0030d	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _us$[ebp+64], 0

; 682  :     }

  00317	e9 4c 02 00 00	 jmp	 $LN7@unzOpenInt
$LN6@unzOpenInt:

; 683  :     else
; 684  :     {
; 685  :         central_pos = unz64local_SearchCentralDir(&us.z_filefunc,us.filestream);

  0031c	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR _us$[ebp+48]
  00322	51		 push	 ecx
  00323	8d 95 0c ff ff
	ff		 lea	 edx, DWORD PTR _us$[ebp]
  00329	52		 push	 edx
  0032a	e8 00 00 00 00	 call	 _unz64local_SearchCentralDir
  0032f	83 c4 08	 add	 esp, 8
  00332	89 85 fc fe ff
	ff		 mov	 DWORD PTR _central_pos$[ebp], eax
  00338	89 95 00 ff ff
	ff		 mov	 DWORD PTR _central_pos$[ebp+4], edx

; 686  :         if (central_pos==0)

  0033e	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _central_pos$[ebp]
  00344	0b 85 00 ff ff
	ff		 or	 eax, DWORD PTR _central_pos$[ebp+4]
  0034a	75 0a		 jne	 SHORT $LN21@unzOpenInt

; 687  :             err=UNZ_ERRNO;

  0034c	c7 85 c4 fe ff
	ff ff ff ff ff	 mov	 DWORD PTR _err$[ebp], -1
$LN21@unzOpenInt:

; 688  : 
; 689  :         us.isZip64 = 0;

  00356	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _us$[ebp+232], 0

; 690  : 
; 691  :         if (ZSEEK64(us.z_filefunc, us.filestream,
; 692  :                                         central_pos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0035d	6a 00		 push	 0
  0035f	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _central_pos$[ebp+4]
  00365	51		 push	 ecx
  00366	8b 95 fc fe ff
	ff		 mov	 edx, DWORD PTR _central_pos$[ebp]
  0036c	52		 push	 edx
  0036d	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _us$[ebp+48]
  00373	50		 push	 eax
  00374	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _us$[ebp]
  0037a	51		 push	 ecx
  0037b	e8 00 00 00 00	 call	 _call_zseek64
  00380	83 c4 14	 add	 esp, 20			; 00000014H
  00383	85 c0		 test	 eax, eax
  00385	74 0a		 je	 SHORT $LN22@unzOpenInt

; 693  :             err=UNZ_ERRNO;

  00387	c7 85 c4 fe ff
	ff ff ff ff ff	 mov	 DWORD PTR _err$[ebp], -1
$LN22@unzOpenInt:

; 694  : 
; 695  :         /* the signature, already checked */
; 696  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  00391	8d 95 f4 fe ff
	ff		 lea	 edx, DWORD PTR _uL$[ebp]
  00397	52		 push	 edx
  00398	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _us$[ebp+48]
  0039e	50		 push	 eax
  0039f	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _us$[ebp]
  003a5	51		 push	 ecx
  003a6	e8 00 00 00 00	 call	 _unz64local_getLong
  003ab	83 c4 0c	 add	 esp, 12			; 0000000cH
  003ae	85 c0		 test	 eax, eax
  003b0	74 0a		 je	 SHORT $LN23@unzOpenInt

; 697  :             err=UNZ_ERRNO;

  003b2	c7 85 c4 fe ff
	ff ff ff ff ff	 mov	 DWORD PTR _err$[ebp], -1
$LN23@unzOpenInt:

; 698  : 
; 699  :         /* number of this disk */
; 700  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&number_disk)!=UNZ_OK)

  003bc	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR _number_disk$[ebp]
  003c2	52		 push	 edx
  003c3	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _us$[ebp+48]
  003c9	50		 push	 eax
  003ca	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _us$[ebp]
  003d0	51		 push	 ecx
  003d1	e8 00 00 00 00	 call	 _unz64local_getShort
  003d6	83 c4 0c	 add	 esp, 12			; 0000000cH
  003d9	85 c0		 test	 eax, eax
  003db	74 0a		 je	 SHORT $LN24@unzOpenInt

; 701  :             err=UNZ_ERRNO;

  003dd	c7 85 c4 fe ff
	ff ff ff ff ff	 mov	 DWORD PTR _err$[ebp], -1
$LN24@unzOpenInt:

; 702  : 
; 703  :         /* number of the disk with the start of the central directory */
; 704  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&number_disk_with_CD)!=UNZ_OK)

  003e7	8d 95 dc fe ff
	ff		 lea	 edx, DWORD PTR _number_disk_with_CD$[ebp]
  003ed	52		 push	 edx
  003ee	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _us$[ebp+48]
  003f4	50		 push	 eax
  003f5	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _us$[ebp]
  003fb	51		 push	 ecx
  003fc	e8 00 00 00 00	 call	 _unz64local_getShort
  00401	83 c4 0c	 add	 esp, 12			; 0000000cH
  00404	85 c0		 test	 eax, eax
  00406	74 0a		 je	 SHORT $LN25@unzOpenInt

; 705  :             err=UNZ_ERRNO;

  00408	c7 85 c4 fe ff
	ff ff ff ff ff	 mov	 DWORD PTR _err$[ebp], -1
$LN25@unzOpenInt:

; 706  : 
; 707  :         /* total number of entries in the central dir on this disk */
; 708  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  00412	8d 95 f4 fe ff
	ff		 lea	 edx, DWORD PTR _uL$[ebp]
  00418	52		 push	 edx
  00419	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _us$[ebp+48]
  0041f	50		 push	 eax
  00420	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _us$[ebp]
  00426	51		 push	 ecx
  00427	e8 00 00 00 00	 call	 _unz64local_getShort
  0042c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0042f	85 c0		 test	 eax, eax
  00431	74 0a		 je	 SHORT $LN26@unzOpenInt

; 709  :             err=UNZ_ERRNO;

  00433	c7 85 c4 fe ff
	ff ff ff ff ff	 mov	 DWORD PTR _err$[ebp], -1
$LN26@unzOpenInt:

; 710  :         us.gi.number_entry = uL;

  0043d	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR _uL$[ebp]
  00443	33 c0		 xor	 eax, eax
  00445	89 95 44 ff ff
	ff		 mov	 DWORD PTR _us$[ebp+56], edx
  0044b	89 85 48 ff ff
	ff		 mov	 DWORD PTR _us$[ebp+60], eax

; 711  : 
; 712  :         /* total number of entries in the central dir */
; 713  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  00451	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _uL$[ebp]
  00457	51		 push	 ecx
  00458	8b 95 3c ff ff
	ff		 mov	 edx, DWORD PTR _us$[ebp+48]
  0045e	52		 push	 edx
  0045f	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  00465	50		 push	 eax
  00466	e8 00 00 00 00	 call	 _unz64local_getShort
  0046b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0046e	85 c0		 test	 eax, eax
  00470	74 0a		 je	 SHORT $LN27@unzOpenInt

; 714  :             err=UNZ_ERRNO;

  00472	c7 85 c4 fe ff
	ff ff ff ff ff	 mov	 DWORD PTR _err$[ebp], -1
$LN27@unzOpenInt:

; 715  :         number_entry_CD = uL;

  0047c	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _uL$[ebp]
  00482	33 d2		 xor	 edx, edx
  00484	89 8d cc fe ff
	ff		 mov	 DWORD PTR _number_entry_CD$[ebp], ecx
  0048a	89 95 d0 fe ff
	ff		 mov	 DWORD PTR _number_entry_CD$[ebp+4], edx

; 716  : 
; 717  :         if ((number_entry_CD!=us.gi.number_entry) ||
; 718  :             (number_disk_with_CD!=0) ||

  00490	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _number_entry_CD$[ebp]
  00496	3b 85 44 ff ff
	ff		 cmp	 eax, DWORD PTR _us$[ebp+56]
  0049c	75 20		 jne	 SHORT $LN29@unzOpenInt
  0049e	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _number_entry_CD$[ebp+4]
  004a4	3b 8d 48 ff ff
	ff		 cmp	 ecx, DWORD PTR _us$[ebp+60]
  004aa	75 12		 jne	 SHORT $LN29@unzOpenInt
  004ac	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR _number_disk_with_CD$[ebp], 0
  004b3	75 09		 jne	 SHORT $LN29@unzOpenInt
  004b5	83 bd e8 fe ff
	ff 00		 cmp	 DWORD PTR _number_disk$[ebp], 0
  004bc	74 0a		 je	 SHORT $LN28@unzOpenInt
$LN29@unzOpenInt:

; 719  :             (number_disk!=0))
; 720  :             err=UNZ_BADZIPFILE;

  004be	c7 85 c4 fe ff
	ff 99 ff ff ff	 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN28@unzOpenInt:

; 721  : 
; 722  :         /* size of the central directory */
; 723  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  004c8	8d 95 f4 fe ff
	ff		 lea	 edx, DWORD PTR _uL$[ebp]
  004ce	52		 push	 edx
  004cf	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _us$[ebp+48]
  004d5	50		 push	 eax
  004d6	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _us$[ebp]
  004dc	51		 push	 ecx
  004dd	e8 00 00 00 00	 call	 _unz64local_getLong
  004e2	83 c4 0c	 add	 esp, 12			; 0000000cH
  004e5	85 c0		 test	 eax, eax
  004e7	74 0a		 je	 SHORT $LN30@unzOpenInt

; 724  :             err=UNZ_ERRNO;

  004e9	c7 85 c4 fe ff
	ff ff ff ff ff	 mov	 DWORD PTR _err$[ebp], -1
$LN30@unzOpenInt:

; 725  :         us.size_central_dir = uL;

  004f3	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR _uL$[ebp]
  004f9	33 c0		 xor	 eax, eax
  004fb	89 95 7c ff ff
	ff		 mov	 DWORD PTR _us$[ebp+112], edx
  00501	89 45 80	 mov	 DWORD PTR _us$[ebp+116], eax

; 726  : 
; 727  :         /* offset of start of central directory with respect to the
; 728  :             starting disk number */
; 729  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  00504	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _uL$[ebp]
  0050a	51		 push	 ecx
  0050b	8b 95 3c ff ff
	ff		 mov	 edx, DWORD PTR _us$[ebp+48]
  00511	52		 push	 edx
  00512	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  00518	50		 push	 eax
  00519	e8 00 00 00 00	 call	 _unz64local_getLong
  0051e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00521	85 c0		 test	 eax, eax
  00523	74 0a		 je	 SHORT $LN31@unzOpenInt

; 730  :             err=UNZ_ERRNO;

  00525	c7 85 c4 fe ff
	ff ff ff ff ff	 mov	 DWORD PTR _err$[ebp], -1
$LN31@unzOpenInt:

; 731  :         us.offset_central_dir = uL;

  0052f	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _uL$[ebp]
  00535	33 d2		 xor	 edx, edx
  00537	89 4d 84	 mov	 DWORD PTR _us$[ebp+120], ecx
  0053a	89 55 88	 mov	 DWORD PTR _us$[ebp+124], edx

; 732  : 
; 733  :         /* zipfile comment length */
; 734  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&us.gi.size_comment)!=UNZ_OK)

  0053d	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR _us$[ebp+64]
  00543	50		 push	 eax
  00544	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR _us$[ebp+48]
  0054a	51		 push	 ecx
  0054b	8d 95 0c ff ff
	ff		 lea	 edx, DWORD PTR _us$[ebp]
  00551	52		 push	 edx
  00552	e8 00 00 00 00	 call	 _unz64local_getShort
  00557	83 c4 0c	 add	 esp, 12			; 0000000cH
  0055a	85 c0		 test	 eax, eax
  0055c	74 0a		 je	 SHORT $LN7@unzOpenInt

; 735  :             err=UNZ_ERRNO;

  0055e	c7 85 c4 fe ff
	ff ff ff ff ff	 mov	 DWORD PTR _err$[ebp], -1
$LN7@unzOpenInt:

; 736  :     }
; 737  : 
; 738  :     if ((central_pos<us.offset_central_dir+us.size_central_dir) &&

  00568	8b 45 84	 mov	 eax, DWORD PTR _us$[ebp+120]
  0056b	03 85 7c ff ff
	ff		 add	 eax, DWORD PTR _us$[ebp+112]
  00571	8b 4d 88	 mov	 ecx, DWORD PTR _us$[ebp+124]
  00574	13 4d 80	 adc	 ecx, DWORD PTR _us$[ebp+116]
  00577	89 85 a0 fe ff
	ff		 mov	 DWORD PTR tv415[ebp], eax
  0057d	89 8d a4 fe ff
	ff		 mov	 DWORD PTR tv415[ebp+4], ecx
  00583	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR _central_pos$[ebp+4]
  00589	3b 95 a4 fe ff
	ff		 cmp	 edx, DWORD PTR tv415[ebp+4]
  0058f	77 23		 ja	 SHORT $LN33@unzOpenInt
  00591	72 0e		 jb	 SHORT $LN39@unzOpenInt
  00593	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _central_pos$[ebp]
  00599	3b 85 a0 fe ff
	ff		 cmp	 eax, DWORD PTR tv415[ebp]
  0059f	73 13		 jae	 SHORT $LN33@unzOpenInt
$LN39@unzOpenInt:
  005a1	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR _err$[ebp], 0
  005a8	75 0a		 jne	 SHORT $LN33@unzOpenInt

; 739  :         (err==UNZ_OK))
; 740  :         err=UNZ_BADZIPFILE;

  005aa	c7 85 c4 fe ff
	ff 99 ff ff ff	 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN33@unzOpenInt:

; 741  : 
; 742  :     if (err!=UNZ_OK)

  005b4	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR _err$[ebp], 0
  005bb	74 27		 je	 SHORT $LN34@unzOpenInt

; 743  :     {
; 744  :         ZCLOSE64(us.z_filefunc, us.filestream);

  005bd	8b f4		 mov	 esi, esp
  005bf	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR _us$[ebp+48]
  005c5	51		 push	 ecx
  005c6	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR _us$[ebp+28]
  005cc	52		 push	 edx
  005cd	ff 95 20 ff ff
	ff		 call	 DWORD PTR _us$[ebp+20]
  005d3	83 c4 08	 add	 esp, 8
  005d6	3b f4		 cmp	 esi, esp
  005d8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 745  :         return NULL;

  005dd	33 c0		 xor	 eax, eax
  005df	e9 92 00 00 00	 jmp	 $LN1@unzOpenInt
$LN34@unzOpenInt:

; 746  :     }
; 747  : 
; 748  :     us.byte_before_the_zipfile = central_pos -

  005e4	8b 45 84	 mov	 eax, DWORD PTR _us$[ebp+120]
  005e7	03 85 7c ff ff
	ff		 add	 eax, DWORD PTR _us$[ebp+112]
  005ed	8b 4d 88	 mov	 ecx, DWORD PTR _us$[ebp+124]
  005f0	13 4d 80	 adc	 ecx, DWORD PTR _us$[ebp+116]
  005f3	8b 95 fc fe ff
	ff		 mov	 edx, DWORD PTR _central_pos$[ebp]
  005f9	2b d0		 sub	 edx, eax
  005fb	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _central_pos$[ebp+4]
  00601	1b c1		 sbb	 eax, ecx
  00603	89 95 54 ff ff
	ff		 mov	 DWORD PTR _us$[ebp+72], edx
  00609	89 85 58 ff ff
	ff		 mov	 DWORD PTR _us$[ebp+76], eax

; 749  :                             (us.offset_central_dir+us.size_central_dir);
; 750  :     us.central_pos = central_pos;

  0060f	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _central_pos$[ebp]
  00615	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _us$[ebp+104], ecx
  0061b	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR _central_pos$[ebp+4]
  00621	89 95 78 ff ff
	ff		 mov	 DWORD PTR _us$[ebp+108], edx

; 751  :     us.pfile_in_zip_read = NULL;

  00627	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _us$[ebp+224], 0

; 752  :     us.encrypted = 0;

  0062e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _us$[ebp+228], 0

; 753  : 
; 754  : 
; 755  :     s=(unz64_s*)ALLOC(sizeof(unz64_s));

  00635	68 f0 00 00 00	 push	 240			; 000000f0H
  0063a	e8 00 00 00 00	 call	 _malloc
  0063f	83 c4 04	 add	 esp, 4
  00642	89 85 04 ff ff
	ff		 mov	 DWORD PTR _s$[ebp], eax

; 756  :     if( s != NULL)

  00648	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _s$[ebp], 0
  0064f	74 1f		 je	 SHORT $LN35@unzOpenInt

; 757  :     {
; 758  :         *s=us;

  00651	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00656	8d b5 0c ff ff
	ff		 lea	 esi, DWORD PTR _us$[ebp]
  0065c	8b bd 04 ff ff
	ff		 mov	 edi, DWORD PTR _s$[ebp]
  00662	f3 a5		 rep movsd

; 759  :         unzGoToFirstFile((unzFile)s);

  00664	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _s$[ebp]
  0066a	50		 push	 eax
  0066b	e8 00 00 00 00	 call	 _unzGoToFirstFile@4
$LN35@unzOpenInt:

; 760  :     }
; 761  :     return (unzFile)s;

  00670	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _s$[ebp]
$LN1@unzOpenInt:

; 762  : }

  00676	52		 push	 edx
  00677	8b cd		 mov	 ecx, ebp
  00679	50		 push	 eax
  0067a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN48@unzOpenInt
  00680	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00685	58		 pop	 eax
  00686	5a		 pop	 edx
  00687	5f		 pop	 edi
  00688	5e		 pop	 esi
  00689	81 c4 60 01 00
	00		 add	 esp, 352		; 00000160H
  0068f	3b ec		 cmp	 ebp, esp
  00691	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00696	8b e5		 mov	 esp, ebp
  00698	5d		 pop	 ebp
  00699	c3		 ret	 0
  0069a	66 90		 npad	 2
$LN48@unzOpenInt:
  0069c	07 00 00 00	 DD	 7
  006a0	00 00 00 00	 DD	 $LN47@unzOpenInt
$LN47@unzOpenInt:
  006a4	0c ff ff ff	 DD	 -244			; ffffff0cH
  006a8	f0 00 00 00	 DD	 240			; 000000f0H
  006ac	00 00 00 00	 DD	 $LN40@unzOpenInt
  006b0	f4 fe ff ff	 DD	 -268			; fffffef4H
  006b4	04 00 00 00	 DD	 4
  006b8	00 00 00 00	 DD	 $LN41@unzOpenInt
  006bc	e8 fe ff ff	 DD	 -280			; fffffee8H
  006c0	04 00 00 00	 DD	 4
  006c4	00 00 00 00	 DD	 $LN42@unzOpenInt
  006c8	dc fe ff ff	 DD	 -292			; fffffedcH
  006cc	04 00 00 00	 DD	 4
  006d0	00 00 00 00	 DD	 $LN43@unzOpenInt
  006d4	cc fe ff ff	 DD	 -308			; fffffeccH
  006d8	08 00 00 00	 DD	 8
  006dc	00 00 00 00	 DD	 $LN44@unzOpenInt
  006e0	bc fe ff ff	 DD	 -324			; fffffebcH
  006e4	04 00 00 00	 DD	 4
  006e8	00 00 00 00	 DD	 $LN45@unzOpenInt
  006ec	ac fe ff ff	 DD	 -340			; fffffeacH
  006f0	08 00 00 00	 DD	 8
  006f4	00 00 00 00	 DD	 $LN46@unzOpenInt
$LN46@unzOpenInt:
  006f8	75		 DB	 117			; 00000075H
  006f9	4c		 DB	 76			; 0000004cH
  006fa	36		 DB	 54			; 00000036H
  006fb	34		 DB	 52			; 00000034H
  006fc	00		 DB	 0
$LN45@unzOpenInt:
  006fd	75		 DB	 117			; 00000075H
  006fe	53		 DB	 83			; 00000053H
  006ff	00		 DB	 0
$LN44@unzOpenInt:
  00700	6e		 DB	 110			; 0000006eH
  00701	75		 DB	 117			; 00000075H
  00702	6d		 DB	 109			; 0000006dH
  00703	62		 DB	 98			; 00000062H
  00704	65		 DB	 101			; 00000065H
  00705	72		 DB	 114			; 00000072H
  00706	5f		 DB	 95			; 0000005fH
  00707	65		 DB	 101			; 00000065H
  00708	6e		 DB	 110			; 0000006eH
  00709	74		 DB	 116			; 00000074H
  0070a	72		 DB	 114			; 00000072H
  0070b	79		 DB	 121			; 00000079H
  0070c	5f		 DB	 95			; 0000005fH
  0070d	43		 DB	 67			; 00000043H
  0070e	44		 DB	 68			; 00000044H
  0070f	00		 DB	 0
$LN43@unzOpenInt:
  00710	6e		 DB	 110			; 0000006eH
  00711	75		 DB	 117			; 00000075H
  00712	6d		 DB	 109			; 0000006dH
  00713	62		 DB	 98			; 00000062H
  00714	65		 DB	 101			; 00000065H
  00715	72		 DB	 114			; 00000072H
  00716	5f		 DB	 95			; 0000005fH
  00717	64		 DB	 100			; 00000064H
  00718	69		 DB	 105			; 00000069H
  00719	73		 DB	 115			; 00000073H
  0071a	6b		 DB	 107			; 0000006bH
  0071b	5f		 DB	 95			; 0000005fH
  0071c	77		 DB	 119			; 00000077H
  0071d	69		 DB	 105			; 00000069H
  0071e	74		 DB	 116			; 00000074H
  0071f	68		 DB	 104			; 00000068H
  00720	5f		 DB	 95			; 0000005fH
  00721	43		 DB	 67			; 00000043H
  00722	44		 DB	 68			; 00000044H
  00723	00		 DB	 0
$LN42@unzOpenInt:
  00724	6e		 DB	 110			; 0000006eH
  00725	75		 DB	 117			; 00000075H
  00726	6d		 DB	 109			; 0000006dH
  00727	62		 DB	 98			; 00000062H
  00728	65		 DB	 101			; 00000065H
  00729	72		 DB	 114			; 00000072H
  0072a	5f		 DB	 95			; 0000005fH
  0072b	64		 DB	 100			; 00000064H
  0072c	69		 DB	 105			; 00000069H
  0072d	73		 DB	 115			; 00000073H
  0072e	6b		 DB	 107			; 0000006bH
  0072f	00		 DB	 0
$LN41@unzOpenInt:
  00730	75		 DB	 117			; 00000075H
  00731	4c		 DB	 76			; 0000004cH
  00732	00		 DB	 0
$LN40@unzOpenInt:
  00733	75		 DB	 117			; 00000075H
  00734	73		 DB	 115			; 00000073H
  00735	00		 DB	 0
_unzOpenInternal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unzOpen2@8
_TEXT	SEGMENT
_zlib_filefunc64_32_def_fill$1 = -48			; size = 44
_path$ = 8						; size = 4
_pzlib_filefunc32_def$ = 12				; size = 4
_unzOpen2@8 PROC					; COMDAT

; 767  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	57		 push	 edi
  00007	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  0000a	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 768  :     if (pzlib_filefunc32_def != NULL)

  00020	83 7d 0c 00	 cmp	 DWORD PTR _pzlib_filefunc32_def$[ebp], 0
  00024	74 26		 je	 SHORT $LN2@unzOpen2

; 769  :     {
; 770  :         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
; 771  :         fill_zlib_filefunc64_32_def_from_filefunc32(&zlib_filefunc64_32_def_fill,pzlib_filefunc32_def);

  00026	8b 45 0c	 mov	 eax, DWORD PTR _pzlib_filefunc32_def$[ebp]
  00029	50		 push	 eax
  0002a	8d 4d d0	 lea	 ecx, DWORD PTR _zlib_filefunc64_32_def_fill$1[ebp]
  0002d	51		 push	 ecx
  0002e	e8 00 00 00 00	 call	 _fill_zlib_filefunc64_32_def_from_filefunc32
  00033	83 c4 08	 add	 esp, 8

; 772  :         return unzOpenInternal(path, &zlib_filefunc64_32_def_fill, 0);

  00036	6a 00		 push	 0
  00038	8d 55 d0	 lea	 edx, DWORD PTR _zlib_filefunc64_32_def_fill$1[ebp]
  0003b	52		 push	 edx
  0003c	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 _unzOpenInternal
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH
  00048	eb 12		 jmp	 SHORT $LN1@unzOpen2

; 773  :     }

  0004a	eb 10		 jmp	 SHORT $LN1@unzOpen2
$LN2@unzOpen2:

; 774  :     else
; 775  :         return unzOpenInternal(path, NULL, 0);

  0004c	6a 00		 push	 0
  0004e	6a 00		 push	 0
  00050	8b 4d 08	 mov	 ecx, DWORD PTR _path$[ebp]
  00053	51		 push	 ecx
  00054	e8 00 00 00 00	 call	 _unzOpenInternal
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@unzOpen2:

; 776  : }

  0005c	52		 push	 edx
  0005d	8b cd		 mov	 ecx, ebp
  0005f	50		 push	 eax
  00060	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@unzOpen2
  00066	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0006b	58		 pop	 eax
  0006c	5a		 pop	 edx
  0006d	5f		 pop	 edi
  0006e	83 c4 34	 add	 esp, 52			; 00000034H
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 08 00	 ret	 8
  0007e	66 90		 npad	 2
$LN8@unzOpen2:
  00080	01 00 00 00	 DD	 1
  00084	00 00 00 00	 DD	 $LN7@unzOpen2
$LN7@unzOpen2:
  00088	d0 ff ff ff	 DD	 -48			; ffffffd0H
  0008c	2c 00 00 00	 DD	 44			; 0000002cH
  00090	00 00 00 00	 DD	 $LN6@unzOpen2
$LN6@unzOpen2:
  00094	7a		 DB	 122			; 0000007aH
  00095	6c		 DB	 108			; 0000006cH
  00096	69		 DB	 105			; 00000069H
  00097	62		 DB	 98			; 00000062H
  00098	5f		 DB	 95			; 0000005fH
  00099	66		 DB	 102			; 00000066H
  0009a	69		 DB	 105			; 00000069H
  0009b	6c		 DB	 108			; 0000006cH
  0009c	65		 DB	 101			; 00000065H
  0009d	66		 DB	 102			; 00000066H
  0009e	75		 DB	 117			; 00000075H
  0009f	6e		 DB	 110			; 0000006eH
  000a0	63		 DB	 99			; 00000063H
  000a1	36		 DB	 54			; 00000036H
  000a2	34		 DB	 52			; 00000034H
  000a3	5f		 DB	 95			; 0000005fH
  000a4	33		 DB	 51			; 00000033H
  000a5	32		 DB	 50			; 00000032H
  000a6	5f		 DB	 95			; 0000005fH
  000a7	64		 DB	 100			; 00000064H
  000a8	65		 DB	 101			; 00000065H
  000a9	66		 DB	 102			; 00000066H
  000aa	5f		 DB	 95			; 0000005fH
  000ab	66		 DB	 102			; 00000066H
  000ac	69		 DB	 105			; 00000069H
  000ad	6c		 DB	 108			; 0000006cH
  000ae	6c		 DB	 108			; 0000006cH
  000af	00		 DB	 0
_unzOpen2@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unzOpen2_64@8
_TEXT	SEGMENT
_zlib_filefunc64_32_def_fill$1 = -48			; size = 44
_path$ = 8						; size = 4
_pzlib_filefunc_def$ = 12				; size = 4
_unzOpen2_64@8 PROC					; COMDAT

; 780  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  0000b	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 781  :     if (pzlib_filefunc_def != NULL)

  00021	83 7d 0c 00	 cmp	 DWORD PTR _pzlib_filefunc_def$[ebp], 0
  00025	74 31		 je	 SHORT $LN2@unzOpen2_6

; 782  :     {
; 783  :         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
; 784  :         zlib_filefunc64_32_def_fill.zfile_func64 = *pzlib_filefunc_def;

  00027	b9 08 00 00 00	 mov	 ecx, 8
  0002c	8b 75 0c	 mov	 esi, DWORD PTR _pzlib_filefunc_def$[ebp]
  0002f	8d 7d d0	 lea	 edi, DWORD PTR _zlib_filefunc64_32_def_fill$1[ebp]
  00032	f3 a5		 rep movsd

; 785  :         zlib_filefunc64_32_def_fill.ztell32_file = NULL;

  00034	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _zlib_filefunc64_32_def_fill$1[ebp+36], 0

; 786  :         zlib_filefunc64_32_def_fill.zseek32_file = NULL;

  0003b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _zlib_filefunc64_32_def_fill$1[ebp+40], 0

; 787  :         return unzOpenInternal(path, &zlib_filefunc64_32_def_fill, 1);

  00042	6a 01		 push	 1
  00044	8d 45 d0	 lea	 eax, DWORD PTR _zlib_filefunc64_32_def_fill$1[ebp]
  00047	50		 push	 eax
  00048	8b 4d 08	 mov	 ecx, DWORD PTR _path$[ebp]
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 _unzOpenInternal
  00051	83 c4 0c	 add	 esp, 12			; 0000000cH
  00054	eb 12		 jmp	 SHORT $LN1@unzOpen2_6

; 788  :     }

  00056	eb 10		 jmp	 SHORT $LN1@unzOpen2_6
$LN2@unzOpen2_6:

; 789  :     else
; 790  :         return unzOpenInternal(path, NULL, 1);

  00058	6a 01		 push	 1
  0005a	6a 00		 push	 0
  0005c	8b 55 08	 mov	 edx, DWORD PTR _path$[ebp]
  0005f	52		 push	 edx
  00060	e8 00 00 00 00	 call	 _unzOpenInternal
  00065	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@unzOpen2_6:

; 791  : }

  00068	52		 push	 edx
  00069	8b cd		 mov	 ecx, ebp
  0006b	50		 push	 eax
  0006c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@unzOpen2_6
  00072	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00077	58		 pop	 eax
  00078	5a		 pop	 edx
  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	83 c4 34	 add	 esp, 52			; 00000034H
  0007e	3b ec		 cmp	 ebp, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 08 00	 ret	 8
  0008b	90		 npad	 1
$LN8@unzOpen2_6:
  0008c	01 00 00 00	 DD	 1
  00090	00 00 00 00	 DD	 $LN7@unzOpen2_6
$LN7@unzOpen2_6:
  00094	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00098	2c 00 00 00	 DD	 44			; 0000002cH
  0009c	00 00 00 00	 DD	 $LN6@unzOpen2_6
$LN6@unzOpen2_6:
  000a0	7a		 DB	 122			; 0000007aH
  000a1	6c		 DB	 108			; 0000006cH
  000a2	69		 DB	 105			; 00000069H
  000a3	62		 DB	 98			; 00000062H
  000a4	5f		 DB	 95			; 0000005fH
  000a5	66		 DB	 102			; 00000066H
  000a6	69		 DB	 105			; 00000069H
  000a7	6c		 DB	 108			; 0000006cH
  000a8	65		 DB	 101			; 00000065H
  000a9	66		 DB	 102			; 00000066H
  000aa	75		 DB	 117			; 00000075H
  000ab	6e		 DB	 110			; 0000006eH
  000ac	63		 DB	 99			; 00000063H
  000ad	36		 DB	 54			; 00000036H
  000ae	34		 DB	 52			; 00000034H
  000af	5f		 DB	 95			; 0000005fH
  000b0	33		 DB	 51			; 00000033H
  000b1	32		 DB	 50			; 00000032H
  000b2	5f		 DB	 95			; 0000005fH
  000b3	64		 DB	 100			; 00000064H
  000b4	65		 DB	 101			; 00000065H
  000b5	66		 DB	 102			; 00000066H
  000b6	5f		 DB	 95			; 0000005fH
  000b7	66		 DB	 102			; 00000066H
  000b8	69		 DB	 105			; 00000069H
  000b9	6c		 DB	 108			; 0000006cH
  000ba	6c		 DB	 108			; 0000006cH
  000bb	00		 DB	 0
_unzOpen2_64@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unzOpen@4
_TEXT	SEGMENT
_path$ = 8						; size = 4
_unzOpen@4 PROC						; COMDAT

; 794  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 795  :     return unzOpenInternal(path, NULL, 0);

  0000d	6a 00		 push	 0
  0000f	6a 00		 push	 0
  00011	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _unzOpenInternal
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 796  : }

  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
_unzOpen@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unzOpen64@4
_TEXT	SEGMENT
_path$ = 8						; size = 4
_unzOpen64@4 PROC					; COMDAT

; 799  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 800  :     return unzOpenInternal(path, NULL, 1);

  0000d	6a 01		 push	 1
  0000f	6a 00		 push	 0
  00011	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _unzOpenInternal
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 801  : }

  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
_unzOpen64@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unzClose@4
_TEXT	SEGMENT
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_unzClose@4 PROC					; COMDAT

; 809  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00011	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 810  :     unz64_s* s;
; 811  :     if (file==NULL)

  00016	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  0001a	75 07		 jne	 SHORT $LN2@unzClose

; 812  :         return UNZ_PARAMERROR;

  0001c	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00021	eb 51		 jmp	 SHORT $LN1@unzClose
$LN2@unzClose:

; 813  :     s=(unz64_s*)file;

  00023	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00026	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 814  : 
; 815  :     if (s->pfile_in_zip_read!=NULL)

  00029	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0002c	83 b9 e0 00 00
	00 00		 cmp	 DWORD PTR [ecx+224], 0
  00033	74 09		 je	 SHORT $LN3@unzClose

; 816  :         unzCloseCurrentFile(file);

  00035	8b 55 08	 mov	 edx, DWORD PTR _file$[ebp]
  00038	52		 push	 edx
  00039	e8 00 00 00 00	 call	 _unzCloseCurrentFile@4
$LN3@unzClose:

; 817  : 
; 818  :     ZCLOSE64(s->z_filefunc, s->filestream);

  0003e	8b f4		 mov	 esi, esp
  00040	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00043	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00046	51		 push	 ecx
  00047	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0004a	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0004d	50		 push	 eax
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00051	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00054	ff d2		 call	 edx
  00056	83 c4 08	 add	 esp, 8
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 819  :     TRYFREE(s);

  00060	83 7d fc 00	 cmp	 DWORD PTR _s$[ebp], 0
  00064	74 0c		 je	 SHORT $LN4@unzClose
  00066	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 _free
  0006f	83 c4 04	 add	 esp, 4
$LN4@unzClose:

; 820  :     return UNZ_OK;

  00072	33 c0		 xor	 eax, eax
$LN1@unzClose:

; 821  : }

  00074	5e		 pop	 esi
  00075	83 c4 04	 add	 esp, 4
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
_unzClose@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unzGetGlobalInfo64@8
_TEXT	SEGMENT
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_pglobal_info$ = 12					; size = 4
_unzGetGlobalInfo64@8 PROC				; COMDAT

; 829  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00010	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 830  :     unz64_s* s;
; 831  :     if (file==NULL)

  00015	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00019	75 07		 jne	 SHORT $LN2@unzGetGlob

; 832  :         return UNZ_PARAMERROR;

  0001b	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00020	eb 27		 jmp	 SHORT $LN1@unzGetGlob
$LN2@unzGetGlob:

; 833  :     s=(unz64_s*)file;

  00022	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00025	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 834  :     *pglobal_info=s->gi;

  00028	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0002b	83 c1 38	 add	 ecx, 56			; 00000038H
  0002e	8b 55 0c	 mov	 edx, DWORD PTR _pglobal_info$[ebp]
  00031	8b 01		 mov	 eax, DWORD PTR [ecx]
  00033	89 02		 mov	 DWORD PTR [edx], eax
  00035	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00038	89 42 04	 mov	 DWORD PTR [edx+4], eax
  0003b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0003e	89 42 08	 mov	 DWORD PTR [edx+8], eax
  00041	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00044	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 835  :     return UNZ_OK;

  00047	33 c0		 xor	 eax, eax
$LN1@unzGetGlob:

; 836  : }

  00049	83 c4 04	 add	 esp, 4
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 08 00	 ret	 8
_unzGetGlobalInfo64@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unzGetGlobalInfo@8
_TEXT	SEGMENT
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_pglobal_info32$ = 12					; size = 4
_unzGetGlobalInfo@8 PROC				; COMDAT

; 839  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00010	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 840  :     unz64_s* s;
; 841  :     if (file==NULL)

  00015	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00019	75 07		 jne	 SHORT $LN2@unzGetGlob

; 842  :         return UNZ_PARAMERROR;

  0001b	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00020	eb 1f		 jmp	 SHORT $LN1@unzGetGlob
$LN2@unzGetGlob:

; 843  :     s=(unz64_s*)file;

  00022	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00025	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 844  :     /* to do : check if number_entry is not truncated */
; 845  :     pglobal_info32->number_entry = (uLong)s->gi.number_entry;

  00028	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0002b	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0002e	8b 45 0c	 mov	 eax, DWORD PTR _pglobal_info32$[ebp]
  00031	89 10		 mov	 DWORD PTR [eax], edx

; 846  :     pglobal_info32->size_comment = s->gi.size_comment;

  00033	8b 4d 0c	 mov	 ecx, DWORD PTR _pglobal_info32$[ebp]
  00036	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00039	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  0003c	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 847  :     return UNZ_OK;

  0003f	33 c0		 xor	 eax, eax
$LN1@unzGetGlob:

; 848  : }

  00041	83 c4 04	 add	 esp, 4
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 08 00	 ret	 8
_unzGetGlobalInfo@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unz64local_DosDateToTmuDate
_TEXT	SEGMENT
_uDate$ = -8						; size = 8
_ulDosDate$ = 8						; size = 8
_ptm$ = 16						; size = 4
_unz64local_DosDateToTmuDate PROC			; COMDAT

; 853  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00019	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 854  :     ZPOS64_T uDate;
; 855  :     uDate = (ZPOS64_T)(ulDosDate>>16);

  0001e	8b 45 08	 mov	 eax, DWORD PTR _ulDosDate$[ebp]
  00021	8b 55 0c	 mov	 edx, DWORD PTR _ulDosDate$[ebp+4]
  00024	b1 10		 mov	 cl, 16			; 00000010H
  00026	e8 00 00 00 00	 call	 __aullshr
  0002b	89 45 f8	 mov	 DWORD PTR _uDate$[ebp], eax
  0002e	89 55 fc	 mov	 DWORD PTR _uDate$[ebp+4], edx

; 856  :     ptm->tm_mday = (uInt)(uDate&0x1f) ;

  00031	8b 45 f8	 mov	 eax, DWORD PTR _uDate$[ebp]
  00034	83 e0 1f	 and	 eax, 31			; 0000001fH
  00037	8b 4d 10	 mov	 ecx, DWORD PTR _ptm$[ebp]
  0003a	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 857  :     ptm->tm_mon =  (uInt)((((uDate)&0x1E0)/0x20)-1) ;

  0003d	8b 55 f8	 mov	 edx, DWORD PTR _uDate$[ebp]
  00040	81 e2 e0 01 00
	00		 and	 edx, 480		; 000001e0H
  00046	8b 45 fc	 mov	 eax, DWORD PTR _uDate$[ebp+4]
  00049	83 e0 00	 and	 eax, 0
  0004c	6a 00		 push	 0
  0004e	6a 20		 push	 32			; 00000020H
  00050	50		 push	 eax
  00051	52		 push	 edx
  00052	e8 00 00 00 00	 call	 __aulldiv
  00057	83 e8 01	 sub	 eax, 1
  0005a	8b 4d 10	 mov	 ecx, DWORD PTR _ptm$[ebp]
  0005d	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 858  :     ptm->tm_year = (uInt)(((uDate&0x0FE00)/0x0200)+1980) ;

  00060	8b 55 f8	 mov	 edx, DWORD PTR _uDate$[ebp]
  00063	81 e2 00 fe 00
	00		 and	 edx, 65024		; 0000fe00H
  00069	8b 45 fc	 mov	 eax, DWORD PTR _uDate$[ebp+4]
  0006c	83 e0 00	 and	 eax, 0
  0006f	6a 00		 push	 0
  00071	68 00 02 00 00	 push	 512			; 00000200H
  00076	50		 push	 eax
  00077	52		 push	 edx
  00078	e8 00 00 00 00	 call	 __aulldiv
  0007d	05 bc 07 00 00	 add	 eax, 1980		; 000007bcH
  00082	8b 4d 10	 mov	 ecx, DWORD PTR _ptm$[ebp]
  00085	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 859  : 
; 860  :     ptm->tm_hour = (uInt) ((ulDosDate &0xF800)/0x800);

  00088	8b 55 08	 mov	 edx, DWORD PTR _ulDosDate$[ebp]
  0008b	81 e2 00 f8 00
	00		 and	 edx, 63488		; 0000f800H
  00091	8b 45 0c	 mov	 eax, DWORD PTR _ulDosDate$[ebp+4]
  00094	83 e0 00	 and	 eax, 0
  00097	6a 00		 push	 0
  00099	68 00 08 00 00	 push	 2048			; 00000800H
  0009e	50		 push	 eax
  0009f	52		 push	 edx
  000a0	e8 00 00 00 00	 call	 __aulldiv
  000a5	8b 4d 10	 mov	 ecx, DWORD PTR _ptm$[ebp]
  000a8	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 861  :     ptm->tm_min =  (uInt) ((ulDosDate&0x7E0)/0x20) ;

  000ab	8b 55 08	 mov	 edx, DWORD PTR _ulDosDate$[ebp]
  000ae	81 e2 e0 07 00
	00		 and	 edx, 2016		; 000007e0H
  000b4	8b 45 0c	 mov	 eax, DWORD PTR _ulDosDate$[ebp+4]
  000b7	83 e0 00	 and	 eax, 0
  000ba	6a 00		 push	 0
  000bc	6a 20		 push	 32			; 00000020H
  000be	50		 push	 eax
  000bf	52		 push	 edx
  000c0	e8 00 00 00 00	 call	 __aulldiv
  000c5	8b 4d 10	 mov	 ecx, DWORD PTR _ptm$[ebp]
  000c8	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 862  :     ptm->tm_sec =  (uInt) (2*(ulDosDate&0x1f)) ;

  000cb	8b 55 08	 mov	 edx, DWORD PTR _ulDosDate$[ebp]
  000ce	83 e2 1f	 and	 edx, 31			; 0000001fH
  000d1	8b 45 0c	 mov	 eax, DWORD PTR _ulDosDate$[ebp+4]
  000d4	83 e0 00	 and	 eax, 0
  000d7	6a 00		 push	 0
  000d9	6a 02		 push	 2
  000db	50		 push	 eax
  000dc	52		 push	 edx
  000dd	e8 00 00 00 00	 call	 __allmul
  000e2	8b 4d 10	 mov	 ecx, DWORD PTR _ptm$[ebp]
  000e5	89 01		 mov	 DWORD PTR [ecx], eax

; 863  : }

  000e7	83 c4 08	 add	 esp, 8
  000ea	3b ec		 cmp	 ebp, esp
  000ec	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	c3		 ret	 0
_unz64local_DosDateToTmuDate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unz64local_GetCurrentFileInfoInternal
_TEXT	SEGMENT
tv551 = -212						; size = 8
_uSizeRead$1 = -204					; size = 4
_uL$2 = -196						; size = 4
_dataSize$3 = -184					; size = 4
_headerId$4 = -172					; size = 4
_acc$5 = -164						; size = 4
_uSizeRead$6 = -160					; size = 8
_uSizeRead$7 = -152					; size = 4
_uL$ = -144						; size = 4
_lSeek$ = -136						; size = 4
_uMagic$ = -128						; size = 4
_err$ = -120						; size = 4
_file_info_internal$ = -112				; size = 8
_file_info$ = -96					; size = 88
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_pfile_info$ = 12					; size = 4
_pfile_info_internal$ = 16				; size = 4
_szFileName$ = 20					; size = 4
_fileNameBufferSize$ = 24				; size = 4
_extraField$ = 28					; size = 4
_extraFieldBufferSize$ = 32				; size = 4
_szComment$ = 36					; size = 4
_commentBufferSize$ = 40				; size = 4
_unz64local_GetCurrentFileInfoInternal PROC		; COMDAT

; 889  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd 2c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-212]
  00011	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00022	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 890  :     unz64_s* s;
; 891  :     unz_file_info64 file_info;
; 892  :     unz_file_info64_internal file_info_internal;
; 893  :     int err=UNZ_OK;

  00027	c7 45 88 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 894  :     uLong uMagic;
; 895  :     long lSeek=0;

  0002e	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _lSeek$[ebp], 0

; 896  :     uLong uL;
; 897  : 
; 898  :     if (file==NULL)

  00038	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  0003c	75 0a		 jne	 SHORT $LN4@unz64local

; 899  :         return UNZ_PARAMERROR;

  0003e	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00043	e9 52 07 00 00	 jmp	 $LN1@unz64local
$LN4@unz64local:

; 900  :     s=(unz64_s*)file;

  00048	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  0004b	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 901  :     if (ZSEEK64(s->z_filefunc, s->filestream,
; 902  :               s->pos_in_central_dir+s->byte_before_the_zipfile,
; 903  :               ZLIB_FILEFUNC_SEEK_SET)!=0)

  0004e	6a 00		 push	 0
  00050	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00053	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00056	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]
  00059	03 42 48	 add	 eax, DWORD PTR [edx+72]
  0005c	8b 49 5c	 mov	 ecx, DWORD PTR [ecx+92]
  0005f	13 4a 4c	 adc	 ecx, DWORD PTR [edx+76]
  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00067	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0006a	50		 push	 eax
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0006e	51		 push	 ecx
  0006f	e8 00 00 00 00	 call	 _call_zseek64
  00074	83 c4 14	 add	 esp, 20			; 00000014H
  00077	85 c0		 test	 eax, eax
  00079	74 07		 je	 SHORT $LN5@unz64local

; 904  :         err=UNZ_ERRNO;

  0007b	c7 45 88 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN5@unz64local:

; 905  : 
; 906  : 
; 907  :     /* we check the magic */
; 908  :     if (err==UNZ_OK)

  00082	83 7d 88 00	 cmp	 DWORD PTR _err$[ebp], 0
  00086	75 34		 jne	 SHORT $LN6@unz64local

; 909  :     {
; 910  :         if (unz64local_getLong(&s->z_filefunc, s->filestream,&uMagic) != UNZ_OK)

  00088	8d 55 80	 lea	 edx, DWORD PTR _uMagic$[ebp]
  0008b	52		 push	 edx
  0008c	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0008f	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00092	51		 push	 ecx
  00093	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00096	52		 push	 edx
  00097	e8 00 00 00 00	 call	 _unz64local_getLong
  0009c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009f	85 c0		 test	 eax, eax
  000a1	74 09		 je	 SHORT $LN7@unz64local

; 911  :             err=UNZ_ERRNO;

  000a3	c7 45 88 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
  000aa	eb 10		 jmp	 SHORT $LN6@unz64local
$LN7@unz64local:

; 912  :         else if (uMagic!=0x02014b50)

  000ac	81 7d 80 50 4b
	01 02		 cmp	 DWORD PTR _uMagic$[ebp], 33639248 ; 02014b50H
  000b3	74 07		 je	 SHORT $LN6@unz64local

; 913  :             err=UNZ_BADZIPFILE;

  000b5	c7 45 88 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN6@unz64local:

; 914  :     }
; 915  : 
; 916  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.version) != UNZ_OK)

  000bc	8d 45 a0	 lea	 eax, DWORD PTR _file_info$[ebp]
  000bf	50		 push	 eax
  000c0	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000c3	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  000c6	52		 push	 edx
  000c7	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000ca	50		 push	 eax
  000cb	e8 00 00 00 00	 call	 _unz64local_getShort
  000d0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d3	85 c0		 test	 eax, eax
  000d5	74 07		 je	 SHORT $LN10@unz64local

; 917  :         err=UNZ_ERRNO;

  000d7	c7 45 88 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN10@unz64local:

; 918  : 
; 919  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.version_needed) != UNZ_OK)

  000de	8d 4d a4	 lea	 ecx, DWORD PTR _file_info$[ebp+4]
  000e1	51		 push	 ecx
  000e2	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  000e5	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  000e8	50		 push	 eax
  000e9	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000ec	51		 push	 ecx
  000ed	e8 00 00 00 00	 call	 _unz64local_getShort
  000f2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f5	85 c0		 test	 eax, eax
  000f7	74 07		 je	 SHORT $LN11@unz64local

; 920  :         err=UNZ_ERRNO;

  000f9	c7 45 88 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN11@unz64local:

; 921  : 
; 922  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.flag) != UNZ_OK)

  00100	8d 55 a8	 lea	 edx, DWORD PTR _file_info$[ebp+8]
  00103	52		 push	 edx
  00104	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00107	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0010a	51		 push	 ecx
  0010b	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0010e	52		 push	 edx
  0010f	e8 00 00 00 00	 call	 _unz64local_getShort
  00114	83 c4 0c	 add	 esp, 12			; 0000000cH
  00117	85 c0		 test	 eax, eax
  00119	74 07		 je	 SHORT $LN12@unz64local

; 923  :         err=UNZ_ERRNO;

  0011b	c7 45 88 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN12@unz64local:

; 924  : 
; 925  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.compression_method) != UNZ_OK)

  00122	8d 45 ac	 lea	 eax, DWORD PTR _file_info$[ebp+12]
  00125	50		 push	 eax
  00126	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00129	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0012c	52		 push	 edx
  0012d	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00130	50		 push	 eax
  00131	e8 00 00 00 00	 call	 _unz64local_getShort
  00136	83 c4 0c	 add	 esp, 12			; 0000000cH
  00139	85 c0		 test	 eax, eax
  0013b	74 07		 je	 SHORT $LN13@unz64local

; 926  :         err=UNZ_ERRNO;

  0013d	c7 45 88 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN13@unz64local:

; 927  : 
; 928  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&file_info.dosDate) != UNZ_OK)

  00144	8d 4d b0	 lea	 ecx, DWORD PTR _file_info$[ebp+16]
  00147	51		 push	 ecx
  00148	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0014b	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0014e	50		 push	 eax
  0014f	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00152	51		 push	 ecx
  00153	e8 00 00 00 00	 call	 _unz64local_getLong
  00158	83 c4 0c	 add	 esp, 12			; 0000000cH
  0015b	85 c0		 test	 eax, eax
  0015d	74 07		 je	 SHORT $LN14@unz64local

; 929  :         err=UNZ_ERRNO;

  0015f	c7 45 88 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN14@unz64local:

; 930  : 
; 931  :     unz64local_DosDateToTmuDate(file_info.dosDate,&file_info.tmu_date);

  00166	8d 55 e0	 lea	 edx, DWORD PTR _file_info$[ebp+64]
  00169	52		 push	 edx
  0016a	8b 45 b0	 mov	 eax, DWORD PTR _file_info$[ebp+16]
  0016d	33 c9		 xor	 ecx, ecx
  0016f	51		 push	 ecx
  00170	50		 push	 eax
  00171	e8 00 00 00 00	 call	 _unz64local_DosDateToTmuDate
  00176	83 c4 0c	 add	 esp, 12			; 0000000cH

; 932  : 
; 933  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&file_info.crc) != UNZ_OK)

  00179	8d 55 b4	 lea	 edx, DWORD PTR _file_info$[ebp+20]
  0017c	52		 push	 edx
  0017d	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00180	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00183	51		 push	 ecx
  00184	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00187	52		 push	 edx
  00188	e8 00 00 00 00	 call	 _unz64local_getLong
  0018d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00190	85 c0		 test	 eax, eax
  00192	74 07		 je	 SHORT $LN15@unz64local

; 934  :         err=UNZ_ERRNO;

  00194	c7 45 88 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN15@unz64local:

; 935  : 
; 936  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uL) != UNZ_OK)

  0019b	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _uL$[ebp]
  001a1	50		 push	 eax
  001a2	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  001a5	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  001a8	52		 push	 edx
  001a9	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  001ac	50		 push	 eax
  001ad	e8 00 00 00 00	 call	 _unz64local_getLong
  001b2	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b5	85 c0		 test	 eax, eax
  001b7	74 07		 je	 SHORT $LN16@unz64local

; 937  :         err=UNZ_ERRNO;

  001b9	c7 45 88 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN16@unz64local:

; 938  :     file_info.compressed_size = uL;

  001c0	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _uL$[ebp]
  001c6	33 d2		 xor	 edx, edx
  001c8	89 4d b8	 mov	 DWORD PTR _file_info$[ebp+24], ecx
  001cb	89 55 bc	 mov	 DWORD PTR _file_info$[ebp+28], edx

; 939  : 
; 940  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uL) != UNZ_OK)

  001ce	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _uL$[ebp]
  001d4	50		 push	 eax
  001d5	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  001d8	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  001db	52		 push	 edx
  001dc	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  001df	50		 push	 eax
  001e0	e8 00 00 00 00	 call	 _unz64local_getLong
  001e5	83 c4 0c	 add	 esp, 12			; 0000000cH
  001e8	85 c0		 test	 eax, eax
  001ea	74 07		 je	 SHORT $LN17@unz64local

; 941  :         err=UNZ_ERRNO;

  001ec	c7 45 88 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN17@unz64local:

; 942  :     file_info.uncompressed_size = uL;

  001f3	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _uL$[ebp]
  001f9	33 d2		 xor	 edx, edx
  001fb	89 4d c0	 mov	 DWORD PTR _file_info$[ebp+32], ecx
  001fe	89 55 c4	 mov	 DWORD PTR _file_info$[ebp+36], edx

; 943  : 
; 944  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.size_filename) != UNZ_OK)

  00201	8d 45 c8	 lea	 eax, DWORD PTR _file_info$[ebp+40]
  00204	50		 push	 eax
  00205	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00208	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0020b	52		 push	 edx
  0020c	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0020f	50		 push	 eax
  00210	e8 00 00 00 00	 call	 _unz64local_getShort
  00215	83 c4 0c	 add	 esp, 12			; 0000000cH
  00218	85 c0		 test	 eax, eax
  0021a	74 07		 je	 SHORT $LN18@unz64local

; 945  :         err=UNZ_ERRNO;

  0021c	c7 45 88 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN18@unz64local:

; 946  : 
; 947  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.size_file_extra) != UNZ_OK)

  00223	8d 4d cc	 lea	 ecx, DWORD PTR _file_info$[ebp+44]
  00226	51		 push	 ecx
  00227	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0022a	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0022d	50		 push	 eax
  0022e	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00231	51		 push	 ecx
  00232	e8 00 00 00 00	 call	 _unz64local_getShort
  00237	83 c4 0c	 add	 esp, 12			; 0000000cH
  0023a	85 c0		 test	 eax, eax
  0023c	74 07		 je	 SHORT $LN19@unz64local

; 948  :         err=UNZ_ERRNO;

  0023e	c7 45 88 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN19@unz64local:

; 949  : 
; 950  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.size_file_comment) != UNZ_OK)

  00245	8d 55 d0	 lea	 edx, DWORD PTR _file_info$[ebp+48]
  00248	52		 push	 edx
  00249	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0024c	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0024f	51		 push	 ecx
  00250	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00253	52		 push	 edx
  00254	e8 00 00 00 00	 call	 _unz64local_getShort
  00259	83 c4 0c	 add	 esp, 12			; 0000000cH
  0025c	85 c0		 test	 eax, eax
  0025e	74 07		 je	 SHORT $LN20@unz64local

; 951  :         err=UNZ_ERRNO;

  00260	c7 45 88 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN20@unz64local:

; 952  : 
; 953  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.disk_num_start) != UNZ_OK)

  00267	8d 45 d4	 lea	 eax, DWORD PTR _file_info$[ebp+52]
  0026a	50		 push	 eax
  0026b	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0026e	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00271	52		 push	 edx
  00272	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00275	50		 push	 eax
  00276	e8 00 00 00 00	 call	 _unz64local_getShort
  0027b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0027e	85 c0		 test	 eax, eax
  00280	74 07		 je	 SHORT $LN21@unz64local

; 954  :         err=UNZ_ERRNO;

  00282	c7 45 88 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN21@unz64local:

; 955  : 
; 956  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.internal_fa) != UNZ_OK)

  00289	8d 4d d8	 lea	 ecx, DWORD PTR _file_info$[ebp+56]
  0028c	51		 push	 ecx
  0028d	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00290	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00293	50		 push	 eax
  00294	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00297	51		 push	 ecx
  00298	e8 00 00 00 00	 call	 _unz64local_getShort
  0029d	83 c4 0c	 add	 esp, 12			; 0000000cH
  002a0	85 c0		 test	 eax, eax
  002a2	74 07		 je	 SHORT $LN22@unz64local

; 957  :         err=UNZ_ERRNO;

  002a4	c7 45 88 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN22@unz64local:

; 958  : 
; 959  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&file_info.external_fa) != UNZ_OK)

  002ab	8d 55 dc	 lea	 edx, DWORD PTR _file_info$[ebp+60]
  002ae	52		 push	 edx
  002af	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  002b2	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  002b5	51		 push	 ecx
  002b6	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  002b9	52		 push	 edx
  002ba	e8 00 00 00 00	 call	 _unz64local_getLong
  002bf	83 c4 0c	 add	 esp, 12			; 0000000cH
  002c2	85 c0		 test	 eax, eax
  002c4	74 07		 je	 SHORT $LN23@unz64local

; 960  :         err=UNZ_ERRNO;

  002c6	c7 45 88 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN23@unz64local:

; 961  : 
; 962  :                 // relative offset of local header
; 963  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uL) != UNZ_OK)

  002cd	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _uL$[ebp]
  002d3	50		 push	 eax
  002d4	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  002d7	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  002da	52		 push	 edx
  002db	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  002de	50		 push	 eax
  002df	e8 00 00 00 00	 call	 _unz64local_getLong
  002e4	83 c4 0c	 add	 esp, 12			; 0000000cH
  002e7	85 c0		 test	 eax, eax
  002e9	74 07		 je	 SHORT $LN24@unz64local

; 964  :         err=UNZ_ERRNO;

  002eb	c7 45 88 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN24@unz64local:

; 965  :     file_info_internal.offset_curfile = uL;

  002f2	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _uL$[ebp]
  002f8	33 d2		 xor	 edx, edx
  002fa	89 4d 90	 mov	 DWORD PTR _file_info_internal$[ebp], ecx
  002fd	89 55 94	 mov	 DWORD PTR _file_info_internal$[ebp+4], edx

; 966  : 
; 967  :     lSeek+=file_info.size_filename;

  00300	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _lSeek$[ebp]
  00306	03 45 c8	 add	 eax, DWORD PTR _file_info$[ebp+40]
  00309	89 85 78 ff ff
	ff		 mov	 DWORD PTR _lSeek$[ebp], eax

; 968  :     if ((err==UNZ_OK) && (szFileName!=NULL))

  0030f	83 7d 88 00	 cmp	 DWORD PTR _err$[ebp], 0
  00313	0f 85 8c 00 00
	00		 jne	 $LN25@unz64local
  00319	83 7d 14 00	 cmp	 DWORD PTR _szFileName$[ebp], 0
  0031d	0f 84 82 00 00
	00		 je	 $LN25@unz64local

; 969  :     {
; 970  :         uLong uSizeRead ;
; 971  :         if (file_info.size_filename<fileNameBufferSize)

  00323	8b 4d c8	 mov	 ecx, DWORD PTR _file_info$[ebp+40]
  00326	3b 4d 18	 cmp	 ecx, DWORD PTR _fileNameBufferSize$[ebp]
  00329	73 14		 jae	 SHORT $LN26@unz64local

; 972  :         {
; 973  :             *(szFileName+file_info.size_filename)='\0';

  0032b	8b 55 14	 mov	 edx, DWORD PTR _szFileName$[ebp]
  0032e	03 55 c8	 add	 edx, DWORD PTR _file_info$[ebp+40]
  00331	c6 02 00	 mov	 BYTE PTR [edx], 0

; 974  :             uSizeRead = file_info.size_filename;

  00334	8b 45 c8	 mov	 eax, DWORD PTR _file_info$[ebp+40]
  00337	89 85 68 ff ff
	ff		 mov	 DWORD PTR _uSizeRead$7[ebp], eax

; 975  :         }

  0033d	eb 09		 jmp	 SHORT $LN27@unz64local
$LN26@unz64local:

; 976  :         else
; 977  :             uSizeRead = fileNameBufferSize;

  0033f	8b 4d 18	 mov	 ecx, DWORD PTR _fileNameBufferSize$[ebp]
  00342	89 8d 68 ff ff
	ff		 mov	 DWORD PTR _uSizeRead$7[ebp], ecx
$LN27@unz64local:

; 978  : 
; 979  :         if ((file_info.size_filename>0) && (fileNameBufferSize>0))

  00348	83 7d c8 00	 cmp	 DWORD PTR _file_info$[ebp+40], 0
  0034c	76 45		 jbe	 SHORT $LN28@unz64local
  0034e	83 7d 18 00	 cmp	 DWORD PTR _fileNameBufferSize$[ebp], 0
  00352	76 3f		 jbe	 SHORT $LN28@unz64local

; 980  :             if (ZREAD64(s->z_filefunc, s->filestream,szFileName,uSizeRead)!=uSizeRead)

  00354	0f ae e8	 lfence
  00357	8b f4		 mov	 esi, esp
  00359	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _uSizeRead$7[ebp]
  0035f	52		 push	 edx
  00360	8b 45 14	 mov	 eax, DWORD PTR _szFileName$[ebp]
  00363	50		 push	 eax
  00364	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00367	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0036a	52		 push	 edx
  0036b	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0036e	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00371	51		 push	 ecx
  00372	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00375	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00378	ff d0		 call	 eax
  0037a	83 c4 10	 add	 esp, 16			; 00000010H
  0037d	3b f4		 cmp	 esi, esp
  0037f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00384	3b 85 68 ff ff
	ff		 cmp	 eax, DWORD PTR _uSizeRead$7[ebp]
  0038a	74 07		 je	 SHORT $LN28@unz64local

; 981  :                 err=UNZ_ERRNO;

  0038c	c7 45 88 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN28@unz64local:

; 982  :         lSeek -= uSizeRead;

  00393	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _lSeek$[ebp]
  00399	2b 8d 68 ff ff
	ff		 sub	 ecx, DWORD PTR _uSizeRead$7[ebp]
  0039f	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _lSeek$[ebp], ecx
$LN25@unz64local:

; 983  :     }
; 984  : 
; 985  :     // Read extrafield
; 986  :     if ((err==UNZ_OK) && (extraField!=NULL))

  003a5	83 7d 88 00	 cmp	 DWORD PTR _err$[ebp], 0
  003a9	0f 85 f8 00 00
	00		 jne	 $LN30@unz64local
  003af	83 7d 1c 00	 cmp	 DWORD PTR _extraField$[ebp], 0
  003b3	0f 84 ee 00 00
	00		 je	 $LN30@unz64local

; 987  :     {
; 988  :         ZPOS64_T uSizeRead ;
; 989  :         if (file_info.size_file_extra<extraFieldBufferSize)

  003b9	8b 55 cc	 mov	 edx, DWORD PTR _file_info$[ebp+44]
  003bc	3b 55 20	 cmp	 edx, DWORD PTR _extraFieldBufferSize$[ebp]
  003bf	73 13		 jae	 SHORT $LN32@unz64local

; 990  :             uSizeRead = file_info.size_file_extra;

  003c1	8b 45 cc	 mov	 eax, DWORD PTR _file_info$[ebp+44]
  003c4	33 c9		 xor	 ecx, ecx
  003c6	89 85 60 ff ff
	ff		 mov	 DWORD PTR _uSizeRead$6[ebp], eax
  003cc	89 8d 64 ff ff
	ff		 mov	 DWORD PTR _uSizeRead$6[ebp+4], ecx
  003d2	eb 11		 jmp	 SHORT $LN33@unz64local
$LN32@unz64local:

; 991  :         else
; 992  :             uSizeRead = extraFieldBufferSize;

  003d4	8b 55 20	 mov	 edx, DWORD PTR _extraFieldBufferSize$[ebp]
  003d7	33 c0		 xor	 eax, eax
  003d9	89 95 60 ff ff
	ff		 mov	 DWORD PTR _uSizeRead$6[ebp], edx
  003df	89 85 64 ff ff
	ff		 mov	 DWORD PTR _uSizeRead$6[ebp+4], eax
$LN33@unz64local:

; 993  : 
; 994  :         if (lSeek!=0)

  003e5	83 bd 78 ff ff
	ff 00		 cmp	 DWORD PTR _lSeek$[ebp], 0
  003ec	74 35		 je	 SHORT $LN34@unz64local

; 995  :         {
; 996  :             if (ZSEEK64(s->z_filefunc, s->filestream,lSeek,ZLIB_FILEFUNC_SEEK_CUR)==0)

  003ee	6a 01		 push	 1
  003f0	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _lSeek$[ebp]
  003f6	99		 cdq
  003f7	52		 push	 edx
  003f8	50		 push	 eax
  003f9	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  003fc	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  003ff	52		 push	 edx
  00400	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00403	50		 push	 eax
  00404	e8 00 00 00 00	 call	 _call_zseek64
  00409	83 c4 14	 add	 esp, 20			; 00000014H
  0040c	85 c0		 test	 eax, eax
  0040e	75 0c		 jne	 SHORT $LN35@unz64local

; 997  :                 lSeek=0;

  00410	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _lSeek$[ebp], 0
  0041a	eb 07		 jmp	 SHORT $LN34@unz64local
$LN35@unz64local:

; 998  :             else
; 999  :                 err=UNZ_ERRNO;

  0041c	c7 45 88 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN34@unz64local:

; 1000 :         }
; 1001 : 
; 1002 :         if ((file_info.size_file_extra>0) && (extraFieldBufferSize>0))

  00423	83 7d cc 00	 cmp	 DWORD PTR _file_info$[ebp+44], 0
  00427	76 67		 jbe	 SHORT $LN37@unz64local
  00429	83 7d 20 00	 cmp	 DWORD PTR _extraFieldBufferSize$[ebp], 0
  0042d	76 61		 jbe	 SHORT $LN37@unz64local

; 1003 :             if (ZREAD64(s->z_filefunc, s->filestream,extraField,(uLong)uSizeRead)!=uSizeRead)

  0042f	0f ae e8	 lfence
  00432	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _uSizeRead$6[ebp]
  00438	8b f4		 mov	 esi, esp
  0043a	51		 push	 ecx
  0043b	8b 55 1c	 mov	 edx, DWORD PTR _extraField$[ebp]
  0043e	52		 push	 edx
  0043f	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00442	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00445	51		 push	 ecx
  00446	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00449	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0044c	50		 push	 eax
  0044d	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00450	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00453	ff d2		 call	 edx
  00455	83 c4 10	 add	 esp, 16			; 00000010H
  00458	3b f4		 cmp	 esi, esp
  0045a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0045f	33 c9		 xor	 ecx, ecx
  00461	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv551[ebp], eax
  00467	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv551[ebp+4], ecx
  0046d	8b 95 2c ff ff
	ff		 mov	 edx, DWORD PTR tv551[ebp]
  00473	3b 95 60 ff ff
	ff		 cmp	 edx, DWORD PTR _uSizeRead$6[ebp]
  00479	75 0e		 jne	 SHORT $LN69@unz64local
  0047b	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv551[ebp+4]
  00481	3b 85 64 ff ff
	ff		 cmp	 eax, DWORD PTR _uSizeRead$6[ebp+4]
  00487	74 07		 je	 SHORT $LN37@unz64local
$LN69@unz64local:

; 1004 :                 err=UNZ_ERRNO;

  00489	c7 45 88 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN37@unz64local:

; 1005 : 
; 1006 :         lSeek += file_info.size_file_extra - (uLong)uSizeRead;

  00490	8b 4d cc	 mov	 ecx, DWORD PTR _file_info$[ebp+44]
  00493	2b 8d 60 ff ff
	ff		 sub	 ecx, DWORD PTR _uSizeRead$6[ebp]
  00499	03 8d 78 ff ff
	ff		 add	 ecx, DWORD PTR _lSeek$[ebp]
  0049f	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _lSeek$[ebp], ecx

; 1007 :     }

  004a5	eb 0f		 jmp	 SHORT $LN31@unz64local
$LN30@unz64local:

; 1008 :     else
; 1009 :         lSeek += file_info.size_file_extra;

  004a7	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _lSeek$[ebp]
  004ad	03 55 cc	 add	 edx, DWORD PTR _file_info$[ebp+44]
  004b0	89 95 78 ff ff
	ff		 mov	 DWORD PTR _lSeek$[ebp], edx
$LN31@unz64local:

; 1010 : 
; 1011 : 
; 1012 :     if ((err==UNZ_OK) && (file_info.size_file_extra != 0))

  004b6	83 7d 88 00	 cmp	 DWORD PTR _err$[ebp], 0
  004ba	0f 85 bc 01 00
	00		 jne	 $LN39@unz64local
  004c0	83 7d cc 00	 cmp	 DWORD PTR _file_info$[ebp+44], 0
  004c4	0f 84 b2 01 00
	00		 je	 $LN39@unz64local

; 1013 :     {
; 1014 :                                 uLong acc = 0;

  004ca	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _acc$5[ebp], 0

; 1015 : 
; 1016 :         // since lSeek now points to after the extra field we need to move back
; 1017 :         lSeek -= file_info.size_file_extra;

  004d4	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _lSeek$[ebp]
  004da	2b 45 cc	 sub	 eax, DWORD PTR _file_info$[ebp+44]
  004dd	89 85 78 ff ff
	ff		 mov	 DWORD PTR _lSeek$[ebp], eax

; 1018 : 
; 1019 :         if (lSeek!=0)

  004e3	74 35		 je	 SHORT $LN2@unz64local

; 1020 :         {
; 1021 :             if (ZSEEK64(s->z_filefunc, s->filestream,lSeek,ZLIB_FILEFUNC_SEEK_CUR)==0)

  004e5	6a 01		 push	 1
  004e7	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _lSeek$[ebp]
  004ed	99		 cdq
  004ee	52		 push	 edx
  004ef	50		 push	 eax
  004f0	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  004f3	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  004f6	52		 push	 edx
  004f7	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  004fa	50		 push	 eax
  004fb	e8 00 00 00 00	 call	 _call_zseek64
  00500	83 c4 14	 add	 esp, 20			; 00000014H
  00503	85 c0		 test	 eax, eax
  00505	75 0c		 jne	 SHORT $LN41@unz64local

; 1022 :                 lSeek=0;

  00507	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _lSeek$[ebp], 0
  00511	eb 07		 jmp	 SHORT $LN2@unz64local
$LN41@unz64local:

; 1023 :             else
; 1024 :                 err=UNZ_ERRNO;

  00513	c7 45 88 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN2@unz64local:

; 1025 :         }
; 1026 : 
; 1027 :         while(acc < file_info.size_file_extra)

  0051a	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _acc$5[ebp]
  00520	3b 4d cc	 cmp	 ecx, DWORD PTR _file_info$[ebp+44]
  00523	0f 83 53 01 00
	00		 jae	 $LN39@unz64local

; 1028 :         {
; 1029 :             uLong headerId;
; 1030 :                                                 uLong dataSize;
; 1031 : 
; 1032 :             if (unz64local_getShort(&s->z_filefunc, s->filestream,&headerId) != UNZ_OK)

  00529	8d 95 54 ff ff
	ff		 lea	 edx, DWORD PTR _headerId$4[ebp]
  0052f	52		 push	 edx
  00530	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00533	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00536	51		 push	 ecx
  00537	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0053a	52		 push	 edx
  0053b	e8 00 00 00 00	 call	 _unz64local_getShort
  00540	83 c4 0c	 add	 esp, 12			; 0000000cH
  00543	85 c0		 test	 eax, eax
  00545	74 07		 je	 SHORT $LN43@unz64local

; 1033 :                 err=UNZ_ERRNO;

  00547	c7 45 88 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN43@unz64local:

; 1034 : 
; 1035 :             if (unz64local_getShort(&s->z_filefunc, s->filestream,&dataSize) != UNZ_OK)

  0054e	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR _dataSize$3[ebp]
  00554	50		 push	 eax
  00555	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00558	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0055b	52		 push	 edx
  0055c	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0055f	50		 push	 eax
  00560	e8 00 00 00 00	 call	 _unz64local_getShort
  00565	83 c4 0c	 add	 esp, 12			; 0000000cH
  00568	85 c0		 test	 eax, eax
  0056a	74 07		 je	 SHORT $LN44@unz64local

; 1036 :                 err=UNZ_ERRNO;

  0056c	c7 45 88 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN44@unz64local:

; 1037 : 
; 1038 :             /* ZIP64 extra fields */
; 1039 :             if (headerId == 0x0001)

  00573	83 bd 54 ff ff
	ff 01		 cmp	 DWORD PTR _headerId$4[ebp], 1
  0057a	0f 85 b7 00 00
	00		 jne	 $LN45@unz64local

; 1040 :             {
; 1041 :                                                         uLong uL;
; 1042 : 
; 1043 :                                                                 if(file_info.uncompressed_size == MAXU32)

  00580	83 7d c0 ff	 cmp	 DWORD PTR _file_info$[ebp+32], -1
  00584	75 28		 jne	 SHORT $LN47@unz64local
  00586	83 7d c4 00	 cmp	 DWORD PTR _file_info$[ebp+36], 0
  0058a	75 22		 jne	 SHORT $LN47@unz64local

; 1044 :                                                                 {
; 1045 :                                                                         if (unz64local_getLong64(&s->z_filefunc, s->filestream,&file_info.uncompressed_size) != UNZ_OK)

  0058c	8d 4d c0	 lea	 ecx, DWORD PTR _file_info$[ebp+32]
  0058f	51		 push	 ecx
  00590	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00593	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00596	50		 push	 eax
  00597	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0059a	51		 push	 ecx
  0059b	e8 00 00 00 00	 call	 _unz64local_getLong64
  005a0	83 c4 0c	 add	 esp, 12			; 0000000cH
  005a3	85 c0		 test	 eax, eax
  005a5	74 07		 je	 SHORT $LN47@unz64local

; 1046 :                                                                                         err=UNZ_ERRNO;

  005a7	c7 45 88 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN47@unz64local:

; 1047 :                                                                 }
; 1048 : 
; 1049 :                                                                 if(file_info.compressed_size == MAXU32)

  005ae	83 7d b8 ff	 cmp	 DWORD PTR _file_info$[ebp+24], -1
  005b2	75 28		 jne	 SHORT $LN49@unz64local
  005b4	83 7d bc 00	 cmp	 DWORD PTR _file_info$[ebp+28], 0
  005b8	75 22		 jne	 SHORT $LN49@unz64local

; 1050 :                                                                 {
; 1051 :                                                                         if (unz64local_getLong64(&s->z_filefunc, s->filestream,&file_info.compressed_size) != UNZ_OK)

  005ba	8d 55 b8	 lea	 edx, DWORD PTR _file_info$[ebp+24]
  005bd	52		 push	 edx
  005be	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  005c1	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  005c4	51		 push	 ecx
  005c5	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  005c8	52		 push	 edx
  005c9	e8 00 00 00 00	 call	 _unz64local_getLong64
  005ce	83 c4 0c	 add	 esp, 12			; 0000000cH
  005d1	85 c0		 test	 eax, eax
  005d3	74 07		 je	 SHORT $LN49@unz64local

; 1052 :                                                                                   err=UNZ_ERRNO;

  005d5	c7 45 88 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN49@unz64local:

; 1053 :                                                                 }
; 1054 : 
; 1055 :                                                                 if(file_info_internal.offset_curfile == MAXU32)

  005dc	83 7d 90 ff	 cmp	 DWORD PTR _file_info_internal$[ebp], -1
  005e0	75 28		 jne	 SHORT $LN51@unz64local
  005e2	83 7d 94 00	 cmp	 DWORD PTR _file_info_internal$[ebp+4], 0
  005e6	75 22		 jne	 SHORT $LN51@unz64local

; 1056 :                                                                 {
; 1057 :                                                                         /* Relative Header offset */
; 1058 :                                                                         if (unz64local_getLong64(&s->z_filefunc, s->filestream,&file_info_internal.offset_curfile) != UNZ_OK)

  005e8	8d 45 90	 lea	 eax, DWORD PTR _file_info_internal$[ebp]
  005eb	50		 push	 eax
  005ec	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  005ef	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  005f2	52		 push	 edx
  005f3	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  005f6	50		 push	 eax
  005f7	e8 00 00 00 00	 call	 _unz64local_getLong64
  005fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  005ff	85 c0		 test	 eax, eax
  00601	74 07		 je	 SHORT $LN51@unz64local

; 1059 :                                                                                 err=UNZ_ERRNO;

  00603	c7 45 88 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN51@unz64local:

; 1060 :                                                                 }
; 1061 : 
; 1062 :                                                                 if(file_info.disk_num_start == MAXU32)

  0060a	83 7d d4 ff	 cmp	 DWORD PTR _file_info$[ebp+52], -1
  0060e	75 25		 jne	 SHORT $LN53@unz64local

; 1063 :                                                                 {
; 1064 :                                                                         /* Disk Start Number */
; 1065 :                                                                         if (unz64local_getLong(&s->z_filefunc, s->filestream,&uL) != UNZ_OK)

  00610	8d 8d 3c ff ff
	ff		 lea	 ecx, DWORD PTR _uL$2[ebp]
  00616	51		 push	 ecx
  00617	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0061a	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0061d	50		 push	 eax
  0061e	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00621	51		 push	 ecx
  00622	e8 00 00 00 00	 call	 _unz64local_getLong
  00627	83 c4 0c	 add	 esp, 12			; 0000000cH
  0062a	85 c0		 test	 eax, eax
  0062c	74 07		 je	 SHORT $LN53@unz64local

; 1066 :                                                                                 err=UNZ_ERRNO;

  0062e	c7 45 88 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN53@unz64local:

; 1067 :                                                                 }
; 1068 : 
; 1069 :             }

  00635	eb 2a		 jmp	 SHORT $LN46@unz64local
$LN45@unz64local:

; 1070 :             else
; 1071 :             {
; 1072 :                 if (ZSEEK64(s->z_filefunc, s->filestream,dataSize,ZLIB_FILEFUNC_SEEK_CUR)!=0)

  00637	6a 01		 push	 1
  00639	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR _dataSize$3[ebp]
  0063f	33 c0		 xor	 eax, eax
  00641	50		 push	 eax
  00642	52		 push	 edx
  00643	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00646	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00649	52		 push	 edx
  0064a	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0064d	50		 push	 eax
  0064e	e8 00 00 00 00	 call	 _call_zseek64
  00653	83 c4 14	 add	 esp, 20			; 00000014H
  00656	85 c0		 test	 eax, eax
  00658	74 07		 je	 SHORT $LN46@unz64local

; 1073 :                     err=UNZ_ERRNO;

  0065a	c7 45 88 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN46@unz64local:

; 1074 :             }
; 1075 : 
; 1076 :             acc += 2 + 2 + dataSize;

  00661	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _dataSize$3[ebp]
  00667	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR _acc$5[ebp]
  0066d	8d 44 0a 04	 lea	 eax, DWORD PTR [edx+ecx+4]
  00671	89 85 5c ff ff
	ff		 mov	 DWORD PTR _acc$5[ebp], eax

; 1077 :         }

  00677	e9 9e fe ff ff	 jmp	 $LN2@unz64local
$LN39@unz64local:

; 1078 :     }
; 1079 : 
; 1080 :     if ((err==UNZ_OK) && (szComment!=NULL))

  0067c	83 7d 88 00	 cmp	 DWORD PTR _err$[ebp], 0
  00680	0f 85 cf 00 00
	00		 jne	 $LN56@unz64local
  00686	83 7d 24 00	 cmp	 DWORD PTR _szComment$[ebp], 0
  0068a	0f 84 c5 00 00
	00		 je	 $LN56@unz64local

; 1081 :     {
; 1082 :         uLong uSizeRead ;
; 1083 :         if (file_info.size_file_comment<commentBufferSize)

  00690	8b 4d d0	 mov	 ecx, DWORD PTR _file_info$[ebp+48]
  00693	3b 4d 28	 cmp	 ecx, DWORD PTR _commentBufferSize$[ebp]
  00696	73 14		 jae	 SHORT $LN58@unz64local

; 1084 :         {
; 1085 :             *(szComment+file_info.size_file_comment)='\0';

  00698	8b 55 24	 mov	 edx, DWORD PTR _szComment$[ebp]
  0069b	03 55 d0	 add	 edx, DWORD PTR _file_info$[ebp+48]
  0069e	c6 02 00	 mov	 BYTE PTR [edx], 0

; 1086 :             uSizeRead = file_info.size_file_comment;

  006a1	8b 45 d0	 mov	 eax, DWORD PTR _file_info$[ebp+48]
  006a4	89 85 34 ff ff
	ff		 mov	 DWORD PTR _uSizeRead$1[ebp], eax

; 1087 :         }

  006aa	eb 09		 jmp	 SHORT $LN59@unz64local
$LN58@unz64local:

; 1088 :         else
; 1089 :             uSizeRead = commentBufferSize;

  006ac	8b 4d 28	 mov	 ecx, DWORD PTR _commentBufferSize$[ebp]
  006af	89 8d 34 ff ff
	ff		 mov	 DWORD PTR _uSizeRead$1[ebp], ecx
$LN59@unz64local:

; 1090 : 
; 1091 :         if (lSeek!=0)

  006b5	83 bd 78 ff ff
	ff 00		 cmp	 DWORD PTR _lSeek$[ebp], 0
  006bc	74 35		 je	 SHORT $LN60@unz64local

; 1092 :         {
; 1093 :             if (ZSEEK64(s->z_filefunc, s->filestream,lSeek,ZLIB_FILEFUNC_SEEK_CUR)==0)

  006be	6a 01		 push	 1
  006c0	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _lSeek$[ebp]
  006c6	99		 cdq
  006c7	52		 push	 edx
  006c8	50		 push	 eax
  006c9	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  006cc	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  006cf	50		 push	 eax
  006d0	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  006d3	51		 push	 ecx
  006d4	e8 00 00 00 00	 call	 _call_zseek64
  006d9	83 c4 14	 add	 esp, 20			; 00000014H
  006dc	85 c0		 test	 eax, eax
  006de	75 0c		 jne	 SHORT $LN61@unz64local

; 1094 :                 lSeek=0;

  006e0	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _lSeek$[ebp], 0
  006ea	eb 07		 jmp	 SHORT $LN60@unz64local
$LN61@unz64local:

; 1095 :             else
; 1096 :                 err=UNZ_ERRNO;

  006ec	c7 45 88 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN60@unz64local:

; 1097 :         }
; 1098 : 
; 1099 :         if ((file_info.size_file_comment>0) && (commentBufferSize>0))

  006f3	83 7d d0 00	 cmp	 DWORD PTR _file_info$[ebp+48], 0
  006f7	76 45		 jbe	 SHORT $LN63@unz64local
  006f9	83 7d 28 00	 cmp	 DWORD PTR _commentBufferSize$[ebp], 0
  006fd	76 3f		 jbe	 SHORT $LN63@unz64local

; 1100 :             if (ZREAD64(s->z_filefunc, s->filestream,szComment,uSizeRead)!=uSizeRead)

  006ff	0f ae e8	 lfence
  00702	8b f4		 mov	 esi, esp
  00704	8b 95 34 ff ff
	ff		 mov	 edx, DWORD PTR _uSizeRead$1[ebp]
  0070a	52		 push	 edx
  0070b	8b 45 24	 mov	 eax, DWORD PTR _szComment$[ebp]
  0070e	50		 push	 eax
  0070f	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00712	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00715	52		 push	 edx
  00716	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00719	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0071c	51		 push	 ecx
  0071d	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00720	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00723	ff d0		 call	 eax
  00725	83 c4 10	 add	 esp, 16			; 00000010H
  00728	3b f4		 cmp	 esi, esp
  0072a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0072f	3b 85 34 ff ff
	ff		 cmp	 eax, DWORD PTR _uSizeRead$1[ebp]
  00735	74 07		 je	 SHORT $LN63@unz64local

; 1101 :                 err=UNZ_ERRNO;

  00737	c7 45 88 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN63@unz64local:

; 1102 :         lSeek+=file_info.size_file_comment - uSizeRead;

  0073e	8b 4d d0	 mov	 ecx, DWORD PTR _file_info$[ebp+48]
  00741	2b 8d 34 ff ff
	ff		 sub	 ecx, DWORD PTR _uSizeRead$1[ebp]
  00747	03 8d 78 ff ff
	ff		 add	 ecx, DWORD PTR _lSeek$[ebp]
  0074d	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _lSeek$[ebp], ecx

; 1103 :     }

  00753	eb 0f		 jmp	 SHORT $LN57@unz64local
$LN56@unz64local:

; 1104 :     else
; 1105 :         lSeek+=file_info.size_file_comment;

  00755	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _lSeek$[ebp]
  0075b	03 55 d0	 add	 edx, DWORD PTR _file_info$[ebp+48]
  0075e	89 95 78 ff ff
	ff		 mov	 DWORD PTR _lSeek$[ebp], edx
$LN57@unz64local:

; 1106 : 
; 1107 : 
; 1108 :     if ((err==UNZ_OK) && (pfile_info!=NULL))

  00764	83 7d 88 00	 cmp	 DWORD PTR _err$[ebp], 0
  00768	75 13		 jne	 SHORT $LN65@unz64local
  0076a	83 7d 0c 00	 cmp	 DWORD PTR _pfile_info$[ebp], 0
  0076e	74 0d		 je	 SHORT $LN65@unz64local

; 1109 :         *pfile_info=file_info;

  00770	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  00775	8d 75 a0	 lea	 esi, DWORD PTR _file_info$[ebp]
  00778	8b 7d 0c	 mov	 edi, DWORD PTR _pfile_info$[ebp]
  0077b	f3 a5		 rep movsd
$LN65@unz64local:

; 1110 : 
; 1111 :     if ((err==UNZ_OK) && (pfile_info_internal!=NULL))

  0077d	83 7d 88 00	 cmp	 DWORD PTR _err$[ebp], 0
  00781	75 14		 jne	 SHORT $LN66@unz64local
  00783	83 7d 10 00	 cmp	 DWORD PTR _pfile_info_internal$[ebp], 0
  00787	74 0e		 je	 SHORT $LN66@unz64local

; 1112 :         *pfile_info_internal=file_info_internal;

  00789	8b 45 10	 mov	 eax, DWORD PTR _pfile_info_internal$[ebp]
  0078c	8b 4d 90	 mov	 ecx, DWORD PTR _file_info_internal$[ebp]
  0078f	89 08		 mov	 DWORD PTR [eax], ecx
  00791	8b 55 94	 mov	 edx, DWORD PTR _file_info_internal$[ebp+4]
  00794	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN66@unz64local:

; 1113 : 
; 1114 :     return err;

  00797	8b 45 88	 mov	 eax, DWORD PTR _err$[ebp]
$LN1@unz64local:

; 1115 : }

  0079a	52		 push	 edx
  0079b	8b cd		 mov	 ecx, ebp
  0079d	50		 push	 eax
  0079e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN78@unz64local
  007a4	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  007a9	58		 pop	 eax
  007aa	5a		 pop	 edx
  007ab	5f		 pop	 edi
  007ac	5e		 pop	 esi
  007ad	81 c4 d4 00 00
	00		 add	 esp, 212		; 000000d4H
  007b3	3b ec		 cmp	 ebp, esp
  007b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  007ba	8b e5		 mov	 esp, ebp
  007bc	5d		 pop	 ebp
  007bd	c3		 ret	 0
  007be	66 90		 npad	 2
$LN78@unz64local:
  007c0	07 00 00 00	 DD	 7
  007c4	00 00 00 00	 DD	 $LN77@unz64local
$LN77@unz64local:
  007c8	a0 ff ff ff	 DD	 -96			; ffffffa0H
  007cc	58 00 00 00	 DD	 88			; 00000058H
  007d0	00 00 00 00	 DD	 $LN70@unz64local
  007d4	90 ff ff ff	 DD	 -112			; ffffff90H
  007d8	08 00 00 00	 DD	 8
  007dc	00 00 00 00	 DD	 $LN71@unz64local
  007e0	80 ff ff ff	 DD	 -128			; ffffff80H
  007e4	04 00 00 00	 DD	 4
  007e8	00 00 00 00	 DD	 $LN72@unz64local
  007ec	70 ff ff ff	 DD	 -144			; ffffff70H
  007f0	04 00 00 00	 DD	 4
  007f4	00 00 00 00	 DD	 $LN73@unz64local
  007f8	54 ff ff ff	 DD	 -172			; ffffff54H
  007fc	04 00 00 00	 DD	 4
  00800	00 00 00 00	 DD	 $LN74@unz64local
  00804	48 ff ff ff	 DD	 -184			; ffffff48H
  00808	04 00 00 00	 DD	 4
  0080c	00 00 00 00	 DD	 $LN75@unz64local
  00810	3c ff ff ff	 DD	 -196			; ffffff3cH
  00814	04 00 00 00	 DD	 4
  00818	00 00 00 00	 DD	 $LN76@unz64local
$LN76@unz64local:
  0081c	75		 DB	 117			; 00000075H
  0081d	4c		 DB	 76			; 0000004cH
  0081e	00		 DB	 0
$LN75@unz64local:
  0081f	64		 DB	 100			; 00000064H
  00820	61		 DB	 97			; 00000061H
  00821	74		 DB	 116			; 00000074H
  00822	61		 DB	 97			; 00000061H
  00823	53		 DB	 83			; 00000053H
  00824	69		 DB	 105			; 00000069H
  00825	7a		 DB	 122			; 0000007aH
  00826	65		 DB	 101			; 00000065H
  00827	00		 DB	 0
$LN74@unz64local:
  00828	68		 DB	 104			; 00000068H
  00829	65		 DB	 101			; 00000065H
  0082a	61		 DB	 97			; 00000061H
  0082b	64		 DB	 100			; 00000064H
  0082c	65		 DB	 101			; 00000065H
  0082d	72		 DB	 114			; 00000072H
  0082e	49		 DB	 73			; 00000049H
  0082f	64		 DB	 100			; 00000064H
  00830	00		 DB	 0
$LN73@unz64local:
  00831	75		 DB	 117			; 00000075H
  00832	4c		 DB	 76			; 0000004cH
  00833	00		 DB	 0
$LN72@unz64local:
  00834	75		 DB	 117			; 00000075H
  00835	4d		 DB	 77			; 0000004dH
  00836	61		 DB	 97			; 00000061H
  00837	67		 DB	 103			; 00000067H
  00838	69		 DB	 105			; 00000069H
  00839	63		 DB	 99			; 00000063H
  0083a	00		 DB	 0
$LN71@unz64local:
  0083b	66		 DB	 102			; 00000066H
  0083c	69		 DB	 105			; 00000069H
  0083d	6c		 DB	 108			; 0000006cH
  0083e	65		 DB	 101			; 00000065H
  0083f	5f		 DB	 95			; 0000005fH
  00840	69		 DB	 105			; 00000069H
  00841	6e		 DB	 110			; 0000006eH
  00842	66		 DB	 102			; 00000066H
  00843	6f		 DB	 111			; 0000006fH
  00844	5f		 DB	 95			; 0000005fH
  00845	69		 DB	 105			; 00000069H
  00846	6e		 DB	 110			; 0000006eH
  00847	74		 DB	 116			; 00000074H
  00848	65		 DB	 101			; 00000065H
  00849	72		 DB	 114			; 00000072H
  0084a	6e		 DB	 110			; 0000006eH
  0084b	61		 DB	 97			; 00000061H
  0084c	6c		 DB	 108			; 0000006cH
  0084d	00		 DB	 0
$LN70@unz64local:
  0084e	66		 DB	 102			; 00000066H
  0084f	69		 DB	 105			; 00000069H
  00850	6c		 DB	 108			; 0000006cH
  00851	65		 DB	 101			; 00000065H
  00852	5f		 DB	 95			; 0000005fH
  00853	69		 DB	 105			; 00000069H
  00854	6e		 DB	 110			; 0000006eH
  00855	66		 DB	 102			; 00000066H
  00856	6f		 DB	 111			; 0000006fH
  00857	00		 DB	 0
_unz64local_GetCurrentFileInfoInternal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unzGetCurrentFileInfo64@32
_TEXT	SEGMENT
_file$ = 8						; size = 4
_pfile_info$ = 12					; size = 4
_szFileName$ = 16					; size = 4
_fileNameBufferSize$ = 20				; size = 4
_extraField$ = 24					; size = 4
_extraFieldBufferSize$ = 28				; size = 4
_szComment$ = 32					; size = 4
_commentBufferSize$ = 36				; size = 4
_unzGetCurrentFileInfo64@32 PROC			; COMDAT

; 1129 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1130 :     return unz64local_GetCurrentFileInfoInternal(file,pfile_info,NULL,

  0000d	8b 45 24	 mov	 eax, DWORD PTR _commentBufferSize$[ebp]
  00010	50		 push	 eax
  00011	8b 4d 20	 mov	 ecx, DWORD PTR _szComment$[ebp]
  00014	51		 push	 ecx
  00015	8b 55 1c	 mov	 edx, DWORD PTR _extraFieldBufferSize$[ebp]
  00018	52		 push	 edx
  00019	8b 45 18	 mov	 eax, DWORD PTR _extraField$[ebp]
  0001c	50		 push	 eax
  0001d	8b 4d 14	 mov	 ecx, DWORD PTR _fileNameBufferSize$[ebp]
  00020	51		 push	 ecx
  00021	8b 55 10	 mov	 edx, DWORD PTR _szFileName$[ebp]
  00024	52		 push	 edx
  00025	6a 00		 push	 0
  00027	8b 45 0c	 mov	 eax, DWORD PTR _pfile_info$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 _unz64local_GetCurrentFileInfoInternal
  00034	83 c4 24	 add	 esp, 36			; 00000024H

; 1131 :                                                 szFileName,fileNameBufferSize,
; 1132 :                                                 extraField,extraFieldBufferSize,
; 1133 :                                                 szComment,commentBufferSize);
; 1134 : }

  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	5d		 pop	 ebp
  0003f	c2 20 00	 ret	 32			; 00000020H
_unzGetCurrentFileInfo64@32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unzGetCurrentFileInfo@32
_TEXT	SEGMENT
_file_info64$ = -96					; size = 88
_err$ = -4						; size = 4
_file$ = 8						; size = 4
_pfile_info$ = 12					; size = 4
_szFileName$ = 16					; size = 4
_fileNameBufferSize$ = 20				; size = 4
_extraField$ = 24					; size = 4
_extraFieldBufferSize$ = 28				; size = 4
_szComment$ = 32					; size = 4
_commentBufferSize$ = 36				; size = 4
_unzGetCurrentFileInfo@32 PROC				; COMDAT

; 1141 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	57		 push	 edi
  00007	8d 7d 9c	 lea	 edi, DWORD PTR [ebp-100]
  0000a	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1142 :     int err;
; 1143 :     unz_file_info64 file_info64;
; 1144 :     err = unz64local_GetCurrentFileInfoInternal(file,&file_info64,NULL,

  00020	8b 45 24	 mov	 eax, DWORD PTR _commentBufferSize$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 20	 mov	 ecx, DWORD PTR _szComment$[ebp]
  00027	51		 push	 ecx
  00028	8b 55 1c	 mov	 edx, DWORD PTR _extraFieldBufferSize$[ebp]
  0002b	52		 push	 edx
  0002c	8b 45 18	 mov	 eax, DWORD PTR _extraField$[ebp]
  0002f	50		 push	 eax
  00030	8b 4d 14	 mov	 ecx, DWORD PTR _fileNameBufferSize$[ebp]
  00033	51		 push	 ecx
  00034	8b 55 10	 mov	 edx, DWORD PTR _szFileName$[ebp]
  00037	52		 push	 edx
  00038	6a 00		 push	 0
  0003a	8d 45 a0	 lea	 eax, DWORD PTR _file_info64$[ebp]
  0003d	50		 push	 eax
  0003e	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 _unz64local_GetCurrentFileInfoInternal
  00047	83 c4 24	 add	 esp, 36			; 00000024H
  0004a	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax

; 1145 :                                                 szFileName,fileNameBufferSize,
; 1146 :                                                 extraField,extraFieldBufferSize,
; 1147 :                                                 szComment,commentBufferSize);
; 1148 :     if ((err==UNZ_OK) && (pfile_info != NULL))

  0004d	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  00051	0f 85 b0 00 00
	00		 jne	 $LN2@unzGetCurr
  00057	83 7d 0c 00	 cmp	 DWORD PTR _pfile_info$[ebp], 0
  0005b	0f 84 a6 00 00
	00		 je	 $LN2@unzGetCurr

; 1149 :     {
; 1150 :         pfile_info->version = file_info64.version;

  00061	8b 55 0c	 mov	 edx, DWORD PTR _pfile_info$[ebp]
  00064	8b 45 a0	 mov	 eax, DWORD PTR _file_info64$[ebp]
  00067	89 02		 mov	 DWORD PTR [edx], eax

; 1151 :         pfile_info->version_needed = file_info64.version_needed;

  00069	8b 4d 0c	 mov	 ecx, DWORD PTR _pfile_info$[ebp]
  0006c	8b 55 a4	 mov	 edx, DWORD PTR _file_info64$[ebp+4]
  0006f	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 1152 :         pfile_info->flag = file_info64.flag;

  00072	8b 45 0c	 mov	 eax, DWORD PTR _pfile_info$[ebp]
  00075	8b 4d a8	 mov	 ecx, DWORD PTR _file_info64$[ebp+8]
  00078	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1153 :         pfile_info->compression_method = file_info64.compression_method;

  0007b	8b 55 0c	 mov	 edx, DWORD PTR _pfile_info$[ebp]
  0007e	8b 45 ac	 mov	 eax, DWORD PTR _file_info64$[ebp+12]
  00081	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 1154 :         pfile_info->dosDate = file_info64.dosDate;

  00084	8b 4d 0c	 mov	 ecx, DWORD PTR _pfile_info$[ebp]
  00087	8b 55 b0	 mov	 edx, DWORD PTR _file_info64$[ebp+16]
  0008a	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 1155 :         pfile_info->crc = file_info64.crc;

  0008d	8b 45 0c	 mov	 eax, DWORD PTR _pfile_info$[ebp]
  00090	8b 4d b4	 mov	 ecx, DWORD PTR _file_info64$[ebp+20]
  00093	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 1156 : 
; 1157 :         pfile_info->size_filename = file_info64.size_filename;

  00096	8b 55 0c	 mov	 edx, DWORD PTR _pfile_info$[ebp]
  00099	8b 45 c8	 mov	 eax, DWORD PTR _file_info64$[ebp+40]
  0009c	89 42 20	 mov	 DWORD PTR [edx+32], eax

; 1158 :         pfile_info->size_file_extra = file_info64.size_file_extra;

  0009f	8b 4d 0c	 mov	 ecx, DWORD PTR _pfile_info$[ebp]
  000a2	8b 55 cc	 mov	 edx, DWORD PTR _file_info64$[ebp+44]
  000a5	89 51 24	 mov	 DWORD PTR [ecx+36], edx

; 1159 :         pfile_info->size_file_comment = file_info64.size_file_comment;

  000a8	8b 45 0c	 mov	 eax, DWORD PTR _pfile_info$[ebp]
  000ab	8b 4d d0	 mov	 ecx, DWORD PTR _file_info64$[ebp+48]
  000ae	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 1160 : 
; 1161 :         pfile_info->disk_num_start = file_info64.disk_num_start;

  000b1	8b 55 0c	 mov	 edx, DWORD PTR _pfile_info$[ebp]
  000b4	8b 45 d4	 mov	 eax, DWORD PTR _file_info64$[ebp+52]
  000b7	89 42 2c	 mov	 DWORD PTR [edx+44], eax

; 1162 :         pfile_info->internal_fa = file_info64.internal_fa;

  000ba	8b 4d 0c	 mov	 ecx, DWORD PTR _pfile_info$[ebp]
  000bd	8b 55 d8	 mov	 edx, DWORD PTR _file_info64$[ebp+56]
  000c0	89 51 30	 mov	 DWORD PTR [ecx+48], edx

; 1163 :         pfile_info->external_fa = file_info64.external_fa;

  000c3	8b 45 0c	 mov	 eax, DWORD PTR _pfile_info$[ebp]
  000c6	8b 4d dc	 mov	 ecx, DWORD PTR _file_info64$[ebp+60]
  000c9	89 48 34	 mov	 DWORD PTR [eax+52], ecx

; 1164 : 
; 1165 :         pfile_info->tmu_date = file_info64.tmu_date,

  000cc	8b 55 0c	 mov	 edx, DWORD PTR _pfile_info$[ebp]
  000cf	83 c2 38	 add	 edx, 56			; 00000038H
  000d2	8b 45 e0	 mov	 eax, DWORD PTR _file_info64$[ebp+64]
  000d5	89 02		 mov	 DWORD PTR [edx], eax
  000d7	8b 4d e4	 mov	 ecx, DWORD PTR _file_info64$[ebp+68]
  000da	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  000dd	8b 45 e8	 mov	 eax, DWORD PTR _file_info64$[ebp+72]
  000e0	89 42 08	 mov	 DWORD PTR [edx+8], eax
  000e3	8b 4d ec	 mov	 ecx, DWORD PTR _file_info64$[ebp+76]
  000e6	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  000e9	8b 45 f0	 mov	 eax, DWORD PTR _file_info64$[ebp+80]
  000ec	89 42 10	 mov	 DWORD PTR [edx+16], eax
  000ef	8b 4d f4	 mov	 ecx, DWORD PTR _file_info64$[ebp+84]
  000f2	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  000f5	8b 55 b8	 mov	 edx, DWORD PTR _file_info64$[ebp+24]
  000f8	8b 45 0c	 mov	 eax, DWORD PTR _pfile_info$[ebp]
  000fb	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 1166 : 
; 1167 : 
; 1168 :         pfile_info->compressed_size = (uLong)file_info64.compressed_size;
; 1169 :         pfile_info->uncompressed_size = (uLong)file_info64.uncompressed_size;

  000fe	8b 4d c0	 mov	 ecx, DWORD PTR _file_info64$[ebp+32]
  00101	8b 55 0c	 mov	 edx, DWORD PTR _pfile_info$[ebp]
  00104	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx
$LN2@unzGetCurr:

; 1170 : 
; 1171 :     }
; 1172 :     return err;

  00107	8b 45 fc	 mov	 eax, DWORD PTR _err$[ebp]

; 1173 : }

  0010a	52		 push	 edx
  0010b	8b cd		 mov	 ecx, ebp
  0010d	50		 push	 eax
  0010e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@unzGetCurr
  00114	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00119	58		 pop	 eax
  0011a	5a		 pop	 edx
  0011b	5f		 pop	 edi
  0011c	83 c4 64	 add	 esp, 100		; 00000064H
  0011f	3b ec		 cmp	 ebp, esp
  00121	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 20 00	 ret	 32			; 00000020H
$LN7@unzGetCurr:
  0012c	01 00 00 00	 DD	 1
  00130	00 00 00 00	 DD	 $LN6@unzGetCurr
$LN6@unzGetCurr:
  00134	a0 ff ff ff	 DD	 -96			; ffffffa0H
  00138	58 00 00 00	 DD	 88			; 00000058H
  0013c	00 00 00 00	 DD	 $LN5@unzGetCurr
$LN5@unzGetCurr:
  00140	66		 DB	 102			; 00000066H
  00141	69		 DB	 105			; 00000069H
  00142	6c		 DB	 108			; 0000006cH
  00143	65		 DB	 101			; 00000065H
  00144	5f		 DB	 95			; 0000005fH
  00145	69		 DB	 105			; 00000069H
  00146	6e		 DB	 110			; 0000006eH
  00147	66		 DB	 102			; 00000066H
  00148	6f		 DB	 111			; 0000006fH
  00149	36		 DB	 54			; 00000036H
  0014a	34		 DB	 52			; 00000034H
  0014b	00		 DB	 0
_unzGetCurrentFileInfo@32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unzGoToFirstFile@4
_TEXT	SEGMENT
tv82 = -12						; size = 4
_s$ = -8						; size = 4
_err$ = -4						; size = 4
_file$ = 8						; size = 4
_unzGoToFirstFile@4 PROC				; COMDAT

; 1179 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1180 :     int err=UNZ_OK;

  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 1181 :     unz64_s* s;
; 1182 :     if (file==NULL)

  0002c	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00030	75 07		 jne	 SHORT $LN2@unzGoToFir

; 1183 :         return UNZ_PARAMERROR;

  00032	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00037	eb 7e		 jmp	 SHORT $LN1@unzGoToFir
$LN2@unzGoToFir:

; 1184 :     s=(unz64_s*)file;

  00039	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  0003c	89 45 f8	 mov	 DWORD PTR _s$[ebp], eax

; 1185 :     s->pos_in_central_dir=s->offset_central_dir;

  0003f	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00042	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00045	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  00048	89 41 58	 mov	 DWORD PTR [ecx+88], eax
  0004b	8b 52 7c	 mov	 edx, DWORD PTR [edx+124]
  0004e	89 51 5c	 mov	 DWORD PTR [ecx+92], edx

; 1186 :     s->num_file=0;

  00051	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00054	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0
  0005b	c7 40 54 00 00
	00 00		 mov	 DWORD PTR [eax+84], 0

; 1187 :     err=unz64local_GetCurrentFileInfoInternal(file,&s->cur_file_info,

  00062	6a 00		 push	 0
  00064	6a 00		 push	 0
  00066	6a 00		 push	 0
  00068	6a 00		 push	 0
  0006a	6a 00		 push	 0
  0006c	6a 00		 push	 0
  0006e	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00071	81 c1 d8 00 00
	00		 add	 ecx, 216		; 000000d8H
  00077	51		 push	 ecx
  00078	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  0007b	81 c2 80 00 00
	00		 add	 edx, 128		; 00000080H
  00081	52		 push	 edx
  00082	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 _unz64local_GetCurrentFileInfoInternal
  0008b	83 c4 24	 add	 esp, 36			; 00000024H
  0008e	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax

; 1188 :                                              &s->cur_file_info_internal,
; 1189 :                                              NULL,0,NULL,0,NULL,0);
; 1190 :     s->current_file_ok = (err == UNZ_OK);

  00091	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  00095	75 09		 jne	 SHORT $LN4@unzGoToFir
  00097	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv82[ebp], 1
  0009e	eb 07		 jmp	 SHORT $LN5@unzGoToFir
$LN4@unzGoToFir:
  000a0	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv82[ebp], 0
$LN5@unzGoToFir:
  000a7	8b 45 f4	 mov	 eax, DWORD PTR tv82[ebp]
  000aa	99		 cdq
  000ab	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  000ae	89 41 60	 mov	 DWORD PTR [ecx+96], eax
  000b1	89 51 64	 mov	 DWORD PTR [ecx+100], edx

; 1191 :     return err;

  000b4	8b 45 fc	 mov	 eax, DWORD PTR _err$[ebp]
$LN1@unzGoToFir:

; 1192 : }

  000b7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ba	3b ec		 cmp	 ebp, esp
  000bc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c2 04 00	 ret	 4
_unzGoToFirstFile@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unzGoToNextFile@4
_TEXT	SEGMENT
tv133 = -32						; size = 4
tv166 = -28						; size = 4
tv163 = -24						; size = 8
tv151 = -16						; size = 4
tv143 = -12						; size = 4
_err$ = -8						; size = 4
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_unzGoToNextFile@4 PROC					; COMDAT

; 1200 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0000e	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00011	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00014	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00017	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001a	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001d	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00020	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1201 :     unz64_s* s;
; 1202 :     int err;
; 1203 : 
; 1204 :     if (file==NULL)

  0002d	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00031	75 0a		 jne	 SHORT $LN2@unzGoToNex

; 1205 :         return UNZ_PARAMERROR;

  00033	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00038	e9 19 01 00 00	 jmp	 $LN1@unzGoToNex
$LN2@unzGoToNex:

; 1206 :     s=(unz64_s*)file;

  0003d	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00040	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 1207 :     if (!s->current_file_ok)

  00043	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00046	89 4d f4	 mov	 DWORD PTR tv143[ebp], ecx
  00049	8b 55 f4	 mov	 edx, DWORD PTR tv143[ebp]
  0004c	8b 45 f4	 mov	 eax, DWORD PTR tv143[ebp]
  0004f	8b 4a 60	 mov	 ecx, DWORD PTR [edx+96]
  00052	0b 48 64	 or	 ecx, DWORD PTR [eax+100]
  00055	75 0a		 jne	 SHORT $LN3@unzGoToNex

; 1208 :         return UNZ_END_OF_LIST_OF_FILE;

  00057	b8 9c ff ff ff	 mov	 eax, -100		; ffffff9cH
  0005c	e9 f5 00 00 00	 jmp	 $LN1@unzGoToNex
$LN3@unzGoToNex:

; 1209 :     if (s->gi.number_entry != 0xffff)    /* 2^16 files overflow hack */

  00061	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00064	89 55 f0	 mov	 DWORD PTR tv151[ebp], edx
  00067	8b 45 f0	 mov	 eax, DWORD PTR tv151[ebp]
  0006a	81 78 38 ff ff
	00 00		 cmp	 DWORD PTR [eax+56], 65535 ; 0000ffffH
  00071	75 09		 jne	 SHORT $LN10@unzGoToNex
  00073	8b 4d f0	 mov	 ecx, DWORD PTR tv151[ebp]
  00076	83 79 3c 00	 cmp	 DWORD PTR [ecx+60], 0
  0007a	74 3b		 je	 SHORT $LN4@unzGoToNex
$LN10@unzGoToNex:

; 1210 :       if (s->num_file+1==s->gi.number_entry)

  0007c	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0007f	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  00082	83 c0 01	 add	 eax, 1
  00085	8b 4a 54	 mov	 ecx, DWORD PTR [edx+84]
  00088	83 d1 00	 adc	 ecx, 0
  0008b	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0008e	89 45 e8	 mov	 DWORD PTR tv163[ebp], eax
  00091	89 4d ec	 mov	 DWORD PTR tv163[ebp+4], ecx
  00094	89 55 e4	 mov	 DWORD PTR tv166[ebp], edx
  00097	8b 45 e4	 mov	 eax, DWORD PTR tv166[ebp]
  0009a	8b 4d e8	 mov	 ecx, DWORD PTR tv163[ebp]
  0009d	3b 48 38	 cmp	 ecx, DWORD PTR [eax+56]
  000a0	75 15		 jne	 SHORT $LN4@unzGoToNex
  000a2	8b 55 e4	 mov	 edx, DWORD PTR tv166[ebp]
  000a5	8b 45 ec	 mov	 eax, DWORD PTR tv163[ebp+4]
  000a8	3b 42 3c	 cmp	 eax, DWORD PTR [edx+60]
  000ab	75 0a		 jne	 SHORT $LN4@unzGoToNex

; 1211 :         return UNZ_END_OF_LIST_OF_FILE;

  000ad	b8 9c ff ff ff	 mov	 eax, -100		; ffffff9cH
  000b2	e9 9f 00 00 00	 jmp	 $LN1@unzGoToNex
$LN4@unzGoToNex:

; 1212 : 
; 1213 :     s->pos_in_central_dir += SIZECENTRALDIRITEM + s->cur_file_info.size_filename +

  000b7	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000ba	8b 91 a8 00 00
	00		 mov	 edx, DWORD PTR [ecx+168]
  000c0	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000c3	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000c9	8d 54 0a 2e	 lea	 edx, DWORD PTR [edx+ecx+46]
  000cd	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000d0	03 90 b0 00 00
	00		 add	 edx, DWORD PTR [eax+176]
  000d6	33 c9		 xor	 ecx, ecx
  000d8	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000db	03 50 58	 add	 edx, DWORD PTR [eax+88]
  000de	13 48 5c	 adc	 ecx, DWORD PTR [eax+92]
  000e1	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000e4	89 50 58	 mov	 DWORD PTR [eax+88], edx
  000e7	89 48 5c	 mov	 DWORD PTR [eax+92], ecx

; 1214 :             s->cur_file_info.size_file_extra + s->cur_file_info.size_file_comment ;
; 1215 :     s->num_file++;

  000ea	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000ed	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  000f0	83 c2 01	 add	 edx, 1
  000f3	8b 41 54	 mov	 eax, DWORD PTR [ecx+84]
  000f6	83 d0 00	 adc	 eax, 0
  000f9	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000fc	89 51 50	 mov	 DWORD PTR [ecx+80], edx
  000ff	89 41 54	 mov	 DWORD PTR [ecx+84], eax

; 1216 :     err = unz64local_GetCurrentFileInfoInternal(file,&s->cur_file_info,

  00102	6a 00		 push	 0
  00104	6a 00		 push	 0
  00106	6a 00		 push	 0
  00108	6a 00		 push	 0
  0010a	6a 00		 push	 0
  0010c	6a 00		 push	 0
  0010e	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00111	81 c2 d8 00 00
	00		 add	 edx, 216		; 000000d8H
  00117	52		 push	 edx
  00118	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0011b	05 80 00 00 00	 add	 eax, 128		; 00000080H
  00120	50		 push	 eax
  00121	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00124	51		 push	 ecx
  00125	e8 00 00 00 00	 call	 _unz64local_GetCurrentFileInfoInternal
  0012a	83 c4 24	 add	 esp, 36			; 00000024H
  0012d	89 45 f8	 mov	 DWORD PTR _err$[ebp], eax

; 1217 :                                                &s->cur_file_info_internal,
; 1218 :                                                NULL,0,NULL,0,NULL,0);
; 1219 :     s->current_file_ok = (err == UNZ_OK);

  00130	83 7d f8 00	 cmp	 DWORD PTR _err$[ebp], 0
  00134	75 09		 jne	 SHORT $LN7@unzGoToNex
  00136	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR tv133[ebp], 1
  0013d	eb 07		 jmp	 SHORT $LN8@unzGoToNex
$LN7@unzGoToNex:
  0013f	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv133[ebp], 0
$LN8@unzGoToNex:
  00146	8b 45 e0	 mov	 eax, DWORD PTR tv133[ebp]
  00149	99		 cdq
  0014a	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0014d	89 41 60	 mov	 DWORD PTR [ecx+96], eax
  00150	89 51 64	 mov	 DWORD PTR [ecx+100], edx

; 1220 :     return err;

  00153	8b 45 f8	 mov	 eax, DWORD PTR _err$[ebp]
$LN1@unzGoToNex:

; 1221 : }

  00156	83 c4 20	 add	 esp, 32			; 00000020H
  00159	3b ec		 cmp	 ebp, esp
  0015b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00160	8b e5		 mov	 esp, ebp
  00162	5d		 pop	 ebp
  00163	c2 04 00	 ret	 4
_unzGoToNextFile@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unzLocateFile@12
_TEXT	SEGMENT
tv140 = -408						; size = 4
_szCurrentFileName$1 = -400				; size = 257
_pos_in_central_dirSaved$ = -136			; size = 8
_num_fileSaved$ = -128					; size = 8
_cur_file_info_internalSaved$ = -116			; size = 8
_cur_file_infoSaved$ = -100				; size = 88
_err$ = -8						; size = 4
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_szFileName$ = 12					; size = 4
_iCaseSensitivity$ = 16					; size = 4
_unzLocateFile@12 PROC					; COMDAT

; 1233 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 98 01 00
	00		 sub	 esp, 408		; 00000198H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd 68 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-408]
  00011	b9 66 00 00 00	 mov	 ecx, 102		; 00000066H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00022	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1234 :     unz64_s* s;
; 1235 :     int err;
; 1236 : 
; 1237 :     /* We remember the 'current' position in the file so that we can jump
; 1238 :      * back there if we fail.
; 1239 :      */
; 1240 :     unz_file_info64 cur_file_infoSaved;
; 1241 :     unz_file_info64_internal cur_file_info_internalSaved;
; 1242 :     ZPOS64_T num_fileSaved;
; 1243 :     ZPOS64_T pos_in_central_dirSaved;
; 1244 : 
; 1245 : 
; 1246 :     if (file==NULL)

  00027	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  0002b	75 0a		 jne	 SHORT $LN4@unzLocateF

; 1247 :         return UNZ_PARAMERROR;

  0002d	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00032	e9 4c 01 00 00	 jmp	 $LN1@unzLocateF
$LN4@unzLocateF:

; 1248 : 
; 1249 :     if (strlen(szFileName)>=UNZ_MAXFILENAMEINZIP)

  00037	8b 45 0c	 mov	 eax, DWORD PTR _szFileName$[ebp]
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 _strlen
  00040	83 c4 04	 add	 esp, 4
  00043	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00048	72 0a		 jb	 SHORT $LN5@unzLocateF

; 1250 :         return UNZ_PARAMERROR;

  0004a	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  0004f	e9 2f 01 00 00	 jmp	 $LN1@unzLocateF
$LN5@unzLocateF:

; 1251 : 
; 1252 :     s=(unz64_s*)file;

  00054	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00057	89 4d fc	 mov	 DWORD PTR _s$[ebp], ecx

; 1253 :     if (!s->current_file_ok)

  0005a	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0005d	89 95 68 fe ff
	ff		 mov	 DWORD PTR tv140[ebp], edx
  00063	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR tv140[ebp]
  00069	8b 8d 68 fe ff
	ff		 mov	 ecx, DWORD PTR tv140[ebp]
  0006f	8b 50 60	 mov	 edx, DWORD PTR [eax+96]
  00072	0b 51 64	 or	 edx, DWORD PTR [ecx+100]
  00075	75 0a		 jne	 SHORT $LN6@unzLocateF

; 1254 :         return UNZ_END_OF_LIST_OF_FILE;

  00077	b8 9c ff ff ff	 mov	 eax, -100		; ffffff9cH
  0007c	e9 02 01 00 00	 jmp	 $LN1@unzLocateF
$LN6@unzLocateF:

; 1255 : 
; 1256 :     /* Save the current state */
; 1257 :     num_fileSaved = s->num_file;

  00081	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00084	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00087	89 4d 80	 mov	 DWORD PTR _num_fileSaved$[ebp], ecx
  0008a	8b 50 54	 mov	 edx, DWORD PTR [eax+84]
  0008d	89 55 84	 mov	 DWORD PTR _num_fileSaved$[ebp+4], edx

; 1258 :     pos_in_central_dirSaved = s->pos_in_central_dir;

  00090	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00093	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00096	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _pos_in_central_dirSaved$[ebp], ecx
  0009c	8b 50 5c	 mov	 edx, DWORD PTR [eax+92]
  0009f	89 95 7c ff ff
	ff		 mov	 DWORD PTR _pos_in_central_dirSaved$[ebp+4], edx

; 1259 :     cur_file_infoSaved = s->cur_file_info;

  000a5	8b 75 fc	 mov	 esi, DWORD PTR _s$[ebp]
  000a8	81 c6 80 00 00
	00		 add	 esi, 128		; 00000080H
  000ae	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  000b3	8d 7d 9c	 lea	 edi, DWORD PTR _cur_file_infoSaved$[ebp]
  000b6	f3 a5		 rep movsd

; 1260 :     cur_file_info_internalSaved = s->cur_file_info_internal;

  000b8	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000bb	8b 88 d8 00 00
	00		 mov	 ecx, DWORD PTR [eax+216]
  000c1	8b 90 dc 00 00
	00		 mov	 edx, DWORD PTR [eax+220]
  000c7	89 4d 8c	 mov	 DWORD PTR _cur_file_info_internalSaved$[ebp], ecx
  000ca	89 55 90	 mov	 DWORD PTR _cur_file_info_internalSaved$[ebp+4], edx

; 1261 : 
; 1262 :     err = unzGoToFirstFile(file);

  000cd	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 _unzGoToFirstFile@4
  000d6	89 45 f8	 mov	 DWORD PTR _err$[ebp], eax
$LN2@unzLocateF:

; 1263 : 
; 1264 :     while (err == UNZ_OK)

  000d9	83 7d f8 00	 cmp	 DWORD PTR _err$[ebp], 0
  000dd	75 55		 jne	 SHORT $LN3@unzLocateF

; 1265 :     {
; 1266 :         char szCurrentFileName[UNZ_MAXFILENAMEINZIP+1];
; 1267 :         err = unzGetCurrentFileInfo64(file,NULL,

  000df	6a 00		 push	 0
  000e1	6a 00		 push	 0
  000e3	6a 00		 push	 0
  000e5	6a 00		 push	 0
  000e7	68 00 01 00 00	 push	 256			; 00000100H
  000ec	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR _szCurrentFileName$1[ebp]
  000f2	51		 push	 ecx
  000f3	6a 00		 push	 0
  000f5	8b 55 08	 mov	 edx, DWORD PTR _file$[ebp]
  000f8	52		 push	 edx
  000f9	e8 00 00 00 00	 call	 _unzGetCurrentFileInfo64@32
  000fe	89 45 f8	 mov	 DWORD PTR _err$[ebp], eax

; 1268 :                                     szCurrentFileName,sizeof(szCurrentFileName)-1,
; 1269 :                                     NULL,0,NULL,0);
; 1270 :         if (err == UNZ_OK)

  00101	83 7d f8 00	 cmp	 DWORD PTR _err$[ebp], 0
  00105	75 2b		 jne	 SHORT $LN7@unzLocateF

; 1271 :         {
; 1272 :             if (unzStringFileNameCompare(szCurrentFileName,
; 1273 :                                             szFileName,iCaseSensitivity)==0)

  00107	0f ae e8	 lfence
  0010a	8b 45 10	 mov	 eax, DWORD PTR _iCaseSensitivity$[ebp]
  0010d	50		 push	 eax
  0010e	8b 4d 0c	 mov	 ecx, DWORD PTR _szFileName$[ebp]
  00111	51		 push	 ecx
  00112	8d 95 70 fe ff
	ff		 lea	 edx, DWORD PTR _szCurrentFileName$1[ebp]
  00118	52		 push	 edx
  00119	e8 00 00 00 00	 call	 _unzStringFileNameCompare@12
  0011e	85 c0		 test	 eax, eax
  00120	75 04		 jne	 SHORT $LN8@unzLocateF

; 1274 :                 return UNZ_OK;

  00122	33 c0		 xor	 eax, eax
  00124	eb 5d		 jmp	 SHORT $LN1@unzLocateF
$LN8@unzLocateF:

; 1275 :             err = unzGoToNextFile(file);

  00126	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00129	50		 push	 eax
  0012a	e8 00 00 00 00	 call	 _unzGoToNextFile@4
  0012f	89 45 f8	 mov	 DWORD PTR _err$[ebp], eax
$LN7@unzLocateF:

; 1276 :         }
; 1277 :     }

  00132	eb a5		 jmp	 SHORT $LN2@unzLocateF
$LN3@unzLocateF:

; 1278 : 
; 1279 :     /* We failed, so restore the state of the 'current file' to where we
; 1280 :      * were.
; 1281 :      */
; 1282 :     s->num_file = num_fileSaved ;

  00134	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00137	8b 55 80	 mov	 edx, DWORD PTR _num_fileSaved$[ebp]
  0013a	89 51 50	 mov	 DWORD PTR [ecx+80], edx
  0013d	8b 45 84	 mov	 eax, DWORD PTR _num_fileSaved$[ebp+4]
  00140	89 41 54	 mov	 DWORD PTR [ecx+84], eax

; 1283 :     s->pos_in_central_dir = pos_in_central_dirSaved ;

  00143	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00146	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _pos_in_central_dirSaved$[ebp]
  0014c	89 51 58	 mov	 DWORD PTR [ecx+88], edx
  0014f	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _pos_in_central_dirSaved$[ebp+4]
  00155	89 41 5c	 mov	 DWORD PTR [ecx+92], eax

; 1284 :     s->cur_file_info = cur_file_infoSaved;

  00158	8b 7d fc	 mov	 edi, DWORD PTR _s$[ebp]
  0015b	81 c7 80 00 00
	00		 add	 edi, 128		; 00000080H
  00161	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  00166	8d 75 9c	 lea	 esi, DWORD PTR _cur_file_infoSaved$[ebp]
  00169	f3 a5		 rep movsd

; 1285 :     s->cur_file_info_internal = cur_file_info_internalSaved;

  0016b	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0016e	8b 55 8c	 mov	 edx, DWORD PTR _cur_file_info_internalSaved$[ebp]
  00171	89 91 d8 00 00
	00		 mov	 DWORD PTR [ecx+216], edx
  00177	8b 45 90	 mov	 eax, DWORD PTR _cur_file_info_internalSaved$[ebp+4]
  0017a	89 81 dc 00 00
	00		 mov	 DWORD PTR [ecx+220], eax

; 1286 :     return err;

  00180	8b 45 f8	 mov	 eax, DWORD PTR _err$[ebp]
$LN1@unzLocateF:

; 1287 : }

  00183	52		 push	 edx
  00184	8b cd		 mov	 ecx, ebp
  00186	50		 push	 eax
  00187	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN15@unzLocateF
  0018d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00192	58		 pop	 eax
  00193	5a		 pop	 edx
  00194	5f		 pop	 edi
  00195	5e		 pop	 esi
  00196	81 c4 98 01 00
	00		 add	 esp, 408		; 00000198H
  0019c	3b ec		 cmp	 ebp, esp
  0019e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a3	8b e5		 mov	 esp, ebp
  001a5	5d		 pop	 ebp
  001a6	c2 0c 00	 ret	 12			; 0000000cH
  001a9	0f 1f 00	 npad	 3
$LN15@unzLocateF:
  001ac	03 00 00 00	 DD	 3
  001b0	00 00 00 00	 DD	 $LN14@unzLocateF
$LN14@unzLocateF:
  001b4	9c ff ff ff	 DD	 -100			; ffffff9cH
  001b8	58 00 00 00	 DD	 88			; 00000058H
  001bc	00 00 00 00	 DD	 $LN11@unzLocateF
  001c0	8c ff ff ff	 DD	 -116			; ffffff8cH
  001c4	08 00 00 00	 DD	 8
  001c8	00 00 00 00	 DD	 $LN12@unzLocateF
  001cc	70 fe ff ff	 DD	 -400			; fffffe70H
  001d0	01 01 00 00	 DD	 257			; 00000101H
  001d4	00 00 00 00	 DD	 $LN13@unzLocateF
$LN13@unzLocateF:
  001d8	73		 DB	 115			; 00000073H
  001d9	7a		 DB	 122			; 0000007aH
  001da	43		 DB	 67			; 00000043H
  001db	75		 DB	 117			; 00000075H
  001dc	72		 DB	 114			; 00000072H
  001dd	72		 DB	 114			; 00000072H
  001de	65		 DB	 101			; 00000065H
  001df	6e		 DB	 110			; 0000006eH
  001e0	74		 DB	 116			; 00000074H
  001e1	46		 DB	 70			; 00000046H
  001e2	69		 DB	 105			; 00000069H
  001e3	6c		 DB	 108			; 0000006cH
  001e4	65		 DB	 101			; 00000065H
  001e5	4e		 DB	 78			; 0000004eH
  001e6	61		 DB	 97			; 00000061H
  001e7	6d		 DB	 109			; 0000006dH
  001e8	65		 DB	 101			; 00000065H
  001e9	00		 DB	 0
$LN12@unzLocateF:
  001ea	63		 DB	 99			; 00000063H
  001eb	75		 DB	 117			; 00000075H
  001ec	72		 DB	 114			; 00000072H
  001ed	5f		 DB	 95			; 0000005fH
  001ee	66		 DB	 102			; 00000066H
  001ef	69		 DB	 105			; 00000069H
  001f0	6c		 DB	 108			; 0000006cH
  001f1	65		 DB	 101			; 00000065H
  001f2	5f		 DB	 95			; 0000005fH
  001f3	69		 DB	 105			; 00000069H
  001f4	6e		 DB	 110			; 0000006eH
  001f5	66		 DB	 102			; 00000066H
  001f6	6f		 DB	 111			; 0000006fH
  001f7	5f		 DB	 95			; 0000005fH
  001f8	69		 DB	 105			; 00000069H
  001f9	6e		 DB	 110			; 0000006eH
  001fa	74		 DB	 116			; 00000074H
  001fb	65		 DB	 101			; 00000065H
  001fc	72		 DB	 114			; 00000072H
  001fd	6e		 DB	 110			; 0000006eH
  001fe	61		 DB	 97			; 00000061H
  001ff	6c		 DB	 108			; 0000006cH
  00200	53		 DB	 83			; 00000053H
  00201	61		 DB	 97			; 00000061H
  00202	76		 DB	 118			; 00000076H
  00203	65		 DB	 101			; 00000065H
  00204	64		 DB	 100			; 00000064H
  00205	00		 DB	 0
$LN11@unzLocateF:
  00206	63		 DB	 99			; 00000063H
  00207	75		 DB	 117			; 00000075H
  00208	72		 DB	 114			; 00000072H
  00209	5f		 DB	 95			; 0000005fH
  0020a	66		 DB	 102			; 00000066H
  0020b	69		 DB	 105			; 00000069H
  0020c	6c		 DB	 108			; 0000006cH
  0020d	65		 DB	 101			; 00000065H
  0020e	5f		 DB	 95			; 0000005fH
  0020f	69		 DB	 105			; 00000069H
  00210	6e		 DB	 110			; 0000006eH
  00211	66		 DB	 102			; 00000066H
  00212	6f		 DB	 111			; 0000006fH
  00213	53		 DB	 83			; 00000053H
  00214	61		 DB	 97			; 00000061H
  00215	76		 DB	 118			; 00000076H
  00216	65		 DB	 101			; 00000065H
  00217	64		 DB	 100			; 00000064H
  00218	00		 DB	 0
_unzLocateFile@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unzGetFilePos64@8
_TEXT	SEGMENT
tv77 = -8						; size = 4
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_file_pos$ = 12						; size = 4
_unzGetFilePos64@8 PROC					; COMDAT

; 1309 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00019	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1310 :     unz64_s* s;
; 1311 : 
; 1312 :     if (file==NULL || file_pos==NULL)

  0001e	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00022	74 06		 je	 SHORT $LN3@unzGetFile
  00024	83 7d 0c 00	 cmp	 DWORD PTR _file_pos$[ebp], 0
  00028	75 07		 jne	 SHORT $LN2@unzGetFile
$LN3@unzGetFile:

; 1313 :         return UNZ_PARAMERROR;

  0002a	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  0002f	eb 46		 jmp	 SHORT $LN1@unzGetFile
$LN2@unzGetFile:

; 1314 :     s=(unz64_s*)file;

  00031	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00034	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 1315 :     if (!s->current_file_ok)

  00037	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0003a	89 4d f8	 mov	 DWORD PTR tv77[ebp], ecx
  0003d	8b 55 f8	 mov	 edx, DWORD PTR tv77[ebp]
  00040	8b 45 f8	 mov	 eax, DWORD PTR tv77[ebp]
  00043	8b 4a 60	 mov	 ecx, DWORD PTR [edx+96]
  00046	0b 48 64	 or	 ecx, DWORD PTR [eax+100]
  00049	75 07		 jne	 SHORT $LN4@unzGetFile

; 1316 :         return UNZ_END_OF_LIST_OF_FILE;

  0004b	b8 9c ff ff ff	 mov	 eax, -100		; ffffff9cH
  00050	eb 25		 jmp	 SHORT $LN1@unzGetFile
$LN4@unzGetFile:

; 1317 : 
; 1318 :     file_pos->pos_in_zip_directory  = s->pos_in_central_dir;

  00052	8b 55 0c	 mov	 edx, DWORD PTR _file_pos$[ebp]
  00055	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00058	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  0005b	89 0a		 mov	 DWORD PTR [edx], ecx
  0005d	8b 40 5c	 mov	 eax, DWORD PTR [eax+92]
  00060	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1319 :     file_pos->num_of_file           = s->num_file;

  00063	8b 4d 0c	 mov	 ecx, DWORD PTR _file_pos$[ebp]
  00066	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00069	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  0006c	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0006f	8b 52 54	 mov	 edx, DWORD PTR [edx+84]
  00072	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 1320 : 
; 1321 :     return UNZ_OK;

  00075	33 c0		 xor	 eax, eax
$LN1@unzGetFile:

; 1322 : }

  00077	83 c4 08	 add	 esp, 8
  0007a	3b ec		 cmp	 ebp, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 08 00	 ret	 8
_unzGetFilePos64@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unzGetFilePos@8
_TEXT	SEGMENT
_err$ = -28						; size = 4
_file_pos64$ = -20					; size = 16
_file$ = 8						; size = 4
_file_pos$ = 12						; size = 4
_unzGetFilePos@8 PROC					; COMDAT

; 1327 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1328 :     unz64_file_pos file_pos64;
; 1329 :     int err = unzGetFilePos64(file,&file_pos64);

  0002a	8d 45 ec	 lea	 eax, DWORD PTR _file_pos64$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 _unzGetFilePos64@8
  00037	89 45 e4	 mov	 DWORD PTR _err$[ebp], eax

; 1330 :     if (err==UNZ_OK)

  0003a	83 7d e4 00	 cmp	 DWORD PTR _err$[ebp], 0
  0003e	75 11		 jne	 SHORT $LN2@unzGetFile

; 1331 :     {
; 1332 :         file_pos->pos_in_zip_directory = (uLong)file_pos64.pos_in_zip_directory;

  00040	8b 55 ec	 mov	 edx, DWORD PTR _file_pos64$[ebp]
  00043	8b 45 0c	 mov	 eax, DWORD PTR _file_pos$[ebp]
  00046	89 10		 mov	 DWORD PTR [eax], edx

; 1333 :         file_pos->num_of_file = (uLong)file_pos64.num_of_file;

  00048	8b 4d f4	 mov	 ecx, DWORD PTR _file_pos64$[ebp+8]
  0004b	8b 55 0c	 mov	 edx, DWORD PTR _file_pos$[ebp]
  0004e	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN2@unzGetFile:

; 1334 :     }
; 1335 :     return err;

  00051	8b 45 e4	 mov	 eax, DWORD PTR _err$[ebp]

; 1336 : }

  00054	52		 push	 edx
  00055	8b cd		 mov	 ecx, ebp
  00057	50		 push	 eax
  00058	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@unzGetFile
  0005e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00063	58		 pop	 eax
  00064	5a		 pop	 edx
  00065	83 c4 1c	 add	 esp, 28			; 0000001cH
  00068	3b ec		 cmp	 ebp, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 08 00	 ret	 8
  00075	0f 1f 00	 npad	 3
$LN7@unzGetFile:
  00078	01 00 00 00	 DD	 1
  0007c	00 00 00 00	 DD	 $LN6@unzGetFile
$LN6@unzGetFile:
  00080	ec ff ff ff	 DD	 -20			; ffffffecH
  00084	10 00 00 00	 DD	 16			; 00000010H
  00088	00 00 00 00	 DD	 $LN5@unzGetFile
$LN5@unzGetFile:
  0008c	66		 DB	 102			; 00000066H
  0008d	69		 DB	 105			; 00000069H
  0008e	6c		 DB	 108			; 0000006cH
  0008f	65		 DB	 101			; 00000065H
  00090	5f		 DB	 95			; 0000005fH
  00091	70		 DB	 112			; 00000070H
  00092	6f		 DB	 111			; 0000006fH
  00093	73		 DB	 115			; 00000073H
  00094	36		 DB	 54			; 00000036H
  00095	34		 DB	 52			; 00000034H
  00096	00		 DB	 0
_unzGetFilePos@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unzGoToFilePos64@8
_TEXT	SEGMENT
tv84 = -12						; size = 4
_err$ = -8						; size = 4
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_file_pos$ = 12						; size = 4
_unzGoToFilePos64@8 PROC				; COMDAT

; 1339 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1340 :     unz64_s* s;
; 1341 :     int err;
; 1342 : 
; 1343 :     if (file==NULL || file_pos==NULL)

  00025	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00029	74 06		 je	 SHORT $LN3@unzGoToFil
  0002b	83 7d 0c 00	 cmp	 DWORD PTR _file_pos$[ebp], 0
  0002f	75 07		 jne	 SHORT $LN2@unzGoToFil
$LN3@unzGoToFil:

; 1344 :         return UNZ_PARAMERROR;

  00031	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00036	eb 7d		 jmp	 SHORT $LN1@unzGoToFil
$LN2@unzGoToFil:

; 1345 :     s=(unz64_s*)file;

  00038	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  0003b	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 1346 : 
; 1347 :     /* jump to the right spot */
; 1348 :     s->pos_in_central_dir = file_pos->pos_in_zip_directory;

  0003e	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00041	8b 55 0c	 mov	 edx, DWORD PTR _file_pos$[ebp]
  00044	8b 02		 mov	 eax, DWORD PTR [edx]
  00046	89 41 58	 mov	 DWORD PTR [ecx+88], eax
  00049	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0004c	89 51 5c	 mov	 DWORD PTR [ecx+92], edx

; 1349 :     s->num_file           = file_pos->num_of_file;

  0004f	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00052	8b 4d 0c	 mov	 ecx, DWORD PTR _file_pos$[ebp]
  00055	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00058	89 50 50	 mov	 DWORD PTR [eax+80], edx
  0005b	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  0005e	89 48 54	 mov	 DWORD PTR [eax+84], ecx

; 1350 : 
; 1351 :     /* set the current file */
; 1352 :     err = unz64local_GetCurrentFileInfoInternal(file,&s->cur_file_info,

  00061	6a 00		 push	 0
  00063	6a 00		 push	 0
  00065	6a 00		 push	 0
  00067	6a 00		 push	 0
  00069	6a 00		 push	 0
  0006b	6a 00		 push	 0
  0006d	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00070	81 c2 d8 00 00
	00		 add	 edx, 216		; 000000d8H
  00076	52		 push	 edx
  00077	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0007a	05 80 00 00 00	 add	 eax, 128		; 00000080H
  0007f	50		 push	 eax
  00080	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00083	51		 push	 ecx
  00084	e8 00 00 00 00	 call	 _unz64local_GetCurrentFileInfoInternal
  00089	83 c4 24	 add	 esp, 36			; 00000024H
  0008c	89 45 f8	 mov	 DWORD PTR _err$[ebp], eax

; 1353 :                                                &s->cur_file_info_internal,
; 1354 :                                                NULL,0,NULL,0,NULL,0);
; 1355 :     /* return results */
; 1356 :     s->current_file_ok = (err == UNZ_OK);

  0008f	83 7d f8 00	 cmp	 DWORD PTR _err$[ebp], 0
  00093	75 09		 jne	 SHORT $LN5@unzGoToFil
  00095	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv84[ebp], 1
  0009c	eb 07		 jmp	 SHORT $LN6@unzGoToFil
$LN5@unzGoToFil:
  0009e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$LN6@unzGoToFil:
  000a5	8b 45 f4	 mov	 eax, DWORD PTR tv84[ebp]
  000a8	99		 cdq
  000a9	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000ac	89 41 60	 mov	 DWORD PTR [ecx+96], eax
  000af	89 51 64	 mov	 DWORD PTR [ecx+100], edx

; 1357 :     return err;

  000b2	8b 45 f8	 mov	 eax, DWORD PTR _err$[ebp]
$LN1@unzGoToFil:

; 1358 : }

  000b5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b8	3b ec		 cmp	 ebp, esp
  000ba	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c2 08 00	 ret	 8
_unzGoToFilePos64@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unzGoToFilePos@8
_TEXT	SEGMENT
_file_pos64$ = -20					; size = 16
_file$ = 8						; size = 4
_file_pos$ = 12						; size = 4
_unzGoToFilePos@8 PROC					; COMDAT

; 1363 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000e	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00011	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00014	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00017	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001a	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001d	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00022	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1364 :     unz64_file_pos file_pos64;
; 1365 :     if (file_pos == NULL)

  00027	83 7d 0c 00	 cmp	 DWORD PTR _file_pos$[ebp], 0
  0002b	75 07		 jne	 SHORT $LN2@unzGoToFil

; 1366 :         return UNZ_PARAMERROR;

  0002d	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00032	eb 28		 jmp	 SHORT $LN1@unzGoToFil
$LN2@unzGoToFil:

; 1367 : 
; 1368 :     file_pos64.pos_in_zip_directory = file_pos->pos_in_zip_directory;

  00034	8b 45 0c	 mov	 eax, DWORD PTR _file_pos$[ebp]
  00037	8b 08		 mov	 ecx, DWORD PTR [eax]
  00039	33 d2		 xor	 edx, edx
  0003b	89 4d ec	 mov	 DWORD PTR _file_pos64$[ebp], ecx
  0003e	89 55 f0	 mov	 DWORD PTR _file_pos64$[ebp+4], edx

; 1369 :     file_pos64.num_of_file = file_pos->num_of_file;

  00041	8b 45 0c	 mov	 eax, DWORD PTR _file_pos$[ebp]
  00044	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00047	33 d2		 xor	 edx, edx
  00049	89 4d f4	 mov	 DWORD PTR _file_pos64$[ebp+8], ecx
  0004c	89 55 f8	 mov	 DWORD PTR _file_pos64$[ebp+12], edx

; 1370 :     return unzGoToFilePos64(file,&file_pos64);

  0004f	8d 45 ec	 lea	 eax, DWORD PTR _file_pos64$[ebp]
  00052	50		 push	 eax
  00053	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00056	51		 push	 ecx
  00057	e8 00 00 00 00	 call	 _unzGoToFilePos64@8
$LN1@unzGoToFil:

; 1371 : }

  0005c	52		 push	 edx
  0005d	8b cd		 mov	 ecx, ebp
  0005f	50		 push	 eax
  00060	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@unzGoToFil
  00066	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0006b	58		 pop	 eax
  0006c	5a		 pop	 edx
  0006d	83 c4 18	 add	 esp, 24			; 00000018H
  00070	3b ec		 cmp	 ebp, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 08 00	 ret	 8
  0007d	0f 1f 00	 npad	 3
$LN7@unzGoToFil:
  00080	01 00 00 00	 DD	 1
  00084	00 00 00 00	 DD	 $LN6@unzGoToFil
$LN6@unzGoToFil:
  00088	ec ff ff ff	 DD	 -20			; ffffffecH
  0008c	10 00 00 00	 DD	 16			; 00000010H
  00090	00 00 00 00	 DD	 $LN5@unzGoToFil
$LN5@unzGoToFil:
  00094	66		 DB	 102			; 00000066H
  00095	69		 DB	 105			; 00000069H
  00096	6c		 DB	 108			; 0000006cH
  00097	65		 DB	 101			; 00000065H
  00098	5f		 DB	 95			; 0000005fH
  00099	70		 DB	 112			; 00000070H
  0009a	6f		 DB	 111			; 0000006fH
  0009b	73		 DB	 115			; 00000073H
  0009c	36		 DB	 54			; 00000036H
  0009d	34		 DB	 52			; 00000034H
  0009e	00		 DB	 0
_unzGoToFilePos@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unz64local_CheckCurrentFileCoherencyHeader
_TEXT	SEGMENT
tv299 = -88						; size = 4
tv296 = -84						; size = 8
tv282 = -76						; size = 4
tv279 = -72						; size = 8
_err$ = -64						; size = 4
_size_extra_field$ = -56				; size = 4
_size_filename$ = -44					; size = 4
_uFlags$ = -32						; size = 4
_uData$ = -20						; size = 4
_uMagic$ = -8						; size = 4
_s$ = 8							; size = 4
_piSizeVar$ = 12					; size = 4
_poffset_local_extrafield$ = 16				; size = 4
_psize_local_extrafield$ = 20				; size = 4
_unz64local_CheckCurrentFileCoherencyHeader PROC	; COMDAT

; 1388 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	57		 push	 edi
  00007	8d 7d a8	 lea	 edi, DWORD PTR [ebp-88]
  0000a	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1389 :     uLong uMagic,uData,uFlags;
; 1390 :     uLong size_filename;
; 1391 :     uLong size_extra_field;
; 1392 :     int err=UNZ_OK;

  00020	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 1393 : 
; 1394 :     *piSizeVar = 0;

  00027	8b 45 0c	 mov	 eax, DWORD PTR _piSizeVar$[ebp]
  0002a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1395 :     *poffset_local_extrafield = 0;

  00030	8b 4d 10	 mov	 ecx, DWORD PTR _poffset_local_extrafield$[ebp]
  00033	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00039	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 1396 :     *psize_local_extrafield = 0;

  00040	8b 55 14	 mov	 edx, DWORD PTR _psize_local_extrafield$[ebp]
  00043	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 1397 : 
; 1398 :     if (ZSEEK64(s->z_filefunc, s->filestream,s->cur_file_info_internal.offset_curfile +
; 1399 :                                 s->byte_before_the_zipfile,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00049	6a 00		 push	 0
  0004b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00051	8b 90 d8 00 00
	00		 mov	 edx, DWORD PTR [eax+216]
  00057	03 51 48	 add	 edx, DWORD PTR [ecx+72]
  0005a	8b 80 dc 00 00
	00		 mov	 eax, DWORD PTR [eax+220]
  00060	13 41 4c	 adc	 eax, DWORD PTR [ecx+76]
  00063	50		 push	 eax
  00064	52		 push	 edx
  00065	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00068	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0006b	52		 push	 edx
  0006c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 _call_zseek64
  00075	83 c4 14	 add	 esp, 20			; 00000014H
  00078	85 c0		 test	 eax, eax
  0007a	74 08		 je	 SHORT $LN2@unz64local

; 1400 :         return UNZ_ERRNO;

  0007c	83 c8 ff	 or	 eax, -1
  0007f	e9 d9 02 00 00	 jmp	 $LN1@unz64local
$LN2@unz64local:

; 1401 : 
; 1402 : 
; 1403 :     if (err==UNZ_OK)

  00084	83 7d c0 00	 cmp	 DWORD PTR _err$[ebp], 0
  00088	75 34		 jne	 SHORT $LN3@unz64local

; 1404 :     {
; 1405 :         if (unz64local_getLong(&s->z_filefunc, s->filestream,&uMagic) != UNZ_OK)

  0008a	8d 4d f8	 lea	 ecx, DWORD PTR _uMagic$[ebp]
  0008d	51		 push	 ecx
  0008e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00091	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00094	50		 push	 eax
  00095	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 _unz64local_getLong
  0009e	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a1	85 c0		 test	 eax, eax
  000a3	74 09		 je	 SHORT $LN4@unz64local

; 1406 :             err=UNZ_ERRNO;

  000a5	c7 45 c0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
  000ac	eb 10		 jmp	 SHORT $LN3@unz64local
$LN4@unz64local:

; 1407 :         else if (uMagic!=0x04034b50)

  000ae	81 7d f8 50 4b
	03 04		 cmp	 DWORD PTR _uMagic$[ebp], 67324752 ; 04034b50H
  000b5	74 07		 je	 SHORT $LN3@unz64local

; 1408 :             err=UNZ_BADZIPFILE;

  000b7	c7 45 c0 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN3@unz64local:

; 1409 :     }
; 1410 : 
; 1411 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&uData) != UNZ_OK)

  000be	8d 55 ec	 lea	 edx, DWORD PTR _uData$[ebp]
  000c1	52		 push	 edx
  000c2	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000c5	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  000c8	51		 push	 ecx
  000c9	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000cc	52		 push	 edx
  000cd	e8 00 00 00 00	 call	 _unz64local_getShort
  000d2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d5	85 c0		 test	 eax, eax
  000d7	74 07		 je	 SHORT $LN7@unz64local

; 1412 :         err=UNZ_ERRNO;

  000d9	c7 45 c0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN7@unz64local:

; 1413 : /*
; 1414 :     else if ((err==UNZ_OK) && (uData!=s->cur_file_info.wVersion))
; 1415 :         err=UNZ_BADZIPFILE;
; 1416 : */
; 1417 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&uFlags) != UNZ_OK)

  000e0	8d 45 e0	 lea	 eax, DWORD PTR _uFlags$[ebp]
  000e3	50		 push	 eax
  000e4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000e7	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  000ea	52		 push	 edx
  000eb	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000ee	50		 push	 eax
  000ef	e8 00 00 00 00	 call	 _unz64local_getShort
  000f4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f7	85 c0		 test	 eax, eax
  000f9	74 07		 je	 SHORT $LN8@unz64local

; 1418 :         err=UNZ_ERRNO;

  000fb	c7 45 c0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN8@unz64local:

; 1419 : 
; 1420 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&uData) != UNZ_OK)

  00102	8d 4d ec	 lea	 ecx, DWORD PTR _uData$[ebp]
  00105	51		 push	 ecx
  00106	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00109	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0010c	50		 push	 eax
  0010d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00110	51		 push	 ecx
  00111	e8 00 00 00 00	 call	 _unz64local_getShort
  00116	83 c4 0c	 add	 esp, 12			; 0000000cH
  00119	85 c0		 test	 eax, eax
  0011b	74 09		 je	 SHORT $LN9@unz64local

; 1421 :         err=UNZ_ERRNO;

  0011d	c7 45 c0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
  00124	eb 1b		 jmp	 SHORT $LN10@unz64local
$LN9@unz64local:

; 1422 :     else if ((err==UNZ_OK) && (uData!=s->cur_file_info.compression_method))

  00126	83 7d c0 00	 cmp	 DWORD PTR _err$[ebp], 0
  0012a	75 15		 jne	 SHORT $LN10@unz64local
  0012c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0012f	8b 45 ec	 mov	 eax, DWORD PTR _uData$[ebp]
  00132	3b 82 8c 00 00
	00		 cmp	 eax, DWORD PTR [edx+140]
  00138	74 07		 je	 SHORT $LN10@unz64local

; 1423 :         err=UNZ_BADZIPFILE;

  0013a	c7 45 c0 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN10@unz64local:

; 1424 : 
; 1425 :     if ((err==UNZ_OK) && (s->cur_file_info.compression_method!=0) &&
; 1426 : /* #ifdef HAVE_BZIP2 */
; 1427 :                          (s->cur_file_info.compression_method!=Z_BZIP2ED) &&

  00141	83 7d c0 00	 cmp	 DWORD PTR _err$[ebp], 0
  00145	75 2b		 jne	 SHORT $LN12@unz64local
  00147	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0014a	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  00151	74 1f		 je	 SHORT $LN12@unz64local
  00153	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00156	83 ba 8c 00 00
	00 0c		 cmp	 DWORD PTR [edx+140], 12	; 0000000cH
  0015d	74 13		 je	 SHORT $LN12@unz64local
  0015f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00162	83 b8 8c 00 00
	00 08		 cmp	 DWORD PTR [eax+140], 8
  00169	74 07		 je	 SHORT $LN12@unz64local

; 1428 : /* #endif */
; 1429 :                          (s->cur_file_info.compression_method!=Z_DEFLATED))
; 1430 :         err=UNZ_BADZIPFILE;

  0016b	c7 45 c0 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN12@unz64local:

; 1431 : 
; 1432 :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* date/time */

  00172	8d 4d ec	 lea	 ecx, DWORD PTR _uData$[ebp]
  00175	51		 push	 ecx
  00176	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00179	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0017c	50		 push	 eax
  0017d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00180	51		 push	 ecx
  00181	e8 00 00 00 00	 call	 _unz64local_getLong
  00186	83 c4 0c	 add	 esp, 12			; 0000000cH
  00189	85 c0		 test	 eax, eax
  0018b	74 07		 je	 SHORT $LN13@unz64local

; 1433 :         err=UNZ_ERRNO;

  0018d	c7 45 c0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN13@unz64local:

; 1434 : 
; 1435 :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* crc */

  00194	8d 55 ec	 lea	 edx, DWORD PTR _uData$[ebp]
  00197	52		 push	 edx
  00198	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0019b	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0019e	51		 push	 ecx
  0019f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001a2	52		 push	 edx
  001a3	e8 00 00 00 00	 call	 _unz64local_getLong
  001a8	83 c4 0c	 add	 esp, 12			; 0000000cH
  001ab	85 c0		 test	 eax, eax
  001ad	74 09		 je	 SHORT $LN14@unz64local

; 1436 :         err=UNZ_ERRNO;

  001af	c7 45 c0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
  001b6	eb 23		 jmp	 SHORT $LN15@unz64local
$LN14@unz64local:

; 1437 :     else if ((err==UNZ_OK) && (uData!=s->cur_file_info.crc) && ((uFlags & 8)==0))

  001b8	83 7d c0 00	 cmp	 DWORD PTR _err$[ebp], 0
  001bc	75 1d		 jne	 SHORT $LN15@unz64local
  001be	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001c1	8b 4d ec	 mov	 ecx, DWORD PTR _uData$[ebp]
  001c4	3b 88 94 00 00
	00		 cmp	 ecx, DWORD PTR [eax+148]
  001ca	74 0f		 je	 SHORT $LN15@unz64local
  001cc	8b 55 e0	 mov	 edx, DWORD PTR _uFlags$[ebp]
  001cf	83 e2 08	 and	 edx, 8
  001d2	75 07		 jne	 SHORT $LN15@unz64local

; 1438 :         err=UNZ_BADZIPFILE;

  001d4	c7 45 c0 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN15@unz64local:

; 1439 : 
; 1440 :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* size compr */

  001db	8d 45 ec	 lea	 eax, DWORD PTR _uData$[ebp]
  001de	50		 push	 eax
  001df	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001e2	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  001e5	52		 push	 edx
  001e6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001e9	50		 push	 eax
  001ea	e8 00 00 00 00	 call	 _unz64local_getLong
  001ef	83 c4 0c	 add	 esp, 12			; 0000000cH
  001f2	85 c0		 test	 eax, eax
  001f4	74 09		 je	 SHORT $LN17@unz64local

; 1441 :         err=UNZ_ERRNO;

  001f6	c7 45 c0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
  001fd	eb 48		 jmp	 SHORT $LN18@unz64local
$LN17@unz64local:

; 1442 :     else if (uData != 0xFFFFFFFF && (err==UNZ_OK) && (uData!=s->cur_file_info.compressed_size) && ((uFlags & 8)==0))

  001ff	83 7d ec ff	 cmp	 DWORD PTR _uData$[ebp], -1
  00203	74 42		 je	 SHORT $LN18@unz64local
  00205	83 7d c0 00	 cmp	 DWORD PTR _err$[ebp], 0
  00209	75 3c		 jne	 SHORT $LN18@unz64local
  0020b	8b 4d ec	 mov	 ecx, DWORD PTR _uData$[ebp]
  0020e	33 d2		 xor	 edx, edx
  00210	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00213	89 4d b8	 mov	 DWORD PTR tv279[ebp], ecx
  00216	89 55 bc	 mov	 DWORD PTR tv279[ebp+4], edx
  00219	89 45 b4	 mov	 DWORD PTR tv282[ebp], eax
  0021c	8b 4d b4	 mov	 ecx, DWORD PTR tv282[ebp]
  0021f	8b 55 b8	 mov	 edx, DWORD PTR tv279[ebp]
  00222	3b 91 98 00 00
	00		 cmp	 edx, DWORD PTR [ecx+152]
  00228	75 0e		 jne	 SHORT $LN29@unz64local
  0022a	8b 45 b4	 mov	 eax, DWORD PTR tv282[ebp]
  0022d	8b 4d bc	 mov	 ecx, DWORD PTR tv279[ebp+4]
  00230	3b 88 9c 00 00
	00		 cmp	 ecx, DWORD PTR [eax+156]
  00236	74 0f		 je	 SHORT $LN18@unz64local
$LN29@unz64local:
  00238	8b 55 e0	 mov	 edx, DWORD PTR _uFlags$[ebp]
  0023b	83 e2 08	 and	 edx, 8
  0023e	75 07		 jne	 SHORT $LN18@unz64local

; 1443 :         err=UNZ_BADZIPFILE;

  00240	c7 45 c0 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN18@unz64local:

; 1444 : 
; 1445 :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* size uncompr */

  00247	8d 45 ec	 lea	 eax, DWORD PTR _uData$[ebp]
  0024a	50		 push	 eax
  0024b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0024e	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00251	52		 push	 edx
  00252	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00255	50		 push	 eax
  00256	e8 00 00 00 00	 call	 _unz64local_getLong
  0025b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0025e	85 c0		 test	 eax, eax
  00260	74 09		 je	 SHORT $LN20@unz64local

; 1446 :         err=UNZ_ERRNO;

  00262	c7 45 c0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
  00269	eb 48		 jmp	 SHORT $LN21@unz64local
$LN20@unz64local:

; 1447 :     else if (uData != 0xFFFFFFFF && (err==UNZ_OK) && (uData!=s->cur_file_info.uncompressed_size) && ((uFlags & 8)==0))

  0026b	83 7d ec ff	 cmp	 DWORD PTR _uData$[ebp], -1
  0026f	74 42		 je	 SHORT $LN21@unz64local
  00271	83 7d c0 00	 cmp	 DWORD PTR _err$[ebp], 0
  00275	75 3c		 jne	 SHORT $LN21@unz64local
  00277	8b 4d ec	 mov	 ecx, DWORD PTR _uData$[ebp]
  0027a	33 d2		 xor	 edx, edx
  0027c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0027f	89 4d ac	 mov	 DWORD PTR tv296[ebp], ecx
  00282	89 55 b0	 mov	 DWORD PTR tv296[ebp+4], edx
  00285	89 45 a8	 mov	 DWORD PTR tv299[ebp], eax
  00288	8b 4d a8	 mov	 ecx, DWORD PTR tv299[ebp]
  0028b	8b 55 ac	 mov	 edx, DWORD PTR tv296[ebp]
  0028e	3b 91 a0 00 00
	00		 cmp	 edx, DWORD PTR [ecx+160]
  00294	75 0e		 jne	 SHORT $LN30@unz64local
  00296	8b 45 a8	 mov	 eax, DWORD PTR tv299[ebp]
  00299	8b 4d b0	 mov	 ecx, DWORD PTR tv296[ebp+4]
  0029c	3b 88 a4 00 00
	00		 cmp	 ecx, DWORD PTR [eax+164]
  002a2	74 0f		 je	 SHORT $LN21@unz64local
$LN30@unz64local:
  002a4	8b 55 e0	 mov	 edx, DWORD PTR _uFlags$[ebp]
  002a7	83 e2 08	 and	 edx, 8
  002aa	75 07		 jne	 SHORT $LN21@unz64local

; 1448 :         err=UNZ_BADZIPFILE;

  002ac	c7 45 c0 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN21@unz64local:

; 1449 : 
; 1450 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&size_filename) != UNZ_OK)

  002b3	8d 45 d4	 lea	 eax, DWORD PTR _size_filename$[ebp]
  002b6	50		 push	 eax
  002b7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002ba	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  002bd	52		 push	 edx
  002be	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002c1	50		 push	 eax
  002c2	e8 00 00 00 00	 call	 _unz64local_getShort
  002c7	83 c4 0c	 add	 esp, 12			; 0000000cH
  002ca	85 c0		 test	 eax, eax
  002cc	74 09		 je	 SHORT $LN23@unz64local

; 1451 :         err=UNZ_ERRNO;

  002ce	c7 45 c0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
  002d5	eb 1b		 jmp	 SHORT $LN24@unz64local
$LN23@unz64local:

; 1452 :     else if ((err==UNZ_OK) && (size_filename!=s->cur_file_info.size_filename))

  002d7	83 7d c0 00	 cmp	 DWORD PTR _err$[ebp], 0
  002db	75 15		 jne	 SHORT $LN24@unz64local
  002dd	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002e0	8b 55 d4	 mov	 edx, DWORD PTR _size_filename$[ebp]
  002e3	3b 91 a8 00 00
	00		 cmp	 edx, DWORD PTR [ecx+168]
  002e9	74 07		 je	 SHORT $LN24@unz64local

; 1453 :         err=UNZ_BADZIPFILE;

  002eb	c7 45 c0 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN24@unz64local:

; 1454 : 
; 1455 :     *piSizeVar += (uInt)size_filename;

  002f2	8b 45 0c	 mov	 eax, DWORD PTR _piSizeVar$[ebp]
  002f5	8b 08		 mov	 ecx, DWORD PTR [eax]
  002f7	03 4d d4	 add	 ecx, DWORD PTR _size_filename$[ebp]
  002fa	8b 55 0c	 mov	 edx, DWORD PTR _piSizeVar$[ebp]
  002fd	89 0a		 mov	 DWORD PTR [edx], ecx

; 1456 : 
; 1457 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&size_extra_field) != UNZ_OK)

  002ff	8d 45 c8	 lea	 eax, DWORD PTR _size_extra_field$[ebp]
  00302	50		 push	 eax
  00303	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00306	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00309	52		 push	 edx
  0030a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0030d	50		 push	 eax
  0030e	e8 00 00 00 00	 call	 _unz64local_getShort
  00313	83 c4 0c	 add	 esp, 12			; 0000000cH
  00316	85 c0		 test	 eax, eax
  00318	74 07		 je	 SHORT $LN26@unz64local

; 1458 :         err=UNZ_ERRNO;

  0031a	c7 45 c0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN26@unz64local:

; 1459 :     *poffset_local_extrafield= s->cur_file_info_internal.offset_curfile +

  00321	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00324	8b 91 d8 00 00
	00		 mov	 edx, DWORD PTR [ecx+216]
  0032a	83 c2 1e	 add	 edx, 30			; 0000001eH
  0032d	8b 81 dc 00 00
	00		 mov	 eax, DWORD PTR [ecx+220]
  00333	83 d0 00	 adc	 eax, 0
  00336	33 c9		 xor	 ecx, ecx
  00338	03 55 d4	 add	 edx, DWORD PTR _size_filename$[ebp]
  0033b	13 c1		 adc	 eax, ecx
  0033d	8b 4d 10	 mov	 ecx, DWORD PTR _poffset_local_extrafield$[ebp]
  00340	89 11		 mov	 DWORD PTR [ecx], edx
  00342	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1460 :                                     SIZEZIPLOCALHEADER + size_filename;
; 1461 :     *psize_local_extrafield = (uInt)size_extra_field;

  00345	8b 55 14	 mov	 edx, DWORD PTR _psize_local_extrafield$[ebp]
  00348	8b 45 c8	 mov	 eax, DWORD PTR _size_extra_field$[ebp]
  0034b	89 02		 mov	 DWORD PTR [edx], eax

; 1462 : 
; 1463 :     *piSizeVar += (uInt)size_extra_field;

  0034d	8b 4d 0c	 mov	 ecx, DWORD PTR _piSizeVar$[ebp]
  00350	8b 11		 mov	 edx, DWORD PTR [ecx]
  00352	03 55 c8	 add	 edx, DWORD PTR _size_extra_field$[ebp]
  00355	8b 45 0c	 mov	 eax, DWORD PTR _piSizeVar$[ebp]
  00358	89 10		 mov	 DWORD PTR [eax], edx

; 1464 : 
; 1465 :     return err;

  0035a	8b 45 c0	 mov	 eax, DWORD PTR _err$[ebp]
$LN1@unz64local:

; 1466 : }

  0035d	52		 push	 edx
  0035e	8b cd		 mov	 ecx, ebp
  00360	50		 push	 eax
  00361	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN37@unz64local
  00367	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0036c	58		 pop	 eax
  0036d	5a		 pop	 edx
  0036e	5f		 pop	 edi
  0036f	83 c4 58	 add	 esp, 88			; 00000058H
  00372	3b ec		 cmp	 ebp, esp
  00374	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00379	8b e5		 mov	 esp, ebp
  0037b	5d		 pop	 ebp
  0037c	c3		 ret	 0
  0037d	0f 1f 00	 npad	 3
$LN37@unz64local:
  00380	05 00 00 00	 DD	 5
  00384	00 00 00 00	 DD	 $LN36@unz64local
$LN36@unz64local:
  00388	f8 ff ff ff	 DD	 -8			; fffffff8H
  0038c	04 00 00 00	 DD	 4
  00390	00 00 00 00	 DD	 $LN31@unz64local
  00394	ec ff ff ff	 DD	 -20			; ffffffecH
  00398	04 00 00 00	 DD	 4
  0039c	00 00 00 00	 DD	 $LN32@unz64local
  003a0	e0 ff ff ff	 DD	 -32			; ffffffe0H
  003a4	04 00 00 00	 DD	 4
  003a8	00 00 00 00	 DD	 $LN33@unz64local
  003ac	d4 ff ff ff	 DD	 -44			; ffffffd4H
  003b0	04 00 00 00	 DD	 4
  003b4	00 00 00 00	 DD	 $LN34@unz64local
  003b8	c8 ff ff ff	 DD	 -56			; ffffffc8H
  003bc	04 00 00 00	 DD	 4
  003c0	00 00 00 00	 DD	 $LN35@unz64local
$LN35@unz64local:
  003c4	73		 DB	 115			; 00000073H
  003c5	69		 DB	 105			; 00000069H
  003c6	7a		 DB	 122			; 0000007aH
  003c7	65		 DB	 101			; 00000065H
  003c8	5f		 DB	 95			; 0000005fH
  003c9	65		 DB	 101			; 00000065H
  003ca	78		 DB	 120			; 00000078H
  003cb	74		 DB	 116			; 00000074H
  003cc	72		 DB	 114			; 00000072H
  003cd	61		 DB	 97			; 00000061H
  003ce	5f		 DB	 95			; 0000005fH
  003cf	66		 DB	 102			; 00000066H
  003d0	69		 DB	 105			; 00000069H
  003d1	65		 DB	 101			; 00000065H
  003d2	6c		 DB	 108			; 0000006cH
  003d3	64		 DB	 100			; 00000064H
  003d4	00		 DB	 0
$LN34@unz64local:
  003d5	73		 DB	 115			; 00000073H
  003d6	69		 DB	 105			; 00000069H
  003d7	7a		 DB	 122			; 0000007aH
  003d8	65		 DB	 101			; 00000065H
  003d9	5f		 DB	 95			; 0000005fH
  003da	66		 DB	 102			; 00000066H
  003db	69		 DB	 105			; 00000069H
  003dc	6c		 DB	 108			; 0000006cH
  003dd	65		 DB	 101			; 00000065H
  003de	6e		 DB	 110			; 0000006eH
  003df	61		 DB	 97			; 00000061H
  003e0	6d		 DB	 109			; 0000006dH
  003e1	65		 DB	 101			; 00000065H
  003e2	00		 DB	 0
$LN33@unz64local:
  003e3	75		 DB	 117			; 00000075H
  003e4	46		 DB	 70			; 00000046H
  003e5	6c		 DB	 108			; 0000006cH
  003e6	61		 DB	 97			; 00000061H
  003e7	67		 DB	 103			; 00000067H
  003e8	73		 DB	 115			; 00000073H
  003e9	00		 DB	 0
$LN32@unz64local:
  003ea	75		 DB	 117			; 00000075H
  003eb	44		 DB	 68			; 00000044H
  003ec	61		 DB	 97			; 00000061H
  003ed	74		 DB	 116			; 00000074H
  003ee	61		 DB	 97			; 00000061H
  003ef	00		 DB	 0
$LN31@unz64local:
  003f0	75		 DB	 117			; 00000075H
  003f1	4d		 DB	 77			; 0000004dH
  003f2	61		 DB	 97			; 00000061H
  003f3	67		 DB	 103			; 00000067H
  003f4	69		 DB	 105			; 00000069H
  003f5	63		 DB	 99			; 00000063H
  003f6	00		 DB	 0
_unz64local_CheckCurrentFileCoherencyHeader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unzOpenCurrentFile3@20
_TEXT	SEGMENT
tv135 = -60						; size = 4
tv203 = -56						; size = 4
_size_local_extrafield$ = -48				; size = 4
_offset_local_extrafield$ = -36				; size = 8
_pfile_in_zip_read_info$ = -24				; size = 4
_s$ = -20						; size = 4
_iSizeVar$ = -12					; size = 4
_err$ = -4						; size = 4
_file$ = 8						; size = 4
_method$ = 12						; size = 4
_level$ = 16						; size = 4
_raw$ = 20						; size = 4
_password$ = 24						; size = 4
_unzOpenCurrentFile3@20 PROC				; COMDAT

; 1474 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  0000b	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1475 :     int err=UNZ_OK;

  00021	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 1476 :     uInt iSizeVar;
; 1477 :     unz64_s* s;
; 1478 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1479 :     ZPOS64_T offset_local_extrafield;  /* offset of the local extra field */
; 1480 :     uInt  size_local_extrafield;    /* size of the local extra field */
; 1481 : #    ifndef NOUNCRYPT
; 1482 :     char source[12];
; 1483 : #    else
; 1484 :     if (password != NULL)

  00028	83 7d 18 00	 cmp	 DWORD PTR _password$[ebp], 0
  0002c	74 0a		 je	 SHORT $LN4@unzOpenCur

; 1485 :         return UNZ_PARAMERROR;

  0002e	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00033	e9 40 03 00 00	 jmp	 $LN1@unzOpenCur
$LN4@unzOpenCur:

; 1486 : #    endif
; 1487 : 
; 1488 :     if (file==NULL)

  00038	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  0003c	75 0a		 jne	 SHORT $LN5@unzOpenCur

; 1489 :         return UNZ_PARAMERROR;

  0003e	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00043	e9 30 03 00 00	 jmp	 $LN1@unzOpenCur
$LN5@unzOpenCur:

; 1490 :     s=(unz64_s*)file;

  00048	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  0004b	89 45 ec	 mov	 DWORD PTR _s$[ebp], eax

; 1491 :     if (!s->current_file_ok)

  0004e	8b 4d ec	 mov	 ecx, DWORD PTR _s$[ebp]
  00051	89 4d c8	 mov	 DWORD PTR tv203[ebp], ecx
  00054	8b 55 c8	 mov	 edx, DWORD PTR tv203[ebp]
  00057	8b 45 c8	 mov	 eax, DWORD PTR tv203[ebp]
  0005a	8b 4a 60	 mov	 ecx, DWORD PTR [edx+96]
  0005d	0b 48 64	 or	 ecx, DWORD PTR [eax+100]
  00060	75 0a		 jne	 SHORT $LN6@unzOpenCur

; 1492 :         return UNZ_PARAMERROR;

  00062	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00067	e9 0c 03 00 00	 jmp	 $LN1@unzOpenCur
$LN6@unzOpenCur:

; 1493 : 
; 1494 :     if (s->pfile_in_zip_read != NULL)

  0006c	8b 55 ec	 mov	 edx, DWORD PTR _s$[ebp]
  0006f	83 ba e0 00 00
	00 00		 cmp	 DWORD PTR [edx+224], 0
  00076	74 09		 je	 SHORT $LN7@unzOpenCur

; 1495 :         unzCloseCurrentFile(file);

  00078	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 _unzCloseCurrentFile@4
$LN7@unzOpenCur:

; 1496 : 
; 1497 :     if (unz64local_CheckCurrentFileCoherencyHeader(s,&iSizeVar, &offset_local_extrafield,&size_local_extrafield)!=UNZ_OK)

  00081	8d 4d d0	 lea	 ecx, DWORD PTR _size_local_extrafield$[ebp]
  00084	51		 push	 ecx
  00085	8d 55 dc	 lea	 edx, DWORD PTR _offset_local_extrafield$[ebp]
  00088	52		 push	 edx
  00089	8d 45 f4	 lea	 eax, DWORD PTR _iSizeVar$[ebp]
  0008c	50		 push	 eax
  0008d	8b 4d ec	 mov	 ecx, DWORD PTR _s$[ebp]
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 _unz64local_CheckCurrentFileCoherencyHeader
  00096	83 c4 10	 add	 esp, 16			; 00000010H
  00099	85 c0		 test	 eax, eax
  0009b	74 0a		 je	 SHORT $LN8@unzOpenCur

; 1498 :         return UNZ_BADZIPFILE;

  0009d	b8 99 ff ff ff	 mov	 eax, -103		; ffffff99H
  000a2	e9 d1 02 00 00	 jmp	 $LN1@unzOpenCur
$LN8@unzOpenCur:

; 1499 : 
; 1500 :     pfile_in_zip_read_info = (file_in_zip64_read_info_s*)ALLOC(sizeof(file_in_zip64_read_info_s));

  000a7	68 d0 00 00 00	 push	 208			; 000000d0H
  000ac	e8 00 00 00 00	 call	 _malloc
  000b1	83 c4 04	 add	 esp, 4
  000b4	89 45 e8	 mov	 DWORD PTR _pfile_in_zip_read_info$[ebp], eax

; 1501 :     if (pfile_in_zip_read_info==NULL)

  000b7	83 7d e8 00	 cmp	 DWORD PTR _pfile_in_zip_read_info$[ebp], 0
  000bb	75 0a		 jne	 SHORT $LN9@unzOpenCur

; 1502 :         return UNZ_INTERNALERROR;

  000bd	b8 98 ff ff ff	 mov	 eax, -104		; ffffff98H
  000c2	e9 b1 02 00 00	 jmp	 $LN1@unzOpenCur
$LN9@unzOpenCur:

; 1503 : 
; 1504 :     pfile_in_zip_read_info->read_buffer=(char*)ALLOC(UNZ_BUFSIZE);

  000c7	68 00 40 00 00	 push	 16384			; 00004000H
  000cc	e8 00 00 00 00	 call	 _malloc
  000d1	83 c4 04	 add	 esp, 4
  000d4	8b 55 e8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000d7	89 02		 mov	 DWORD PTR [edx], eax

; 1505 :     pfile_in_zip_read_info->offset_local_extrafield = offset_local_extrafield;

  000d9	8b 45 e8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000dc	8b 4d dc	 mov	 ecx, DWORD PTR _offset_local_extrafield$[ebp]
  000df	89 48 50	 mov	 DWORD PTR [eax+80], ecx
  000e2	8b 55 e0	 mov	 edx, DWORD PTR _offset_local_extrafield$[ebp+4]
  000e5	89 50 54	 mov	 DWORD PTR [eax+84], edx

; 1506 :     pfile_in_zip_read_info->size_local_extrafield = size_local_extrafield;

  000e8	8b 45 e8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000eb	8b 4d d0	 mov	 ecx, DWORD PTR _size_local_extrafield$[ebp]
  000ee	89 48 58	 mov	 DWORD PTR [eax+88], ecx

; 1507 :     pfile_in_zip_read_info->pos_local_extrafield=0;

  000f1	8b 55 e8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000f4	c7 42 60 00 00
	00 00		 mov	 DWORD PTR [edx+96], 0
  000fb	c7 42 64 00 00
	00 00		 mov	 DWORD PTR [edx+100], 0

; 1508 :     pfile_in_zip_read_info->raw=raw;

  00102	8b 45 e8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00105	8b 4d 14	 mov	 ecx, DWORD PTR _raw$[ebp]
  00108	89 88 c8 00 00
	00		 mov	 DWORD PTR [eax+200], ecx

; 1509 : 
; 1510 :     if (pfile_in_zip_read_info->read_buffer==NULL)

  0010e	8b 55 e8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00111	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00114	75 1c		 jne	 SHORT $LN10@unzOpenCur

; 1511 :     {
; 1512 :         TRYFREE(pfile_in_zip_read_info);

  00116	83 7d e8 00	 cmp	 DWORD PTR _pfile_in_zip_read_info$[ebp], 0
  0011a	74 0c		 je	 SHORT $LN11@unzOpenCur
  0011c	8b 45 e8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0011f	50		 push	 eax
  00120	e8 00 00 00 00	 call	 _free
  00125	83 c4 04	 add	 esp, 4
$LN11@unzOpenCur:

; 1513 :         return UNZ_INTERNALERROR;

  00128	b8 98 ff ff ff	 mov	 eax, -104		; ffffff98H
  0012d	e9 46 02 00 00	 jmp	 $LN1@unzOpenCur
$LN10@unzOpenCur:

; 1514 :     }
; 1515 : 
; 1516 :     pfile_in_zip_read_info->stream_initialised=0;

  00132	8b 4d e8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00135	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0

; 1517 : 
; 1518 :     if (method!=NULL)

  0013c	83 7d 0c 00	 cmp	 DWORD PTR _method$[ebp], 0
  00140	74 0e		 je	 SHORT $LN12@unzOpenCur

; 1519 :         *method = (int)s->cur_file_info.compression_method;

  00142	8b 55 0c	 mov	 edx, DWORD PTR _method$[ebp]
  00145	8b 45 ec	 mov	 eax, DWORD PTR _s$[ebp]
  00148	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  0014e	89 0a		 mov	 DWORD PTR [edx], ecx
$LN12@unzOpenCur:

; 1520 : 
; 1521 :     if (level!=NULL)

  00150	83 7d 10 00	 cmp	 DWORD PTR _level$[ebp], 0
  00154	74 4b		 je	 SHORT $LN13@unzOpenCur

; 1522 :     {
; 1523 :         *level = 6;

  00156	8b 55 10	 mov	 edx, DWORD PTR _level$[ebp]
  00159	c7 02 06 00 00
	00		 mov	 DWORD PTR [edx], 6

; 1524 :         switch (s->cur_file_info.flag & 0x06)

  0015f	8b 45 ec	 mov	 eax, DWORD PTR _s$[ebp]
  00162	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00168	83 e1 06	 and	 ecx, 6
  0016b	89 4d c4	 mov	 DWORD PTR tv135[ebp], ecx
  0016e	83 7d c4 02	 cmp	 DWORD PTR tv135[ebp], 2
  00172	74 24		 je	 SHORT $LN16@unzOpenCur
  00174	83 7d c4 04	 cmp	 DWORD PTR tv135[ebp], 4
  00178	74 13		 je	 SHORT $LN15@unzOpenCur
  0017a	83 7d c4 06	 cmp	 DWORD PTR tv135[ebp], 6
  0017e	74 02		 je	 SHORT $LN14@unzOpenCur
  00180	eb 1f		 jmp	 SHORT $LN13@unzOpenCur
$LN14@unzOpenCur:

; 1525 :         {
; 1526 :           case 6 : *level = 1; break;

  00182	8b 55 10	 mov	 edx, DWORD PTR _level$[ebp]
  00185	c7 02 01 00 00
	00		 mov	 DWORD PTR [edx], 1
  0018b	eb 14		 jmp	 SHORT $LN13@unzOpenCur
$LN15@unzOpenCur:

; 1527 :           case 4 : *level = 2; break;

  0018d	8b 45 10	 mov	 eax, DWORD PTR _level$[ebp]
  00190	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2
  00196	eb 09		 jmp	 SHORT $LN13@unzOpenCur
$LN16@unzOpenCur:

; 1528 :           case 2 : *level = 9; break;

  00198	8b 4d 10	 mov	 ecx, DWORD PTR _level$[ebp]
  0019b	c7 01 09 00 00
	00		 mov	 DWORD PTR [ecx], 9
$LN13@unzOpenCur:

; 1529 :         }
; 1530 :     }
; 1531 : 
; 1532 :     if ((s->cur_file_info.compression_method!=0) &&
; 1533 : /* #ifdef HAVE_BZIP2 */
; 1534 :         (s->cur_file_info.compression_method!=Z_BZIP2ED) &&

  001a1	8b 55 ec	 mov	 edx, DWORD PTR _s$[ebp]
  001a4	83 ba 8c 00 00
	00 00		 cmp	 DWORD PTR [edx+140], 0
  001ab	74 1f		 je	 SHORT $LN17@unzOpenCur
  001ad	8b 45 ec	 mov	 eax, DWORD PTR _s$[ebp]
  001b0	83 b8 8c 00 00
	00 0c		 cmp	 DWORD PTR [eax+140], 12	; 0000000cH
  001b7	74 13		 je	 SHORT $LN17@unzOpenCur
  001b9	8b 4d ec	 mov	 ecx, DWORD PTR _s$[ebp]
  001bc	83 b9 8c 00 00
	00 08		 cmp	 DWORD PTR [ecx+140], 8
  001c3	74 07		 je	 SHORT $LN17@unzOpenCur

; 1535 : /* #endif */
; 1536 :         (s->cur_file_info.compression_method!=Z_DEFLATED))
; 1537 : 
; 1538 :         err=UNZ_BADZIPFILE;

  001c5	c7 45 fc 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN17@unzOpenCur:

; 1539 : 
; 1540 :     pfile_in_zip_read_info->crc32_wait=s->cur_file_info.crc;

  001cc	8b 55 e8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  001cf	8b 45 ec	 mov	 eax, DWORD PTR _s$[ebp]
  001d2	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  001d8	89 4a 74	 mov	 DWORD PTR [edx+116], ecx

; 1541 :     pfile_in_zip_read_info->crc32=0;

  001db	8b 55 e8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  001de	c7 42 70 00 00
	00 00		 mov	 DWORD PTR [edx+112], 0

; 1542 :     pfile_in_zip_read_info->total_out_64=0;

  001e5	8b 45 e8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  001e8	c7 40 68 00 00
	00 00		 mov	 DWORD PTR [eax+104], 0
  001ef	c7 40 6c 00 00
	00 00		 mov	 DWORD PTR [eax+108], 0

; 1543 :     pfile_in_zip_read_info->compression_method = s->cur_file_info.compression_method;

  001f6	8b 4d e8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  001f9	8b 55 ec	 mov	 edx, DWORD PTR _s$[ebp]
  001fc	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  00202	89 81 b8 00 00
	00		 mov	 DWORD PTR [ecx+184], eax

; 1544 :     pfile_in_zip_read_info->filestream=s->filestream;

  00208	8b 4d e8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0020b	8b 55 ec	 mov	 edx, DWORD PTR _s$[ebp]
  0020e	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00211	89 81 b4 00 00
	00		 mov	 DWORD PTR [ecx+180], eax

; 1545 :     pfile_in_zip_read_info->z_filefunc=s->z_filefunc;

  00217	8b 7d e8	 mov	 edi, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0021a	81 c7 88 00 00
	00		 add	 edi, 136		; 00000088H
  00220	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  00225	8b 75 ec	 mov	 esi, DWORD PTR _s$[ebp]
  00228	f3 a5		 rep movsd

; 1546 :     pfile_in_zip_read_info->byte_before_the_zipfile=s->byte_before_the_zipfile;

  0022a	8b 4d e8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0022d	8b 55 ec	 mov	 edx, DWORD PTR _s$[ebp]
  00230	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  00233	89 81 c0 00 00
	00		 mov	 DWORD PTR [ecx+192], eax
  00239	8b 52 4c	 mov	 edx, DWORD PTR [edx+76]
  0023c	89 91 c4 00 00
	00		 mov	 DWORD PTR [ecx+196], edx

; 1547 : 
; 1548 :     pfile_in_zip_read_info->stream.total_out = 0;

  00242	8b 45 e8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00245	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 1549 : 
; 1550 :     if ((s->cur_file_info.compression_method==Z_BZIP2ED) && (!raw))

  0024c	8b 4d ec	 mov	 ecx, DWORD PTR _s$[ebp]
  0024f	83 b9 8c 00 00
	00 0c		 cmp	 DWORD PTR [ecx+140], 12	; 0000000cH
  00256	75 18		 jne	 SHORT $LN18@unzOpenCur
  00258	83 7d 14 00	 cmp	 DWORD PTR _raw$[ebp], 0
  0025c	75 12		 jne	 SHORT $LN18@unzOpenCur

; 1551 :     {
; 1552 : #ifdef HAVE_BZIP2
; 1553 :       pfile_in_zip_read_info->bstream.bzalloc = (void *(*) (void *, int, int))0;
; 1554 :       pfile_in_zip_read_info->bstream.bzfree = (free_func)0;
; 1555 :       pfile_in_zip_read_info->bstream.opaque = (voidpf)0;
; 1556 :       pfile_in_zip_read_info->bstream.state = (voidpf)0;
; 1557 : 
; 1558 :       pfile_in_zip_read_info->stream.zalloc = (alloc_func)0;
; 1559 :       pfile_in_zip_read_info->stream.zfree = (free_func)0;
; 1560 :       pfile_in_zip_read_info->stream.opaque = (voidpf)0;
; 1561 :       pfile_in_zip_read_info->stream.next_in = (voidpf)0;
; 1562 :       pfile_in_zip_read_info->stream.avail_in = 0;
; 1563 : 
; 1564 :       err=BZ2_bzDecompressInit(&pfile_in_zip_read_info->bstream, 0, 0);
; 1565 :       if (err == Z_OK)
; 1566 :         pfile_in_zip_read_info->stream_initialised=Z_BZIP2ED;
; 1567 :       else
; 1568 :       {
; 1569 :         TRYFREE(pfile_in_zip_read_info);
; 1570 :         return err;
; 1571 :       }
; 1572 : #else
; 1573 :       pfile_in_zip_read_info->raw=1;

  0025e	8b 55 e8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00261	c7 82 c8 00 00
	00 01 00 00 00	 mov	 DWORD PTR [edx+200], 1

; 1574 : #endif
; 1575 :     }

  0026b	e9 88 00 00 00	 jmp	 $LN19@unzOpenCur
$LN18@unzOpenCur:

; 1576 :     else if ((s->cur_file_info.compression_method==Z_DEFLATED) && (!raw))

  00270	8b 45 ec	 mov	 eax, DWORD PTR _s$[ebp]
  00273	83 b8 8c 00 00
	00 08		 cmp	 DWORD PTR [eax+140], 8
  0027a	75 7c		 jne	 SHORT $LN19@unzOpenCur
  0027c	83 7d 14 00	 cmp	 DWORD PTR _raw$[ebp], 0
  00280	75 76		 jne	 SHORT $LN19@unzOpenCur

; 1577 :     {
; 1578 :       pfile_in_zip_read_info->stream.zalloc = (alloc_func)0;

  00282	8b 4d e8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00285	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0

; 1579 :       pfile_in_zip_read_info->stream.zfree = (free_func)0;

  0028c	8b 55 e8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0028f	c7 42 28 00 00
	00 00		 mov	 DWORD PTR [edx+40], 0

; 1580 :       pfile_in_zip_read_info->stream.opaque = (voidpf)0;

  00296	8b 45 e8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00299	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0

; 1581 :       pfile_in_zip_read_info->stream.next_in = 0;

  002a0	8b 4d e8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  002a3	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 1582 :       pfile_in_zip_read_info->stream.avail_in = 0;

  002aa	8b 55 e8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  002ad	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 1583 : 
; 1584 :       err=inflateInit2(&pfile_in_zip_read_info->stream, -MAX_WBITS);

  002b4	6a 38		 push	 56			; 00000038H
  002b6	68 00 00 00 00	 push	 OFFSET ??_C@_06CJNJFBNP@1?42?411@
  002bb	6a f1		 push	 -15			; fffffff1H
  002bd	8b 45 e8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  002c0	83 c0 04	 add	 eax, 4
  002c3	50		 push	 eax
  002c4	e8 00 00 00 00	 call	 _inflateInit2_@16
  002c9	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax

; 1585 :       if (err == Z_OK)

  002cc	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  002d0	75 0c		 jne	 SHORT $LN21@unzOpenCur

; 1586 :         pfile_in_zip_read_info->stream_initialised=Z_DEFLATED;

  002d2	8b 4d e8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  002d5	c7 41 48 08 00
	00 00		 mov	 DWORD PTR [ecx+72], 8
  002dc	eb 1a		 jmp	 SHORT $LN19@unzOpenCur
$LN21@unzOpenCur:

; 1587 :       else
; 1588 :       {
; 1589 :         TRYFREE(pfile_in_zip_read_info);

  002de	83 7d e8 00	 cmp	 DWORD PTR _pfile_in_zip_read_info$[ebp], 0
  002e2	74 0c		 je	 SHORT $LN23@unzOpenCur
  002e4	8b 55 e8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  002e7	52		 push	 edx
  002e8	e8 00 00 00 00	 call	 _free
  002ed	83 c4 04	 add	 esp, 4
$LN23@unzOpenCur:

; 1590 :         return err;

  002f0	8b 45 fc	 mov	 eax, DWORD PTR _err$[ebp]
  002f3	e9 80 00 00 00	 jmp	 $LN1@unzOpenCur
$LN19@unzOpenCur:

; 1591 :       }
; 1592 :         /* windowBits is passed < 0 to tell that there is no zlib header.
; 1593 :          * Note that in this case inflate *requires* an extra "dummy" byte
; 1594 :          * after the compressed stream in order to complete decompression and
; 1595 :          * return Z_STREAM_END.
; 1596 :          * In unzip, i don't wait absolutely Z_STREAM_END because I known the
; 1597 :          * size of both compressed and uncompressed data
; 1598 :          */
; 1599 :     }
; 1600 :     pfile_in_zip_read_info->rest_read_compressed =

  002f8	8b 45 e8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  002fb	8b 4d ec	 mov	 ecx, DWORD PTR _s$[ebp]
  002fe	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00304	89 50 78	 mov	 DWORD PTR [eax+120], edx
  00307	8b 89 9c 00 00
	00		 mov	 ecx, DWORD PTR [ecx+156]
  0030d	89 48 7c	 mov	 DWORD PTR [eax+124], ecx

; 1601 :             s->cur_file_info.compressed_size ;
; 1602 :     pfile_in_zip_read_info->rest_read_uncompressed =

  00310	8b 55 e8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00313	8b 45 ec	 mov	 eax, DWORD PTR _s$[ebp]
  00316	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  0031c	89 8a 80 00 00
	00		 mov	 DWORD PTR [edx+128], ecx
  00322	8b 80 a4 00 00
	00		 mov	 eax, DWORD PTR [eax+164]
  00328	89 82 84 00 00
	00		 mov	 DWORD PTR [edx+132], eax

; 1603 :             s->cur_file_info.uncompressed_size ;
; 1604 : 
; 1605 : 
; 1606 :     pfile_in_zip_read_info->pos_in_zipfile =

  0032e	8b 4d ec	 mov	 ecx, DWORD PTR _s$[ebp]
  00331	8b 91 d8 00 00
	00		 mov	 edx, DWORD PTR [ecx+216]
  00337	83 c2 1e	 add	 edx, 30			; 0000001eH
  0033a	8b 81 dc 00 00
	00		 mov	 eax, DWORD PTR [ecx+220]
  00340	83 d0 00	 adc	 eax, 0
  00343	33 c9		 xor	 ecx, ecx
  00345	03 55 f4	 add	 edx, DWORD PTR _iSizeVar$[ebp]
  00348	13 c1		 adc	 eax, ecx
  0034a	8b 4d e8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0034d	89 51 40	 mov	 DWORD PTR [ecx+64], edx
  00350	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 1607 :             s->cur_file_info_internal.offset_curfile + SIZEZIPLOCALHEADER +
; 1608 :               iSizeVar;
; 1609 : 
; 1610 :     pfile_in_zip_read_info->stream.avail_in = (uInt)0;

  00353	8b 55 e8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00356	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 1611 : 
; 1612 :     s->pfile_in_zip_read = pfile_in_zip_read_info;

  0035d	8b 45 ec	 mov	 eax, DWORD PTR _s$[ebp]
  00360	8b 4d e8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00363	89 88 e0 00 00
	00		 mov	 DWORD PTR [eax+224], ecx

; 1613 :                 s->encrypted = 0;

  00369	8b 55 ec	 mov	 edx, DWORD PTR _s$[ebp]
  0036c	c7 82 e4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+228], 0

; 1614 : 
; 1615 : #    ifndef NOUNCRYPT
; 1616 :     if (password != NULL)
; 1617 :     {
; 1618 :         int i;
; 1619 :         s->pcrc_32_tab = get_crc_table();
; 1620 :         init_keys(password,s->keys,s->pcrc_32_tab);
; 1621 :         if (ZSEEK64(s->z_filefunc, s->filestream,
; 1622 :                   s->pfile_in_zip_read->pos_in_zipfile +
; 1623 :                      s->pfile_in_zip_read->byte_before_the_zipfile,
; 1624 :                   SEEK_SET)!=0)
; 1625 :             return UNZ_INTERNALERROR;
; 1626 :         if(ZREAD64(s->z_filefunc, s->filestream,source, 12)<12)
; 1627 :             return UNZ_INTERNALERROR;
; 1628 : 
; 1629 :         for (i = 0; i<12; i++)
; 1630 :             zdecode(s->keys,s->pcrc_32_tab,source[i]);
; 1631 : 
; 1632 :         s->pfile_in_zip_read->pos_in_zipfile+=12;
; 1633 :         s->encrypted=1;
; 1634 :     }
; 1635 : #    endif
; 1636 : 
; 1637 : 
; 1638 :     return UNZ_OK;

  00376	33 c0		 xor	 eax, eax
$LN1@unzOpenCur:

; 1639 : }

  00378	52		 push	 edx
  00379	8b cd		 mov	 ecx, ebp
  0037b	50		 push	 eax
  0037c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN34@unzOpenCur
  00382	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00387	58		 pop	 eax
  00388	5a		 pop	 edx
  00389	5f		 pop	 edi
  0038a	5e		 pop	 esi
  0038b	83 c4 3c	 add	 esp, 60			; 0000003cH
  0038e	3b ec		 cmp	 ebp, esp
  00390	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00395	8b e5		 mov	 esp, ebp
  00397	5d		 pop	 ebp
  00398	c2 14 00	 ret	 20			; 00000014H
  0039b	90		 npad	 1
$LN34@unzOpenCur:
  0039c	03 00 00 00	 DD	 3
  003a0	00 00 00 00	 DD	 $LN33@unzOpenCur
$LN33@unzOpenCur:
  003a4	f4 ff ff ff	 DD	 -12			; fffffff4H
  003a8	04 00 00 00	 DD	 4
  003ac	00 00 00 00	 DD	 $LN30@unzOpenCur
  003b0	dc ff ff ff	 DD	 -36			; ffffffdcH
  003b4	08 00 00 00	 DD	 8
  003b8	00 00 00 00	 DD	 $LN31@unzOpenCur
  003bc	d0 ff ff ff	 DD	 -48			; ffffffd0H
  003c0	04 00 00 00	 DD	 4
  003c4	00 00 00 00	 DD	 $LN32@unzOpenCur
$LN32@unzOpenCur:
  003c8	73		 DB	 115			; 00000073H
  003c9	69		 DB	 105			; 00000069H
  003ca	7a		 DB	 122			; 0000007aH
  003cb	65		 DB	 101			; 00000065H
  003cc	5f		 DB	 95			; 0000005fH
  003cd	6c		 DB	 108			; 0000006cH
  003ce	6f		 DB	 111			; 0000006fH
  003cf	63		 DB	 99			; 00000063H
  003d0	61		 DB	 97			; 00000061H
  003d1	6c		 DB	 108			; 0000006cH
  003d2	5f		 DB	 95			; 0000005fH
  003d3	65		 DB	 101			; 00000065H
  003d4	78		 DB	 120			; 00000078H
  003d5	74		 DB	 116			; 00000074H
  003d6	72		 DB	 114			; 00000072H
  003d7	61		 DB	 97			; 00000061H
  003d8	66		 DB	 102			; 00000066H
  003d9	69		 DB	 105			; 00000069H
  003da	65		 DB	 101			; 00000065H
  003db	6c		 DB	 108			; 0000006cH
  003dc	64		 DB	 100			; 00000064H
  003dd	00		 DB	 0
$LN31@unzOpenCur:
  003de	6f		 DB	 111			; 0000006fH
  003df	66		 DB	 102			; 00000066H
  003e0	66		 DB	 102			; 00000066H
  003e1	73		 DB	 115			; 00000073H
  003e2	65		 DB	 101			; 00000065H
  003e3	74		 DB	 116			; 00000074H
  003e4	5f		 DB	 95			; 0000005fH
  003e5	6c		 DB	 108			; 0000006cH
  003e6	6f		 DB	 111			; 0000006fH
  003e7	63		 DB	 99			; 00000063H
  003e8	61		 DB	 97			; 00000061H
  003e9	6c		 DB	 108			; 0000006cH
  003ea	5f		 DB	 95			; 0000005fH
  003eb	65		 DB	 101			; 00000065H
  003ec	78		 DB	 120			; 00000078H
  003ed	74		 DB	 116			; 00000074H
  003ee	72		 DB	 114			; 00000072H
  003ef	61		 DB	 97			; 00000061H
  003f0	66		 DB	 102			; 00000066H
  003f1	69		 DB	 105			; 00000069H
  003f2	65		 DB	 101			; 00000065H
  003f3	6c		 DB	 108			; 0000006cH
  003f4	64		 DB	 100			; 00000064H
  003f5	00		 DB	 0
$LN30@unzOpenCur:
  003f6	69		 DB	 105			; 00000069H
  003f7	53		 DB	 83			; 00000053H
  003f8	69		 DB	 105			; 00000069H
  003f9	7a		 DB	 122			; 0000007aH
  003fa	65		 DB	 101			; 00000065H
  003fb	56		 DB	 86			; 00000056H
  003fc	61		 DB	 97			; 00000061H
  003fd	72		 DB	 114			; 00000072H
  003fe	00		 DB	 0
_unzOpenCurrentFile3@20 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unzOpenCurrentFile@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_unzOpenCurrentFile@4 PROC				; COMDAT

; 1642 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1643 :     return unzOpenCurrentFile3(file, NULL, NULL, 0, NULL);

  0000d	6a 00		 push	 0
  0000f	6a 00		 push	 0
  00011	6a 00		 push	 0
  00013	6a 00		 push	 0
  00015	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 _unzOpenCurrentFile3@20

; 1644 : }

  0001e	3b ec		 cmp	 ebp, esp
  00020	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
_unzOpenCurrentFile@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unzOpenCurrentFilePassword@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_password$ = 12						; size = 4
_unzOpenCurrentFilePassword@8 PROC			; COMDAT

; 1647 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1648 :     return unzOpenCurrentFile3(file, NULL, NULL, 0, password);

  0000d	8b 45 0c	 mov	 eax, DWORD PTR _password$[ebp]
  00010	50		 push	 eax
  00011	6a 00		 push	 0
  00013	6a 00		 push	 0
  00015	6a 00		 push	 0
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 _unzOpenCurrentFile3@20

; 1649 : }

  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	5d		 pop	 ebp
  00028	c2 08 00	 ret	 8
_unzOpenCurrentFilePassword@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unzOpenCurrentFile2@16
_TEXT	SEGMENT
_file$ = 8						; size = 4
_method$ = 12						; size = 4
_level$ = 16						; size = 4
_raw$ = 20						; size = 4
_unzOpenCurrentFile2@16 PROC				; COMDAT

; 1652 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1653 :     return unzOpenCurrentFile3(file, method, level, raw, NULL);

  0000d	6a 00		 push	 0
  0000f	8b 45 14	 mov	 eax, DWORD PTR _raw$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR _level$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR _method$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 _unzOpenCurrentFile3@20

; 1654 : }

  00024	3b ec		 cmp	 ebp, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	5d		 pop	 ebp
  0002c	c2 10 00	 ret	 16			; 00000010H
_unzOpenCurrentFile2@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unzGetCurrentFileZStreamPos64@4
_TEXT	SEGMENT
_pfile_in_zip_read_info$ = -8				; size = 4
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_unzGetCurrentFileZStreamPos64@4 PROC			; COMDAT

; 1659 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1660 :     unz64_s* s;
; 1661 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1662 :     s=(unz64_s*)file;

  0001f	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00022	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 1663 :     if (file==NULL)

  00025	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00029	75 06		 jne	 SHORT $LN2@unzGetCurr

; 1664 :         return 0; //UNZ_PARAMERROR;

  0002b	33 c0		 xor	 eax, eax
  0002d	33 d2		 xor	 edx, edx
  0002f	eb 34		 jmp	 SHORT $LN1@unzGetCurr
$LN2@unzGetCurr:

; 1665 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00031	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00034	8b 91 e0 00 00
	00		 mov	 edx, DWORD PTR [ecx+224]
  0003a	89 55 f8	 mov	 DWORD PTR _pfile_in_zip_read_info$[ebp], edx

; 1666 :     if (pfile_in_zip_read_info==NULL)

  0003d	83 7d f8 00	 cmp	 DWORD PTR _pfile_in_zip_read_info$[ebp], 0
  00041	75 06		 jne	 SHORT $LN3@unzGetCurr

; 1667 :         return 0; //UNZ_PARAMERROR;

  00043	33 c0		 xor	 eax, eax
  00045	33 d2		 xor	 edx, edx
  00047	eb 1c		 jmp	 SHORT $LN1@unzGetCurr
$LN3@unzGetCurr:

; 1668 :     return pfile_in_zip_read_info->pos_in_zipfile +

  00049	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0004f	8b 50 40	 mov	 edx, DWORD PTR [eax+64]
  00052	03 91 c0 00 00
	00		 add	 edx, DWORD PTR [ecx+192]
  00058	8b 70 44	 mov	 esi, DWORD PTR [eax+68]
  0005b	13 b1 c4 00 00
	00		 adc	 esi, DWORD PTR [ecx+196]
  00061	8b c2		 mov	 eax, edx
  00063	8b d6		 mov	 edx, esi
$LN1@unzGetCurr:

; 1669 :                          pfile_in_zip_read_info->byte_before_the_zipfile;
; 1670 : }

  00065	5e		 pop	 esi
  00066	83 c4 08	 add	 esp, 8
  00069	3b ec		 cmp	 ebp, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c2 04 00	 ret	 4
_unzGetCurrentFileZStreamPos64@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unzReadCurrentFile@12
_TEXT	SEGMENT
tv254 = -116						; size = 4
tv178 = -112						; size = 4
tv397 = -108						; size = 4
tv328 = -104						; size = 8
tv327 = -96						; size = 4
tv320 = -92						; size = 4
tv306 = -88						; size = 8
tv303 = -80						; size = 8
tv283 = -72						; size = 4
tv280 = -68						; size = 8
_flush$1 = -60						; size = 4
_uOutThis$2 = -56					; size = 8
_bufBefore$3 = -48					; size = 4
_uTotalOutAfter$4 = -44					; size = 8
_uTotalOutBefore$5 = -36				; size = 8
_i$6 = -28						; size = 4
_uDoCopy$7 = -24					; size = 4
_uReadThis$8 = -20					; size = 4
_pfile_in_zip_read_info$ = -16				; size = 4
_s$ = -12						; size = 4
_iRead$ = -8						; size = 4
_err$ = -4						; size = 4
_file$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_unzReadCurrentFile@12 PROC				; COMDAT

; 1685 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d 8c	 lea	 edi, DWORD PTR [ebp-116]
  0000b	b9 1d 00 00 00	 mov	 ecx, 29			; 0000001dH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1686 :     int err=UNZ_OK;

  00021	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 1687 :     uInt iRead = 0;

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iRead$[ebp], 0

; 1688 :     unz64_s* s;
; 1689 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1690 :     if (file==NULL)

  0002f	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00033	75 0a		 jne	 SHORT $LN7@unzReadCur

; 1691 :         return UNZ_PARAMERROR;

  00035	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  0003a	e9 ac 04 00 00	 jmp	 $LN1@unzReadCur
$LN7@unzReadCur:

; 1692 :     s=(unz64_s*)file;

  0003f	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00042	89 45 f4	 mov	 DWORD PTR _s$[ebp], eax

; 1693 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00045	8b 4d f4	 mov	 ecx, DWORD PTR _s$[ebp]
  00048	8b 91 e0 00 00
	00		 mov	 edx, DWORD PTR [ecx+224]
  0004e	89 55 f0	 mov	 DWORD PTR _pfile_in_zip_read_info$[ebp], edx

; 1694 : 
; 1695 :     if (pfile_in_zip_read_info==NULL)

  00051	83 7d f0 00	 cmp	 DWORD PTR _pfile_in_zip_read_info$[ebp], 0
  00055	75 0a		 jne	 SHORT $LN8@unzReadCur

; 1696 :         return UNZ_PARAMERROR;

  00057	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  0005c	e9 8a 04 00 00	 jmp	 $LN1@unzReadCur
$LN8@unzReadCur:

; 1697 : 
; 1698 : 
; 1699 :     if (pfile_in_zip_read_info->read_buffer == NULL)

  00061	8b 45 f0	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00064	83 38 00	 cmp	 DWORD PTR [eax], 0
  00067	75 0a		 jne	 SHORT $LN9@unzReadCur

; 1700 :         return UNZ_END_OF_LIST_OF_FILE;

  00069	b8 9c ff ff ff	 mov	 eax, -100		; ffffff9cH
  0006e	e9 78 04 00 00	 jmp	 $LN1@unzReadCur
$LN9@unzReadCur:

; 1701 :     if (len==0)

  00073	83 7d 10 00	 cmp	 DWORD PTR _len$[ebp], 0
  00077	75 07		 jne	 SHORT $LN10@unzReadCur

; 1702 :         return 0;

  00079	33 c0		 xor	 eax, eax
  0007b	e9 6b 04 00 00	 jmp	 $LN1@unzReadCur
$LN10@unzReadCur:

; 1703 : 
; 1704 :     pfile_in_zip_read_info->stream.next_out = (Bytef*)buf;

  00080	8b 4d f0	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00083	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  00086	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 1705 : 
; 1706 :     pfile_in_zip_read_info->stream.avail_out = (uInt)len;

  00089	8b 45 f0	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0008c	8b 4d 10	 mov	 ecx, DWORD PTR _len$[ebp]
  0008f	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 1707 : 
; 1708 :     if ((len>pfile_in_zip_read_info->rest_read_uncompressed) &&

  00092	8b 55 10	 mov	 edx, DWORD PTR _len$[ebp]
  00095	33 c0		 xor	 eax, eax
  00097	8b 4d f0	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0009a	89 55 bc	 mov	 DWORD PTR tv280[ebp], edx
  0009d	89 45 c0	 mov	 DWORD PTR tv280[ebp+4], eax
  000a0	89 4d b8	 mov	 DWORD PTR tv283[ebp], ecx
  000a3	8b 55 b8	 mov	 edx, DWORD PTR tv283[ebp]
  000a6	8b 45 c0	 mov	 eax, DWORD PTR tv280[ebp+4]
  000a9	3b 82 84 00 00
	00		 cmp	 eax, DWORD PTR [edx+132]
  000af	72 2b		 jb	 SHORT $LN11@unzReadCur
  000b1	77 0e		 ja	 SHORT $LN36@unzReadCur
  000b3	8b 4d b8	 mov	 ecx, DWORD PTR tv283[ebp]
  000b6	8b 55 bc	 mov	 edx, DWORD PTR tv280[ebp]
  000b9	3b 91 80 00 00
	00		 cmp	 edx, DWORD PTR [ecx+128]
  000bf	76 1b		 jbe	 SHORT $LN11@unzReadCur
$LN36@unzReadCur:
  000c1	8b 45 f0	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000c4	83 b8 c8 00 00
	00 00		 cmp	 DWORD PTR [eax+200], 0
  000cb	75 0f		 jne	 SHORT $LN11@unzReadCur

; 1709 :         (!(pfile_in_zip_read_info->raw)))
; 1710 :         pfile_in_zip_read_info->stream.avail_out =

  000cd	8b 4d f0	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000d0	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  000d6	8b 45 f0	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000d9	89 50 14	 mov	 DWORD PTR [eax+20], edx
$LN11@unzReadCur:

; 1711 :             (uInt)pfile_in_zip_read_info->rest_read_uncompressed;
; 1712 : 
; 1713 :     if ((len>pfile_in_zip_read_info->rest_read_compressed+
; 1714 :            pfile_in_zip_read_info->stream.avail_in) &&

  000dc	8b 4d 10	 mov	 ecx, DWORD PTR _len$[ebp]
  000df	33 d2		 xor	 edx, edx
  000e1	8b 45 f0	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000e4	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000e7	33 f6		 xor	 esi, esi
  000e9	8b 7d f0	 mov	 edi, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000ec	03 47 78	 add	 eax, DWORD PTR [edi+120]
  000ef	13 77 7c	 adc	 esi, DWORD PTR [edi+124]
  000f2	89 4d b0	 mov	 DWORD PTR tv303[ebp], ecx
  000f5	89 55 b4	 mov	 DWORD PTR tv303[ebp+4], edx
  000f8	89 45 a8	 mov	 DWORD PTR tv306[ebp], eax
  000fb	89 75 ac	 mov	 DWORD PTR tv306[ebp+4], esi
  000fe	8b 4d b4	 mov	 ecx, DWORD PTR tv303[ebp+4]
  00101	3b 4d ac	 cmp	 ecx, DWORD PTR tv306[ebp+4]
  00104	72 28		 jb	 SHORT $LN2@unzReadCur
  00106	77 08		 ja	 SHORT $LN37@unzReadCur
  00108	8b 55 b0	 mov	 edx, DWORD PTR tv303[ebp]
  0010b	3b 55 a8	 cmp	 edx, DWORD PTR tv306[ebp]
  0010e	76 1e		 jbe	 SHORT $LN2@unzReadCur
$LN37@unzReadCur:
  00110	8b 45 f0	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00113	83 b8 c8 00 00
	00 00		 cmp	 DWORD PTR [eax+200], 0
  0011a	74 12		 je	 SHORT $LN2@unzReadCur

; 1715 :          (pfile_in_zip_read_info->raw))
; 1716 :         pfile_in_zip_read_info->stream.avail_out =

  0011c	8b 4d f0	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0011f	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  00122	8b 45 f0	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00125	03 50 08	 add	 edx, DWORD PTR [eax+8]
  00128	8b 4d f0	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0012b	89 51 14	 mov	 DWORD PTR [ecx+20], edx
$LN2@unzReadCur:

; 1717 :             (uInt)pfile_in_zip_read_info->rest_read_compressed+
; 1718 :             pfile_in_zip_read_info->stream.avail_in;
; 1719 : 
; 1720 :     while (pfile_in_zip_read_info->stream.avail_out>0)

  0012e	8b 55 f0	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00131	83 7a 14 00	 cmp	 DWORD PTR [edx+20], 0
  00135	0f 86 a2 03 00
	00		 jbe	 $LN3@unzReadCur

; 1721 :     {
; 1722 :         if ((pfile_in_zip_read_info->stream.avail_in==0) &&

  0013b	8b 45 f0	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0013e	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00142	0f 85 2e 01 00
	00		 jne	 $LN13@unzReadCur
  00148	8b 4d f0	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0014b	89 4d a4	 mov	 DWORD PTR tv320[ebp], ecx
  0014e	8b 55 a4	 mov	 edx, DWORD PTR tv320[ebp]
  00151	83 7a 7c 00	 cmp	 DWORD PTR [edx+124], 0
  00155	77 0d		 ja	 SHORT $LN38@unzReadCur
  00157	8b 45 a4	 mov	 eax, DWORD PTR tv320[ebp]
  0015a	83 78 78 00	 cmp	 DWORD PTR [eax+120], 0
  0015e	0f 86 12 01 00
	00		 jbe	 $LN13@unzReadCur
$LN38@unzReadCur:

; 1723 :             (pfile_in_zip_read_info->rest_read_compressed>0))
; 1724 :         {
; 1725 :             uInt uReadThis = UNZ_BUFSIZE;

  00164	c7 45 ec 00 40
	00 00		 mov	 DWORD PTR _uReadThis$8[ebp], 16384 ; 00004000H

; 1726 :             if (pfile_in_zip_read_info->rest_read_compressed<uReadThis)

  0016b	8b 4d ec	 mov	 ecx, DWORD PTR _uReadThis$8[ebp]
  0016e	33 d2		 xor	 edx, edx
  00170	8b 45 f0	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00173	89 45 a0	 mov	 DWORD PTR tv327[ebp], eax
  00176	89 4d 98	 mov	 DWORD PTR tv328[ebp], ecx
  00179	89 55 9c	 mov	 DWORD PTR tv328[ebp+4], edx
  0017c	8b 4d a0	 mov	 ecx, DWORD PTR tv327[ebp]
  0017f	8b 51 7c	 mov	 edx, DWORD PTR [ecx+124]
  00182	3b 55 9c	 cmp	 edx, DWORD PTR tv328[ebp+4]
  00185	77 16		 ja	 SHORT $LN14@unzReadCur
  00187	72 0b		 jb	 SHORT $LN39@unzReadCur
  00189	8b 45 a0	 mov	 eax, DWORD PTR tv327[ebp]
  0018c	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0018f	3b 4d 98	 cmp	 ecx, DWORD PTR tv328[ebp]
  00192	73 09		 jae	 SHORT $LN14@unzReadCur
$LN39@unzReadCur:

; 1727 :                 uReadThis = (uInt)pfile_in_zip_read_info->rest_read_compressed;

  00194	8b 55 f0	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00197	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  0019a	89 45 ec	 mov	 DWORD PTR _uReadThis$8[ebp], eax
$LN14@unzReadCur:

; 1728 :             if (uReadThis == 0)

  0019d	83 7d ec 00	 cmp	 DWORD PTR _uReadThis$8[ebp], 0
  001a1	75 07		 jne	 SHORT $LN15@unzReadCur

; 1729 :                 return UNZ_EOF;

  001a3	33 c0		 xor	 eax, eax
  001a5	e9 41 03 00 00	 jmp	 $LN1@unzReadCur
$LN15@unzReadCur:

; 1730 :             if (ZSEEK64(pfile_in_zip_read_info->z_filefunc,
; 1731 :                       pfile_in_zip_read_info->filestream,
; 1732 :                       pfile_in_zip_read_info->pos_in_zipfile +
; 1733 :                          pfile_in_zip_read_info->byte_before_the_zipfile,
; 1734 :                          ZLIB_FILEFUNC_SEEK_SET)!=0)

  001aa	6a 00		 push	 0
  001ac	8b 4d f0	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  001af	8b 55 f0	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  001b2	8b 41 40	 mov	 eax, DWORD PTR [ecx+64]
  001b5	03 82 c0 00 00
	00		 add	 eax, DWORD PTR [edx+192]
  001bb	8b 49 44	 mov	 ecx, DWORD PTR [ecx+68]
  001be	13 8a c4 00 00
	00		 adc	 ecx, DWORD PTR [edx+196]
  001c4	51		 push	 ecx
  001c5	50		 push	 eax
  001c6	8b 55 f0	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  001c9	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  001cf	50		 push	 eax
  001d0	8b 4d f0	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  001d3	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  001d9	51		 push	 ecx
  001da	e8 00 00 00 00	 call	 _call_zseek64
  001df	83 c4 14	 add	 esp, 20			; 00000014H
  001e2	85 c0		 test	 eax, eax
  001e4	74 08		 je	 SHORT $LN16@unzReadCur

; 1735 :                 return UNZ_ERRNO;

  001e6	83 c8 ff	 or	 eax, -1
  001e9	e9 fd 02 00 00	 jmp	 $LN1@unzReadCur
$LN16@unzReadCur:

; 1736 :             if (ZREAD64(pfile_in_zip_read_info->z_filefunc,
; 1737 :                       pfile_in_zip_read_info->filestream,
; 1738 :                       pfile_in_zip_read_info->read_buffer,
; 1739 :                       uReadThis)!=uReadThis)

  001ee	8b f4		 mov	 esi, esp
  001f0	8b 55 ec	 mov	 edx, DWORD PTR _uReadThis$8[ebp]
  001f3	52		 push	 edx
  001f4	8b 45 f0	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  001f7	8b 08		 mov	 ecx, DWORD PTR [eax]
  001f9	51		 push	 ecx
  001fa	8b 55 f0	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  001fd	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  00203	50		 push	 eax
  00204	8b 4d f0	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00207	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  0020d	52		 push	 edx
  0020e	8b 45 f0	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00211	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00217	ff d1		 call	 ecx
  00219	83 c4 10	 add	 esp, 16			; 00000010H
  0021c	3b f4		 cmp	 esi, esp
  0021e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00223	3b 45 ec	 cmp	 eax, DWORD PTR _uReadThis$8[ebp]
  00226	74 08		 je	 SHORT $LN17@unzReadCur

; 1740 :                 return UNZ_ERRNO;

  00228	83 c8 ff	 or	 eax, -1
  0022b	e9 bb 02 00 00	 jmp	 $LN1@unzReadCur
$LN17@unzReadCur:

; 1741 : 
; 1742 : 
; 1743 : #            ifndef NOUNCRYPT
; 1744 :             if(s->encrypted)
; 1745 :             {
; 1746 :                 uInt i;
; 1747 :                 for(i=0;i<uReadThis;i++)
; 1748 :                   pfile_in_zip_read_info->read_buffer[i] =
; 1749 :                       zdecode(s->keys,s->pcrc_32_tab,
; 1750 :                               pfile_in_zip_read_info->read_buffer[i]);
; 1751 :             }
; 1752 : #            endif
; 1753 : 
; 1754 : 
; 1755 :             pfile_in_zip_read_info->pos_in_zipfile += uReadThis;

  00230	8b 55 ec	 mov	 edx, DWORD PTR _uReadThis$8[ebp]
  00233	33 c0		 xor	 eax, eax
  00235	8b 4d f0	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00238	03 51 40	 add	 edx, DWORD PTR [ecx+64]
  0023b	13 41 44	 adc	 eax, DWORD PTR [ecx+68]
  0023e	8b 4d f0	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00241	89 51 40	 mov	 DWORD PTR [ecx+64], edx
  00244	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 1756 : 
; 1757 :             pfile_in_zip_read_info->rest_read_compressed-=uReadThis;

  00247	8b 55 ec	 mov	 edx, DWORD PTR _uReadThis$8[ebp]
  0024a	33 c0		 xor	 eax, eax
  0024c	8b 4d f0	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0024f	8b 71 78	 mov	 esi, DWORD PTR [ecx+120]
  00252	2b f2		 sub	 esi, edx
  00254	8b 51 7c	 mov	 edx, DWORD PTR [ecx+124]
  00257	1b d0		 sbb	 edx, eax
  00259	8b 45 f0	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0025c	89 70 78	 mov	 DWORD PTR [eax+120], esi
  0025f	89 50 7c	 mov	 DWORD PTR [eax+124], edx

; 1758 : 
; 1759 :             pfile_in_zip_read_info->stream.next_in =

  00262	8b 4d f0	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00265	8b 55 f0	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00268	8b 02		 mov	 eax, DWORD PTR [edx]
  0026a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1760 :                 (Bytef*)pfile_in_zip_read_info->read_buffer;
; 1761 :             pfile_in_zip_read_info->stream.avail_in = (uInt)uReadThis;

  0026d	8b 4d f0	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00270	8b 55 ec	 mov	 edx, DWORD PTR _uReadThis$8[ebp]
  00273	89 51 08	 mov	 DWORD PTR [ecx+8], edx
$LN13@unzReadCur:

; 1762 :         }
; 1763 : 
; 1764 :         if ((pfile_in_zip_read_info->compression_method==0) || (pfile_in_zip_read_info->raw))

  00276	8b 45 f0	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00279	83 b8 b8 00 00
	00 00		 cmp	 DWORD PTR [eax+184], 0
  00280	74 10		 je	 SHORT $LN20@unzReadCur
  00282	8b 4d f0	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00285	83 b9 c8 00 00
	00 00		 cmp	 DWORD PTR [ecx+200], 0
  0028c	0f 84 44 01 00
	00		 je	 $LN18@unzReadCur
$LN20@unzReadCur:

; 1765 :         {
; 1766 :             uInt uDoCopy,i ;
; 1767 : 
; 1768 :             if ((pfile_in_zip_read_info->stream.avail_in == 0) &&

  00292	8b 55 f0	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00295	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  00299	75 31		 jne	 SHORT $LN21@unzReadCur
  0029b	8b 45 f0	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0029e	89 45 94	 mov	 DWORD PTR tv397[ebp], eax
  002a1	8b 4d 94	 mov	 ecx, DWORD PTR tv397[ebp]
  002a4	8b 55 94	 mov	 edx, DWORD PTR tv397[ebp]
  002a7	8b 41 78	 mov	 eax, DWORD PTR [ecx+120]
  002aa	0b 42 7c	 or	 eax, DWORD PTR [edx+124]
  002ad	75 1d		 jne	 SHORT $LN21@unzReadCur

; 1769 :                 (pfile_in_zip_read_info->rest_read_compressed == 0))
; 1770 :                 return (iRead==0) ? UNZ_EOF : iRead;

  002af	83 7d f8 00	 cmp	 DWORD PTR _iRead$[ebp], 0
  002b3	75 09		 jne	 SHORT $LN31@unzReadCur
  002b5	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv178[ebp], 0
  002bc	eb 06		 jmp	 SHORT $LN32@unzReadCur
$LN31@unzReadCur:
  002be	8b 4d f8	 mov	 ecx, DWORD PTR _iRead$[ebp]
  002c1	89 4d 90	 mov	 DWORD PTR tv178[ebp], ecx
$LN32@unzReadCur:
  002c4	8b 45 90	 mov	 eax, DWORD PTR tv178[ebp]
  002c7	e9 1f 02 00 00	 jmp	 $LN1@unzReadCur
$LN21@unzReadCur:

; 1771 : 
; 1772 :             if (pfile_in_zip_read_info->stream.avail_out <

  002cc	8b 55 f0	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  002cf	8b 45 f0	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  002d2	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  002d5	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  002d8	73 0b		 jae	 SHORT $LN22@unzReadCur

; 1773 :                             pfile_in_zip_read_info->stream.avail_in)
; 1774 :                 uDoCopy = pfile_in_zip_read_info->stream.avail_out ;

  002da	8b 55 f0	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  002dd	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  002e0	89 45 e8	 mov	 DWORD PTR _uDoCopy$7[ebp], eax
  002e3	eb 09		 jmp	 SHORT $LN23@unzReadCur
$LN22@unzReadCur:

; 1775 :             else
; 1776 :                 uDoCopy = pfile_in_zip_read_info->stream.avail_in ;

  002e5	8b 4d f0	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  002e8	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  002eb	89 55 e8	 mov	 DWORD PTR _uDoCopy$7[ebp], edx
$LN23@unzReadCur:

; 1777 : 
; 1778 :             for (i=0;i<uDoCopy;i++)

  002ee	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$6[ebp], 0
  002f5	eb 09		 jmp	 SHORT $LN6@unzReadCur
$LN4@unzReadCur:
  002f7	8b 45 e4	 mov	 eax, DWORD PTR _i$6[ebp]
  002fa	83 c0 01	 add	 eax, 1
  002fd	89 45 e4	 mov	 DWORD PTR _i$6[ebp], eax
$LN6@unzReadCur:
  00300	8b 4d e4	 mov	 ecx, DWORD PTR _i$6[ebp]
  00303	3b 4d e8	 cmp	 ecx, DWORD PTR _uDoCopy$7[ebp]
  00306	73 1a		 jae	 SHORT $LN5@unzReadCur

; 1779 :                 *(pfile_in_zip_read_info->stream.next_out+i) =

  00308	8b 55 f0	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0030b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0030e	8b 4d f0	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00311	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00314	8b 4d e4	 mov	 ecx, DWORD PTR _i$6[ebp]
  00317	8b 75 e4	 mov	 esi, DWORD PTR _i$6[ebp]
  0031a	8a 04 30	 mov	 al, BYTE PTR [eax+esi]
  0031d	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00320	eb d5		 jmp	 SHORT $LN4@unzReadCur
$LN5@unzReadCur:

; 1780 :                         *(pfile_in_zip_read_info->stream.next_in+i);
; 1781 : 
; 1782 :             pfile_in_zip_read_info->total_out_64 = pfile_in_zip_read_info->total_out_64 + uDoCopy;

  00322	8b 4d e8	 mov	 ecx, DWORD PTR _uDoCopy$7[ebp]
  00325	33 d2		 xor	 edx, edx
  00327	8b 45 f0	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0032a	03 48 68	 add	 ecx, DWORD PTR [eax+104]
  0032d	13 50 6c	 adc	 edx, DWORD PTR [eax+108]
  00330	8b 45 f0	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00333	89 48 68	 mov	 DWORD PTR [eax+104], ecx
  00336	89 50 6c	 mov	 DWORD PTR [eax+108], edx

; 1783 : 
; 1784 :             pfile_in_zip_read_info->crc32 = crc32(pfile_in_zip_read_info->crc32,

  00339	8b 4d e8	 mov	 ecx, DWORD PTR _uDoCopy$7[ebp]
  0033c	51		 push	 ecx
  0033d	8b 55 f0	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00340	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00343	50		 push	 eax
  00344	8b 4d f0	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00347	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  0034a	52		 push	 edx
  0034b	e8 00 00 00 00	 call	 _crc32@12
  00350	8b 4d f0	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00353	89 41 70	 mov	 DWORD PTR [ecx+112], eax

; 1785 :                                 pfile_in_zip_read_info->stream.next_out,
; 1786 :                                 uDoCopy);
; 1787 :             pfile_in_zip_read_info->rest_read_uncompressed-=uDoCopy;

  00356	8b 55 e8	 mov	 edx, DWORD PTR _uDoCopy$7[ebp]
  00359	33 c0		 xor	 eax, eax
  0035b	8b 4d f0	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0035e	8b b1 80 00 00
	00		 mov	 esi, DWORD PTR [ecx+128]
  00364	2b f2		 sub	 esi, edx
  00366	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  0036c	1b d0		 sbb	 edx, eax
  0036e	8b 45 f0	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00371	89 b0 80 00 00
	00		 mov	 DWORD PTR [eax+128], esi
  00377	89 90 84 00 00
	00		 mov	 DWORD PTR [eax+132], edx

; 1788 :             pfile_in_zip_read_info->stream.avail_in -= uDoCopy;

  0037d	8b 4d f0	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00380	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00383	2b 55 e8	 sub	 edx, DWORD PTR _uDoCopy$7[ebp]
  00386	8b 45 f0	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00389	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1789 :             pfile_in_zip_read_info->stream.avail_out -= uDoCopy;

  0038c	8b 4d f0	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0038f	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00392	2b 55 e8	 sub	 edx, DWORD PTR _uDoCopy$7[ebp]
  00395	8b 45 f0	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00398	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 1790 :             pfile_in_zip_read_info->stream.next_out += uDoCopy;

  0039b	8b 4d f0	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0039e	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  003a1	03 55 e8	 add	 edx, DWORD PTR _uDoCopy$7[ebp]
  003a4	8b 45 f0	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  003a7	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 1791 :             pfile_in_zip_read_info->stream.next_in += uDoCopy;

  003aa	8b 4d f0	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  003ad	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  003b0	03 55 e8	 add	 edx, DWORD PTR _uDoCopy$7[ebp]
  003b3	8b 45 f0	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  003b6	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1792 :             pfile_in_zip_read_info->stream.total_out += uDoCopy;

  003b9	8b 4d f0	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  003bc	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  003bf	03 55 e8	 add	 edx, DWORD PTR _uDoCopy$7[ebp]
  003c2	8b 45 f0	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  003c5	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 1793 :             iRead += uDoCopy;

  003c8	8b 4d f8	 mov	 ecx, DWORD PTR _iRead$[ebp]
  003cb	03 4d e8	 add	 ecx, DWORD PTR _uDoCopy$7[ebp]
  003ce	89 4d f8	 mov	 DWORD PTR _iRead$[ebp], ecx

; 1794 :         }

  003d1	e9 02 01 00 00	 jmp	 $LN19@unzReadCur
$LN18@unzReadCur:

; 1795 :         else if (pfile_in_zip_read_info->compression_method==Z_BZIP2ED)

  003d6	8b 55 f0	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  003d9	83 ba b8 00 00
	00 0c		 cmp	 DWORD PTR [edx+184], 12	; 0000000cH
  003e0	75 05		 jne	 SHORT $LN24@unzReadCur

; 1796 :         {
; 1797 : #ifdef HAVE_BZIP2
; 1798 :             uLong uTotalOutBefore,uTotalOutAfter;
; 1799 :             const Bytef *bufBefore;
; 1800 :             uLong uOutThis;
; 1801 : 
; 1802 :             pfile_in_zip_read_info->bstream.next_in        = (char*)pfile_in_zip_read_info->stream.next_in;
; 1803 :             pfile_in_zip_read_info->bstream.avail_in       = pfile_in_zip_read_info->stream.avail_in;
; 1804 :             pfile_in_zip_read_info->bstream.total_in_lo32  = pfile_in_zip_read_info->stream.total_in;
; 1805 :             pfile_in_zip_read_info->bstream.total_in_hi32  = 0;
; 1806 :             pfile_in_zip_read_info->bstream.next_out       = (char*)pfile_in_zip_read_info->stream.next_out;
; 1807 :             pfile_in_zip_read_info->bstream.avail_out      = pfile_in_zip_read_info->stream.avail_out;
; 1808 :             pfile_in_zip_read_info->bstream.total_out_lo32 = pfile_in_zip_read_info->stream.total_out;
; 1809 :             pfile_in_zip_read_info->bstream.total_out_hi32 = 0;
; 1810 : 
; 1811 :             uTotalOutBefore = pfile_in_zip_read_info->bstream.total_out_lo32;
; 1812 :             bufBefore = (const Bytef *)pfile_in_zip_read_info->bstream.next_out;
; 1813 : 
; 1814 :             err=BZ2_bzDecompress(&pfile_in_zip_read_info->bstream);
; 1815 : 
; 1816 :             uTotalOutAfter = pfile_in_zip_read_info->bstream.total_out_lo32;
; 1817 :             uOutThis = uTotalOutAfter-uTotalOutBefore;
; 1818 : 
; 1819 :             pfile_in_zip_read_info->total_out_64 = pfile_in_zip_read_info->total_out_64 + uOutThis;
; 1820 : 
; 1821 :             pfile_in_zip_read_info->crc32 = crc32(pfile_in_zip_read_info->crc32,bufBefore, (uInt)(uOutThis));
; 1822 :             pfile_in_zip_read_info->rest_read_uncompressed -= uOutThis;
; 1823 :             iRead += (uInt)(uTotalOutAfter - uTotalOutBefore);
; 1824 : 
; 1825 :             pfile_in_zip_read_info->stream.next_in   = (Bytef*)pfile_in_zip_read_info->bstream.next_in;
; 1826 :             pfile_in_zip_read_info->stream.avail_in  = pfile_in_zip_read_info->bstream.avail_in;
; 1827 :             pfile_in_zip_read_info->stream.total_in  = pfile_in_zip_read_info->bstream.total_in_lo32;
; 1828 :             pfile_in_zip_read_info->stream.next_out  = (Bytef*)pfile_in_zip_read_info->bstream.next_out;
; 1829 :             pfile_in_zip_read_info->stream.avail_out = pfile_in_zip_read_info->bstream.avail_out;
; 1830 :             pfile_in_zip_read_info->stream.total_out = pfile_in_zip_read_info->bstream.total_out_lo32;
; 1831 : 
; 1832 :             if (err==BZ_STREAM_END)
; 1833 :               return (iRead==0) ? UNZ_EOF : iRead;
; 1834 :             if (err!=BZ_OK)
; 1835 :               break;
; 1836 : #endif
; 1837 :         } // end Z_BZIP2ED

  003e2	e9 f1 00 00 00	 jmp	 $LN19@unzReadCur
$LN24@unzReadCur:

; 1838 :         else
; 1839 :         {
; 1840 :             ZPOS64_T uTotalOutBefore,uTotalOutAfter;
; 1841 :             const Bytef *bufBefore;
; 1842 :             ZPOS64_T uOutThis;
; 1843 :             int flush=Z_SYNC_FLUSH;

  003e7	c7 45 c4 02 00
	00 00		 mov	 DWORD PTR _flush$1[ebp], 2

; 1844 : 
; 1845 :             uTotalOutBefore = pfile_in_zip_read_info->stream.total_out;

  003ee	8b 45 f0	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  003f1	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  003f4	33 d2		 xor	 edx, edx
  003f6	89 4d dc	 mov	 DWORD PTR _uTotalOutBefore$5[ebp], ecx
  003f9	89 55 e0	 mov	 DWORD PTR _uTotalOutBefore$5[ebp+4], edx

; 1846 :             bufBefore = pfile_in_zip_read_info->stream.next_out;

  003fc	8b 45 f0	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  003ff	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00402	89 4d d0	 mov	 DWORD PTR _bufBefore$3[ebp], ecx

; 1847 : 
; 1848 :             /*
; 1849 :             if ((pfile_in_zip_read_info->rest_read_uncompressed ==
; 1850 :                      pfile_in_zip_read_info->stream.avail_out) &&
; 1851 :                 (pfile_in_zip_read_info->rest_read_compressed == 0))
; 1852 :                 flush = Z_FINISH;
; 1853 :             */
; 1854 :             err=inflate(&pfile_in_zip_read_info->stream,flush);

  00405	8b 55 c4	 mov	 edx, DWORD PTR _flush$1[ebp]
  00408	52		 push	 edx
  00409	8b 45 f0	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0040c	83 c0 04	 add	 eax, 4
  0040f	50		 push	 eax
  00410	e8 00 00 00 00	 call	 _inflate@8
  00415	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax

; 1855 : 
; 1856 :             if ((err>=0) && (pfile_in_zip_read_info->stream.msg!=NULL))

  00418	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  0041c	7c 10		 jl	 SHORT $LN26@unzReadCur
  0041e	8b 4d f0	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00421	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
  00425	74 07		 je	 SHORT $LN26@unzReadCur

; 1857 :               err = Z_DATA_ERROR;

  00427	c7 45 fc fd ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -3 ; fffffffdH
$LN26@unzReadCur:

; 1858 : 
; 1859 :             uTotalOutAfter = pfile_in_zip_read_info->stream.total_out;

  0042e	8b 55 f0	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00431	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00434	33 c9		 xor	 ecx, ecx
  00436	89 45 d4	 mov	 DWORD PTR _uTotalOutAfter$4[ebp], eax
  00439	89 4d d8	 mov	 DWORD PTR _uTotalOutAfter$4[ebp+4], ecx

; 1860 :             uOutThis = uTotalOutAfter-uTotalOutBefore;

  0043c	8b 55 d4	 mov	 edx, DWORD PTR _uTotalOutAfter$4[ebp]
  0043f	2b 55 dc	 sub	 edx, DWORD PTR _uTotalOutBefore$5[ebp]
  00442	8b 45 d8	 mov	 eax, DWORD PTR _uTotalOutAfter$4[ebp+4]
  00445	1b 45 e0	 sbb	 eax, DWORD PTR _uTotalOutBefore$5[ebp+4]
  00448	89 55 c8	 mov	 DWORD PTR _uOutThis$2[ebp], edx
  0044b	89 45 cc	 mov	 DWORD PTR _uOutThis$2[ebp+4], eax

; 1861 : 
; 1862 :             pfile_in_zip_read_info->total_out_64 = pfile_in_zip_read_info->total_out_64 + uOutThis;

  0044e	8b 4d f0	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00451	8b 51 68	 mov	 edx, DWORD PTR [ecx+104]
  00454	03 55 c8	 add	 edx, DWORD PTR _uOutThis$2[ebp]
  00457	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  0045a	13 45 cc	 adc	 eax, DWORD PTR _uOutThis$2[ebp+4]
  0045d	8b 4d f0	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00460	89 51 68	 mov	 DWORD PTR [ecx+104], edx
  00463	89 41 6c	 mov	 DWORD PTR [ecx+108], eax

; 1863 : 
; 1864 :             pfile_in_zip_read_info->crc32 =

  00466	8b 55 c8	 mov	 edx, DWORD PTR _uOutThis$2[ebp]
  00469	52		 push	 edx
  0046a	8b 45 d0	 mov	 eax, DWORD PTR _bufBefore$3[ebp]
  0046d	50		 push	 eax
  0046e	8b 4d f0	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00471	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  00474	52		 push	 edx
  00475	e8 00 00 00 00	 call	 _crc32@12
  0047a	8b 4d f0	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0047d	89 41 70	 mov	 DWORD PTR [ecx+112], eax

; 1865 :                 crc32(pfile_in_zip_read_info->crc32,bufBefore,
; 1866 :                         (uInt)(uOutThis));
; 1867 : 
; 1868 :             pfile_in_zip_read_info->rest_read_uncompressed -=

  00480	8b 55 f0	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00483	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  00489	2b 45 c8	 sub	 eax, DWORD PTR _uOutThis$2[ebp]
  0048c	8b 8a 84 00 00
	00		 mov	 ecx, DWORD PTR [edx+132]
  00492	1b 4d cc	 sbb	 ecx, DWORD PTR _uOutThis$2[ebp+4]
  00495	8b 55 f0	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00498	89 82 80 00 00
	00		 mov	 DWORD PTR [edx+128], eax
  0049e	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx

; 1869 :                 uOutThis;
; 1870 : 
; 1871 :             iRead += (uInt)(uTotalOutAfter - uTotalOutBefore);

  004a4	8b 45 d4	 mov	 eax, DWORD PTR _uTotalOutAfter$4[ebp]
  004a7	2b 45 dc	 sub	 eax, DWORD PTR _uTotalOutBefore$5[ebp]
  004aa	03 45 f8	 add	 eax, DWORD PTR _iRead$[ebp]
  004ad	89 45 f8	 mov	 DWORD PTR _iRead$[ebp], eax

; 1872 : 
; 1873 :             if (err==Z_STREAM_END)

  004b0	83 7d fc 01	 cmp	 DWORD PTR _err$[ebp], 1
  004b4	75 1a		 jne	 SHORT $LN27@unzReadCur

; 1874 :                 return (iRead==0) ? UNZ_EOF : iRead;

  004b6	83 7d f8 00	 cmp	 DWORD PTR _iRead$[ebp], 0
  004ba	75 09		 jne	 SHORT $LN33@unzReadCur
  004bc	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv254[ebp], 0
  004c3	eb 06		 jmp	 SHORT $LN34@unzReadCur
$LN33@unzReadCur:
  004c5	8b 4d f8	 mov	 ecx, DWORD PTR _iRead$[ebp]
  004c8	89 4d 8c	 mov	 DWORD PTR tv254[ebp], ecx
$LN34@unzReadCur:
  004cb	8b 45 8c	 mov	 eax, DWORD PTR tv254[ebp]
  004ce	eb 1b		 jmp	 SHORT $LN1@unzReadCur
$LN27@unzReadCur:

; 1875 :             if (err!=Z_OK)

  004d0	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  004d4	74 02		 je	 SHORT $LN19@unzReadCur

; 1876 :                 break;

  004d6	eb 05		 jmp	 SHORT $LN3@unzReadCur
$LN19@unzReadCur:

; 1877 :         }
; 1878 :     }

  004d8	e9 51 fc ff ff	 jmp	 $LN2@unzReadCur
$LN3@unzReadCur:

; 1879 : 
; 1880 :     if (err==Z_OK)

  004dd	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  004e1	75 05		 jne	 SHORT $LN29@unzReadCur

; 1881 :         return iRead;

  004e3	8b 45 f8	 mov	 eax, DWORD PTR _iRead$[ebp]
  004e6	eb 03		 jmp	 SHORT $LN1@unzReadCur
$LN29@unzReadCur:

; 1882 :     return err;

  004e8	8b 45 fc	 mov	 eax, DWORD PTR _err$[ebp]
$LN1@unzReadCur:

; 1883 : }

  004eb	5f		 pop	 edi
  004ec	5e		 pop	 esi
  004ed	83 c4 74	 add	 esp, 116		; 00000074H
  004f0	3b ec		 cmp	 ebp, esp
  004f2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004f7	8b e5		 mov	 esp, ebp
  004f9	5d		 pop	 ebp
  004fa	c2 0c 00	 ret	 12			; 0000000cH
_unzReadCurrentFile@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unztell@4
_TEXT	SEGMENT
_pfile_in_zip_read_info$ = -8				; size = 4
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_unztell@4 PROC						; COMDAT

; 1890 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00019	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1891 :     unz64_s* s;
; 1892 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1893 :     if (file==NULL)

  0001e	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00022	75 07		 jne	 SHORT $LN2@unztell

; 1894 :         return UNZ_PARAMERROR;

  00024	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00029	eb 25		 jmp	 SHORT $LN1@unztell
$LN2@unztell:

; 1895 :     s=(unz64_s*)file;

  0002b	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  0002e	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 1896 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00031	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00034	8b 91 e0 00 00
	00		 mov	 edx, DWORD PTR [ecx+224]
  0003a	89 55 f8	 mov	 DWORD PTR _pfile_in_zip_read_info$[ebp], edx

; 1897 : 
; 1898 :     if (pfile_in_zip_read_info==NULL)

  0003d	83 7d f8 00	 cmp	 DWORD PTR _pfile_in_zip_read_info$[ebp], 0
  00041	75 07		 jne	 SHORT $LN3@unztell

; 1899 :         return UNZ_PARAMERROR;

  00043	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00048	eb 06		 jmp	 SHORT $LN1@unztell
$LN3@unztell:

; 1900 : 
; 1901 :     return (z_off_t)pfile_in_zip_read_info->stream.total_out;

  0004a	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0004d	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
$LN1@unztell:

; 1902 : }

  00050	83 c4 08	 add	 esp, 8
  00053	3b ec		 cmp	 ebp, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
_unztell@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unztell64@4
_TEXT	SEGMENT
_pfile_in_zip_read_info$ = -8				; size = 4
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_unztell64@4 PROC					; COMDAT

; 1905 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00019	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1906 : 
; 1907 :     unz64_s* s;
; 1908 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1909 :     if (file==NULL)

  0001e	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00022	75 08		 jne	 SHORT $LN2@unztell64

; 1910 :         return (ZPOS64_T)-1;

  00024	83 c8 ff	 or	 eax, -1
  00027	83 ca ff	 or	 edx, -1
  0002a	eb 29		 jmp	 SHORT $LN1@unztell64
$LN2@unztell64:

; 1911 :     s=(unz64_s*)file;

  0002c	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  0002f	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 1912 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00032	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00035	8b 91 e0 00 00
	00		 mov	 edx, DWORD PTR [ecx+224]
  0003b	89 55 f8	 mov	 DWORD PTR _pfile_in_zip_read_info$[ebp], edx

; 1913 : 
; 1914 :     if (pfile_in_zip_read_info==NULL)

  0003e	83 7d f8 00	 cmp	 DWORD PTR _pfile_in_zip_read_info$[ebp], 0
  00042	75 08		 jne	 SHORT $LN3@unztell64

; 1915 :         return (ZPOS64_T)-1;

  00044	83 c8 ff	 or	 eax, -1
  00047	83 ca ff	 or	 edx, -1
  0004a	eb 09		 jmp	 SHORT $LN1@unztell64
$LN3@unztell64:

; 1916 : 
; 1917 :     return pfile_in_zip_read_info->total_out_64;

  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0004f	8b 41 68	 mov	 eax, DWORD PTR [ecx+104]
  00052	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
$LN1@unztell64:

; 1918 : }

  00055	83 c4 08	 add	 esp, 8
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c2 04 00	 ret	 4
_unztell64@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unzeof@4
_TEXT	SEGMENT
tv77 = -12						; size = 4
_pfile_in_zip_read_info$ = -8				; size = 4
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_unzeof@4 PROC						; COMDAT

; 1925 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1926 :     unz64_s* s;
; 1927 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1928 :     if (file==NULL)

  00025	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00029	75 07		 jne	 SHORT $LN2@unzeof

; 1929 :         return UNZ_PARAMERROR;

  0002b	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00030	eb 44		 jmp	 SHORT $LN1@unzeof
$LN2@unzeof:

; 1930 :     s=(unz64_s*)file;

  00032	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00035	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 1931 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00038	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0003b	8b 91 e0 00 00
	00		 mov	 edx, DWORD PTR [ecx+224]
  00041	89 55 f8	 mov	 DWORD PTR _pfile_in_zip_read_info$[ebp], edx

; 1932 : 
; 1933 :     if (pfile_in_zip_read_info==NULL)

  00044	83 7d f8 00	 cmp	 DWORD PTR _pfile_in_zip_read_info$[ebp], 0
  00048	75 07		 jne	 SHORT $LN3@unzeof

; 1934 :         return UNZ_PARAMERROR;

  0004a	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  0004f	eb 25		 jmp	 SHORT $LN1@unzeof
$LN3@unzeof:

; 1935 : 
; 1936 :     if (pfile_in_zip_read_info->rest_read_uncompressed == 0)

  00051	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00054	89 45 f4	 mov	 DWORD PTR tv77[ebp], eax
  00057	8b 4d f4	 mov	 ecx, DWORD PTR tv77[ebp]
  0005a	8b 55 f4	 mov	 edx, DWORD PTR tv77[ebp]
  0005d	8b 81 80 00 00
	00		 mov	 eax, DWORD PTR [ecx+128]
  00063	0b 82 84 00 00
	00		 or	 eax, DWORD PTR [edx+132]
  00069	75 09		 jne	 SHORT $LN4@unzeof

; 1937 :         return 1;

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	eb 04		 jmp	 SHORT $LN1@unzeof
  00072	eb 02		 jmp	 SHORT $LN1@unzeof
$LN4@unzeof:

; 1938 :     else
; 1939 :         return 0;

  00074	33 c0		 xor	 eax, eax
$LN1@unzeof:

; 1940 : }

  00076	83 c4 0c	 add	 esp, 12			; 0000000cH
  00079	3b ec		 cmp	 ebp, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 04 00	 ret	 4
_unzeof@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unzGetLocalExtrafield@12
_TEXT	SEGMENT
tv147 = -28						; size = 8
_size_to_read$ = -20					; size = 8
_read_now$ = -12					; size = 4
_pfile_in_zip_read_info$ = -8				; size = 4
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_unzGetLocalExtrafield@12 PROC				; COMDAT

; 1957 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00012	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00015	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00018	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001b	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001e	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00021	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00026	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1958 :     unz64_s* s;
; 1959 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1960 :     uInt read_now;
; 1961 :     ZPOS64_T size_to_read;
; 1962 : 
; 1963 :     if (file==NULL)

  0002b	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  0002f	75 0a		 jne	 SHORT $LN2@unzGetLoca

; 1964 :         return UNZ_PARAMERROR;

  00031	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00036	e9 f7 00 00 00	 jmp	 $LN1@unzGetLoca
$LN2@unzGetLoca:

; 1965 :     s=(unz64_s*)file;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  0003e	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 1966 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00041	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00044	8b 91 e0 00 00
	00		 mov	 edx, DWORD PTR [ecx+224]
  0004a	89 55 f8	 mov	 DWORD PTR _pfile_in_zip_read_info$[ebp], edx

; 1967 : 
; 1968 :     if (pfile_in_zip_read_info==NULL)

  0004d	83 7d f8 00	 cmp	 DWORD PTR _pfile_in_zip_read_info$[ebp], 0
  00051	75 0a		 jne	 SHORT $LN3@unzGetLoca

; 1969 :         return UNZ_PARAMERROR;

  00053	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00058	e9 d5 00 00 00	 jmp	 $LN1@unzGetLoca
$LN3@unzGetLoca:

; 1970 : 
; 1971 :     size_to_read = (pfile_in_zip_read_info->size_local_extrafield -

  0005d	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00060	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00063	33 d2		 xor	 edx, edx
  00065	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00068	2b 48 60	 sub	 ecx, DWORD PTR [eax+96]
  0006b	1b 50 64	 sbb	 edx, DWORD PTR [eax+100]
  0006e	89 4d ec	 mov	 DWORD PTR _size_to_read$[ebp], ecx
  00071	89 55 f0	 mov	 DWORD PTR _size_to_read$[ebp+4], edx

; 1972 :                 pfile_in_zip_read_info->pos_local_extrafield);
; 1973 : 
; 1974 :     if (buf==NULL)

  00074	83 7d 0c 00	 cmp	 DWORD PTR _buf$[ebp], 0
  00078	75 08		 jne	 SHORT $LN4@unzGetLoca

; 1975 :         return (int)size_to_read;

  0007a	8b 45 ec	 mov	 eax, DWORD PTR _size_to_read$[ebp]
  0007d	e9 b0 00 00 00	 jmp	 $LN1@unzGetLoca
$LN4@unzGetLoca:

; 1976 : 
; 1977 :     if (len>size_to_read)

  00082	8b 4d 10	 mov	 ecx, DWORD PTR _len$[ebp]
  00085	33 d2		 xor	 edx, edx
  00087	89 4d e4	 mov	 DWORD PTR tv147[ebp], ecx
  0008a	89 55 e8	 mov	 DWORD PTR tv147[ebp+4], edx
  0008d	8b 45 e8	 mov	 eax, DWORD PTR tv147[ebp+4]
  00090	3b 45 f0	 cmp	 eax, DWORD PTR _size_to_read$[ebp+4]
  00093	72 12		 jb	 SHORT $LN5@unzGetLoca
  00095	77 08		 ja	 SHORT $LN12@unzGetLoca
  00097	8b 4d e4	 mov	 ecx, DWORD PTR tv147[ebp]
  0009a	3b 4d ec	 cmp	 ecx, DWORD PTR _size_to_read$[ebp]
  0009d	76 08		 jbe	 SHORT $LN5@unzGetLoca
$LN12@unzGetLoca:

; 1978 :         read_now = (uInt)size_to_read;

  0009f	8b 55 ec	 mov	 edx, DWORD PTR _size_to_read$[ebp]
  000a2	89 55 f4	 mov	 DWORD PTR _read_now$[ebp], edx
  000a5	eb 06		 jmp	 SHORT $LN6@unzGetLoca
$LN5@unzGetLoca:

; 1979 :     else
; 1980 :         read_now = (uInt)len ;

  000a7	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  000aa	89 45 f4	 mov	 DWORD PTR _read_now$[ebp], eax
$LN6@unzGetLoca:

; 1981 : 
; 1982 :     if (read_now==0)

  000ad	83 7d f4 00	 cmp	 DWORD PTR _read_now$[ebp], 0
  000b1	75 04		 jne	 SHORT $LN7@unzGetLoca

; 1983 :         return 0;

  000b3	33 c0		 xor	 eax, eax
  000b5	eb 7b		 jmp	 SHORT $LN1@unzGetLoca
$LN7@unzGetLoca:

; 1984 : 
; 1985 :     if (ZSEEK64(pfile_in_zip_read_info->z_filefunc,
; 1986 :               pfile_in_zip_read_info->filestream,
; 1987 :               pfile_in_zip_read_info->offset_local_extrafield +
; 1988 :               pfile_in_zip_read_info->pos_local_extrafield,
; 1989 :               ZLIB_FILEFUNC_SEEK_SET)!=0)

  000b7	6a 00		 push	 0
  000b9	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000bc	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000bf	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  000c2	03 42 60	 add	 eax, DWORD PTR [edx+96]
  000c5	8b 49 54	 mov	 ecx, DWORD PTR [ecx+84]
  000c8	13 4a 64	 adc	 ecx, DWORD PTR [edx+100]
  000cb	51		 push	 ecx
  000cc	50		 push	 eax
  000cd	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000d0	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  000d6	50		 push	 eax
  000d7	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000da	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  000e0	51		 push	 ecx
  000e1	e8 00 00 00 00	 call	 _call_zseek64
  000e6	83 c4 14	 add	 esp, 20			; 00000014H
  000e9	85 c0		 test	 eax, eax
  000eb	74 05		 je	 SHORT $LN8@unzGetLoca

; 1990 :         return UNZ_ERRNO;

  000ed	83 c8 ff	 or	 eax, -1
  000f0	eb 40		 jmp	 SHORT $LN1@unzGetLoca
$LN8@unzGetLoca:

; 1991 : 
; 1992 :     if (ZREAD64(pfile_in_zip_read_info->z_filefunc,
; 1993 :               pfile_in_zip_read_info->filestream,
; 1994 :               buf,read_now)!=read_now)

  000f2	8b f4		 mov	 esi, esp
  000f4	8b 55 f4	 mov	 edx, DWORD PTR _read_now$[ebp]
  000f7	52		 push	 edx
  000f8	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  000fb	50		 push	 eax
  000fc	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000ff	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  00105	52		 push	 edx
  00106	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00109	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0010f	51		 push	 ecx
  00110	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00113	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  00119	ff d0		 call	 eax
  0011b	83 c4 10	 add	 esp, 16			; 00000010H
  0011e	3b f4		 cmp	 esi, esp
  00120	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00125	3b 45 f4	 cmp	 eax, DWORD PTR _read_now$[ebp]
  00128	74 05		 je	 SHORT $LN9@unzGetLoca

; 1995 :         return UNZ_ERRNO;

  0012a	83 c8 ff	 or	 eax, -1
  0012d	eb 03		 jmp	 SHORT $LN1@unzGetLoca
$LN9@unzGetLoca:

; 1996 : 
; 1997 :     return (int)read_now;

  0012f	8b 45 f4	 mov	 eax, DWORD PTR _read_now$[ebp]
$LN1@unzGetLoca:

; 1998 : }

  00132	5e		 pop	 esi
  00133	83 c4 1c	 add	 esp, 28			; 0000001cH
  00136	3b ec		 cmp	 ebp, esp
  00138	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c2 0c 00	 ret	 12			; 0000000cH
_unzGetLocalExtrafield@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unzCloseCurrentFile@4
_TEXT	SEGMENT
tv95 = -16						; size = 4
_pfile_in_zip_read_info$ = -12				; size = 4
_s$ = -8						; size = 4
_err$ = -4						; size = 4
_file$ = 8						; size = 4
_unzCloseCurrentFile@4 PROC				; COMDAT

; 2005 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 2006 :     int err=UNZ_OK;

  00021	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 2007 : 
; 2008 :     unz64_s* s;
; 2009 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 2010 :     if (file==NULL)

  00028	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  0002c	75 0a		 jne	 SHORT $LN2@unzCloseCu

; 2011 :         return UNZ_PARAMERROR;

  0002e	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00033	e9 bd 00 00 00	 jmp	 $LN1@unzCloseCu
$LN2@unzCloseCu:

; 2012 :     s=(unz64_s*)file;

  00038	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  0003b	89 45 f8	 mov	 DWORD PTR _s$[ebp], eax

; 2013 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  0003e	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00041	8b 91 e0 00 00
	00		 mov	 edx, DWORD PTR [ecx+224]
  00047	89 55 f4	 mov	 DWORD PTR _pfile_in_zip_read_info$[ebp], edx

; 2014 : 
; 2015 :     if (pfile_in_zip_read_info==NULL)

  0004a	83 7d f4 00	 cmp	 DWORD PTR _pfile_in_zip_read_info$[ebp], 0
  0004e	75 0a		 jne	 SHORT $LN3@unzCloseCu

; 2016 :         return UNZ_PARAMERROR;

  00050	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00055	e9 9b 00 00 00	 jmp	 $LN1@unzCloseCu
$LN3@unzCloseCu:

; 2017 : 
; 2018 : 
; 2019 :     if ((pfile_in_zip_read_info->rest_read_uncompressed == 0) &&

  0005a	8b 45 f4	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0005d	89 45 f0	 mov	 DWORD PTR tv95[ebp], eax
  00060	8b 4d f0	 mov	 ecx, DWORD PTR tv95[ebp]
  00063	8b 55 f0	 mov	 edx, DWORD PTR tv95[ebp]
  00066	8b 81 80 00 00
	00		 mov	 eax, DWORD PTR [ecx+128]
  0006c	0b 82 84 00 00
	00		 or	 eax, DWORD PTR [edx+132]
  00072	75 21		 jne	 SHORT $LN4@unzCloseCu
  00074	8b 4d f4	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00077	83 b9 c8 00 00
	00 00		 cmp	 DWORD PTR [ecx+200], 0
  0007e	75 15		 jne	 SHORT $LN4@unzCloseCu

; 2020 :         (!pfile_in_zip_read_info->raw))
; 2021 :     {
; 2022 :         if (pfile_in_zip_read_info->crc32 != pfile_in_zip_read_info->crc32_wait)

  00080	8b 55 f4	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00083	8b 45 f4	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00086	8b 4a 70	 mov	 ecx, DWORD PTR [edx+112]
  00089	3b 48 74	 cmp	 ecx, DWORD PTR [eax+116]
  0008c	74 07		 je	 SHORT $LN4@unzCloseCu

; 2023 :             err=UNZ_CRCERROR;

  0008e	c7 45 fc 97 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -105 ; ffffff97H
$LN4@unzCloseCu:

; 2024 :     }
; 2025 : 
; 2026 : 
; 2027 :     TRYFREE(pfile_in_zip_read_info->read_buffer);

  00095	8b 55 f4	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00098	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0009b	74 0e		 je	 SHORT $LN6@unzCloseCu
  0009d	8b 45 f4	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000a0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a2	51		 push	 ecx
  000a3	e8 00 00 00 00	 call	 _free
  000a8	83 c4 04	 add	 esp, 4
$LN6@unzCloseCu:

; 2028 :     pfile_in_zip_read_info->read_buffer = NULL;

  000ab	8b 55 f4	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000ae	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 2029 :     if (pfile_in_zip_read_info->stream_initialised == Z_DEFLATED)

  000b4	8b 45 f4	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000b7	83 78 48 08	 cmp	 DWORD PTR [eax+72], 8
  000bb	75 0c		 jne	 SHORT $LN7@unzCloseCu

; 2030 :         inflateEnd(&pfile_in_zip_read_info->stream);

  000bd	8b 4d f4	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000c0	83 c1 04	 add	 ecx, 4
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 _inflateEnd@4
$LN7@unzCloseCu:

; 2031 : #ifdef HAVE_BZIP2
; 2032 :     else if (pfile_in_zip_read_info->stream_initialised == Z_BZIP2ED)
; 2033 :         BZ2_bzDecompressEnd(&pfile_in_zip_read_info->bstream);
; 2034 : #endif
; 2035 : 
; 2036 : 
; 2037 :     pfile_in_zip_read_info->stream_initialised = 0;

  000c9	8b 55 f4	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000cc	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0

; 2038 :     TRYFREE(pfile_in_zip_read_info);

  000d3	83 7d f4 00	 cmp	 DWORD PTR _pfile_in_zip_read_info$[ebp], 0
  000d7	74 0c		 je	 SHORT $LN8@unzCloseCu
  000d9	8b 45 f4	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 _free
  000e2	83 c4 04	 add	 esp, 4
$LN8@unzCloseCu:

; 2039 : 
; 2040 :     s->pfile_in_zip_read=NULL;

  000e5	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  000e8	c7 81 e0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+224], 0

; 2041 : 
; 2042 :     return err;

  000f2	8b 45 fc	 mov	 eax, DWORD PTR _err$[ebp]
$LN1@unzCloseCu:

; 2043 : }

  000f5	83 c4 10	 add	 esp, 16			; 00000010H
  000f8	3b ec		 cmp	 ebp, esp
  000fa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c2 04 00	 ret	 4
_unzCloseCurrentFile@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\unzip.c
;	COMDAT _unzGetGlobalComment@12
_TEXT	SEGMENT
_uReadThis$ = -8					; size = 4
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_szComment$ = 12					; size = 4
_uSizeBuf$ = 16						; size = 4
_unzGetGlobalComment@12 PROC				; COMDAT

; 2052 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 2053 :     unz64_s* s;
; 2054 :     uLong uReadThis ;
; 2055 :     if (file==NULL)

  0001f	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00023	75 0a		 jne	 SHORT $LN2@unzGetGlob

; 2056 :         return (int)UNZ_PARAMERROR;

  00025	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  0002a	e9 b3 00 00 00	 jmp	 $LN1@unzGetGlob
$LN2@unzGetGlob:

; 2057 :     s=(unz64_s*)file;

  0002f	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00032	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 2058 : 
; 2059 :     uReadThis = uSizeBuf;

  00035	8b 4d 10	 mov	 ecx, DWORD PTR _uSizeBuf$[ebp]
  00038	89 4d f8	 mov	 DWORD PTR _uReadThis$[ebp], ecx

; 2060 :     if (uReadThis>s->gi.size_comment)

  0003b	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0003e	8b 45 f8	 mov	 eax, DWORD PTR _uReadThis$[ebp]
  00041	3b 42 40	 cmp	 eax, DWORD PTR [edx+64]
  00044	76 09		 jbe	 SHORT $LN3@unzGetGlob

; 2061 :         uReadThis = s->gi.size_comment;

  00046	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00049	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  0004c	89 55 f8	 mov	 DWORD PTR _uReadThis$[ebp], edx
$LN3@unzGetGlob:

; 2062 : 
; 2063 :     if (ZSEEK64(s->z_filefunc,s->filestream,s->central_pos+22,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0004f	6a 00		 push	 0
  00051	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00054	8b 48 68	 mov	 ecx, DWORD PTR [eax+104]
  00057	83 c1 16	 add	 ecx, 22			; 00000016H
  0005a	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  0005d	83 d2 00	 adc	 edx, 0
  00060	52		 push	 edx
  00061	51		 push	 ecx
  00062	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00065	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00068	51		 push	 ecx
  00069	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0006c	52		 push	 edx
  0006d	e8 00 00 00 00	 call	 _call_zseek64
  00072	83 c4 14	 add	 esp, 20			; 00000014H
  00075	85 c0		 test	 eax, eax
  00077	74 05		 je	 SHORT $LN4@unzGetGlob

; 2064 :         return UNZ_ERRNO;

  00079	83 c8 ff	 or	 eax, -1
  0007c	eb 64		 jmp	 SHORT $LN1@unzGetGlob
$LN4@unzGetGlob:

; 2065 : 
; 2066 :     if (uReadThis>0)

  0007e	83 7d f8 00	 cmp	 DWORD PTR _uReadThis$[ebp], 0
  00082	76 3d		 jbe	 SHORT $LN5@unzGetGlob

; 2067 :     {
; 2068 :       *szComment='\0';

  00084	0f ae e8	 lfence
  00087	8b 45 0c	 mov	 eax, DWORD PTR _szComment$[ebp]
  0008a	c6 00 00	 mov	 BYTE PTR [eax], 0

; 2069 :       if (ZREAD64(s->z_filefunc,s->filestream,szComment,uReadThis)!=uReadThis)

  0008d	8b f4		 mov	 esi, esp
  0008f	8b 4d f8	 mov	 ecx, DWORD PTR _uReadThis$[ebp]
  00092	51		 push	 ecx
  00093	8b 55 0c	 mov	 edx, DWORD PTR _szComment$[ebp]
  00096	52		 push	 edx
  00097	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0009a	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0009d	51		 push	 ecx
  0009e	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  000a1	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  000a4	50		 push	 eax
  000a5	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000a8	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ab	ff d2		 call	 edx
  000ad	83 c4 10	 add	 esp, 16			; 00000010H
  000b0	3b f4		 cmp	 esi, esp
  000b2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b7	3b 45 f8	 cmp	 eax, DWORD PTR _uReadThis$[ebp]
  000ba	74 05		 je	 SHORT $LN5@unzGetGlob

; 2070 :         return UNZ_ERRNO;

  000bc	83 c8 ff	 or	 eax, -1
  000bf	eb 21		 jmp	 SHORT $LN1@unzGetGlob
$LN5@unzGetGlob:

; 2071 :     }
; 2072 : 
; 2073 :     if ((szComment != NULL) && (uSizeBuf > s->gi.size_comment))

  000c1	83 7d 0c 00	 cmp	 DWORD PTR _szComment$[ebp], 0
  000c5	74 18		 je	 SHORT $LN7@unzGetGlob
  000c7	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000ca	8b 4d 10	 mov	 ecx, DWORD PTR _uSizeBuf$[ebp]
  000cd	3b 48 40	 cmp	 ecx, DWORD PTR [eax+64]
  000d0	76 0d		 jbe	 SHORT $LN7@unzGetGlob

; 2074 :         *(szComment+s->gi.size_comment)='\0';

  000d2	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  000d5	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  000d8	8b 4d 0c	 mov	 ecx, DWORD PTR _szComment$[ebp]
  000db	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
$LN7@unzGetGlob:

; 2075 :     return (int)uReadThis;

  000df	8b 45 f8	 mov	 eax, DWORD PTR _uReadThis$[ebp]
$LN1@unzGetGlob:

; 2076 : }

  000e2	5e		 pop	 esi
  000e3	83 c4 08	 add	 esp, 8
  000e6	3b ec		 cmp	 ebp, esp
  000e8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 0c 00	 ret	 12			; 0000000cH
_unzGetGlobalComment@12 ENDP
_TEXT	ENDS
END

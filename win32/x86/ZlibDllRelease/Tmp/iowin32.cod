; Listing generated by Microsoft (R) Optimizing Compiler Version 19.20.27525.0 

	TITLE	e:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__CreateFileW@28:PROC
EXTRN	__imp__SetFilePointer@16:PROC
EXTRN	__imp__WriteFile@20:PROC
EXTRN	__imp__ReadFile@20:PROC
__95347B96_ctype@h DB 01H
__149DB6BE_basetsd@h DB 01H
__9CFFAB73_corecrt_memcpy_s@h DB 01H
__55B7CB8D_corecrt_wstring@h DB 01H
__2F7506B6_string@h DB 01H
__5BA8817F_winnt@h DB 01H
__8421AFE7_processthreadsapi@h DB 01H
__F192E00B_memoryapi@h DB 01H
__0DF854E2_winerror@h DB 01H
__940BF1C4_winbase@h DB 01H
__78A3E64A_stralign@h DB 01H
__DB664BEB_corecrt_stdio_config@h DB 01H
__E28BBA23_corecrt_wstdio@h DB 01H
__4A1C29A8_stdio@h DB 01H
__A8B6D292_iowin32@c DB 01H
PUBLIC	_fill_win32_filefunc64W
PUBLIC	_fill_win32_filefunc64A
PUBLIC	_fill_win32_filefunc64
PUBLIC	_fill_win32_filefunc
PUBLIC	_win32_error_file_func
PUBLIC	_win32_close_file_func
PUBLIC	_win32_seek64_file_func
PUBLIC	_win32_seek_file_func
PUBLIC	_win32_tell64_file_func
PUBLIC	_win32_tell_file_func
PUBLIC	_win32_write_file_func
PUBLIC	_win32_read_file_func
PUBLIC	_win32_open_file_func
PUBLIC	_win32_open64_file_funcW
PUBLIC	_win32_open64_file_funcA
PUBLIC	_win32_open64_file_func
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT _win32_translate_open_mode
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_lpdwDesiredAccess$ = 12				; size = 4
_lpdwCreationDisposition$ = 16				; size = 4
_lpdwShareMode$ = 20					; size = 4
_lpdwFlagsAndAttributes$ = 24				; size = 4
_win32_translate_open_mode PROC				; COMDAT

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 57   :     *lpdwDesiredAccess = *lpdwShareMode = *lpdwFlagsAndAttributes = *lpdwCreationDisposition = 0;

  0000d	8b 45 10	 mov	 eax, DWORD PTR _lpdwCreationDisposition$[ebp]
  00010	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00016	8b 4d 18	 mov	 ecx, DWORD PTR _lpdwFlagsAndAttributes$[ebp]
  00019	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0001f	8b 55 14	 mov	 edx, DWORD PTR _lpdwShareMode$[ebp]
  00022	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  00028	8b 45 0c	 mov	 eax, DWORD PTR _lpdwDesiredAccess$[ebp]
  0002b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 58   : 
; 59   :     if ((mode & ZLIB_FILEFUNC_MODE_READWRITEFILTER)==ZLIB_FILEFUNC_MODE_READ)

  00031	8b 4d 08	 mov	 ecx, DWORD PTR _mode$[ebp]
  00034	83 e1 03	 and	 ecx, 3
  00037	83 f9 01	 cmp	 ecx, 1
  0003a	75 1d		 jne	 SHORT $LN2@win32_tran

; 60   :     {
; 61   :         *lpdwDesiredAccess = GENERIC_READ;

  0003c	8b 55 0c	 mov	 edx, DWORD PTR _lpdwDesiredAccess$[ebp]
  0003f	c7 02 00 00 00
	80		 mov	 DWORD PTR [edx], -2147483648 ; 80000000H

; 62   :         *lpdwCreationDisposition = OPEN_EXISTING;

  00045	8b 45 10	 mov	 eax, DWORD PTR _lpdwCreationDisposition$[ebp]
  00048	c7 00 03 00 00
	00		 mov	 DWORD PTR [eax], 3

; 63   :         *lpdwShareMode = FILE_SHARE_READ;

  0004e	8b 4d 14	 mov	 ecx, DWORD PTR _lpdwShareMode$[ebp]
  00051	c7 01 01 00 00
	00		 mov	 DWORD PTR [ecx], 1

; 64   :     }

  00057	eb 36		 jmp	 SHORT $LN1@win32_tran
$LN2@win32_tran:

; 65   :     else if (mode & ZLIB_FILEFUNC_MODE_EXISTING)

  00059	8b 55 08	 mov	 edx, DWORD PTR _mode$[ebp]
  0005c	83 e2 04	 and	 edx, 4
  0005f	74 14		 je	 SHORT $LN4@win32_tran

; 66   :     {
; 67   :         *lpdwDesiredAccess = GENERIC_WRITE | GENERIC_READ;

  00061	8b 45 0c	 mov	 eax, DWORD PTR _lpdwDesiredAccess$[ebp]
  00064	c7 00 00 00 00
	c0		 mov	 DWORD PTR [eax], -1073741824 ; c0000000H

; 68   :         *lpdwCreationDisposition = OPEN_EXISTING;

  0006a	8b 4d 10	 mov	 ecx, DWORD PTR _lpdwCreationDisposition$[ebp]
  0006d	c7 01 03 00 00
	00		 mov	 DWORD PTR [ecx], 3

; 69   :     }

  00073	eb 1a		 jmp	 SHORT $LN1@win32_tran
$LN4@win32_tran:

; 70   :     else if (mode & ZLIB_FILEFUNC_MODE_CREATE)

  00075	8b 55 08	 mov	 edx, DWORD PTR _mode$[ebp]
  00078	83 e2 08	 and	 edx, 8
  0007b	74 12		 je	 SHORT $LN1@win32_tran

; 71   :     {
; 72   :         *lpdwDesiredAccess = GENERIC_WRITE | GENERIC_READ;

  0007d	8b 45 0c	 mov	 eax, DWORD PTR _lpdwDesiredAccess$[ebp]
  00080	c7 00 00 00 00
	c0		 mov	 DWORD PTR [eax], -1073741824 ; c0000000H

; 73   :         *lpdwCreationDisposition = CREATE_ALWAYS;

  00086	8b 4d 10	 mov	 ecx, DWORD PTR _lpdwCreationDisposition$[ebp]
  00089	c7 01 02 00 00
	00		 mov	 DWORD PTR [ecx], 2
$LN1@win32_tran:

; 74   :     }
; 75   : }

  0008f	3b ec		 cmp	 ebp, esp
  00091	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
_win32_translate_open_mode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT _win32_build_iowin
_TEXT	SEGMENT
_w32fiow$1 = -16					; size = 8
_ret$ = -4						; size = 4
_hFile$ = 8						; size = 4
_win32_build_iowin PROC					; COMDAT

; 78   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00012	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00015	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00018	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 79   :     voidpf ret=NULL;

  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0

; 80   : 
; 81   :     if ((hFile != NULL) && (hFile != INVALID_HANDLE_VALUE))

  0002c	83 7d 08 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  00030	74 49		 je	 SHORT $LN2@win32_buil
  00032	83 7d 08 ff	 cmp	 DWORD PTR _hFile$[ebp], -1
  00036	74 43		 je	 SHORT $LN2@win32_buil

; 82   :     {
; 83   :         WIN32FILE_IOWIN w32fiow;
; 84   :         w32fiow.hf = hFile;

  00038	8b 45 08	 mov	 eax, DWORD PTR _hFile$[ebp]
  0003b	89 45 f0	 mov	 DWORD PTR _w32fiow$1[ebp], eax

; 85   :         w32fiow.error = 0;

  0003e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _w32fiow$1[ebp+4], 0

; 86   :         ret = malloc(sizeof(WIN32FILE_IOWIN));

  00045	6a 08		 push	 8
  00047	e8 00 00 00 00	 call	 _malloc
  0004c	83 c4 04	 add	 esp, 4
  0004f	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 87   : 
; 88   :         if (ret==NULL)

  00052	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00056	75 15		 jne	 SHORT $LN3@win32_buil

; 89   :             CloseHandle(hFile);

  00058	8b f4		 mov	 esi, esp
  0005a	8b 4d 08	 mov	 ecx, DWORD PTR _hFile$[ebp]
  0005d	51		 push	 ecx
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  00064	3b f4		 cmp	 esi, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	eb 0e		 jmp	 SHORT $LN2@win32_buil
$LN3@win32_buil:

; 90   :         else
; 91   :             *((WIN32FILE_IOWIN*)ret) = w32fiow;

  0006d	8b 55 fc	 mov	 edx, DWORD PTR _ret$[ebp]
  00070	8b 45 f0	 mov	 eax, DWORD PTR _w32fiow$1[ebp]
  00073	89 02		 mov	 DWORD PTR [edx], eax
  00075	8b 4d f4	 mov	 ecx, DWORD PTR _w32fiow$1[ebp+4]
  00078	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN2@win32_buil:

; 92   :     }
; 93   :     return ret;

  0007b	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]

; 94   : }

  0007e	52		 push	 edx
  0007f	8b cd		 mov	 ecx, ebp
  00081	50		 push	 eax
  00082	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@win32_buil
  00088	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0008d	58		 pop	 eax
  0008e	5a		 pop	 edx
  0008f	5e		 pop	 esi
  00090	83 c4 14	 add	 esp, 20			; 00000014H
  00093	3b ec		 cmp	 ebp, esp
  00095	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
  0009e	66 90		 npad	 2
$LN9@win32_buil:
  000a0	01 00 00 00	 DD	 1
  000a4	00 00 00 00	 DD	 $LN8@win32_buil
$LN8@win32_buil:
  000a8	f0 ff ff ff	 DD	 -16			; fffffff0H
  000ac	08 00 00 00	 DD	 8
  000b0	00 00 00 00	 DD	 $LN7@win32_buil
$LN7@win32_buil:
  000b4	77		 DB	 119			; 00000077H
  000b5	33		 DB	 51			; 00000033H
  000b6	32		 DB	 50			; 00000032H
  000b7	66		 DB	 102			; 00000066H
  000b8	69		 DB	 105			; 00000069H
  000b9	6f		 DB	 111			; 0000006fH
  000ba	77		 DB	 119			; 00000077H
  000bb	00		 DB	 0
_win32_build_iowin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT _win32_open64_file_func
_TEXT	SEGMENT
_hFile$ = -56						; size = 4
_dwFlagsAndAttributes$ = -48				; size = 4
_dwShareMode$ = -36					; size = 4
_dwCreationDisposition$ = -24				; size = 4
_dwDesiredAccess$ = -12					; size = 4
_mode_fopen$ = -4					; size = 4
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_win32_open64_file_func PROC				; COMDAT

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d c8	 lea	 edi, DWORD PTR [ebp-56]
  0000b	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 98   :     const char* mode_fopen = NULL;

  00021	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], 0

; 99   :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 100  :     HANDLE hFile = NULL;

  00028	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 101  : 
; 102  :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  0002f	8d 45 d0	 lea	 eax, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00032	50		 push	 eax
  00033	8d 4d dc	 lea	 ecx, DWORD PTR _dwShareMode$[ebp]
  00036	51		 push	 ecx
  00037	8d 55 e8	 lea	 edx, DWORD PTR _dwCreationDisposition$[ebp]
  0003a	52		 push	 edx
  0003b	8d 45 f4	 lea	 eax, DWORD PTR _dwDesiredAccess$[ebp]
  0003e	50		 push	 eax
  0003f	8b 4d 10	 mov	 ecx, DWORD PTR _mode$[ebp]
  00042	51		 push	 ecx
  00043	e8 00 00 00 00	 call	 _win32_translate_open_mode
  00048	83 c4 14	 add	 esp, 20			; 00000014H

; 103  : 
; 104  : #ifdef IOWIN32_USING_WINRT_API
; 105  : #ifdef UNICODE
; 106  :     if ((filename!=NULL) && (dwDesiredAccess != 0))
; 107  :         hFile = CreateFile2((LPCTSTR)filename, dwDesiredAccess, dwShareMode, dwCreationDisposition, NULL);
; 108  : #else
; 109  :     if ((filename!=NULL) && (dwDesiredAccess != 0))
; 110  :     {
; 111  :         WCHAR filenameW[FILENAME_MAX + 0x200 + 1];
; 112  :         MultiByteToWideChar(CP_ACP,0,(const char*)filename,-1,filenameW,FILENAME_MAX + 0x200);
; 113  :         hFile = CreateFile2(filenameW, dwDesiredAccess, dwShareMode, dwCreationDisposition, NULL);
; 114  :     }
; 115  : #endif
; 116  : #else
; 117  :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  0004b	83 7d 0c 00	 cmp	 DWORD PTR _filename$[ebp], 0
  0004f	74 30		 je	 SHORT $LN2@win32_open
  00051	83 7d f4 00	 cmp	 DWORD PTR _dwDesiredAccess$[ebp], 0
  00055	74 2a		 je	 SHORT $LN2@win32_open

; 118  :         hFile = CreateFile((LPCTSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  00057	8b f4		 mov	 esi, esp
  00059	6a 00		 push	 0
  0005b	8b 55 d0	 mov	 edx, DWORD PTR _dwFlagsAndAttributes$[ebp]
  0005e	52		 push	 edx
  0005f	8b 45 e8	 mov	 eax, DWORD PTR _dwCreationDisposition$[ebp]
  00062	50		 push	 eax
  00063	6a 00		 push	 0
  00065	8b 4d dc	 mov	 ecx, DWORD PTR _dwShareMode$[ebp]
  00068	51		 push	 ecx
  00069	8b 55 f4	 mov	 edx, DWORD PTR _dwDesiredAccess$[ebp]
  0006c	52		 push	 edx
  0006d	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  00070	50		 push	 eax
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00077	3b f4		 cmp	 esi, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	89 45 c8	 mov	 DWORD PTR _hFile$[ebp], eax
$LN2@win32_open:

; 119  : #endif
; 120  : 
; 121  :     return win32_build_iowin(hFile);

  00081	8b 4d c8	 mov	 ecx, DWORD PTR _hFile$[ebp]
  00084	51		 push	 ecx
  00085	e8 00 00 00 00	 call	 _win32_build_iowin
  0008a	83 c4 04	 add	 esp, 4

; 122  : }

  0008d	52		 push	 edx
  0008e	8b cd		 mov	 ecx, ebp
  00090	50		 push	 eax
  00091	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@win32_open
  00097	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009c	58		 pop	 eax
  0009d	5a		 pop	 edx
  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	83 c4 38	 add	 esp, 56			; 00000038H
  000a3	3b ec		 cmp	 ebp, esp
  000a5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
  000ae	66 90		 npad	 2
$LN10@win32_open:
  000b0	04 00 00 00	 DD	 4
  000b4	00 00 00 00	 DD	 $LN9@win32_open
$LN9@win32_open:
  000b8	f4 ff ff ff	 DD	 -12			; fffffff4H
  000bc	04 00 00 00	 DD	 4
  000c0	00 00 00 00	 DD	 $LN5@win32_open
  000c4	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000c8	04 00 00 00	 DD	 4
  000cc	00 00 00 00	 DD	 $LN6@win32_open
  000d0	dc ff ff ff	 DD	 -36			; ffffffdcH
  000d4	04 00 00 00	 DD	 4
  000d8	00 00 00 00	 DD	 $LN7@win32_open
  000dc	d0 ff ff ff	 DD	 -48			; ffffffd0H
  000e0	04 00 00 00	 DD	 4
  000e4	00 00 00 00	 DD	 $LN8@win32_open
$LN8@win32_open:
  000e8	64		 DB	 100			; 00000064H
  000e9	77		 DB	 119			; 00000077H
  000ea	46		 DB	 70			; 00000046H
  000eb	6c		 DB	 108			; 0000006cH
  000ec	61		 DB	 97			; 00000061H
  000ed	67		 DB	 103			; 00000067H
  000ee	73		 DB	 115			; 00000073H
  000ef	41		 DB	 65			; 00000041H
  000f0	6e		 DB	 110			; 0000006eH
  000f1	64		 DB	 100			; 00000064H
  000f2	41		 DB	 65			; 00000041H
  000f3	74		 DB	 116			; 00000074H
  000f4	74		 DB	 116			; 00000074H
  000f5	72		 DB	 114			; 00000072H
  000f6	69		 DB	 105			; 00000069H
  000f7	62		 DB	 98			; 00000062H
  000f8	75		 DB	 117			; 00000075H
  000f9	74		 DB	 116			; 00000074H
  000fa	65		 DB	 101			; 00000065H
  000fb	73		 DB	 115			; 00000073H
  000fc	00		 DB	 0
$LN7@win32_open:
  000fd	64		 DB	 100			; 00000064H
  000fe	77		 DB	 119			; 00000077H
  000ff	53		 DB	 83			; 00000053H
  00100	68		 DB	 104			; 00000068H
  00101	61		 DB	 97			; 00000061H
  00102	72		 DB	 114			; 00000072H
  00103	65		 DB	 101			; 00000065H
  00104	4d		 DB	 77			; 0000004dH
  00105	6f		 DB	 111			; 0000006fH
  00106	64		 DB	 100			; 00000064H
  00107	65		 DB	 101			; 00000065H
  00108	00		 DB	 0
$LN6@win32_open:
  00109	64		 DB	 100			; 00000064H
  0010a	77		 DB	 119			; 00000077H
  0010b	43		 DB	 67			; 00000043H
  0010c	72		 DB	 114			; 00000072H
  0010d	65		 DB	 101			; 00000065H
  0010e	61		 DB	 97			; 00000061H
  0010f	74		 DB	 116			; 00000074H
  00110	69		 DB	 105			; 00000069H
  00111	6f		 DB	 111			; 0000006fH
  00112	6e		 DB	 110			; 0000006eH
  00113	44		 DB	 68			; 00000044H
  00114	69		 DB	 105			; 00000069H
  00115	73		 DB	 115			; 00000073H
  00116	70		 DB	 112			; 00000070H
  00117	6f		 DB	 111			; 0000006fH
  00118	73		 DB	 115			; 00000073H
  00119	69		 DB	 105			; 00000069H
  0011a	74		 DB	 116			; 00000074H
  0011b	69		 DB	 105			; 00000069H
  0011c	6f		 DB	 111			; 0000006fH
  0011d	6e		 DB	 110			; 0000006eH
  0011e	00		 DB	 0
$LN5@win32_open:
  0011f	64		 DB	 100			; 00000064H
  00120	77		 DB	 119			; 00000077H
  00121	44		 DB	 68			; 00000044H
  00122	65		 DB	 101			; 00000065H
  00123	73		 DB	 115			; 00000073H
  00124	69		 DB	 105			; 00000069H
  00125	72		 DB	 114			; 00000072H
  00126	65		 DB	 101			; 00000065H
  00127	64		 DB	 100			; 00000064H
  00128	41		 DB	 65			; 00000041H
  00129	63		 DB	 99			; 00000063H
  0012a	63		 DB	 99			; 00000063H
  0012b	65		 DB	 101			; 00000065H
  0012c	73		 DB	 115			; 00000073H
  0012d	73		 DB	 115			; 00000073H
  0012e	00		 DB	 0
_win32_open64_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT _win32_open64_file_funcA
_TEXT	SEGMENT
_hFile$ = -56						; size = 4
_dwFlagsAndAttributes$ = -48				; size = 4
_dwShareMode$ = -36					; size = 4
_dwCreationDisposition$ = -24				; size = 4
_dwDesiredAccess$ = -12					; size = 4
_mode_fopen$ = -4					; size = 4
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_win32_open64_file_funcA PROC				; COMDAT

; 126  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d c8	 lea	 edi, DWORD PTR [ebp-56]
  0000b	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 127  :     const char* mode_fopen = NULL;

  00021	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], 0

; 128  :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 129  :     HANDLE hFile = NULL;

  00028	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 130  : 
; 131  :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  0002f	8d 45 d0	 lea	 eax, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00032	50		 push	 eax
  00033	8d 4d dc	 lea	 ecx, DWORD PTR _dwShareMode$[ebp]
  00036	51		 push	 ecx
  00037	8d 55 e8	 lea	 edx, DWORD PTR _dwCreationDisposition$[ebp]
  0003a	52		 push	 edx
  0003b	8d 45 f4	 lea	 eax, DWORD PTR _dwDesiredAccess$[ebp]
  0003e	50		 push	 eax
  0003f	8b 4d 10	 mov	 ecx, DWORD PTR _mode$[ebp]
  00042	51		 push	 ecx
  00043	e8 00 00 00 00	 call	 _win32_translate_open_mode
  00048	83 c4 14	 add	 esp, 20			; 00000014H

; 132  : 
; 133  : #ifdef IOWIN32_USING_WINRT_API
; 134  :     if ((filename!=NULL) && (dwDesiredAccess != 0))
; 135  :     {
; 136  :         WCHAR filenameW[FILENAME_MAX + 0x200 + 1];
; 137  :         MultiByteToWideChar(CP_ACP,0,(const char*)filename,-1,filenameW,FILENAME_MAX + 0x200);
; 138  :         hFile = CreateFile2(filenameW, dwDesiredAccess, dwShareMode, dwCreationDisposition, NULL);
; 139  :     }
; 140  : #else
; 141  :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  0004b	83 7d 0c 00	 cmp	 DWORD PTR _filename$[ebp], 0
  0004f	74 30		 je	 SHORT $LN2@win32_open
  00051	83 7d f4 00	 cmp	 DWORD PTR _dwDesiredAccess$[ebp], 0
  00055	74 2a		 je	 SHORT $LN2@win32_open

; 142  :         hFile = CreateFileA((LPCSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  00057	8b f4		 mov	 esi, esp
  00059	6a 00		 push	 0
  0005b	8b 55 d0	 mov	 edx, DWORD PTR _dwFlagsAndAttributes$[ebp]
  0005e	52		 push	 edx
  0005f	8b 45 e8	 mov	 eax, DWORD PTR _dwCreationDisposition$[ebp]
  00062	50		 push	 eax
  00063	6a 00		 push	 0
  00065	8b 4d dc	 mov	 ecx, DWORD PTR _dwShareMode$[ebp]
  00068	51		 push	 ecx
  00069	8b 55 f4	 mov	 edx, DWORD PTR _dwDesiredAccess$[ebp]
  0006c	52		 push	 edx
  0006d	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  00070	50		 push	 eax
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00077	3b f4		 cmp	 esi, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	89 45 c8	 mov	 DWORD PTR _hFile$[ebp], eax
$LN2@win32_open:

; 143  : #endif
; 144  : 
; 145  :     return win32_build_iowin(hFile);

  00081	8b 4d c8	 mov	 ecx, DWORD PTR _hFile$[ebp]
  00084	51		 push	 ecx
  00085	e8 00 00 00 00	 call	 _win32_build_iowin
  0008a	83 c4 04	 add	 esp, 4

; 146  : }

  0008d	52		 push	 edx
  0008e	8b cd		 mov	 ecx, ebp
  00090	50		 push	 eax
  00091	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@win32_open
  00097	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009c	58		 pop	 eax
  0009d	5a		 pop	 edx
  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	83 c4 38	 add	 esp, 56			; 00000038H
  000a3	3b ec		 cmp	 ebp, esp
  000a5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
  000ae	66 90		 npad	 2
$LN10@win32_open:
  000b0	04 00 00 00	 DD	 4
  000b4	00 00 00 00	 DD	 $LN9@win32_open
$LN9@win32_open:
  000b8	f4 ff ff ff	 DD	 -12			; fffffff4H
  000bc	04 00 00 00	 DD	 4
  000c0	00 00 00 00	 DD	 $LN5@win32_open
  000c4	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000c8	04 00 00 00	 DD	 4
  000cc	00 00 00 00	 DD	 $LN6@win32_open
  000d0	dc ff ff ff	 DD	 -36			; ffffffdcH
  000d4	04 00 00 00	 DD	 4
  000d8	00 00 00 00	 DD	 $LN7@win32_open
  000dc	d0 ff ff ff	 DD	 -48			; ffffffd0H
  000e0	04 00 00 00	 DD	 4
  000e4	00 00 00 00	 DD	 $LN8@win32_open
$LN8@win32_open:
  000e8	64		 DB	 100			; 00000064H
  000e9	77		 DB	 119			; 00000077H
  000ea	46		 DB	 70			; 00000046H
  000eb	6c		 DB	 108			; 0000006cH
  000ec	61		 DB	 97			; 00000061H
  000ed	67		 DB	 103			; 00000067H
  000ee	73		 DB	 115			; 00000073H
  000ef	41		 DB	 65			; 00000041H
  000f0	6e		 DB	 110			; 0000006eH
  000f1	64		 DB	 100			; 00000064H
  000f2	41		 DB	 65			; 00000041H
  000f3	74		 DB	 116			; 00000074H
  000f4	74		 DB	 116			; 00000074H
  000f5	72		 DB	 114			; 00000072H
  000f6	69		 DB	 105			; 00000069H
  000f7	62		 DB	 98			; 00000062H
  000f8	75		 DB	 117			; 00000075H
  000f9	74		 DB	 116			; 00000074H
  000fa	65		 DB	 101			; 00000065H
  000fb	73		 DB	 115			; 00000073H
  000fc	00		 DB	 0
$LN7@win32_open:
  000fd	64		 DB	 100			; 00000064H
  000fe	77		 DB	 119			; 00000077H
  000ff	53		 DB	 83			; 00000053H
  00100	68		 DB	 104			; 00000068H
  00101	61		 DB	 97			; 00000061H
  00102	72		 DB	 114			; 00000072H
  00103	65		 DB	 101			; 00000065H
  00104	4d		 DB	 77			; 0000004dH
  00105	6f		 DB	 111			; 0000006fH
  00106	64		 DB	 100			; 00000064H
  00107	65		 DB	 101			; 00000065H
  00108	00		 DB	 0
$LN6@win32_open:
  00109	64		 DB	 100			; 00000064H
  0010a	77		 DB	 119			; 00000077H
  0010b	43		 DB	 67			; 00000043H
  0010c	72		 DB	 114			; 00000072H
  0010d	65		 DB	 101			; 00000065H
  0010e	61		 DB	 97			; 00000061H
  0010f	74		 DB	 116			; 00000074H
  00110	69		 DB	 105			; 00000069H
  00111	6f		 DB	 111			; 0000006fH
  00112	6e		 DB	 110			; 0000006eH
  00113	44		 DB	 68			; 00000044H
  00114	69		 DB	 105			; 00000069H
  00115	73		 DB	 115			; 00000073H
  00116	70		 DB	 112			; 00000070H
  00117	6f		 DB	 111			; 0000006fH
  00118	73		 DB	 115			; 00000073H
  00119	69		 DB	 105			; 00000069H
  0011a	74		 DB	 116			; 00000074H
  0011b	69		 DB	 105			; 00000069H
  0011c	6f		 DB	 111			; 0000006fH
  0011d	6e		 DB	 110			; 0000006eH
  0011e	00		 DB	 0
$LN5@win32_open:
  0011f	64		 DB	 100			; 00000064H
  00120	77		 DB	 119			; 00000077H
  00121	44		 DB	 68			; 00000044H
  00122	65		 DB	 101			; 00000065H
  00123	73		 DB	 115			; 00000073H
  00124	69		 DB	 105			; 00000069H
  00125	72		 DB	 114			; 00000072H
  00126	65		 DB	 101			; 00000065H
  00127	64		 DB	 100			; 00000064H
  00128	41		 DB	 65			; 00000041H
  00129	63		 DB	 99			; 00000063H
  0012a	63		 DB	 99			; 00000063H
  0012b	65		 DB	 101			; 00000065H
  0012c	73		 DB	 115			; 00000073H
  0012d	73		 DB	 115			; 00000073H
  0012e	00		 DB	 0
_win32_open64_file_funcA ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT _win32_open64_file_funcW
_TEXT	SEGMENT
_hFile$ = -56						; size = 4
_dwFlagsAndAttributes$ = -48				; size = 4
_dwShareMode$ = -36					; size = 4
_dwCreationDisposition$ = -24				; size = 4
_dwDesiredAccess$ = -12					; size = 4
_mode_fopen$ = -4					; size = 4
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_win32_open64_file_funcW PROC				; COMDAT

; 150  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d c8	 lea	 edi, DWORD PTR [ebp-56]
  0000b	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 151  :     const char* mode_fopen = NULL;

  00021	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], 0

; 152  :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 153  :     HANDLE hFile = NULL;

  00028	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 154  : 
; 155  :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  0002f	8d 45 d0	 lea	 eax, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00032	50		 push	 eax
  00033	8d 4d dc	 lea	 ecx, DWORD PTR _dwShareMode$[ebp]
  00036	51		 push	 ecx
  00037	8d 55 e8	 lea	 edx, DWORD PTR _dwCreationDisposition$[ebp]
  0003a	52		 push	 edx
  0003b	8d 45 f4	 lea	 eax, DWORD PTR _dwDesiredAccess$[ebp]
  0003e	50		 push	 eax
  0003f	8b 4d 10	 mov	 ecx, DWORD PTR _mode$[ebp]
  00042	51		 push	 ecx
  00043	e8 00 00 00 00	 call	 _win32_translate_open_mode
  00048	83 c4 14	 add	 esp, 20			; 00000014H

; 156  : 
; 157  : #ifdef IOWIN32_USING_WINRT_API
; 158  :     if ((filename!=NULL) && (dwDesiredAccess != 0))
; 159  :         hFile = CreateFile2((LPCWSTR)filename, dwDesiredAccess, dwShareMode, dwCreationDisposition,NULL);
; 160  : #else
; 161  :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  0004b	83 7d 0c 00	 cmp	 DWORD PTR _filename$[ebp], 0
  0004f	74 30		 je	 SHORT $LN2@win32_open
  00051	83 7d f4 00	 cmp	 DWORD PTR _dwDesiredAccess$[ebp], 0
  00055	74 2a		 je	 SHORT $LN2@win32_open

; 162  :         hFile = CreateFileW((LPCWSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  00057	8b f4		 mov	 esi, esp
  00059	6a 00		 push	 0
  0005b	8b 55 d0	 mov	 edx, DWORD PTR _dwFlagsAndAttributes$[ebp]
  0005e	52		 push	 edx
  0005f	8b 45 e8	 mov	 eax, DWORD PTR _dwCreationDisposition$[ebp]
  00062	50		 push	 eax
  00063	6a 00		 push	 0
  00065	8b 4d dc	 mov	 ecx, DWORD PTR _dwShareMode$[ebp]
  00068	51		 push	 ecx
  00069	8b 55 f4	 mov	 edx, DWORD PTR _dwDesiredAccess$[ebp]
  0006c	52		 push	 edx
  0006d	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  00070	50		 push	 eax
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileW@28
  00077	3b f4		 cmp	 esi, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	89 45 c8	 mov	 DWORD PTR _hFile$[ebp], eax
$LN2@win32_open:

; 163  : #endif
; 164  : 
; 165  :     return win32_build_iowin(hFile);

  00081	8b 4d c8	 mov	 ecx, DWORD PTR _hFile$[ebp]
  00084	51		 push	 ecx
  00085	e8 00 00 00 00	 call	 _win32_build_iowin
  0008a	83 c4 04	 add	 esp, 4

; 166  : }

  0008d	52		 push	 edx
  0008e	8b cd		 mov	 ecx, ebp
  00090	50		 push	 eax
  00091	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@win32_open
  00097	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009c	58		 pop	 eax
  0009d	5a		 pop	 edx
  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	83 c4 38	 add	 esp, 56			; 00000038H
  000a3	3b ec		 cmp	 ebp, esp
  000a5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
  000ae	66 90		 npad	 2
$LN10@win32_open:
  000b0	04 00 00 00	 DD	 4
  000b4	00 00 00 00	 DD	 $LN9@win32_open
$LN9@win32_open:
  000b8	f4 ff ff ff	 DD	 -12			; fffffff4H
  000bc	04 00 00 00	 DD	 4
  000c0	00 00 00 00	 DD	 $LN5@win32_open
  000c4	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000c8	04 00 00 00	 DD	 4
  000cc	00 00 00 00	 DD	 $LN6@win32_open
  000d0	dc ff ff ff	 DD	 -36			; ffffffdcH
  000d4	04 00 00 00	 DD	 4
  000d8	00 00 00 00	 DD	 $LN7@win32_open
  000dc	d0 ff ff ff	 DD	 -48			; ffffffd0H
  000e0	04 00 00 00	 DD	 4
  000e4	00 00 00 00	 DD	 $LN8@win32_open
$LN8@win32_open:
  000e8	64		 DB	 100			; 00000064H
  000e9	77		 DB	 119			; 00000077H
  000ea	46		 DB	 70			; 00000046H
  000eb	6c		 DB	 108			; 0000006cH
  000ec	61		 DB	 97			; 00000061H
  000ed	67		 DB	 103			; 00000067H
  000ee	73		 DB	 115			; 00000073H
  000ef	41		 DB	 65			; 00000041H
  000f0	6e		 DB	 110			; 0000006eH
  000f1	64		 DB	 100			; 00000064H
  000f2	41		 DB	 65			; 00000041H
  000f3	74		 DB	 116			; 00000074H
  000f4	74		 DB	 116			; 00000074H
  000f5	72		 DB	 114			; 00000072H
  000f6	69		 DB	 105			; 00000069H
  000f7	62		 DB	 98			; 00000062H
  000f8	75		 DB	 117			; 00000075H
  000f9	74		 DB	 116			; 00000074H
  000fa	65		 DB	 101			; 00000065H
  000fb	73		 DB	 115			; 00000073H
  000fc	00		 DB	 0
$LN7@win32_open:
  000fd	64		 DB	 100			; 00000064H
  000fe	77		 DB	 119			; 00000077H
  000ff	53		 DB	 83			; 00000053H
  00100	68		 DB	 104			; 00000068H
  00101	61		 DB	 97			; 00000061H
  00102	72		 DB	 114			; 00000072H
  00103	65		 DB	 101			; 00000065H
  00104	4d		 DB	 77			; 0000004dH
  00105	6f		 DB	 111			; 0000006fH
  00106	64		 DB	 100			; 00000064H
  00107	65		 DB	 101			; 00000065H
  00108	00		 DB	 0
$LN6@win32_open:
  00109	64		 DB	 100			; 00000064H
  0010a	77		 DB	 119			; 00000077H
  0010b	43		 DB	 67			; 00000043H
  0010c	72		 DB	 114			; 00000072H
  0010d	65		 DB	 101			; 00000065H
  0010e	61		 DB	 97			; 00000061H
  0010f	74		 DB	 116			; 00000074H
  00110	69		 DB	 105			; 00000069H
  00111	6f		 DB	 111			; 0000006fH
  00112	6e		 DB	 110			; 0000006eH
  00113	44		 DB	 68			; 00000044H
  00114	69		 DB	 105			; 00000069H
  00115	73		 DB	 115			; 00000073H
  00116	70		 DB	 112			; 00000070H
  00117	6f		 DB	 111			; 0000006fH
  00118	73		 DB	 115			; 00000073H
  00119	69		 DB	 105			; 00000069H
  0011a	74		 DB	 116			; 00000074H
  0011b	69		 DB	 105			; 00000069H
  0011c	6f		 DB	 111			; 0000006fH
  0011d	6e		 DB	 110			; 0000006eH
  0011e	00		 DB	 0
$LN5@win32_open:
  0011f	64		 DB	 100			; 00000064H
  00120	77		 DB	 119			; 00000077H
  00121	44		 DB	 68			; 00000044H
  00122	65		 DB	 101			; 00000065H
  00123	73		 DB	 115			; 00000073H
  00124	69		 DB	 105			; 00000069H
  00125	72		 DB	 114			; 00000072H
  00126	65		 DB	 101			; 00000065H
  00127	64		 DB	 100			; 00000064H
  00128	41		 DB	 65			; 00000041H
  00129	63		 DB	 99			; 00000063H
  0012a	63		 DB	 99			; 00000063H
  0012b	65		 DB	 101			; 00000065H
  0012c	73		 DB	 115			; 00000073H
  0012d	73		 DB	 115			; 00000073H
  0012e	00		 DB	 0
_win32_open64_file_funcW ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT _win32_open_file_func
_TEXT	SEGMENT
_hFile$ = -56						; size = 4
_dwFlagsAndAttributes$ = -48				; size = 4
_dwShareMode$ = -36					; size = 4
_dwCreationDisposition$ = -24				; size = 4
_dwDesiredAccess$ = -12					; size = 4
_mode_fopen$ = -4					; size = 4
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_win32_open_file_func PROC				; COMDAT

; 170  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d c8	 lea	 edi, DWORD PTR [ebp-56]
  0000b	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 171  :     const char* mode_fopen = NULL;

  00021	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], 0

; 172  :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 173  :     HANDLE hFile = NULL;

  00028	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 174  : 
; 175  :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  0002f	8d 45 d0	 lea	 eax, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00032	50		 push	 eax
  00033	8d 4d dc	 lea	 ecx, DWORD PTR _dwShareMode$[ebp]
  00036	51		 push	 ecx
  00037	8d 55 e8	 lea	 edx, DWORD PTR _dwCreationDisposition$[ebp]
  0003a	52		 push	 edx
  0003b	8d 45 f4	 lea	 eax, DWORD PTR _dwDesiredAccess$[ebp]
  0003e	50		 push	 eax
  0003f	8b 4d 10	 mov	 ecx, DWORD PTR _mode$[ebp]
  00042	51		 push	 ecx
  00043	e8 00 00 00 00	 call	 _win32_translate_open_mode
  00048	83 c4 14	 add	 esp, 20			; 00000014H

; 176  : 
; 177  : #ifdef IOWIN32_USING_WINRT_API
; 178  : #ifdef UNICODE
; 179  :     if ((filename!=NULL) && (dwDesiredAccess != 0))
; 180  :         hFile = CreateFile2((LPCTSTR)filename, dwDesiredAccess, dwShareMode, dwCreationDisposition, NULL);
; 181  : #else
; 182  :     if ((filename!=NULL) && (dwDesiredAccess != 0))
; 183  :     {
; 184  :         WCHAR filenameW[FILENAME_MAX + 0x200 + 1];
; 185  :         MultiByteToWideChar(CP_ACP,0,(const char*)filename,-1,filenameW,FILENAME_MAX + 0x200);
; 186  :         hFile = CreateFile2(filenameW, dwDesiredAccess, dwShareMode, dwCreationDisposition, NULL);
; 187  :     }
; 188  : #endif
; 189  : #else
; 190  :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  0004b	83 7d 0c 00	 cmp	 DWORD PTR _filename$[ebp], 0
  0004f	74 30		 je	 SHORT $LN2@win32_open
  00051	83 7d f4 00	 cmp	 DWORD PTR _dwDesiredAccess$[ebp], 0
  00055	74 2a		 je	 SHORT $LN2@win32_open

; 191  :         hFile = CreateFile((LPCTSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  00057	8b f4		 mov	 esi, esp
  00059	6a 00		 push	 0
  0005b	8b 55 d0	 mov	 edx, DWORD PTR _dwFlagsAndAttributes$[ebp]
  0005e	52		 push	 edx
  0005f	8b 45 e8	 mov	 eax, DWORD PTR _dwCreationDisposition$[ebp]
  00062	50		 push	 eax
  00063	6a 00		 push	 0
  00065	8b 4d dc	 mov	 ecx, DWORD PTR _dwShareMode$[ebp]
  00068	51		 push	 ecx
  00069	8b 55 f4	 mov	 edx, DWORD PTR _dwDesiredAccess$[ebp]
  0006c	52		 push	 edx
  0006d	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  00070	50		 push	 eax
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00077	3b f4		 cmp	 esi, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	89 45 c8	 mov	 DWORD PTR _hFile$[ebp], eax
$LN2@win32_open:

; 192  : #endif
; 193  : 
; 194  :     return win32_build_iowin(hFile);

  00081	8b 4d c8	 mov	 ecx, DWORD PTR _hFile$[ebp]
  00084	51		 push	 ecx
  00085	e8 00 00 00 00	 call	 _win32_build_iowin
  0008a	83 c4 04	 add	 esp, 4

; 195  : }

  0008d	52		 push	 edx
  0008e	8b cd		 mov	 ecx, ebp
  00090	50		 push	 eax
  00091	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@win32_open
  00097	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009c	58		 pop	 eax
  0009d	5a		 pop	 edx
  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	83 c4 38	 add	 esp, 56			; 00000038H
  000a3	3b ec		 cmp	 ebp, esp
  000a5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
  000ae	66 90		 npad	 2
$LN10@win32_open:
  000b0	04 00 00 00	 DD	 4
  000b4	00 00 00 00	 DD	 $LN9@win32_open
$LN9@win32_open:
  000b8	f4 ff ff ff	 DD	 -12			; fffffff4H
  000bc	04 00 00 00	 DD	 4
  000c0	00 00 00 00	 DD	 $LN5@win32_open
  000c4	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000c8	04 00 00 00	 DD	 4
  000cc	00 00 00 00	 DD	 $LN6@win32_open
  000d0	dc ff ff ff	 DD	 -36			; ffffffdcH
  000d4	04 00 00 00	 DD	 4
  000d8	00 00 00 00	 DD	 $LN7@win32_open
  000dc	d0 ff ff ff	 DD	 -48			; ffffffd0H
  000e0	04 00 00 00	 DD	 4
  000e4	00 00 00 00	 DD	 $LN8@win32_open
$LN8@win32_open:
  000e8	64		 DB	 100			; 00000064H
  000e9	77		 DB	 119			; 00000077H
  000ea	46		 DB	 70			; 00000046H
  000eb	6c		 DB	 108			; 0000006cH
  000ec	61		 DB	 97			; 00000061H
  000ed	67		 DB	 103			; 00000067H
  000ee	73		 DB	 115			; 00000073H
  000ef	41		 DB	 65			; 00000041H
  000f0	6e		 DB	 110			; 0000006eH
  000f1	64		 DB	 100			; 00000064H
  000f2	41		 DB	 65			; 00000041H
  000f3	74		 DB	 116			; 00000074H
  000f4	74		 DB	 116			; 00000074H
  000f5	72		 DB	 114			; 00000072H
  000f6	69		 DB	 105			; 00000069H
  000f7	62		 DB	 98			; 00000062H
  000f8	75		 DB	 117			; 00000075H
  000f9	74		 DB	 116			; 00000074H
  000fa	65		 DB	 101			; 00000065H
  000fb	73		 DB	 115			; 00000073H
  000fc	00		 DB	 0
$LN7@win32_open:
  000fd	64		 DB	 100			; 00000064H
  000fe	77		 DB	 119			; 00000077H
  000ff	53		 DB	 83			; 00000053H
  00100	68		 DB	 104			; 00000068H
  00101	61		 DB	 97			; 00000061H
  00102	72		 DB	 114			; 00000072H
  00103	65		 DB	 101			; 00000065H
  00104	4d		 DB	 77			; 0000004dH
  00105	6f		 DB	 111			; 0000006fH
  00106	64		 DB	 100			; 00000064H
  00107	65		 DB	 101			; 00000065H
  00108	00		 DB	 0
$LN6@win32_open:
  00109	64		 DB	 100			; 00000064H
  0010a	77		 DB	 119			; 00000077H
  0010b	43		 DB	 67			; 00000043H
  0010c	72		 DB	 114			; 00000072H
  0010d	65		 DB	 101			; 00000065H
  0010e	61		 DB	 97			; 00000061H
  0010f	74		 DB	 116			; 00000074H
  00110	69		 DB	 105			; 00000069H
  00111	6f		 DB	 111			; 0000006fH
  00112	6e		 DB	 110			; 0000006eH
  00113	44		 DB	 68			; 00000044H
  00114	69		 DB	 105			; 00000069H
  00115	73		 DB	 115			; 00000073H
  00116	70		 DB	 112			; 00000070H
  00117	6f		 DB	 111			; 0000006fH
  00118	73		 DB	 115			; 00000073H
  00119	69		 DB	 105			; 00000069H
  0011a	74		 DB	 116			; 00000074H
  0011b	69		 DB	 105			; 00000069H
  0011c	6f		 DB	 111			; 0000006fH
  0011d	6e		 DB	 110			; 0000006eH
  0011e	00		 DB	 0
$LN5@win32_open:
  0011f	64		 DB	 100			; 00000064H
  00120	77		 DB	 119			; 00000077H
  00121	44		 DB	 68			; 00000044H
  00122	65		 DB	 101			; 00000065H
  00123	73		 DB	 115			; 00000073H
  00124	69		 DB	 105			; 00000069H
  00125	72		 DB	 114			; 00000072H
  00126	65		 DB	 101			; 00000065H
  00127	64		 DB	 100			; 00000064H
  00128	41		 DB	 65			; 00000041H
  00129	63		 DB	 99			; 00000063H
  0012a	63		 DB	 99			; 00000063H
  0012b	65		 DB	 101			; 00000065H
  0012c	73		 DB	 115			; 00000073H
  0012d	73		 DB	 115			; 00000073H
  0012e	00		 DB	 0
_win32_open_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT _win32_read_file_func
_TEXT	SEGMENT
_dwErr$1 = -20						; size = 4
_hFile$ = -16						; size = 4
_ret$ = -8						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_buf$ = 16						; size = 4
_size$ = 20						; size = 4
_win32_read_file_func PROC				; COMDAT

; 199  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00012	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00015	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00018	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 200  :     uLong ret=0;

  00025	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0

; 201  :     HANDLE hFile = NULL;

  0002c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 202  :     if (stream!=NULL)

  00033	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  00037	74 08		 je	 SHORT $LN2@win32_read

; 203  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  00039	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  0003c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003e	89 4d f0	 mov	 DWORD PTR _hFile$[ebp], ecx
$LN2@win32_read:

; 204  : 
; 205  :     if (hFile != NULL)

  00041	83 7d f0 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  00045	74 4d		 je	 SHORT $LN3@win32_read

; 206  :     {
; 207  :         if (!ReadFile(hFile, buf, size, &ret, NULL))

  00047	8b f4		 mov	 esi, esp
  00049	6a 00		 push	 0
  0004b	8d 55 f8	 lea	 edx, DWORD PTR _ret$[ebp]
  0004e	52		 push	 edx
  0004f	8b 45 14	 mov	 eax, DWORD PTR _size$[ebp]
  00052	50		 push	 eax
  00053	8b 4d 10	 mov	 ecx, DWORD PTR _buf$[ebp]
  00056	51		 push	 ecx
  00057	8b 55 f0	 mov	 edx, DWORD PTR _hFile$[ebp]
  0005a	52		 push	 edx
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
  00061	3b f4		 cmp	 esi, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	85 c0		 test	 eax, eax
  0006a	75 28		 jne	 SHORT $LN3@win32_read

; 208  :         {
; 209  :             DWORD dwErr = GetLastError();

  0006c	8b f4		 mov	 esi, esp
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00074	3b f4		 cmp	 esi, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	89 45 ec	 mov	 DWORD PTR _dwErr$1[ebp], eax

; 210  :             if (dwErr == ERROR_HANDLE_EOF)

  0007e	83 7d ec 26	 cmp	 DWORD PTR _dwErr$1[ebp], 38 ; 00000026H
  00082	75 07		 jne	 SHORT $LN5@win32_read

; 211  :                 dwErr = 0;

  00084	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _dwErr$1[ebp], 0
$LN5@win32_read:

; 212  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0008b	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  0008e	8b 4d ec	 mov	 ecx, DWORD PTR _dwErr$1[ebp]
  00091	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@win32_read:

; 213  :         }
; 214  :     }
; 215  : 
; 216  :     return ret;

  00094	8b 45 f8	 mov	 eax, DWORD PTR _ret$[ebp]

; 217  : }

  00097	52		 push	 edx
  00098	8b cd		 mov	 ecx, ebp
  0009a	50		 push	 eax
  0009b	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@win32_read
  000a1	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000a6	58		 pop	 eax
  000a7	5a		 pop	 edx
  000a8	5e		 pop	 esi
  000a9	83 c4 14	 add	 esp, 20			; 00000014H
  000ac	3b ec		 cmp	 ebp, esp
  000ae	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
  000b7	90		 npad	 1
$LN10@win32_read:
  000b8	01 00 00 00	 DD	 1
  000bc	00 00 00 00	 DD	 $LN9@win32_read
$LN9@win32_read:
  000c0	f8 ff ff ff	 DD	 -8			; fffffff8H
  000c4	04 00 00 00	 DD	 4
  000c8	00 00 00 00	 DD	 $LN8@win32_read
$LN8@win32_read:
  000cc	72		 DB	 114			; 00000072H
  000cd	65		 DB	 101			; 00000065H
  000ce	74		 DB	 116			; 00000074H
  000cf	00		 DB	 0
_win32_read_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT _win32_write_file_func
_TEXT	SEGMENT
_dwErr$1 = -20						; size = 4
_hFile$ = -16						; size = 4
_ret$ = -8						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_buf$ = 16						; size = 4
_size$ = 20						; size = 4
_win32_write_file_func PROC				; COMDAT

; 221  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00012	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00015	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00018	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 222  :     uLong ret=0;

  00025	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0

; 223  :     HANDLE hFile = NULL;

  0002c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 224  :     if (stream!=NULL)

  00033	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  00037	74 08		 je	 SHORT $LN2@win32_writ

; 225  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  00039	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  0003c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003e	89 4d f0	 mov	 DWORD PTR _hFile$[ebp], ecx
$LN2@win32_writ:

; 226  : 
; 227  :     if (hFile != NULL)

  00041	83 7d f0 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  00045	74 4d		 je	 SHORT $LN3@win32_writ

; 228  :     {
; 229  :         if (!WriteFile(hFile, buf, size, &ret, NULL))

  00047	8b f4		 mov	 esi, esp
  00049	6a 00		 push	 0
  0004b	8d 55 f8	 lea	 edx, DWORD PTR _ret$[ebp]
  0004e	52		 push	 edx
  0004f	8b 45 14	 mov	 eax, DWORD PTR _size$[ebp]
  00052	50		 push	 eax
  00053	8b 4d 10	 mov	 ecx, DWORD PTR _buf$[ebp]
  00056	51		 push	 ecx
  00057	8b 55 f0	 mov	 edx, DWORD PTR _hFile$[ebp]
  0005a	52		 push	 edx
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WriteFile@20
  00061	3b f4		 cmp	 esi, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	85 c0		 test	 eax, eax
  0006a	75 28		 jne	 SHORT $LN3@win32_writ

; 230  :         {
; 231  :             DWORD dwErr = GetLastError();

  0006c	8b f4		 mov	 esi, esp
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00074	3b f4		 cmp	 esi, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	89 45 ec	 mov	 DWORD PTR _dwErr$1[ebp], eax

; 232  :             if (dwErr == ERROR_HANDLE_EOF)

  0007e	83 7d ec 26	 cmp	 DWORD PTR _dwErr$1[ebp], 38 ; 00000026H
  00082	75 07		 jne	 SHORT $LN5@win32_writ

; 233  :                 dwErr = 0;

  00084	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _dwErr$1[ebp], 0
$LN5@win32_writ:

; 234  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0008b	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  0008e	8b 4d ec	 mov	 ecx, DWORD PTR _dwErr$1[ebp]
  00091	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@win32_writ:

; 235  :         }
; 236  :     }
; 237  : 
; 238  :     return ret;

  00094	8b 45 f8	 mov	 eax, DWORD PTR _ret$[ebp]

; 239  : }

  00097	52		 push	 edx
  00098	8b cd		 mov	 ecx, ebp
  0009a	50		 push	 eax
  0009b	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@win32_writ
  000a1	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000a6	58		 pop	 eax
  000a7	5a		 pop	 edx
  000a8	5e		 pop	 esi
  000a9	83 c4 14	 add	 esp, 20			; 00000014H
  000ac	3b ec		 cmp	 ebp, esp
  000ae	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
  000b7	90		 npad	 1
$LN10@win32_writ:
  000b8	01 00 00 00	 DD	 1
  000bc	00 00 00 00	 DD	 $LN9@win32_writ
$LN9@win32_writ:
  000c0	f8 ff ff ff	 DD	 -8			; fffffff8H
  000c4	04 00 00 00	 DD	 4
  000c8	00 00 00 00	 DD	 $LN8@win32_writ
$LN8@win32_writ:
  000cc	72		 DB	 114			; 00000072H
  000cd	65		 DB	 101			; 00000065H
  000ce	74		 DB	 116			; 00000074H
  000cf	00		 DB	 0
_win32_write_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT _MySetFilePointerEx
_TEXT	SEGMENT
_fOk$ = -20						; size = 4
_dwNewPos$ = -16					; size = 4
_lHigh$ = -8						; size = 4
_hFile$ = 8						; size = 4
_pos$ = 12						; size = 8
_newPos$ = 20						; size = 4
_dwMoveMethod$ = 24					; size = 4
_MySetFilePointerEx PROC				; COMDAT

; 242  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00012	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00015	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00018	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 243  : #ifdef IOWIN32_USING_WINRT_API
; 244  :     return SetFilePointerEx(hFile, pos, newPos, dwMoveMethod);
; 245  : #else
; 246  :     LONG lHigh = pos.HighPart;

  00025	8b 45 10	 mov	 eax, DWORD PTR _pos$[ebp+4]
  00028	89 45 f8	 mov	 DWORD PTR _lHigh$[ebp], eax

; 247  :     DWORD dwNewPos = SetFilePointer(hFile, pos.LowPart, &lHigh, dwMoveMethod);

  0002b	8b f4		 mov	 esi, esp
  0002d	8b 4d 18	 mov	 ecx, DWORD PTR _dwMoveMethod$[ebp]
  00030	51		 push	 ecx
  00031	8d 55 f8	 lea	 edx, DWORD PTR _lHigh$[ebp]
  00034	52		 push	 edx
  00035	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  00038	50		 push	 eax
  00039	8b 4d 08	 mov	 ecx, DWORD PTR _hFile$[ebp]
  0003c	51		 push	 ecx
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointer@16
  00043	3b f4		 cmp	 esi, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	89 45 f0	 mov	 DWORD PTR _dwNewPos$[ebp], eax

; 248  :     BOOL fOk = TRUE;

  0004d	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _fOk$[ebp], 1

; 249  :     if (dwNewPos == 0xFFFFFFFF)

  00054	83 7d f0 ff	 cmp	 DWORD PTR _dwNewPos$[ebp], -1
  00058	75 1a		 jne	 SHORT $LN2@MySetFileP

; 250  :         if (GetLastError() != NO_ERROR)

  0005a	8b f4		 mov	 esi, esp
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00062	3b f4		 cmp	 esi, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	85 c0		 test	 eax, eax
  0006b	74 07		 je	 SHORT $LN2@MySetFileP

; 251  :             fOk = FALSE;

  0006d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _fOk$[ebp], 0
$LN2@MySetFileP:

; 252  :     if ((newPos != NULL) && (fOk))

  00074	83 7d 14 00	 cmp	 DWORD PTR _newPos$[ebp], 0
  00078	74 17		 je	 SHORT $LN4@MySetFileP
  0007a	83 7d ec 00	 cmp	 DWORD PTR _fOk$[ebp], 0
  0007e	74 11		 je	 SHORT $LN4@MySetFileP

; 253  :     {
; 254  :         newPos->LowPart = dwNewPos;

  00080	8b 55 14	 mov	 edx, DWORD PTR _newPos$[ebp]
  00083	8b 45 f0	 mov	 eax, DWORD PTR _dwNewPos$[ebp]
  00086	89 02		 mov	 DWORD PTR [edx], eax

; 255  :         newPos->HighPart = lHigh;

  00088	8b 4d 14	 mov	 ecx, DWORD PTR _newPos$[ebp]
  0008b	8b 55 f8	 mov	 edx, DWORD PTR _lHigh$[ebp]
  0008e	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN4@MySetFileP:

; 256  :     }
; 257  :     return fOk;

  00091	8b 45 ec	 mov	 eax, DWORD PTR _fOk$[ebp]

; 258  : #endif
; 259  : }

  00094	52		 push	 edx
  00095	8b cd		 mov	 ecx, ebp
  00097	50		 push	 eax
  00098	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@MySetFileP
  0009e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000a3	58		 pop	 eax
  000a4	5a		 pop	 edx
  000a5	5e		 pop	 esi
  000a6	83 c4 14	 add	 esp, 20			; 00000014H
  000a9	3b ec		 cmp	 ebp, esp
  000ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c3		 ret	 0
$LN9@MySetFileP:
  000b4	01 00 00 00	 DD	 1
  000b8	00 00 00 00	 DD	 $LN8@MySetFileP
$LN8@MySetFileP:
  000bc	f8 ff ff ff	 DD	 -8			; fffffff8H
  000c0	04 00 00 00	 DD	 4
  000c4	00 00 00 00	 DD	 $LN7@MySetFileP
$LN7@MySetFileP:
  000c8	6c		 DB	 108			; 0000006cH
  000c9	48		 DB	 72			; 00000048H
  000ca	69		 DB	 105			; 00000069H
  000cb	67		 DB	 103			; 00000067H
  000cc	68		 DB	 104			; 00000068H
  000cd	00		 DB	 0
_MySetFilePointerEx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT _win32_tell_file_func
_TEXT	SEGMENT
_dwErr$1 = -28						; size = 4
_pos$2 = -20						; size = 8
_hFile$ = -8						; size = 4
_ret$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_win32_tell_file_func PROC				; COMDAT

; 262  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00012	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00015	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00018	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001b	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001e	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00021	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00026	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 263  :     long ret=-1;

  0002b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 264  :     HANDLE hFile = NULL;

  00032	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 265  :     if (stream!=NULL)

  00039	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  0003d	74 08		 je	 SHORT $LN2@win32_tell

; 266  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  0003f	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00042	8b 08		 mov	 ecx, DWORD PTR [eax]
  00044	89 4d f8	 mov	 DWORD PTR _hFile$[ebp], ecx
$LN2@win32_tell:

; 267  :     if (hFile != NULL)

  00047	83 7d f8 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  0004b	74 50		 je	 SHORT $LN3@win32_tell

; 268  :     {
; 269  :         LARGE_INTEGER pos;
; 270  :         pos.QuadPart = 0;

  0004d	0f 57 c0	 xorps	 xmm0, xmm0
  00050	66 0f 13 45 ec	 movlpd	 QWORD PTR _pos$2[ebp], xmm0

; 271  : 
; 272  :         if (!MySetFilePointerEx(hFile, pos, &pos, FILE_CURRENT))

  00055	6a 01		 push	 1
  00057	8d 55 ec	 lea	 edx, DWORD PTR _pos$2[ebp]
  0005a	52		 push	 edx
  0005b	8b 45 f0	 mov	 eax, DWORD PTR _pos$2[ebp+4]
  0005e	50		 push	 eax
  0005f	8b 4d ec	 mov	 ecx, DWORD PTR _pos$2[ebp]
  00062	51		 push	 ecx
  00063	8b 55 f8	 mov	 edx, DWORD PTR _hFile$[ebp]
  00066	52		 push	 edx
  00067	e8 00 00 00 00	 call	 _MySetFilePointerEx
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	85 c0		 test	 eax, eax
  00071	75 24		 jne	 SHORT $LN4@win32_tell

; 273  :         {
; 274  :             DWORD dwErr = GetLastError();

  00073	8b f4		 mov	 esi, esp
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	89 45 e4	 mov	 DWORD PTR _dwErr$1[ebp], eax

; 275  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  00085	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00088	8b 4d e4	 mov	 ecx, DWORD PTR _dwErr$1[ebp]
  0008b	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 276  :             ret = -1;

  0008e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 277  :         }

  00095	eb 06		 jmp	 SHORT $LN3@win32_tell
$LN4@win32_tell:

; 278  :         else
; 279  :             ret=(long)pos.LowPart;

  00097	8b 55 ec	 mov	 edx, DWORD PTR _pos$2[ebp]
  0009a	89 55 fc	 mov	 DWORD PTR _ret$[ebp], edx
$LN3@win32_tell:

; 280  :     }
; 281  :     return ret;

  0009d	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]

; 282  : }

  000a0	52		 push	 edx
  000a1	8b cd		 mov	 ecx, ebp
  000a3	50		 push	 eax
  000a4	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@win32_tell
  000aa	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000af	58		 pop	 eax
  000b0	5a		 pop	 edx
  000b1	5e		 pop	 esi
  000b2	83 c4 1c	 add	 esp, 28			; 0000001cH
  000b5	3b ec		 cmp	 ebp, esp
  000b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
$LN10@win32_tell:
  000c0	01 00 00 00	 DD	 1
  000c4	00 00 00 00	 DD	 $LN9@win32_tell
$LN9@win32_tell:
  000c8	ec ff ff ff	 DD	 -20			; ffffffecH
  000cc	08 00 00 00	 DD	 8
  000d0	00 00 00 00	 DD	 $LN8@win32_tell
$LN8@win32_tell:
  000d4	70		 DB	 112			; 00000070H
  000d5	6f		 DB	 111			; 0000006fH
  000d6	73		 DB	 115			; 00000073H
  000d7	00		 DB	 0
_win32_tell_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT _win32_tell64_file_func
_TEXT	SEGMENT
_dwErr$1 = -32						; size = 4
_pos$2 = -24						; size = 8
_hFile$ = -12						; size = 4
_ret$ = -8						; size = 8
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_win32_tell64_file_func PROC				; COMDAT

; 285  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0000f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00012	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00015	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00018	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001b	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001e	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00021	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00024	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00029	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 286  :     ZPOS64_T ret= (ZPOS64_T)-1;

  0002e	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1
  00035	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp+4], -1

; 287  :     HANDLE hFile = NULL;

  0003c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 288  :     if (stream!=NULL)

  00043	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  00047	74 08		 je	 SHORT $LN2@win32_tell

; 289  :         hFile = ((WIN32FILE_IOWIN*)stream)->hf;

  00049	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  0004c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004e	89 4d f4	 mov	 DWORD PTR _hFile$[ebp], ecx
$LN2@win32_tell:

; 290  : 
; 291  :     if (hFile)

  00051	83 7d f4 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  00055	74 5d		 je	 SHORT $LN3@win32_tell

; 292  :     {
; 293  :         LARGE_INTEGER pos;
; 294  :         pos.QuadPart = 0;

  00057	0f 57 c0	 xorps	 xmm0, xmm0
  0005a	66 0f 13 45 e8	 movlpd	 QWORD PTR _pos$2[ebp], xmm0

; 295  : 
; 296  :         if (!MySetFilePointerEx(hFile, pos, &pos, FILE_CURRENT))

  0005f	6a 01		 push	 1
  00061	8d 55 e8	 lea	 edx, DWORD PTR _pos$2[ebp]
  00064	52		 push	 edx
  00065	8b 45 ec	 mov	 eax, DWORD PTR _pos$2[ebp+4]
  00068	50		 push	 eax
  00069	8b 4d e8	 mov	 ecx, DWORD PTR _pos$2[ebp]
  0006c	51		 push	 ecx
  0006d	8b 55 f4	 mov	 edx, DWORD PTR _hFile$[ebp]
  00070	52		 push	 edx
  00071	e8 00 00 00 00	 call	 _MySetFilePointerEx
  00076	83 c4 14	 add	 esp, 20			; 00000014H
  00079	85 c0		 test	 eax, eax
  0007b	75 2b		 jne	 SHORT $LN4@win32_tell

; 297  :         {
; 298  :             DWORD dwErr = GetLastError();

  0007d	8b f4		 mov	 esi, esp
  0007f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00085	3b f4		 cmp	 esi, esp
  00087	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008c	89 45 e0	 mov	 DWORD PTR _dwErr$1[ebp], eax

; 299  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0008f	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00092	8b 4d e0	 mov	 ecx, DWORD PTR _dwErr$1[ebp]
  00095	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 300  :             ret = (ZPOS64_T)-1;

  00098	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1
  0009f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp+4], -1

; 301  :         }

  000a6	eb 0c		 jmp	 SHORT $LN3@win32_tell
$LN4@win32_tell:

; 302  :         else
; 303  :             ret=pos.QuadPart;

  000a8	8b 55 e8	 mov	 edx, DWORD PTR _pos$2[ebp]
  000ab	89 55 f8	 mov	 DWORD PTR _ret$[ebp], edx
  000ae	8b 45 ec	 mov	 eax, DWORD PTR _pos$2[ebp+4]
  000b1	89 45 fc	 mov	 DWORD PTR _ret$[ebp+4], eax
$LN3@win32_tell:

; 304  :     }
; 305  :     return ret;

  000b4	8b 45 f8	 mov	 eax, DWORD PTR _ret$[ebp]
  000b7	8b 55 fc	 mov	 edx, DWORD PTR _ret$[ebp+4]

; 306  : }

  000ba	52		 push	 edx
  000bb	8b cd		 mov	 ecx, ebp
  000bd	50		 push	 eax
  000be	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@win32_tell
  000c4	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c9	58		 pop	 eax
  000ca	5a		 pop	 edx
  000cb	5e		 pop	 esi
  000cc	83 c4 20	 add	 esp, 32			; 00000020H
  000cf	3b ec		 cmp	 ebp, esp
  000d1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c3		 ret	 0
  000da	66 90		 npad	 2
$LN10@win32_tell:
  000dc	01 00 00 00	 DD	 1
  000e0	00 00 00 00	 DD	 $LN9@win32_tell
$LN9@win32_tell:
  000e4	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000e8	08 00 00 00	 DD	 8
  000ec	00 00 00 00	 DD	 $LN8@win32_tell
$LN8@win32_tell:
  000f0	70		 DB	 112			; 00000070H
  000f1	6f		 DB	 111			; 0000006fH
  000f2	73		 DB	 115			; 00000073H
  000f3	00		 DB	 0
_win32_tell64_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT _win32_seek_file_func
_TEXT	SEGMENT
tv66 = -36						; size = 4
_dwErr$1 = -32						; size = 4
_pos$2 = -24						; size = 8
_ret$ = -12						; size = 4
_hFile$ = -8						; size = 4
_dwMoveMethod$ = -4					; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_offset$ = 16						; size = 4
_origin$ = 20						; size = 4
_win32_seek_file_func PROC				; COMDAT

; 310  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0000f	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00012	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00015	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00018	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0001b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00021	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00024	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00027	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0002c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 311  :     DWORD dwMoveMethod=0xFFFFFFFF;

  00031	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _dwMoveMethod$[ebp], -1

; 312  :     HANDLE hFile = NULL;

  00038	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 313  : 
; 314  :     long ret=-1;

  0003f	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 315  :     if (stream!=NULL)

  00046	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  0004a	74 08		 je	 SHORT $LN4@win32_seek

; 316  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  0004c	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  0004f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00051	89 4d f8	 mov	 DWORD PTR _hFile$[ebp], ecx
$LN4@win32_seek:

; 317  :     switch (origin)

  00054	8b 55 14	 mov	 edx, DWORD PTR _origin$[ebp]
  00057	89 55 dc	 mov	 DWORD PTR tv66[ebp], edx
  0005a	83 7d dc 00	 cmp	 DWORD PTR tv66[ebp], 0
  0005e	74 20		 je	 SHORT $LN7@win32_seek
  00060	83 7d dc 01	 cmp	 DWORD PTR tv66[ebp], 1
  00064	74 08		 je	 SHORT $LN5@win32_seek
  00066	83 7d dc 02	 cmp	 DWORD PTR tv66[ebp], 2
  0006a	74 0b		 je	 SHORT $LN6@win32_seek
  0006c	eb 1b		 jmp	 SHORT $LN8@win32_seek
$LN5@win32_seek:

; 318  :     {
; 319  :     case ZLIB_FILEFUNC_SEEK_CUR :
; 320  :         dwMoveMethod = FILE_CURRENT;

  0006e	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _dwMoveMethod$[ebp], 1

; 321  :         break;

  00075	eb 17		 jmp	 SHORT $LN2@win32_seek
$LN6@win32_seek:

; 322  :     case ZLIB_FILEFUNC_SEEK_END :
; 323  :         dwMoveMethod = FILE_END;

  00077	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _dwMoveMethod$[ebp], 2

; 324  :         break;

  0007e	eb 0e		 jmp	 SHORT $LN2@win32_seek
$LN7@win32_seek:

; 325  :     case ZLIB_FILEFUNC_SEEK_SET :
; 326  :         dwMoveMethod = FILE_BEGIN;

  00080	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _dwMoveMethod$[ebp], 0

; 327  :         break;

  00087	eb 05		 jmp	 SHORT $LN2@win32_seek
$LN8@win32_seek:

; 328  :     default: return -1;

  00089	83 c8 ff	 or	 eax, -1
  0008c	eb 5d		 jmp	 SHORT $LN1@win32_seek
$LN2@win32_seek:

; 329  :     }
; 330  : 
; 331  :     if (hFile != NULL)

  0008e	83 7d f8 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  00092	74 54		 je	 SHORT $LN9@win32_seek

; 332  :     {
; 333  :         LARGE_INTEGER pos;
; 334  :         pos.QuadPart = offset;

  00094	8b 45 10	 mov	 eax, DWORD PTR _offset$[ebp]
  00097	33 c9		 xor	 ecx, ecx
  00099	89 45 e8	 mov	 DWORD PTR _pos$2[ebp], eax
  0009c	89 4d ec	 mov	 DWORD PTR _pos$2[ebp+4], ecx

; 335  :         if (!MySetFilePointerEx(hFile, pos, NULL, dwMoveMethod))

  0009f	8b 55 fc	 mov	 edx, DWORD PTR _dwMoveMethod$[ebp]
  000a2	52		 push	 edx
  000a3	6a 00		 push	 0
  000a5	8b 45 ec	 mov	 eax, DWORD PTR _pos$2[ebp+4]
  000a8	50		 push	 eax
  000a9	8b 4d e8	 mov	 ecx, DWORD PTR _pos$2[ebp]
  000ac	51		 push	 ecx
  000ad	8b 55 f8	 mov	 edx, DWORD PTR _hFile$[ebp]
  000b0	52		 push	 edx
  000b1	e8 00 00 00 00	 call	 _MySetFilePointerEx
  000b6	83 c4 14	 add	 esp, 20			; 00000014H
  000b9	85 c0		 test	 eax, eax
  000bb	75 24		 jne	 SHORT $LN10@win32_seek

; 336  :         {
; 337  :             DWORD dwErr = GetLastError();

  000bd	8b f4		 mov	 esi, esp
  000bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000c5	3b f4		 cmp	 esi, esp
  000c7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cc	89 45 e0	 mov	 DWORD PTR _dwErr$1[ebp], eax

; 338  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  000cf	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  000d2	8b 4d e0	 mov	 ecx, DWORD PTR _dwErr$1[ebp]
  000d5	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 339  :             ret = -1;

  000d8	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 340  :         }

  000df	eb 07		 jmp	 SHORT $LN9@win32_seek
$LN10@win32_seek:

; 341  :         else
; 342  :             ret=0;

  000e1	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0
$LN9@win32_seek:

; 343  :     }
; 344  :     return ret;

  000e8	8b 45 f4	 mov	 eax, DWORD PTR _ret$[ebp]
$LN1@win32_seek:

; 345  : }

  000eb	52		 push	 edx
  000ec	8b cd		 mov	 ecx, ebp
  000ee	50		 push	 eax
  000ef	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN18@win32_seek
  000f5	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000fa	58		 pop	 eax
  000fb	5a		 pop	 edx
  000fc	5e		 pop	 esi
  000fd	83 c4 24	 add	 esp, 36			; 00000024H
  00100	3b ec		 cmp	 ebp, esp
  00102	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c3		 ret	 0
  0010b	90		 npad	 1
$LN18@win32_seek:
  0010c	01 00 00 00	 DD	 1
  00110	00 00 00 00	 DD	 $LN17@win32_seek
$LN17@win32_seek:
  00114	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00118	08 00 00 00	 DD	 8
  0011c	00 00 00 00	 DD	 $LN16@win32_seek
$LN16@win32_seek:
  00120	70		 DB	 112			; 00000070H
  00121	6f		 DB	 111			; 0000006fH
  00122	73		 DB	 115			; 00000073H
  00123	00		 DB	 0
_win32_seek_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT _win32_seek64_file_func
_TEXT	SEGMENT
tv66 = -36						; size = 4
_dwErr$1 = -32						; size = 4
_pos$2 = -24						; size = 8
_ret$ = -12						; size = 4
_hFile$ = -8						; size = 4
_dwMoveMethod$ = -4					; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_offset$ = 16						; size = 8
_origin$ = 24						; size = 4
_win32_seek64_file_func PROC				; COMDAT

; 348  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0000f	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00012	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00015	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00018	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0001b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00021	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00024	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00027	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0002c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 349  :     DWORD dwMoveMethod=0xFFFFFFFF;

  00031	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _dwMoveMethod$[ebp], -1

; 350  :     HANDLE hFile = NULL;

  00038	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 351  :     long ret=-1;

  0003f	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 352  : 
; 353  :     if (stream!=NULL)

  00046	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  0004a	74 08		 je	 SHORT $LN4@win32_seek

; 354  :         hFile = ((WIN32FILE_IOWIN*)stream)->hf;

  0004c	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  0004f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00051	89 4d f8	 mov	 DWORD PTR _hFile$[ebp], ecx
$LN4@win32_seek:

; 355  : 
; 356  :     switch (origin)

  00054	8b 55 18	 mov	 edx, DWORD PTR _origin$[ebp]
  00057	89 55 dc	 mov	 DWORD PTR tv66[ebp], edx
  0005a	83 7d dc 00	 cmp	 DWORD PTR tv66[ebp], 0
  0005e	74 20		 je	 SHORT $LN7@win32_seek
  00060	83 7d dc 01	 cmp	 DWORD PTR tv66[ebp], 1
  00064	74 08		 je	 SHORT $LN5@win32_seek
  00066	83 7d dc 02	 cmp	 DWORD PTR tv66[ebp], 2
  0006a	74 0b		 je	 SHORT $LN6@win32_seek
  0006c	eb 1b		 jmp	 SHORT $LN8@win32_seek
$LN5@win32_seek:

; 357  :     {
; 358  :         case ZLIB_FILEFUNC_SEEK_CUR :
; 359  :             dwMoveMethod = FILE_CURRENT;

  0006e	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _dwMoveMethod$[ebp], 1

; 360  :             break;

  00075	eb 17		 jmp	 SHORT $LN2@win32_seek
$LN6@win32_seek:

; 361  :         case ZLIB_FILEFUNC_SEEK_END :
; 362  :             dwMoveMethod = FILE_END;

  00077	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _dwMoveMethod$[ebp], 2

; 363  :             break;

  0007e	eb 0e		 jmp	 SHORT $LN2@win32_seek
$LN7@win32_seek:

; 364  :         case ZLIB_FILEFUNC_SEEK_SET :
; 365  :             dwMoveMethod = FILE_BEGIN;

  00080	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _dwMoveMethod$[ebp], 0

; 366  :             break;

  00087	eb 05		 jmp	 SHORT $LN2@win32_seek
$LN8@win32_seek:

; 367  :         default: return -1;

  00089	83 c8 ff	 or	 eax, -1
  0008c	eb 5e		 jmp	 SHORT $LN1@win32_seek
$LN2@win32_seek:

; 368  :     }
; 369  : 
; 370  :     if (hFile)

  0008e	83 7d f8 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  00092	74 55		 je	 SHORT $LN9@win32_seek

; 371  :     {
; 372  :         LARGE_INTEGER pos;
; 373  :         pos.QuadPart = offset;

  00094	8b 45 10	 mov	 eax, DWORD PTR _offset$[ebp]
  00097	89 45 e8	 mov	 DWORD PTR _pos$2[ebp], eax
  0009a	8b 4d 14	 mov	 ecx, DWORD PTR _offset$[ebp+4]
  0009d	89 4d ec	 mov	 DWORD PTR _pos$2[ebp+4], ecx

; 374  :         if (!MySetFilePointerEx(hFile, pos, NULL, dwMoveMethod))

  000a0	8b 55 fc	 mov	 edx, DWORD PTR _dwMoveMethod$[ebp]
  000a3	52		 push	 edx
  000a4	6a 00		 push	 0
  000a6	8b 45 ec	 mov	 eax, DWORD PTR _pos$2[ebp+4]
  000a9	50		 push	 eax
  000aa	8b 4d e8	 mov	 ecx, DWORD PTR _pos$2[ebp]
  000ad	51		 push	 ecx
  000ae	8b 55 f8	 mov	 edx, DWORD PTR _hFile$[ebp]
  000b1	52		 push	 edx
  000b2	e8 00 00 00 00	 call	 _MySetFilePointerEx
  000b7	83 c4 14	 add	 esp, 20			; 00000014H
  000ba	85 c0		 test	 eax, eax
  000bc	75 24		 jne	 SHORT $LN10@win32_seek

; 375  :         {
; 376  :             DWORD dwErr = GetLastError();

  000be	8b f4		 mov	 esi, esp
  000c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000c6	3b f4		 cmp	 esi, esp
  000c8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cd	89 45 e0	 mov	 DWORD PTR _dwErr$1[ebp], eax

; 377  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  000d0	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  000d3	8b 4d e0	 mov	 ecx, DWORD PTR _dwErr$1[ebp]
  000d6	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 378  :             ret = -1;

  000d9	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 379  :         }

  000e0	eb 07		 jmp	 SHORT $LN9@win32_seek
$LN10@win32_seek:

; 380  :         else
; 381  :             ret=0;

  000e2	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0
$LN9@win32_seek:

; 382  :     }
; 383  :     return ret;

  000e9	8b 45 f4	 mov	 eax, DWORD PTR _ret$[ebp]
$LN1@win32_seek:

; 384  : }

  000ec	52		 push	 edx
  000ed	8b cd		 mov	 ecx, ebp
  000ef	50		 push	 eax
  000f0	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN18@win32_seek
  000f6	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000fb	58		 pop	 eax
  000fc	5a		 pop	 edx
  000fd	5e		 pop	 esi
  000fe	83 c4 24	 add	 esp, 36			; 00000024H
  00101	3b ec		 cmp	 ebp, esp
  00103	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c3		 ret	 0
$LN18@win32_seek:
  0010c	01 00 00 00	 DD	 1
  00110	00 00 00 00	 DD	 $LN17@win32_seek
$LN17@win32_seek:
  00114	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00118	08 00 00 00	 DD	 8
  0011c	00 00 00 00	 DD	 $LN16@win32_seek
$LN16@win32_seek:
  00120	70		 DB	 112			; 00000070H
  00121	6f		 DB	 111			; 0000006fH
  00122	73		 DB	 115			; 00000073H
  00123	00		 DB	 0
_win32_seek64_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT _win32_close_file_func
_TEXT	SEGMENT
_hFile$1 = -8						; size = 4
_ret$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_win32_close_file_func PROC				; COMDAT

; 387  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  0001a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 388  :     int ret=-1;

  0001f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 389  : 
; 390  :     if (stream!=NULL)

  00026	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  0002a	74 34		 je	 SHORT $LN2@win32_clos

; 391  :     {
; 392  :         HANDLE hFile;
; 393  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  0002c	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  0002f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00031	89 4d f8	 mov	 DWORD PTR _hFile$1[ebp], ecx

; 394  :         if (hFile != NULL)

  00034	83 7d f8 00	 cmp	 DWORD PTR _hFile$1[ebp], 0
  00038	74 1a		 je	 SHORT $LN3@win32_clos

; 395  :         {
; 396  :             CloseHandle(hFile);

  0003a	8b f4		 mov	 esi, esp
  0003c	8b 55 f8	 mov	 edx, DWORD PTR _hFile$1[ebp]
  0003f	52		 push	 edx
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  00046	3b f4		 cmp	 esi, esp
  00048	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 397  :             ret=0;

  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0
$LN3@win32_clos:

; 398  :         }
; 399  :         free(stream);

  00054	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 _free
  0005d	83 c4 04	 add	 esp, 4
$LN2@win32_clos:

; 400  :     }
; 401  :     return ret;

  00060	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]

; 402  : }

  00063	5e		 pop	 esi
  00064	83 c4 08	 add	 esp, 8
  00067	3b ec		 cmp	 ebp, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
_win32_close_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT _win32_error_file_func
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_win32_error_file_func PROC				; COMDAT

; 405  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00010	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 406  :     int ret=-1;

  00015	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 407  :     if (stream!=NULL)

  0001c	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  00020	74 09		 je	 SHORT $LN2@win32_erro

; 408  :     {
; 409  :         ret = ((WIN32FILE_IOWIN*)stream) -> error;

  00022	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00025	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00028	89 4d fc	 mov	 DWORD PTR _ret$[ebp], ecx
$LN2@win32_erro:

; 410  :     }
; 411  :     return ret;

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]

; 412  : }

  0002e	83 c4 04	 add	 esp, 4
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
_win32_error_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT _fill_win32_filefunc
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_fill_win32_filefunc PROC				; COMDAT

; 415  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 416  :     pzlib_filefunc_def->zopen_file = win32_open_file_func;

  0000d	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00010	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET _win32_open_file_func

; 417  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  00016	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00019	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET _win32_read_file_func

; 418  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00020	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00023	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET _win32_write_file_func

; 419  :     pzlib_filefunc_def->ztell_file = win32_tell_file_func;

  0002a	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  0002d	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _win32_tell_file_func

; 420  :     pzlib_filefunc_def->zseek_file = win32_seek_file_func;

  00034	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00037	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], OFFSET _win32_seek_file_func

; 421  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  0003e	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00041	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], OFFSET _win32_close_file_func

; 422  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  00048	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  0004b	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET _win32_error_file_func

; 423  :     pzlib_filefunc_def->opaque = NULL;

  00052	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00055	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 424  : }

  0005c	3b ec		 cmp	 ebp, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
_fill_win32_filefunc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT _fill_win32_filefunc64
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_fill_win32_filefunc64 PROC				; COMDAT

; 427  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 428  :     pzlib_filefunc_def->zopen64_file = win32_open64_file_func;

  0000d	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00010	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET _win32_open64_file_func

; 429  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  00016	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00019	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET _win32_read_file_func

; 430  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00020	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00023	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET _win32_write_file_func

; 431  :     pzlib_filefunc_def->ztell64_file = win32_tell64_file_func;

  0002a	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  0002d	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _win32_tell64_file_func

; 432  :     pzlib_filefunc_def->zseek64_file = win32_seek64_file_func;

  00034	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00037	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], OFFSET _win32_seek64_file_func

; 433  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  0003e	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00041	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], OFFSET _win32_close_file_func

; 434  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  00048	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  0004b	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET _win32_error_file_func

; 435  :     pzlib_filefunc_def->opaque = NULL;

  00052	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00055	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 436  : }

  0005c	3b ec		 cmp	 ebp, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
_fill_win32_filefunc64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT _fill_win32_filefunc64A
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_fill_win32_filefunc64A PROC				; COMDAT

; 440  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 441  :     pzlib_filefunc_def->zopen64_file = win32_open64_file_funcA;

  0000d	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00010	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET _win32_open64_file_funcA

; 442  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  00016	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00019	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET _win32_read_file_func

; 443  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00020	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00023	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET _win32_write_file_func

; 444  :     pzlib_filefunc_def->ztell64_file = win32_tell64_file_func;

  0002a	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  0002d	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _win32_tell64_file_func

; 445  :     pzlib_filefunc_def->zseek64_file = win32_seek64_file_func;

  00034	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00037	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], OFFSET _win32_seek64_file_func

; 446  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  0003e	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00041	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], OFFSET _win32_close_file_func

; 447  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  00048	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  0004b	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET _win32_error_file_func

; 448  :     pzlib_filefunc_def->opaque = NULL;

  00052	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00055	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 449  : }

  0005c	3b ec		 cmp	 ebp, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
_fill_win32_filefunc64A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\cpython\externals\zlib-1.2.11\contrib\minizip\iowin32.c
;	COMDAT _fill_win32_filefunc64W
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_fill_win32_filefunc64W PROC				; COMDAT

; 453  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __2B8D9255_zutil@c
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 454  :     pzlib_filefunc_def->zopen64_file = win32_open64_file_funcW;

  0000d	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00010	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET _win32_open64_file_funcW

; 455  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  00016	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00019	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET _win32_read_file_func

; 456  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00020	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00023	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET _win32_write_file_func

; 457  :     pzlib_filefunc_def->ztell64_file = win32_tell64_file_func;

  0002a	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  0002d	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _win32_tell64_file_func

; 458  :     pzlib_filefunc_def->zseek64_file = win32_seek64_file_func;

  00034	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00037	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], OFFSET _win32_seek64_file_func

; 459  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  0003e	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00041	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], OFFSET _win32_close_file_func

; 460  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  00048	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  0004b	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET _win32_error_file_func

; 461  :     pzlib_filefunc_def->opaque = NULL;

  00052	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00055	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 462  : }

  0005c	3b ec		 cmp	 ebp, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
_fill_win32_filefunc64W ENDP
_TEXT	ENDS
END
